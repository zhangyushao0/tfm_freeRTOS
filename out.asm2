
build/bin/ns_app.elf:	file format elf32-littlearm

Disassembly of section .privileged_functions:

08055200 <xTaskCreateRestricted>:
;     {
 8055200: b580         	push	{r7, lr}
 8055202: 466f         	mov	r7, sp
 8055204: b084         	sub	sp, #0x10
 8055206: 9003         	str	r0, [sp, #0xc]
 8055208: 9102         	str	r1, [sp, #0x8]
;         pxNewTCB = prvCreateRestrictedTask( pxTaskDefinition, pxCreatedTask );
 805520a: 9803         	ldr	r0, [sp, #0xc]
 805520c: 9902         	ldr	r1, [sp, #0x8]
 805520e: f000 f811    	bl	0x8055234 <prvCreateRestrictedTask> @ imm = #0x22
 8055212: 9001         	str	r0, [sp, #0x4]
;         if( pxNewTCB != NULL )
 8055214: 9801         	ldr	r0, [sp, #0x4]
 8055216: b130         	cbz	r0, 0x8055226 <xTaskCreateRestricted+0x26> @ imm = #0xc
 8055218: e7ff         	b	0x805521a <xTaskCreateRestricted+0x1a> @ imm = #-0x2
;             prvAddNewTaskToReadyList( pxNewTCB );
 805521a: 9801         	ldr	r0, [sp, #0x4]
 805521c: f000 f857    	bl	0x80552ce <prvAddNewTaskToReadyList> @ imm = #0xae
 8055220: 2001         	movs	r0, #0x1
;             xReturn = pdPASS;
 8055222: 9000         	str	r0, [sp]
;         }
 8055224: e003         	b	0x805522e <xTaskCreateRestricted+0x2e> @ imm = #0x6
 8055226: f04f 30ff    	mov.w	r0, #0xffffffff
;             xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 805522a: 9000         	str	r0, [sp]
 805522c: e7ff         	b	0x805522e <xTaskCreateRestricted+0x2e> @ imm = #-0x2
;         return xReturn;
 805522e: 9800         	ldr	r0, [sp]
 8055230: b004         	add	sp, #0x10
 8055232: bd80         	pop	{r7, pc}

08055234 <prvCreateRestrictedTask>:
;     {
 8055234: b5f0         	push	{r4, r5, r6, r7, lr}
 8055236: af03         	add	r7, sp, #0xc
 8055238: f84d bd04    	str	r11, [sp, #-4]!
 805523c: b088         	sub	sp, #0x20
 805523e: 9007         	str	r0, [sp, #0x1c]
 8055240: 9106         	str	r1, [sp, #0x18]
;         configASSERT( pxTaskDefinition->puxStackBuffer );
 8055242: 9807         	ldr	r0, [sp, #0x1c]
 8055244: 6940         	ldr	r0, [r0, #0x14]
 8055246: b920         	cbnz	r0, 0x8055252 <prvCreateRestrictedTask+0x1e> @ imm = #0x8
 8055248: e7ff         	b	0x805524a <prvCreateRestrictedTask+0x16> @ imm = #-0x2
 805524a: f7ff fffe    	bl	0x805524a <prvCreateRestrictedTask+0x16> @ imm = #-0x4
 805524e: e7ff         	b	0x8055250 <prvCreateRestrictedTask+0x1c> @ imm = #-0x2
 8055250: e7fe         	b	0x8055250 <prvCreateRestrictedTask+0x1c> @ imm = #-0x4
;         if( pxTaskDefinition->puxStackBuffer != NULL )
 8055252: 9807         	ldr	r0, [sp, #0x1c]
 8055254: 6940         	ldr	r0, [r0, #0x14]
 8055256: b390         	cbz	r0, 0x80552be <prvCreateRestrictedTask+0x8a> @ imm = #0x64
 8055258: e7ff         	b	0x805525a <prvCreateRestrictedTask+0x26> @ imm = #-0x2
 805525a: 20d8         	movs	r0, #0xd8
;             pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 805525c: f7ff fffe    	bl	0x805525c <prvCreateRestrictedTask+0x28> @ imm = #-0x4
 8055260: 9005         	str	r0, [sp, #0x14]
;             if( pxNewTCB != NULL )
 8055262: 9805         	ldr	r0, [sp, #0x14]
 8055264: b350         	cbz	r0, 0x80552bc <prvCreateRestrictedTask+0x88> @ imm = #0x54
 8055266: e7ff         	b	0x8055268 <prvCreateRestrictedTask+0x34> @ imm = #-0x2
;                 ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8055268: 9805         	ldr	r0, [sp, #0x14]
 805526a: 2100         	movs	r1, #0x0
 805526c: 22d8         	movs	r2, #0xd8
 805526e: f7ff fffe    	bl	0x805526e <prvCreateRestrictedTask+0x3a> @ imm = #-0x4
;                 pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 8055272: 9807         	ldr	r0, [sp, #0x1c]
 8055274: 6940         	ldr	r0, [r0, #0x14]
 8055276: 9905         	ldr	r1, [sp, #0x14]
 8055278: f8c1 00ac    	str.w	r0, [r1, #0xac]
;                     pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_ONLY;
 805527c: 9905         	ldr	r1, [sp, #0x14]
 805527e: 2001         	movs	r0, #0x1
 8055280: f881 00d5    	strb.w	r0, [r1, #0xd5]
;                 prvInitialiseNewTask( pxTaskDefinition->pvTaskCode,
 8055284: f8dd e01c    	ldr.w	lr, [sp, #0x1c]
;                                       ( uint32_t ) pxTaskDefinition->usStackDepth,
 8055288: f8be 2008    	ldrh.w	r2, [lr, #0x8]
;                 prvInitialiseNewTask( pxTaskDefinition->pvTaskCode,
 805528c: f8de 0000    	ldr.w	r0, [lr]
;                                       pxTaskDefinition->pcName,
 8055290: f8de 1004    	ldr.w	r1, [lr, #0x4]
;                                       pxTaskDefinition->pvParameters,
 8055294: f8de 300c    	ldr.w	r3, [lr, #0xc]
;                                       pxTaskDefinition->uxPriority,
 8055298: f8de c010    	ldr.w	r12, [lr, #0x10]
;                                       pxCreatedTask, pxNewTCB,
 805529c: 9c06         	ldr	r4, [sp, #0x18]
 805529e: 9d05         	ldr	r5, [sp, #0x14]
;                                       pxTaskDefinition->xRegions );
 80552a0: f10e 0618    	add.w	r6, lr, #0x18
;                 prvInitialiseNewTask( pxTaskDefinition->pvTaskCode,
 80552a4: 46ee         	mov	lr, sp
 80552a6: f8ce 600c    	str.w	r6, [lr, #0xc]
 80552aa: f8ce 5008    	str.w	r5, [lr, #0x8]
 80552ae: f8ce 4004    	str.w	r4, [lr, #0x4]
 80552b2: f8ce c000    	str.w	r12, [lr]
 80552b6: f002 ff15    	bl	0x80580e4 <prvInitialiseNewTask> @ imm = #0x2e2a
;             }
 80552ba: e7ff         	b	0x80552bc <prvCreateRestrictedTask+0x88> @ imm = #-0x2
;         }
 80552bc: e002         	b	0x80552c4 <prvCreateRestrictedTask+0x90> @ imm = #0x4
 80552be: 2000         	movs	r0, #0x0
;             pxNewTCB = NULL;
 80552c0: 9005         	str	r0, [sp, #0x14]
 80552c2: e7ff         	b	0x80552c4 <prvCreateRestrictedTask+0x90> @ imm = #-0x2
;         return pxNewTCB;
 80552c4: 9805         	ldr	r0, [sp, #0x14]
 80552c6: b008         	add	sp, #0x20
 80552c8: f85d bb04    	ldr	r11, [sp], #4
 80552cc: bdf0         	pop	{r4, r5, r6, r7, pc}

080552ce <prvAddNewTaskToReadyList>:
;     {
 80552ce: b580         	push	{r7, lr}
 80552d0: 466f         	mov	r7, sp
 80552d2: b082         	sub	sp, #0x8
 80552d4: 9001         	str	r0, [sp, #0x4]
;         taskENTER_CRITICAL();
 80552d6: f7ff fffe    	bl	0x80552d6 <prvAddNewTaskToReadyList+0x8> @ imm = #-0x4
;             uxCurrentNumberOfTasks++;
 80552da: f240 0100    	movw	r1, #0x0
 80552de: f2c0 0100    	movt	r1, #0x0
 80552e2: 6808         	ldr	r0, [r1]
 80552e4: 3001         	adds	r0, #0x1
 80552e6: 6008         	str	r0, [r1]
;             if( pxCurrentTCB == NULL )
 80552e8: f240 0000    	movw	r0, #0x0
 80552ec: f2c0 0000    	movt	r0, #0x0
 80552f0: 6800         	ldr	r0, [r0]
 80552f2: b998         	cbnz	r0, 0x805531c <prvAddNewTaskToReadyList+0x4e> @ imm = #0x26
 80552f4: e7ff         	b	0x80552f6 <prvAddNewTaskToReadyList+0x28> @ imm = #-0x2
;                 pxCurrentTCB = pxNewTCB;
 80552f6: 9801         	ldr	r0, [sp, #0x4]
 80552f8: f240 0100    	movw	r1, #0x0
 80552fc: f2c0 0100    	movt	r1, #0x0
 8055300: 6008         	str	r0, [r1]
;                 if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8055302: f240 0000    	movw	r0, #0x0
 8055306: f2c0 0000    	movt	r0, #0x0
 805530a: 6800         	ldr	r0, [r0]
 805530c: 2801         	cmp	r0, #0x1
 805530e: d103         	bne	0x8055318 <prvAddNewTaskToReadyList+0x4a> @ imm = #0x6
 8055310: e7ff         	b	0x8055312 <prvAddNewTaskToReadyList+0x44> @ imm = #-0x2
;                     prvInitialiseTaskLists();
 8055312: f002 ff97    	bl	0x8058244 <prvInitialiseTaskLists> @ imm = #0x2f2e
;                 }
 8055316: e000         	b	0x805531a <prvAddNewTaskToReadyList+0x4c> @ imm = #0x0
 8055318: e7ff         	b	0x805531a <prvAddNewTaskToReadyList+0x4c> @ imm = #-0x2
;             }
 805531a: e01e         	b	0x805535a <prvAddNewTaskToReadyList+0x8c> @ imm = #0x3c
;                 if( xSchedulerRunning == pdFALSE )
 805531c: f240 0000    	movw	r0, #0x0
 8055320: f2c0 0000    	movt	r0, #0x0
 8055324: 6800         	ldr	r0, [r0]
 8055326: b9b0         	cbnz	r0, 0x8055356 <prvAddNewTaskToReadyList+0x88> @ imm = #0x2c
 8055328: e7ff         	b	0x805532a <prvAddNewTaskToReadyList+0x5c> @ imm = #-0x2
;                     if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 805532a: f240 0000    	movw	r0, #0x0
 805532e: f2c0 0000    	movt	r0, #0x0
 8055332: 6800         	ldr	r0, [r0]
 8055334: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 8055338: 9901         	ldr	r1, [sp, #0x4]
 805533a: f8d1 10a8    	ldr.w	r1, [r1, #0xa8]
 805533e: 4288         	cmp	r0, r1
 8055340: d807         	bhi	0x8055352 <prvAddNewTaskToReadyList+0x84> @ imm = #0xe
 8055342: e7ff         	b	0x8055344 <prvAddNewTaskToReadyList+0x76> @ imm = #-0x2
;                         pxCurrentTCB = pxNewTCB;
 8055344: 9801         	ldr	r0, [sp, #0x4]
 8055346: f240 0100    	movw	r1, #0x0
 805534a: f2c0 0100    	movt	r1, #0x0
 805534e: 6008         	str	r0, [r1]
;                     }
 8055350: e000         	b	0x8055354 <prvAddNewTaskToReadyList+0x86> @ imm = #0x0
 8055352: e7ff         	b	0x8055354 <prvAddNewTaskToReadyList+0x86> @ imm = #-0x2
;                 }
 8055354: e000         	b	0x8055358 <prvAddNewTaskToReadyList+0x8a> @ imm = #0x0
 8055356: e7ff         	b	0x8055358 <prvAddNewTaskToReadyList+0x8a> @ imm = #-0x2
 8055358: e7ff         	b	0x805535a <prvAddNewTaskToReadyList+0x8c> @ imm = #-0x2
;             uxTaskNumber++;
 805535a: f240 0000    	movw	r0, #0x0
 805535e: f2c0 0000    	movt	r0, #0x0
 8055362: 6801         	ldr	r1, [r0]
 8055364: 3101         	adds	r1, #0x1
 8055366: 6001         	str	r1, [r0]
;                 pxNewTCB->uxTCBNumber = uxTaskNumber;
 8055368: 6800         	ldr	r0, [r0]
 805536a: 9901         	ldr	r1, [sp, #0x4]
 805536c: f8c1 00c0    	str.w	r0, [r1, #0xc0]
;             prvAddTaskToReadyList( pxNewTCB );
 8055370: e7ff         	b	0x8055372 <prvAddNewTaskToReadyList+0xa4> @ imm = #-0x2
 8055372: e7ff         	b	0x8055374 <prvAddNewTaskToReadyList+0xa6> @ imm = #-0x2
 8055374: 9801         	ldr	r0, [sp, #0x4]
 8055376: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 805537a: f240 0100    	movw	r1, #0x0
 805537e: f2c0 0100    	movt	r1, #0x0
 8055382: 6809         	ldr	r1, [r1]
 8055384: 4288         	cmp	r0, r1
 8055386: d909         	bls	0x805539c <prvAddNewTaskToReadyList+0xce> @ imm = #0x12
 8055388: e7ff         	b	0x805538a <prvAddNewTaskToReadyList+0xbc> @ imm = #-0x2
 805538a: 9801         	ldr	r0, [sp, #0x4]
 805538c: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 8055390: f240 0100    	movw	r1, #0x0
 8055394: f2c0 0100    	movt	r1, #0x0
 8055398: 6008         	str	r0, [r1]
 805539a: e7ff         	b	0x805539c <prvAddNewTaskToReadyList+0xce> @ imm = #-0x2
 805539c: e7ff         	b	0x805539e <prvAddNewTaskToReadyList+0xd0> @ imm = #-0x2
 805539e: e7ff         	b	0x80553a0 <prvAddNewTaskToReadyList+0xd2> @ imm = #-0x2
 80553a0: 9801         	ldr	r0, [sp, #0x4]
 80553a2: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 80553a6: eb00 0080    	add.w	r0, r0, r0, lsl #2
 80553aa: f240 0100    	movw	r1, #0x0
 80553ae: f2c0 0100    	movt	r1, #0x0
 80553b2: eb01 0080    	add.w	r0, r1, r0, lsl #2
 80553b6: 6840         	ldr	r0, [r0, #0x4]
 80553b8: 9000         	str	r0, [sp]
 80553ba: 9800         	ldr	r0, [sp]
 80553bc: 9a01         	ldr	r2, [sp, #0x4]
 80553be: f8c2 0084    	str.w	r0, [r2, #0x84]
 80553c2: 9800         	ldr	r0, [sp]
 80553c4: 6880         	ldr	r0, [r0, #0x8]
 80553c6: 9a01         	ldr	r2, [sp, #0x4]
 80553c8: f8c2 0088    	str.w	r0, [r2, #0x88]
 80553cc: 9801         	ldr	r0, [sp, #0x4]
 80553ce: 3080         	adds	r0, #0x80
 80553d0: 9a00         	ldr	r2, [sp]
 80553d2: 6892         	ldr	r2, [r2, #0x8]
 80553d4: 6050         	str	r0, [r2, #0x4]
 80553d6: 9801         	ldr	r0, [sp, #0x4]
 80553d8: 3080         	adds	r0, #0x80
 80553da: 9a00         	ldr	r2, [sp]
 80553dc: 6090         	str	r0, [r2, #0x8]
 80553de: 9a01         	ldr	r2, [sp, #0x4]
 80553e0: f8d2 00a8    	ldr.w	r0, [r2, #0xa8]
 80553e4: eb00 0080    	add.w	r0, r0, r0, lsl #2
 80553e8: eb01 0080    	add.w	r0, r1, r0, lsl #2
 80553ec: f8c2 0090    	str.w	r0, [r2, #0x90]
 80553f0: 9801         	ldr	r0, [sp, #0x4]
 80553f2: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 80553f6: eb00 0280    	add.w	r2, r0, r0, lsl #2
 80553fa: f851 0022    	ldr.w	r0, [r1, r2, lsl #2]
 80553fe: 3001         	adds	r0, #0x1
 8055400: f841 0022    	str.w	r0, [r1, r2, lsl #2]
 8055404: e7ff         	b	0x8055406 <prvAddNewTaskToReadyList+0x138> @ imm = #-0x2
 8055406: e7ff         	b	0x8055408 <prvAddNewTaskToReadyList+0x13a> @ imm = #-0x2
;         taskEXIT_CRITICAL();
 8055408: f7ff fffe    	bl	0x8055408 <prvAddNewTaskToReadyList+0x13a> @ imm = #-0x4
;         if( xSchedulerRunning != pdFALSE )
 805540c: f240 0000    	movw	r0, #0x0
 8055410: f2c0 0000    	movt	r0, #0x0
 8055414: 6800         	ldr	r0, [r0]
 8055416: b1a0         	cbz	r0, 0x8055442 <prvAddNewTaskToReadyList+0x174> @ imm = #0x28
 8055418: e7ff         	b	0x805541a <prvAddNewTaskToReadyList+0x14c> @ imm = #-0x2
;             taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxNewTCB );
 805541a: e7ff         	b	0x805541c <prvAddNewTaskToReadyList+0x14e> @ imm = #-0x2
 805541c: f240 0000    	movw	r0, #0x0
 8055420: f2c0 0000    	movt	r0, #0x0
 8055424: 6800         	ldr	r0, [r0]
 8055426: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 805542a: 9901         	ldr	r1, [sp, #0x4]
 805542c: f8d1 10a8    	ldr.w	r1, [r1, #0xa8]
 8055430: 4288         	cmp	r0, r1
 8055432: d203         	bhs	0x805543c <prvAddNewTaskToReadyList+0x16e> @ imm = #0x6
 8055434: e7ff         	b	0x8055436 <prvAddNewTaskToReadyList+0x168> @ imm = #-0x2
 8055436: f7ff fffe    	bl	0x8055436 <prvAddNewTaskToReadyList+0x168> @ imm = #-0x4
 805543a: e000         	b	0x805543e <prvAddNewTaskToReadyList+0x170> @ imm = #0x0
 805543c: e7ff         	b	0x805543e <prvAddNewTaskToReadyList+0x170> @ imm = #-0x2
;             taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxNewTCB );
 805543e: e7ff         	b	0x8055440 <prvAddNewTaskToReadyList+0x172> @ imm = #-0x2
;         }
 8055440: e000         	b	0x8055444 <prvAddNewTaskToReadyList+0x176> @ imm = #0x0
 8055442: e7ff         	b	0x8055444 <prvAddNewTaskToReadyList+0x176> @ imm = #-0x2
;     }
 8055444: b002         	add	sp, #0x8
 8055446: bd80         	pop	{r7, pc}

08055448 <xTaskCreate>:
;     {
 8055448: b5d0         	push	{r4, r6, r7, lr}
 805544a: af02         	add	r7, sp, #0x8
 805544c: b088         	sub	sp, #0x20
 805544e: f8d7 c00c    	ldr.w	r12, [r7, #0xc]
 8055452: f8d7 c008    	ldr.w	r12, [r7, #0x8]
 8055456: 9007         	str	r0, [sp, #0x1c]
 8055458: 9106         	str	r1, [sp, #0x18]
 805545a: f827 2c12    	strh	r2, [r7, #-18]
 805545e: 9304         	str	r3, [sp, #0x10]
;         pxNewTCB = prvCreateTask( pxTaskCode, pcName, usStackDepth, pvParameters, uxPriority, pxCreatedTask );
 8055460: 9807         	ldr	r0, [sp, #0x1c]
 8055462: 9906         	ldr	r1, [sp, #0x18]
 8055464: f837 2c12    	ldrh	r2, [r7, #-18]
 8055468: 9b04         	ldr	r3, [sp, #0x10]
 805546a: f8d7 c008    	ldr.w	r12, [r7, #0x8]
 805546e: 68fc         	ldr	r4, [r7, #0xc]
 8055470: 46ee         	mov	lr, sp
 8055472: f8ce 4004    	str.w	r4, [lr, #0x4]
 8055476: f8ce c000    	str.w	r12, [lr]
 805547a: f000 f811    	bl	0x80554a0 <prvCreateTask> @ imm = #0x22
 805547e: 9003         	str	r0, [sp, #0xc]
;         if( pxNewTCB != NULL )
 8055480: 9803         	ldr	r0, [sp, #0xc]
 8055482: b130         	cbz	r0, 0x8055492 <xTaskCreate+0x4a> @ imm = #0xc
 8055484: e7ff         	b	0x8055486 <xTaskCreate+0x3e> @ imm = #-0x2
;             prvAddNewTaskToReadyList( pxNewTCB );
 8055486: 9803         	ldr	r0, [sp, #0xc]
 8055488: f7ff ff21    	bl	0x80552ce <prvAddNewTaskToReadyList> @ imm = #-0x1be
 805548c: 2001         	movs	r0, #0x1
;             xReturn = pdPASS;
 805548e: 9002         	str	r0, [sp, #0x8]
;         }
 8055490: e003         	b	0x805549a <xTaskCreate+0x52> @ imm = #0x6
 8055492: f04f 30ff    	mov.w	r0, #0xffffffff
;             xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8055496: 9002         	str	r0, [sp, #0x8]
 8055498: e7ff         	b	0x805549a <xTaskCreate+0x52> @ imm = #-0x2
;         return xReturn;
 805549a: 9802         	ldr	r0, [sp, #0x8]
 805549c: b008         	add	sp, #0x20
 805549e: bdd0         	pop	{r4, r6, r7, pc}

080554a0 <prvCreateTask>:
;     {
 80554a0: b5f0         	push	{r4, r5, r6, r7, lr}
 80554a2: af03         	add	r7, sp, #0xc
 80554a4: f84d bd04    	str	r11, [sp, #-4]!
 80554a8: b08a         	sub	sp, #0x28
 80554aa: f8d7 c00c    	ldr.w	r12, [r7, #0xc]
 80554ae: f8d7 c008    	ldr.w	r12, [r7, #0x8]
 80554b2: 9009         	str	r0, [sp, #0x24]
 80554b4: 9108         	str	r1, [sp, #0x20]
 80554b6: f827 2c1a    	strh	r2, [r7, #-26]
 80554ba: 9306         	str	r3, [sp, #0x18]
;             pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80554bc: f837 0c1a    	ldrh	r0, [r7, #-26]
 80554c0: 0080         	lsls	r0, r0, #0x2
 80554c2: f7ff fffe    	bl	0x80554c2 <prvCreateTask+0x22> @ imm = #-0x4
 80554c6: 9004         	str	r0, [sp, #0x10]
;             if( pxStack != NULL )
 80554c8: 9804         	ldr	r0, [sp, #0x10]
 80554ca: b1b0         	cbz	r0, 0x80554fa <prvCreateTask+0x5a> @ imm = #0x2c
 80554cc: e7ff         	b	0x80554ce <prvCreateTask+0x2e> @ imm = #-0x2
 80554ce: 20d8         	movs	r0, #0xd8
;                 pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80554d0: f7ff fffe    	bl	0x80554d0 <prvCreateTask+0x30> @ imm = #-0x4
 80554d4: 9005         	str	r0, [sp, #0x14]
;                 if( pxNewTCB != NULL )
 80554d6: 9805         	ldr	r0, [sp, #0x14]
 80554d8: b150         	cbz	r0, 0x80554f0 <prvCreateTask+0x50> @ imm = #0x14
 80554da: e7ff         	b	0x80554dc <prvCreateTask+0x3c> @ imm = #-0x2
;                     ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 80554dc: 9805         	ldr	r0, [sp, #0x14]
 80554de: 2100         	movs	r1, #0x0
 80554e0: 22d8         	movs	r2, #0xd8
 80554e2: f7ff fffe    	bl	0x80554e2 <prvCreateTask+0x42> @ imm = #-0x4
;                     pxNewTCB->pxStack = pxStack;
 80554e6: 9804         	ldr	r0, [sp, #0x10]
 80554e8: 9905         	ldr	r1, [sp, #0x14]
 80554ea: f8c1 00ac    	str.w	r0, [r1, #0xac]
;                 }
 80554ee: e003         	b	0x80554f8 <prvCreateTask+0x58> @ imm = #0x6
;                     vPortFreeStack( pxStack );
 80554f0: 9804         	ldr	r0, [sp, #0x10]
 80554f2: f7ff fffe    	bl	0x80554f2 <prvCreateTask+0x52> @ imm = #-0x4
 80554f6: e7ff         	b	0x80554f8 <prvCreateTask+0x58> @ imm = #-0x2
;             }
 80554f8: e002         	b	0x8055500 <prvCreateTask+0x60> @ imm = #0x4
 80554fa: 2000         	movs	r0, #0x0
;                 pxNewTCB = NULL;
 80554fc: 9005         	str	r0, [sp, #0x14]
 80554fe: e7ff         	b	0x8055500 <prvCreateTask+0x60> @ imm = #-0x2
;         if( pxNewTCB != NULL )
 8055500: 9805         	ldr	r0, [sp, #0x14]
 8055502: b1c8         	cbz	r0, 0x8055538 <prvCreateTask+0x98> @ imm = #0x32
 8055504: e7ff         	b	0x8055506 <prvCreateTask+0x66> @ imm = #-0x2
;                 pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8055506: 9805         	ldr	r0, [sp, #0x14]
 8055508: 2600         	movs	r6, #0x0
 805550a: f880 60d5    	strb.w	r6, [r0, #0xd5]
;             prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 805550e: 9809         	ldr	r0, [sp, #0x24]
 8055510: 9908         	ldr	r1, [sp, #0x20]
 8055512: f837 2c1a    	ldrh	r2, [r7, #-26]
 8055516: 9b06         	ldr	r3, [sp, #0x18]
 8055518: f8d7 c008    	ldr.w	r12, [r7, #0x8]
 805551c: 68fc         	ldr	r4, [r7, #0xc]
 805551e: 9d05         	ldr	r5, [sp, #0x14]
 8055520: 46ee         	mov	lr, sp
 8055522: f8ce 600c    	str.w	r6, [lr, #0xc]
 8055526: f8ce 5008    	str.w	r5, [lr, #0x8]
 805552a: f8ce 4004    	str.w	r4, [lr, #0x4]
 805552e: f8ce c000    	str.w	r12, [lr]
 8055532: f002 fdd7    	bl	0x80580e4 <prvInitialiseNewTask> @ imm = #0x2bae
;         }
 8055536: e7ff         	b	0x8055538 <prvCreateTask+0x98> @ imm = #-0x2
;         return pxNewTCB;
 8055538: 9805         	ldr	r0, [sp, #0x14]
 805553a: b00a         	add	sp, #0x28
 805553c: f85d bb04    	ldr	r11, [sp], #4
 8055540: bdf0         	pop	{r4, r5, r6, r7, pc}

08055542 <vTaskDelete>:
;     {
 8055542: b580         	push	{r7, lr}
 8055544: 466f         	mov	r7, sp
 8055546: b084         	sub	sp, #0x10
 8055548: 9003         	str	r0, [sp, #0xc]
;         taskENTER_CRITICAL();
 805554a: f7ff fffe    	bl	0x805554a <vTaskDelete+0x8> @ imm = #-0x4
;             pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 805554e: 9803         	ldr	r0, [sp, #0xc]
 8055550: b938         	cbnz	r0, 0x8055562 <vTaskDelete+0x20> @ imm = #0xe
 8055552: e7ff         	b	0x8055554 <vTaskDelete+0x12> @ imm = #-0x2
 8055554: f240 0000    	movw	r0, #0x0
 8055558: f2c0 0000    	movt	r0, #0x0
 805555c: 6800         	ldr	r0, [r0]
 805555e: 9001         	str	r0, [sp, #0x4]
 8055560: e002         	b	0x8055568 <vTaskDelete+0x26> @ imm = #0x4
 8055562: 9803         	ldr	r0, [sp, #0xc]
 8055564: 9001         	str	r0, [sp, #0x4]
 8055566: e7ff         	b	0x8055568 <vTaskDelete+0x26> @ imm = #-0x2
 8055568: 9801         	ldr	r0, [sp, #0x4]
 805556a: 9002         	str	r0, [sp, #0x8]
;             if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 805556c: 9802         	ldr	r0, [sp, #0x8]
 805556e: 3080         	adds	r0, #0x80
 8055570: f7ff fffe    	bl	0x8055570 <vTaskDelete+0x2e> @ imm = #-0x4
 8055574: b908         	cbnz	r0, 0x805557a <vTaskDelete+0x38> @ imm = #0x2
 8055576: e7ff         	b	0x8055578 <vTaskDelete+0x36> @ imm = #-0x2
;             }
 8055578: e000         	b	0x805557c <vTaskDelete+0x3a> @ imm = #0x0
 805557a: e7ff         	b	0x805557c <vTaskDelete+0x3a> @ imm = #-0x2
;             if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 805557c: 9802         	ldr	r0, [sp, #0x8]
 805557e: f8d0 00a4    	ldr.w	r0, [r0, #0xa4]
 8055582: b128         	cbz	r0, 0x8055590 <vTaskDelete+0x4e> @ imm = #0xa
 8055584: e7ff         	b	0x8055586 <vTaskDelete+0x44> @ imm = #-0x2
;                 ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8055586: 9802         	ldr	r0, [sp, #0x8]
 8055588: 3094         	adds	r0, #0x94
 805558a: f7ff fffe    	bl	0x805558a <vTaskDelete+0x48> @ imm = #-0x4
;             }
 805558e: e000         	b	0x8055592 <vTaskDelete+0x50> @ imm = #0x0
 8055590: e7ff         	b	0x8055592 <vTaskDelete+0x50> @ imm = #-0x2
;             uxTaskNumber++;
 8055592: f240 0100    	movw	r1, #0x0
 8055596: f2c0 0100    	movt	r1, #0x0
 805559a: 6808         	ldr	r0, [r1]
 805559c: 3001         	adds	r0, #0x1
 805559e: 6008         	str	r0, [r1]
;             if( taskTASK_IS_RUNNING_OR_SCHEDULED_TO_YIELD( pxTCB ) != pdFALSE )
 80555a0: 9802         	ldr	r0, [sp, #0x8]
 80555a2: f240 0100    	movw	r1, #0x0
 80555a6: f2c0 0100    	movt	r1, #0x0
 80555aa: 6809         	ldr	r1, [r1]
 80555ac: 4288         	cmp	r0, r1
 80555ae: d111         	bne	0x80555d4 <vTaskDelete+0x92> @ imm = #0x22
 80555b0: e7ff         	b	0x80555b2 <vTaskDelete+0x70> @ imm = #-0x2
;                 vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80555b2: 9802         	ldr	r0, [sp, #0x8]
 80555b4: f100 0180    	add.w	r1, r0, #0x80
 80555b8: f240 0000    	movw	r0, #0x0
 80555bc: f2c0 0000    	movt	r0, #0x0
 80555c0: f7ff fffe    	bl	0x80555c0 <vTaskDelete+0x7e> @ imm = #-0x4
;                 ++uxDeletedTasksWaitingCleanUp;
 80555c4: f240 0100    	movw	r1, #0x0
 80555c8: f2c0 0100    	movt	r1, #0x0
 80555cc: 6808         	ldr	r0, [r1]
 80555ce: 3001         	adds	r0, #0x1
 80555d0: 6008         	str	r0, [r1]
;             }
 80555d2: e009         	b	0x80555e8 <vTaskDelete+0xa6> @ imm = #0x12
;                 --uxCurrentNumberOfTasks;
 80555d4: f240 0100    	movw	r1, #0x0
 80555d8: f2c0 0100    	movt	r1, #0x0
 80555dc: 6808         	ldr	r0, [r1]
 80555de: 3801         	subs	r0, #0x1
 80555e0: 6008         	str	r0, [r1]
;                 prvResetNextTaskUnblockTime();
 80555e2: f000 f832    	bl	0x805564a <prvResetNextTaskUnblockTime> @ imm = #0x64
 80555e6: e7ff         	b	0x80555e8 <vTaskDelete+0xa6> @ imm = #-0x2
;             taskEXIT_CRITICAL();
 80555e8: f7ff fffe    	bl	0x80555e8 <vTaskDelete+0xa6> @ imm = #-0x4
;             if( pxTCB != pxCurrentTCB )
 80555ec: 9802         	ldr	r0, [sp, #0x8]
 80555ee: f240 0100    	movw	r1, #0x0
 80555f2: f2c0 0100    	movt	r1, #0x0
 80555f6: 6809         	ldr	r1, [r1]
 80555f8: 4288         	cmp	r0, r1
 80555fa: d004         	beq	0x8055606 <vTaskDelete+0xc4> @ imm = #0x8
 80555fc: e7ff         	b	0x80555fe <vTaskDelete+0xbc> @ imm = #-0x2
;                 prvDeleteTCB( pxTCB );
 80555fe: 9802         	ldr	r0, [sp, #0x8]
 8055600: f000 f841    	bl	0x8055686 <prvDeleteTCB> @ imm = #0x82
;             }
 8055604: e7ff         	b	0x8055606 <vTaskDelete+0xc4> @ imm = #-0x2
;             if( xSchedulerRunning != pdFALSE )
 8055606: f240 0000    	movw	r0, #0x0
 805560a: f2c0 0000    	movt	r0, #0x0
 805560e: 6800         	ldr	r0, [r0]
 8055610: b1c8         	cbz	r0, 0x8055646 <vTaskDelete+0x104> @ imm = #0x32
 8055612: e7ff         	b	0x8055614 <vTaskDelete+0xd2> @ imm = #-0x2
;                 if( pxTCB == pxCurrentTCB )
 8055614: 9802         	ldr	r0, [sp, #0x8]
 8055616: f240 0100    	movw	r1, #0x0
 805561a: f2c0 0100    	movt	r1, #0x0
 805561e: 6809         	ldr	r1, [r1]
 8055620: 4288         	cmp	r0, r1
 8055622: d10e         	bne	0x8055642 <vTaskDelete+0x100> @ imm = #0x1c
 8055624: e7ff         	b	0x8055626 <vTaskDelete+0xe4> @ imm = #-0x2
;                     configASSERT( uxSchedulerSuspended == 0 );
 8055626: f240 0000    	movw	r0, #0x0
 805562a: f2c0 0000    	movt	r0, #0x0
 805562e: 6800         	ldr	r0, [r0]
 8055630: b120         	cbz	r0, 0x805563c <vTaskDelete+0xfa> @ imm = #0x8
 8055632: e7ff         	b	0x8055634 <vTaskDelete+0xf2> @ imm = #-0x2
 8055634: f7ff fffe    	bl	0x8055634 <vTaskDelete+0xf2> @ imm = #-0x4
 8055638: e7ff         	b	0x805563a <vTaskDelete+0xf8> @ imm = #-0x2
 805563a: e7fe         	b	0x805563a <vTaskDelete+0xf8> @ imm = #-0x4
;                     portYIELD_WITHIN_API();
 805563c: f7ff fffe    	bl	0x805563c <vTaskDelete+0xfa> @ imm = #-0x4
;                 }
 8055640: e000         	b	0x8055644 <vTaskDelete+0x102> @ imm = #0x0
 8055642: e7ff         	b	0x8055644 <vTaskDelete+0x102> @ imm = #-0x2
;             }
 8055644: e7ff         	b	0x8055646 <vTaskDelete+0x104> @ imm = #-0x2
;     }
 8055646: b004         	add	sp, #0x10
 8055648: bd80         	pop	{r7, pc}

0805564a <prvResetNextTaskUnblockTime>:
;     if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 805564a: f240 0000    	movw	r0, #0x0
 805564e: f2c0 0000    	movt	r0, #0x0
 8055652: 6800         	ldr	r0, [r0]
 8055654: 6800         	ldr	r0, [r0]
 8055656: b940         	cbnz	r0, 0x805566a <prvResetNextTaskUnblockTime+0x20> @ imm = #0x10
 8055658: e7ff         	b	0x805565a <prvResetNextTaskUnblockTime+0x10> @ imm = #-0x2
;         xNextTaskUnblockTime = portMAX_DELAY;
 805565a: f240 0100    	movw	r1, #0x0
 805565e: f2c0 0100    	movt	r1, #0x0
 8055662: f04f 30ff    	mov.w	r0, #0xffffffff
 8055666: 6008         	str	r0, [r1]
;     }
 8055668: e00c         	b	0x8055684 <prvResetNextTaskUnblockTime+0x3a> @ imm = #0x18
;         xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 805566a: f240 0000    	movw	r0, #0x0
 805566e: f2c0 0000    	movt	r0, #0x0
 8055672: 6800         	ldr	r0, [r0]
 8055674: 68c0         	ldr	r0, [r0, #0xc]
 8055676: 6800         	ldr	r0, [r0]
 8055678: f240 0100    	movw	r1, #0x0
 805567c: f2c0 0100    	movt	r1, #0x0
 8055680: 6008         	str	r0, [r1]
 8055682: e7ff         	b	0x8055684 <prvResetNextTaskUnblockTime+0x3a> @ imm = #-0x2
; }
 8055684: 4770         	bx	lr

08055686 <prvDeleteTCB>:
;     {
 8055686: b580         	push	{r7, lr}
 8055688: 466f         	mov	r7, sp
 805568a: b082         	sub	sp, #0x8
 805568c: 9001         	str	r0, [sp, #0x4]
;         portCLEAN_UP_TCB( pxTCB );
 805568e: 9801         	ldr	r0, [sp, #0x4]
;             if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8055690: f890 00d5    	ldrb.w	r0, [r0, #0xd5]
 8055694: b948         	cbnz	r0, 0x80556aa <prvDeleteTCB+0x24> @ imm = #0x12
 8055696: e7ff         	b	0x8055698 <prvDeleteTCB+0x12> @ imm = #-0x2
;                 vPortFreeStack( pxTCB->pxStack );
 8055698: 9801         	ldr	r0, [sp, #0x4]
 805569a: f8d0 00ac    	ldr.w	r0, [r0, #0xac]
 805569e: f7ff fffe    	bl	0x805569e <prvDeleteTCB+0x18> @ imm = #-0x4
;                 vPortFree( pxTCB );
 80556a2: 9801         	ldr	r0, [sp, #0x4]
 80556a4: f7ff fffe    	bl	0x80556a4 <prvDeleteTCB+0x1e> @ imm = #-0x4
;             }
 80556a8: e015         	b	0x80556d6 <prvDeleteTCB+0x50> @ imm = #0x2a
;             else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80556aa: 9801         	ldr	r0, [sp, #0x4]
 80556ac: f890 00d5    	ldrb.w	r0, [r0, #0xd5]
 80556b0: 2801         	cmp	r0, #0x1
 80556b2: d104         	bne	0x80556be <prvDeleteTCB+0x38> @ imm = #0x8
 80556b4: e7ff         	b	0x80556b6 <prvDeleteTCB+0x30> @ imm = #-0x2
;                 vPortFree( pxTCB );
 80556b6: 9801         	ldr	r0, [sp, #0x4]
 80556b8: f7ff fffe    	bl	0x80556b8 <prvDeleteTCB+0x32> @ imm = #-0x4
;             }
 80556bc: e00a         	b	0x80556d4 <prvDeleteTCB+0x4e> @ imm = #0x14
;                 configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
 80556be: 9801         	ldr	r0, [sp, #0x4]
 80556c0: f890 00d5    	ldrb.w	r0, [r0, #0xd5]
 80556c4: 2802         	cmp	r0, #0x2
 80556c6: d004         	beq	0x80556d2 <prvDeleteTCB+0x4c> @ imm = #0x8
 80556c8: e7ff         	b	0x80556ca <prvDeleteTCB+0x44> @ imm = #-0x2
 80556ca: f7ff fffe    	bl	0x80556ca <prvDeleteTCB+0x44> @ imm = #-0x4
 80556ce: e7ff         	b	0x80556d0 <prvDeleteTCB+0x4a> @ imm = #-0x2
 80556d0: e7fe         	b	0x80556d0 <prvDeleteTCB+0x4a> @ imm = #-0x4
 80556d2: e7ff         	b	0x80556d4 <prvDeleteTCB+0x4e> @ imm = #-0x2
 80556d4: e7ff         	b	0x80556d6 <prvDeleteTCB+0x50> @ imm = #-0x2
;     }
 80556d6: b002         	add	sp, #0x8
 80556d8: bd80         	pop	{r7, pc}

080556da <xTaskDelayUntil>:
;     {
 80556da: b580         	push	{r7, lr}
 80556dc: 466f         	mov	r7, sp
 80556de: b086         	sub	sp, #0x18
 80556e0: 9005         	str	r0, [sp, #0x14]
 80556e2: 9104         	str	r1, [sp, #0x10]
 80556e4: 2000         	movs	r0, #0x0
;         BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80556e6: 9001         	str	r0, [sp, #0x4]
;         configASSERT( pxPreviousWakeTime );
 80556e8: 9805         	ldr	r0, [sp, #0x14]
 80556ea: b920         	cbnz	r0, 0x80556f6 <xTaskDelayUntil+0x1c> @ imm = #0x8
 80556ec: e7ff         	b	0x80556ee <xTaskDelayUntil+0x14> @ imm = #-0x2
 80556ee: f7ff fffe    	bl	0x80556ee <xTaskDelayUntil+0x14> @ imm = #-0x4
 80556f2: e7ff         	b	0x80556f4 <xTaskDelayUntil+0x1a> @ imm = #-0x2
 80556f4: e7fe         	b	0x80556f4 <xTaskDelayUntil+0x1a> @ imm = #-0x4
;         configASSERT( ( xTimeIncrement > 0U ) );
 80556f6: 9804         	ldr	r0, [sp, #0x10]
 80556f8: b920         	cbnz	r0, 0x8055704 <xTaskDelayUntil+0x2a> @ imm = #0x8
 80556fa: e7ff         	b	0x80556fc <xTaskDelayUntil+0x22> @ imm = #-0x2
 80556fc: f7ff fffe    	bl	0x80556fc <xTaskDelayUntil+0x22> @ imm = #-0x4
 8055700: e7ff         	b	0x8055702 <xTaskDelayUntil+0x28> @ imm = #-0x2
 8055702: e7fe         	b	0x8055702 <xTaskDelayUntil+0x28> @ imm = #-0x4
;         vTaskSuspendAll();
 8055704: f7ff fffe    	bl	0x8055704 <xTaskDelayUntil+0x2a> @ imm = #-0x4
;             const TickType_t xConstTickCount = xTickCount;
 8055708: f240 0000    	movw	r0, #0x0
 805570c: f2c0 0000    	movt	r0, #0x0
 8055710: 6800         	ldr	r0, [r0]
 8055712: 9000         	str	r0, [sp]
;             configASSERT( uxSchedulerSuspended == 1U );
 8055714: f240 0000    	movw	r0, #0x0
 8055718: f2c0 0000    	movt	r0, #0x0
 805571c: 6800         	ldr	r0, [r0]
 805571e: 2801         	cmp	r0, #0x1
 8055720: d004         	beq	0x805572c <xTaskDelayUntil+0x52> @ imm = #0x8
 8055722: e7ff         	b	0x8055724 <xTaskDelayUntil+0x4a> @ imm = #-0x2
 8055724: f7ff fffe    	bl	0x8055724 <xTaskDelayUntil+0x4a> @ imm = #-0x4
 8055728: e7ff         	b	0x805572a <xTaskDelayUntil+0x50> @ imm = #-0x2
 805572a: e7fe         	b	0x805572a <xTaskDelayUntil+0x50> @ imm = #-0x4
;             xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 805572c: 9805         	ldr	r0, [sp, #0x14]
 805572e: 6800         	ldr	r0, [r0]
 8055730: 9904         	ldr	r1, [sp, #0x10]
 8055732: 4408         	add	r0, r1
 8055734: 9003         	str	r0, [sp, #0xc]
;             if( xConstTickCount < *pxPreviousWakeTime )
 8055736: 9800         	ldr	r0, [sp]
 8055738: 9905         	ldr	r1, [sp, #0x14]
 805573a: 6809         	ldr	r1, [r1]
 805573c: 4288         	cmp	r0, r1
 805573e: d210         	bhs	0x8055762 <xTaskDelayUntil+0x88> @ imm = #0x20
 8055740: e7ff         	b	0x8055742 <xTaskDelayUntil+0x68> @ imm = #-0x2
;                 if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8055742: 9803         	ldr	r0, [sp, #0xc]
 8055744: 9905         	ldr	r1, [sp, #0x14]
 8055746: 6809         	ldr	r1, [r1]
 8055748: 4288         	cmp	r0, r1
 805574a: d208         	bhs	0x805575e <xTaskDelayUntil+0x84> @ imm = #0x10
 805574c: e7ff         	b	0x805574e <xTaskDelayUntil+0x74> @ imm = #-0x2
 805574e: 9803         	ldr	r0, [sp, #0xc]
 8055750: 9900         	ldr	r1, [sp]
 8055752: 4288         	cmp	r0, r1
 8055754: d903         	bls	0x805575e <xTaskDelayUntil+0x84> @ imm = #0x6
 8055756: e7ff         	b	0x8055758 <xTaskDelayUntil+0x7e> @ imm = #-0x2
 8055758: 2001         	movs	r0, #0x1
;                     xShouldDelay = pdTRUE;
 805575a: 9001         	str	r0, [sp, #0x4]
;                 }
 805575c: e000         	b	0x8055760 <xTaskDelayUntil+0x86> @ imm = #0x0
 805575e: e7ff         	b	0x8055760 <xTaskDelayUntil+0x86> @ imm = #-0x2
;             }
 8055760: e00f         	b	0x8055782 <xTaskDelayUntil+0xa8> @ imm = #0x1e
;                 if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8055762: 9803         	ldr	r0, [sp, #0xc]
 8055764: 9905         	ldr	r1, [sp, #0x14]
 8055766: 6809         	ldr	r1, [r1]
 8055768: 4288         	cmp	r0, r1
 805576a: d305         	blo	0x8055778 <xTaskDelayUntil+0x9e> @ imm = #0xa
 805576c: e7ff         	b	0x805576e <xTaskDelayUntil+0x94> @ imm = #-0x2
 805576e: 9803         	ldr	r0, [sp, #0xc]
 8055770: 9900         	ldr	r1, [sp]
 8055772: 4288         	cmp	r0, r1
 8055774: d903         	bls	0x805577e <xTaskDelayUntil+0xa4> @ imm = #0x6
 8055776: e7ff         	b	0x8055778 <xTaskDelayUntil+0x9e> @ imm = #-0x2
 8055778: 2001         	movs	r0, #0x1
;                     xShouldDelay = pdTRUE;
 805577a: 9001         	str	r0, [sp, #0x4]
;                 }
 805577c: e000         	b	0x8055780 <xTaskDelayUntil+0xa6> @ imm = #0x0
 805577e: e7ff         	b	0x8055780 <xTaskDelayUntil+0xa6> @ imm = #-0x2
 8055780: e7ff         	b	0x8055782 <xTaskDelayUntil+0xa8> @ imm = #-0x2
;             *pxPreviousWakeTime = xTimeToWake;
 8055782: 9803         	ldr	r0, [sp, #0xc]
 8055784: 9905         	ldr	r1, [sp, #0x14]
 8055786: 6008         	str	r0, [r1]
;             if( xShouldDelay != pdFALSE )
 8055788: 9801         	ldr	r0, [sp, #0x4]
 805578a: b138         	cbz	r0, 0x805579c <xTaskDelayUntil+0xc2> @ imm = #0xe
 805578c: e7ff         	b	0x805578e <xTaskDelayUntil+0xb4> @ imm = #-0x2
;                 prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 805578e: 9803         	ldr	r0, [sp, #0xc]
 8055790: 9900         	ldr	r1, [sp]
 8055792: 1a40         	subs	r0, r0, r1
 8055794: 2100         	movs	r1, #0x0
 8055796: f000 f817    	bl	0x80557c8 <prvAddCurrentTaskToDelayedList> @ imm = #0x2e
;             }
 805579a: e000         	b	0x805579e <xTaskDelayUntil+0xc4> @ imm = #0x0
 805579c: e7ff         	b	0x805579e <xTaskDelayUntil+0xc4> @ imm = #-0x2
;         xAlreadyYielded = xTaskResumeAll();
 805579e: f7ff fffe    	bl	0x805579e <xTaskDelayUntil+0xc4> @ imm = #-0x4
 80557a2: 9002         	str	r0, [sp, #0x8]
;         if( xAlreadyYielded == pdFALSE )
 80557a4: 9802         	ldr	r0, [sp, #0x8]
 80557a6: b918         	cbnz	r0, 0x80557b0 <xTaskDelayUntil+0xd6> @ imm = #0x6
 80557a8: e7ff         	b	0x80557aa <xTaskDelayUntil+0xd0> @ imm = #-0x2
;             taskYIELD_WITHIN_API();
 80557aa: f7ff fffe    	bl	0x80557aa <xTaskDelayUntil+0xd0> @ imm = #-0x4
;         }
 80557ae: e000         	b	0x80557b2 <xTaskDelayUntil+0xd8> @ imm = #0x0
 80557b0: e7ff         	b	0x80557b2 <xTaskDelayUntil+0xd8> @ imm = #-0x2
;         return xShouldDelay;
 80557b2: 9801         	ldr	r0, [sp, #0x4]
 80557b4: b006         	add	sp, #0x18
 80557b6: bd80         	pop	{r7, pc}

080557b8 <vTaskSuspendAll>:
;         ++uxSchedulerSuspended;
 80557b8: f240 0100    	movw	r1, #0x0
 80557bc: f2c0 0100    	movt	r1, #0x0
 80557c0: 6808         	ldr	r0, [r1]
 80557c2: 3001         	adds	r0, #0x1
 80557c4: 6008         	str	r0, [r1]
; }
 80557c6: 4770         	bx	lr

080557c8 <prvAddCurrentTaskToDelayedList>:
; {
 80557c8: b580         	push	{r7, lr}
 80557ca: 466f         	mov	r7, sp
 80557cc: b086         	sub	sp, #0x18
 80557ce: 9005         	str	r0, [sp, #0x14]
 80557d0: 9104         	str	r1, [sp, #0x10]
;     const TickType_t xConstTickCount = xTickCount;
 80557d2: f240 0000    	movw	r0, #0x0
 80557d6: f2c0 0000    	movt	r0, #0x0
 80557da: 6800         	ldr	r0, [r0]
 80557dc: 9002         	str	r0, [sp, #0x8]
;     if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80557de: f240 0000    	movw	r0, #0x0
 80557e2: f2c0 0000    	movt	r0, #0x0
 80557e6: 6800         	ldr	r0, [r0]
 80557e8: 3080         	adds	r0, #0x80
 80557ea: f7ff fffe    	bl	0x80557ea <prvAddCurrentTaskToDelayedList+0x22> @ imm = #-0x4
 80557ee: b908         	cbnz	r0, 0x80557f4 <prvAddCurrentTaskToDelayedList+0x2c> @ imm = #0x2
 80557f0: e7ff         	b	0x80557f2 <prvAddCurrentTaskToDelayedList+0x2a> @ imm = #-0x2
;     }
 80557f2: e000         	b	0x80557f6 <prvAddCurrentTaskToDelayedList+0x2e> @ imm = #0x0
 80557f4: e7ff         	b	0x80557f6 <prvAddCurrentTaskToDelayedList+0x2e> @ imm = #-0x2
;         if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80557f6: 9805         	ldr	r0, [sp, #0x14]
 80557f8: 3001         	adds	r0, #0x1
 80557fa: bb40         	cbnz	r0, 0x805584e <prvAddCurrentTaskToDelayedList+0x86> @ imm = #0x50
 80557fc: e7ff         	b	0x80557fe <prvAddCurrentTaskToDelayedList+0x36> @ imm = #-0x2
 80557fe: 9804         	ldr	r0, [sp, #0x10]
 8055800: b328         	cbz	r0, 0x805584e <prvAddCurrentTaskToDelayedList+0x86> @ imm = #0x4a
 8055802: e7ff         	b	0x8055804 <prvAddCurrentTaskToDelayedList+0x3c> @ imm = #-0x2
;             listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8055804: e7ff         	b	0x8055806 <prvAddCurrentTaskToDelayedList+0x3e> @ imm = #-0x2
 8055806: f240 0100    	movw	r1, #0x0
 805580a: f2c0 0100    	movt	r1, #0x0
 805580e: 6848         	ldr	r0, [r1, #0x4]
 8055810: 9001         	str	r0, [sp, #0x4]
 8055812: 9a01         	ldr	r2, [sp, #0x4]
 8055814: f240 0000    	movw	r0, #0x0
 8055818: f2c0 0000    	movt	r0, #0x0
 805581c: 6803         	ldr	r3, [r0]
 805581e: f8c3 2084    	str.w	r2, [r3, #0x84]
 8055822: 9a01         	ldr	r2, [sp, #0x4]
 8055824: 6892         	ldr	r2, [r2, #0x8]
 8055826: 6803         	ldr	r3, [r0]
 8055828: f8c3 2088    	str.w	r2, [r3, #0x88]
 805582c: 6802         	ldr	r2, [r0]
 805582e: 3280         	adds	r2, #0x80
 8055830: 9b01         	ldr	r3, [sp, #0x4]
 8055832: 689b         	ldr	r3, [r3, #0x8]
 8055834: 605a         	str	r2, [r3, #0x4]
 8055836: 6802         	ldr	r2, [r0]
 8055838: 3280         	adds	r2, #0x80
 805583a: 9b01         	ldr	r3, [sp, #0x4]
 805583c: 609a         	str	r2, [r3, #0x8]
 805583e: 6800         	ldr	r0, [r0]
 8055840: f8c0 1090    	str.w	r1, [r0, #0x90]
 8055844: 6808         	ldr	r0, [r1]
 8055846: 3001         	adds	r0, #0x1
 8055848: 6008         	str	r0, [r1]
 805584a: e7ff         	b	0x805584c <prvAddCurrentTaskToDelayedList+0x84> @ imm = #-0x2
;         }
 805584c: e03e         	b	0x80558cc <prvAddCurrentTaskToDelayedList+0x104> @ imm = #0x7c
;             xTimeToWake = xConstTickCount + xTicksToWait;
 805584e: 9802         	ldr	r0, [sp, #0x8]
 8055850: 9905         	ldr	r1, [sp, #0x14]
 8055852: 4408         	add	r0, r1
 8055854: 9003         	str	r0, [sp, #0xc]
;             listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8055856: 9803         	ldr	r0, [sp, #0xc]
 8055858: f240 0100    	movw	r1, #0x0
 805585c: f2c0 0100    	movt	r1, #0x0
 8055860: 6809         	ldr	r1, [r1]
 8055862: f8c1 0080    	str.w	r0, [r1, #0x80]
;             if( xTimeToWake < xConstTickCount )
 8055866: 9803         	ldr	r0, [sp, #0xc]
 8055868: 9902         	ldr	r1, [sp, #0x8]
 805586a: 4288         	cmp	r0, r1
 805586c: d20e         	bhs	0x805588c <prvAddCurrentTaskToDelayedList+0xc4> @ imm = #0x1c
 805586e: e7ff         	b	0x8055870 <prvAddCurrentTaskToDelayedList+0xa8> @ imm = #-0x2
;                 vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8055870: f240 0000    	movw	r0, #0x0
 8055874: f2c0 0000    	movt	r0, #0x0
 8055878: 6800         	ldr	r0, [r0]
 805587a: f240 0100    	movw	r1, #0x0
 805587e: f2c0 0100    	movt	r1, #0x0
 8055882: 6809         	ldr	r1, [r1]
 8055884: 3180         	adds	r1, #0x80
 8055886: f7ff fffe    	bl	0x8055886 <prvAddCurrentTaskToDelayedList+0xbe> @ imm = #-0x4
;             }
 805588a: e01e         	b	0x80558ca <prvAddCurrentTaskToDelayedList+0x102> @ imm = #0x3c
;                 vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 805588c: f240 0000    	movw	r0, #0x0
 8055890: f2c0 0000    	movt	r0, #0x0
 8055894: 6800         	ldr	r0, [r0]
 8055896: f240 0100    	movw	r1, #0x0
 805589a: f2c0 0100    	movt	r1, #0x0
 805589e: 6809         	ldr	r1, [r1]
 80558a0: 3180         	adds	r1, #0x80
 80558a2: f7ff fffe    	bl	0x80558a2 <prvAddCurrentTaskToDelayedList+0xda> @ imm = #-0x4
;                 if( xTimeToWake < xNextTaskUnblockTime )
 80558a6: 9803         	ldr	r0, [sp, #0xc]
 80558a8: f240 0100    	movw	r1, #0x0
 80558ac: f2c0 0100    	movt	r1, #0x0
 80558b0: 6809         	ldr	r1, [r1]
 80558b2: 4288         	cmp	r0, r1
 80558b4: d207         	bhs	0x80558c6 <prvAddCurrentTaskToDelayedList+0xfe> @ imm = #0xe
 80558b6: e7ff         	b	0x80558b8 <prvAddCurrentTaskToDelayedList+0xf0> @ imm = #-0x2
;                     xNextTaskUnblockTime = xTimeToWake;
 80558b8: 9803         	ldr	r0, [sp, #0xc]
 80558ba: f240 0100    	movw	r1, #0x0
 80558be: f2c0 0100    	movt	r1, #0x0
 80558c2: 6008         	str	r0, [r1]
;                 }
 80558c4: e000         	b	0x80558c8 <prvAddCurrentTaskToDelayedList+0x100> @ imm = #0x0
 80558c6: e7ff         	b	0x80558c8 <prvAddCurrentTaskToDelayedList+0x100> @ imm = #-0x2
 80558c8: e7ff         	b	0x80558ca <prvAddCurrentTaskToDelayedList+0x102> @ imm = #-0x2
 80558ca: e7ff         	b	0x80558cc <prvAddCurrentTaskToDelayedList+0x104> @ imm = #-0x2
; }
 80558cc: b006         	add	sp, #0x18
 80558ce: bd80         	pop	{r7, pc}

080558d0 <xTaskResumeAll>:
; {
 80558d0: b580         	push	{r7, lr}
 80558d2: 466f         	mov	r7, sp
 80558d4: b088         	sub	sp, #0x20
 80558d6: 2000         	movs	r0, #0x0
;     TCB_t * pxTCB = NULL;
 80558d8: 9000         	str	r0, [sp]
 80558da: 9007         	str	r0, [sp, #0x1c]
;     BaseType_t xAlreadyYielded = pdFALSE;
 80558dc: 9006         	str	r0, [sp, #0x18]
;         taskENTER_CRITICAL();
 80558de: f7ff fffe    	bl	0x80558de <xTaskResumeAll+0xe> @ imm = #-0x4
 80558e2: 9800         	ldr	r0, [sp]
;             xCoreID = ( BaseType_t ) portGET_CORE_ID();
 80558e4: 9005         	str	r0, [sp, #0x14]
;             configASSERT( uxSchedulerSuspended != 0U );
 80558e6: f240 0000    	movw	r0, #0x0
 80558ea: f2c0 0000    	movt	r0, #0x0
 80558ee: 6800         	ldr	r0, [r0]
 80558f0: b920         	cbnz	r0, 0x80558fc <xTaskResumeAll+0x2c> @ imm = #0x8
 80558f2: e7ff         	b	0x80558f4 <xTaskResumeAll+0x24> @ imm = #-0x2
 80558f4: f7ff fffe    	bl	0x80558f4 <xTaskResumeAll+0x24> @ imm = #-0x4
 80558f8: e7ff         	b	0x80558fa <xTaskResumeAll+0x2a> @ imm = #-0x2
 80558fa: e7fe         	b	0x80558fa <xTaskResumeAll+0x2a> @ imm = #-0x4
;             --uxSchedulerSuspended;
 80558fc: f240 0000    	movw	r0, #0x0
 8055900: f2c0 0000    	movt	r0, #0x0
 8055904: 6801         	ldr	r1, [r0]
 8055906: 3901         	subs	r1, #0x1
 8055908: 6001         	str	r1, [r0]
;             if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 805590a: 6800         	ldr	r0, [r0]
 805590c: 2800         	cmp	r0, #0x0
 805590e: f040 8113    	bne.w	0x8055b38 <xTaskResumeAll+0x268> @ imm = #0x226
 8055912: e7ff         	b	0x8055914 <xTaskResumeAll+0x44> @ imm = #-0x2
;                 if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8055914: f240 0000    	movw	r0, #0x0
 8055918: f2c0 0000    	movt	r0, #0x0
 805591c: 6800         	ldr	r0, [r0]
 805591e: 2800         	cmp	r0, #0x0
 8055920: f000 8109    	beq.w	0x8055b36 <xTaskResumeAll+0x266> @ imm = #0x212
 8055924: e7ff         	b	0x8055926 <xTaskResumeAll+0x56> @ imm = #-0x2
;                     while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8055926: e7ff         	b	0x8055928 <xTaskResumeAll+0x58> @ imm = #-0x2
 8055928: f240 0000    	movw	r0, #0x0
 805592c: f2c0 0000    	movt	r0, #0x0
 8055930: 6800         	ldr	r0, [r0]
 8055932: 2800         	cmp	r0, #0x0
 8055934: f000 80ba    	beq.w	0x8055aac <xTaskResumeAll+0x1dc> @ imm = #0x174
 8055938: e7ff         	b	0x805593a <xTaskResumeAll+0x6a> @ imm = #-0x2
;                         pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 805593a: f240 0000    	movw	r0, #0x0
 805593e: f2c0 0000    	movt	r0, #0x0
 8055942: 68c0         	ldr	r0, [r0, #0xc]
 8055944: 68c0         	ldr	r0, [r0, #0xc]
 8055946: 9007         	str	r0, [sp, #0x1c]
;                         listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8055948: e7ff         	b	0x805594a <xTaskResumeAll+0x7a> @ imm = #-0x2
 805594a: 9807         	ldr	r0, [sp, #0x1c]
 805594c: f8d0 00a4    	ldr.w	r0, [r0, #0xa4]
 8055950: 9004         	str	r0, [sp, #0x10]
 8055952: 9807         	ldr	r0, [sp, #0x1c]
 8055954: f8d0 1098    	ldr.w	r1, [r0, #0x98]
 8055958: f8d0 009c    	ldr.w	r0, [r0, #0x9c]
 805595c: 6088         	str	r0, [r1, #0x8]
 805595e: 9907         	ldr	r1, [sp, #0x1c]
 8055960: f8d1 0098    	ldr.w	r0, [r1, #0x98]
 8055964: f8d1 109c    	ldr.w	r1, [r1, #0x9c]
 8055968: 6048         	str	r0, [r1, #0x4]
 805596a: 9804         	ldr	r0, [sp, #0x10]
 805596c: 6840         	ldr	r0, [r0, #0x4]
 805596e: 9907         	ldr	r1, [sp, #0x1c]
 8055970: 3194         	adds	r1, #0x94
 8055972: 4288         	cmp	r0, r1
 8055974: d106         	bne	0x8055984 <xTaskResumeAll+0xb4> @ imm = #0xc
 8055976: e7ff         	b	0x8055978 <xTaskResumeAll+0xa8> @ imm = #-0x2
 8055978: 9807         	ldr	r0, [sp, #0x1c]
 805597a: f8d0 009c    	ldr.w	r0, [r0, #0x9c]
 805597e: 9904         	ldr	r1, [sp, #0x10]
 8055980: 6048         	str	r0, [r1, #0x4]
 8055982: e7ff         	b	0x8055984 <xTaskResumeAll+0xb4> @ imm = #-0x2
 8055984: 9907         	ldr	r1, [sp, #0x1c]
 8055986: 2000         	movs	r0, #0x0
 8055988: f8c1 00a4    	str.w	r0, [r1, #0xa4]
 805598c: 9904         	ldr	r1, [sp, #0x10]
 805598e: 6808         	ldr	r0, [r1]
 8055990: 3801         	subs	r0, #0x1
 8055992: 6008         	str	r0, [r1]
 8055994: e7ff         	b	0x8055996 <xTaskResumeAll+0xc6> @ imm = #-0x2
;                         listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8055996: e7ff         	b	0x8055998 <xTaskResumeAll+0xc8> @ imm = #-0x2
 8055998: 9807         	ldr	r0, [sp, #0x1c]
 805599a: f8d0 0090    	ldr.w	r0, [r0, #0x90]
 805599e: 9003         	str	r0, [sp, #0xc]
 80559a0: 9807         	ldr	r0, [sp, #0x1c]
 80559a2: f8d0 1084    	ldr.w	r1, [r0, #0x84]
 80559a6: f8d0 0088    	ldr.w	r0, [r0, #0x88]
 80559aa: 6088         	str	r0, [r1, #0x8]
 80559ac: 9907         	ldr	r1, [sp, #0x1c]
 80559ae: f8d1 0084    	ldr.w	r0, [r1, #0x84]
 80559b2: f8d1 1088    	ldr.w	r1, [r1, #0x88]
 80559b6: 6048         	str	r0, [r1, #0x4]
 80559b8: 9803         	ldr	r0, [sp, #0xc]
 80559ba: 6840         	ldr	r0, [r0, #0x4]
 80559bc: 9907         	ldr	r1, [sp, #0x1c]
 80559be: 3180         	adds	r1, #0x80
 80559c0: 4288         	cmp	r0, r1
 80559c2: d106         	bne	0x80559d2 <xTaskResumeAll+0x102> @ imm = #0xc
 80559c4: e7ff         	b	0x80559c6 <xTaskResumeAll+0xf6> @ imm = #-0x2
 80559c6: 9807         	ldr	r0, [sp, #0x1c]
 80559c8: f8d0 0088    	ldr.w	r0, [r0, #0x88]
 80559cc: 9903         	ldr	r1, [sp, #0xc]
 80559ce: 6048         	str	r0, [r1, #0x4]
 80559d0: e7ff         	b	0x80559d2 <xTaskResumeAll+0x102> @ imm = #-0x2
 80559d2: 9907         	ldr	r1, [sp, #0x1c]
 80559d4: 2000         	movs	r0, #0x0
 80559d6: f8c1 0090    	str.w	r0, [r1, #0x90]
 80559da: 9903         	ldr	r1, [sp, #0xc]
 80559dc: 6808         	ldr	r0, [r1]
 80559de: 3801         	subs	r0, #0x1
 80559e0: 6008         	str	r0, [r1]
 80559e2: e7ff         	b	0x80559e4 <xTaskResumeAll+0x114> @ imm = #-0x2
;                         prvAddTaskToReadyList( pxTCB );
 80559e4: e7ff         	b	0x80559e6 <xTaskResumeAll+0x116> @ imm = #-0x2
 80559e6: e7ff         	b	0x80559e8 <xTaskResumeAll+0x118> @ imm = #-0x2
 80559e8: 9807         	ldr	r0, [sp, #0x1c]
 80559ea: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 80559ee: f240 0100    	movw	r1, #0x0
 80559f2: f2c0 0100    	movt	r1, #0x0
 80559f6: 6809         	ldr	r1, [r1]
 80559f8: 4288         	cmp	r0, r1
 80559fa: d909         	bls	0x8055a10 <xTaskResumeAll+0x140> @ imm = #0x12
 80559fc: e7ff         	b	0x80559fe <xTaskResumeAll+0x12e> @ imm = #-0x2
 80559fe: 9807         	ldr	r0, [sp, #0x1c]
 8055a00: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 8055a04: f240 0100    	movw	r1, #0x0
 8055a08: f2c0 0100    	movt	r1, #0x0
 8055a0c: 6008         	str	r0, [r1]
 8055a0e: e7ff         	b	0x8055a10 <xTaskResumeAll+0x140> @ imm = #-0x2
 8055a10: e7ff         	b	0x8055a12 <xTaskResumeAll+0x142> @ imm = #-0x2
 8055a12: e7ff         	b	0x8055a14 <xTaskResumeAll+0x144> @ imm = #-0x2
 8055a14: 9807         	ldr	r0, [sp, #0x1c]
 8055a16: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 8055a1a: eb00 0080    	add.w	r0, r0, r0, lsl #2
 8055a1e: f240 0100    	movw	r1, #0x0
 8055a22: f2c0 0100    	movt	r1, #0x0
 8055a26: eb01 0080    	add.w	r0, r1, r0, lsl #2
 8055a2a: 6840         	ldr	r0, [r0, #0x4]
 8055a2c: 9002         	str	r0, [sp, #0x8]
 8055a2e: 9802         	ldr	r0, [sp, #0x8]
 8055a30: 9a07         	ldr	r2, [sp, #0x1c]
 8055a32: f8c2 0084    	str.w	r0, [r2, #0x84]
 8055a36: 9802         	ldr	r0, [sp, #0x8]
 8055a38: 6880         	ldr	r0, [r0, #0x8]
 8055a3a: 9a07         	ldr	r2, [sp, #0x1c]
 8055a3c: f8c2 0088    	str.w	r0, [r2, #0x88]
 8055a40: 9807         	ldr	r0, [sp, #0x1c]
 8055a42: 3080         	adds	r0, #0x80
 8055a44: 9a02         	ldr	r2, [sp, #0x8]
 8055a46: 6892         	ldr	r2, [r2, #0x8]
 8055a48: 6050         	str	r0, [r2, #0x4]
 8055a4a: 9807         	ldr	r0, [sp, #0x1c]
 8055a4c: 3080         	adds	r0, #0x80
 8055a4e: 9a02         	ldr	r2, [sp, #0x8]
 8055a50: 6090         	str	r0, [r2, #0x8]
 8055a52: 9a07         	ldr	r2, [sp, #0x1c]
 8055a54: f8d2 00a8    	ldr.w	r0, [r2, #0xa8]
 8055a58: eb00 0080    	add.w	r0, r0, r0, lsl #2
 8055a5c: eb01 0080    	add.w	r0, r1, r0, lsl #2
 8055a60: f8c2 0090    	str.w	r0, [r2, #0x90]
 8055a64: 9807         	ldr	r0, [sp, #0x1c]
 8055a66: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 8055a6a: eb00 0280    	add.w	r2, r0, r0, lsl #2
 8055a6e: f851 0022    	ldr.w	r0, [r1, r2, lsl #2]
 8055a72: 3001         	adds	r0, #0x1
 8055a74: f841 0022    	str.w	r0, [r1, r2, lsl #2]
 8055a78: e7ff         	b	0x8055a7a <xTaskResumeAll+0x1aa> @ imm = #-0x2
 8055a7a: e7ff         	b	0x8055a7c <xTaskResumeAll+0x1ac> @ imm = #-0x2
;                             if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8055a7c: 9807         	ldr	r0, [sp, #0x1c]
 8055a7e: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 8055a82: f240 0100    	movw	r1, #0x0
 8055a86: f2c0 0100    	movt	r1, #0x0
 8055a8a: 6809         	ldr	r1, [r1]
 8055a8c: f8d1 10a8    	ldr.w	r1, [r1, #0xa8]
 8055a90: 4288         	cmp	r0, r1
 8055a92: d909         	bls	0x8055aa8 <xTaskResumeAll+0x1d8> @ imm = #0x12
 8055a94: e7ff         	b	0x8055a96 <xTaskResumeAll+0x1c6> @ imm = #-0x2
;                                 xYieldPendings[ xCoreID ] = pdTRUE;
 8055a96: 9a05         	ldr	r2, [sp, #0x14]
 8055a98: f240 0100    	movw	r1, #0x0
 8055a9c: f2c0 0100    	movt	r1, #0x0
 8055aa0: 2001         	movs	r0, #0x1
 8055aa2: f841 0022    	str.w	r0, [r1, r2, lsl #2]
;                             }
 8055aa6: e000         	b	0x8055aaa <xTaskResumeAll+0x1da> @ imm = #0x0
 8055aa8: e7ff         	b	0x8055aaa <xTaskResumeAll+0x1da> @ imm = #-0x2
;                     while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8055aaa: e73d         	b	0x8055928 <xTaskResumeAll+0x58> @ imm = #-0x186
;                     if( pxTCB != NULL )
 8055aac: 9807         	ldr	r0, [sp, #0x1c]
 8055aae: b118         	cbz	r0, 0x8055ab8 <xTaskResumeAll+0x1e8> @ imm = #0x6
 8055ab0: e7ff         	b	0x8055ab2 <xTaskResumeAll+0x1e2> @ imm = #-0x2
;                         prvResetNextTaskUnblockTime();
 8055ab2: f7ff fdca    	bl	0x805564a <prvResetNextTaskUnblockTime> @ imm = #-0x46c
;                     }
 8055ab6: e7ff         	b	0x8055ab8 <xTaskResumeAll+0x1e8> @ imm = #-0x2
;                         TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8055ab8: f240 0000    	movw	r0, #0x0
 8055abc: f2c0 0000    	movt	r0, #0x0
 8055ac0: 6800         	ldr	r0, [r0]
 8055ac2: 9001         	str	r0, [sp, #0x4]
;                         if( xPendedCounts > ( TickType_t ) 0U )
 8055ac4: 9801         	ldr	r0, [sp, #0x4]
 8055ac6: b1f0         	cbz	r0, 0x8055b06 <xTaskResumeAll+0x236> @ imm = #0x3c
 8055ac8: e7ff         	b	0x8055aca <xTaskResumeAll+0x1fa> @ imm = #-0x2
;                             do
 8055aca: e7ff         	b	0x8055acc <xTaskResumeAll+0x1fc> @ imm = #-0x2
;                                 if( xTaskIncrementTick() != pdFALSE )
 8055acc: f7ff fffe    	bl	0x8055acc <xTaskResumeAll+0x1fc> @ imm = #-0x4
 8055ad0: b148         	cbz	r0, 0x8055ae6 <xTaskResumeAll+0x216> @ imm = #0x12
 8055ad2: e7ff         	b	0x8055ad4 <xTaskResumeAll+0x204> @ imm = #-0x2
;                                     xYieldPendings[ xCoreID ] = pdTRUE;
 8055ad4: 9a05         	ldr	r2, [sp, #0x14]
 8055ad6: f240 0100    	movw	r1, #0x0
 8055ada: f2c0 0100    	movt	r1, #0x0
 8055ade: 2001         	movs	r0, #0x1
 8055ae0: f841 0022    	str.w	r0, [r1, r2, lsl #2]
;                                 }
 8055ae4: e000         	b	0x8055ae8 <xTaskResumeAll+0x218> @ imm = #0x0
 8055ae6: e7ff         	b	0x8055ae8 <xTaskResumeAll+0x218> @ imm = #-0x2
;                                 --xPendedCounts;
 8055ae8: 9801         	ldr	r0, [sp, #0x4]
 8055aea: 3801         	subs	r0, #0x1
 8055aec: 9001         	str	r0, [sp, #0x4]
;                             } while( xPendedCounts > ( TickType_t ) 0U );
 8055aee: e7ff         	b	0x8055af0 <xTaskResumeAll+0x220> @ imm = #-0x2
 8055af0: 9801         	ldr	r0, [sp, #0x4]
 8055af2: 2800         	cmp	r0, #0x0
 8055af4: d1ea         	bne	0x8055acc <xTaskResumeAll+0x1fc> @ imm = #-0x2c
 8055af6: e7ff         	b	0x8055af8 <xTaskResumeAll+0x228> @ imm = #-0x2
;                             xPendedTicks = 0;
 8055af8: f240 0100    	movw	r1, #0x0
 8055afc: f2c0 0100    	movt	r1, #0x0
 8055b00: 2000         	movs	r0, #0x0
 8055b02: 6008         	str	r0, [r1]
;                         }
 8055b04: e000         	b	0x8055b08 <xTaskResumeAll+0x238> @ imm = #0x0
 8055b06: e7ff         	b	0x8055b08 <xTaskResumeAll+0x238> @ imm = #-0x2
;                     if( xYieldPendings[ xCoreID ] != pdFALSE )
 8055b08: 9905         	ldr	r1, [sp, #0x14]
 8055b0a: f240 0000    	movw	r0, #0x0
 8055b0e: f2c0 0000    	movt	r0, #0x0
 8055b12: f850 0021    	ldr.w	r0, [r0, r1, lsl #2]
 8055b16: b160         	cbz	r0, 0x8055b32 <xTaskResumeAll+0x262> @ imm = #0x18
 8055b18: e7ff         	b	0x8055b1a <xTaskResumeAll+0x24a> @ imm = #-0x2
 8055b1a: 2001         	movs	r0, #0x1
;                             xAlreadyYielded = pdTRUE;
 8055b1c: 9006         	str	r0, [sp, #0x18]
;                             taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxCurrentTCB );
 8055b1e: e7ff         	b	0x8055b20 <xTaskResumeAll+0x250> @ imm = #-0x2
 8055b20: f240 0000    	movw	r0, #0x0
 8055b24: f2c0 0000    	movt	r0, #0x0
 8055b28: 6800         	ldr	r0, [r0]
 8055b2a: f7ff fffe    	bl	0x8055b2a <xTaskResumeAll+0x25a> @ imm = #-0x4
 8055b2e: e7ff         	b	0x8055b30 <xTaskResumeAll+0x260> @ imm = #-0x2
;                     }
 8055b30: e000         	b	0x8055b34 <xTaskResumeAll+0x264> @ imm = #0x0
 8055b32: e7ff         	b	0x8055b34 <xTaskResumeAll+0x264> @ imm = #-0x2
;                 }
 8055b34: e7ff         	b	0x8055b36 <xTaskResumeAll+0x266> @ imm = #-0x2
;             }
 8055b36: e000         	b	0x8055b3a <xTaskResumeAll+0x26a> @ imm = #0x0
 8055b38: e7ff         	b	0x8055b3a <xTaskResumeAll+0x26a> @ imm = #-0x2
;         taskEXIT_CRITICAL();
 8055b3a: f7ff fffe    	bl	0x8055b3a <xTaskResumeAll+0x26a> @ imm = #-0x4
;     return xAlreadyYielded;
 8055b3e: 9806         	ldr	r0, [sp, #0x18]
 8055b40: b008         	add	sp, #0x20
 8055b42: bd80         	pop	{r7, pc}

08055b44 <vTaskDelay>:
;     {
 8055b44: b580         	push	{r7, lr}
 8055b46: 466f         	mov	r7, sp
 8055b48: b082         	sub	sp, #0x8
 8055b4a: 9001         	str	r0, [sp, #0x4]
 8055b4c: 2000         	movs	r0, #0x0
;         BaseType_t xAlreadyYielded = pdFALSE;
 8055b4e: 9000         	str	r0, [sp]
;         if( xTicksToDelay > ( TickType_t ) 0U )
 8055b50: 9801         	ldr	r0, [sp, #0x4]
 8055b52: b1b0         	cbz	r0, 0x8055b82 <vTaskDelay+0x3e> @ imm = #0x2c
 8055b54: e7ff         	b	0x8055b56 <vTaskDelay+0x12> @ imm = #-0x2
;             vTaskSuspendAll();
 8055b56: f7ff fffe    	bl	0x8055b56 <vTaskDelay+0x12> @ imm = #-0x4
;                 configASSERT( uxSchedulerSuspended == 1U );
 8055b5a: f240 0000    	movw	r0, #0x0
 8055b5e: f2c0 0000    	movt	r0, #0x0
 8055b62: 6800         	ldr	r0, [r0]
 8055b64: 2801         	cmp	r0, #0x1
 8055b66: d004         	beq	0x8055b72 <vTaskDelay+0x2e> @ imm = #0x8
 8055b68: e7ff         	b	0x8055b6a <vTaskDelay+0x26> @ imm = #-0x2
 8055b6a: f7ff fffe    	bl	0x8055b6a <vTaskDelay+0x26> @ imm = #-0x4
 8055b6e: e7ff         	b	0x8055b70 <vTaskDelay+0x2c> @ imm = #-0x2
 8055b70: e7fe         	b	0x8055b70 <vTaskDelay+0x2c> @ imm = #-0x4
;                 prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8055b72: 9801         	ldr	r0, [sp, #0x4]
 8055b74: 2100         	movs	r1, #0x0
 8055b76: f7ff fe27    	bl	0x80557c8 <prvAddCurrentTaskToDelayedList> @ imm = #-0x3b2
;             xAlreadyYielded = xTaskResumeAll();
 8055b7a: f7ff fffe    	bl	0x8055b7a <vTaskDelay+0x36> @ imm = #-0x4
 8055b7e: 9000         	str	r0, [sp]
;         }
 8055b80: e000         	b	0x8055b84 <vTaskDelay+0x40> @ imm = #0x0
 8055b82: e7ff         	b	0x8055b84 <vTaskDelay+0x40> @ imm = #-0x2
;         if( xAlreadyYielded == pdFALSE )
 8055b84: 9800         	ldr	r0, [sp]
 8055b86: b918         	cbnz	r0, 0x8055b90 <vTaskDelay+0x4c> @ imm = #0x6
 8055b88: e7ff         	b	0x8055b8a <vTaskDelay+0x46> @ imm = #-0x2
;             taskYIELD_WITHIN_API();
 8055b8a: f7ff fffe    	bl	0x8055b8a <vTaskDelay+0x46> @ imm = #-0x4
;         }
 8055b8e: e000         	b	0x8055b92 <vTaskDelay+0x4e> @ imm = #0x0
 8055b90: e7ff         	b	0x8055b92 <vTaskDelay+0x4e> @ imm = #-0x2
;     }
 8055b92: b002         	add	sp, #0x8
 8055b94: bd80         	pop	{r7, pc}

08055b96 <eTaskGetState>:
;     {
 8055b96: b580         	push	{r7, lr}
 8055b98: 466f         	mov	r7, sp
 8055b9a: b088         	sub	sp, #0x20
 8055b9c: 9007         	str	r0, [sp, #0x1c]
;         const TCB_t * const pxTCB = xTask;
 8055b9e: 9807         	ldr	r0, [sp, #0x1c]
 8055ba0: 9001         	str	r0, [sp, #0x4]
;         configASSERT( pxTCB );
 8055ba2: 9801         	ldr	r0, [sp, #0x4]
 8055ba4: b920         	cbnz	r0, 0x8055bb0 <eTaskGetState+0x1a> @ imm = #0x8
 8055ba6: e7ff         	b	0x8055ba8 <eTaskGetState+0x12> @ imm = #-0x2
 8055ba8: f7ff fffe    	bl	0x8055ba8 <eTaskGetState+0x12> @ imm = #-0x4
 8055bac: e7ff         	b	0x8055bae <eTaskGetState+0x18> @ imm = #-0x2
 8055bae: e7fe         	b	0x8055bae <eTaskGetState+0x18> @ imm = #-0x4
;             if( pxTCB == pxCurrentTCB )
 8055bb0: 9801         	ldr	r0, [sp, #0x4]
 8055bb2: f240 0100    	movw	r1, #0x0
 8055bb6: f2c0 0100    	movt	r1, #0x0
 8055bba: 6809         	ldr	r1, [r1]
 8055bbc: 4288         	cmp	r0, r1
 8055bbe: d104         	bne	0x8055bca <eTaskGetState+0x34> @ imm = #0x8
 8055bc0: e7ff         	b	0x8055bc2 <eTaskGetState+0x2c> @ imm = #-0x2
 8055bc2: 2000         	movs	r0, #0x0
;                 eReturn = eRunning;
 8055bc4: f807 0c05    	strb	r0, [r7, #-5]
;             }
 8055bc8: e076         	b	0x8055cb8 <eTaskGetState+0x122> @ imm = #0xec
;             taskENTER_CRITICAL();
 8055bca: f7ff fffe    	bl	0x8055bca <eTaskGetState+0x34> @ imm = #-0x4
;                 pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 8055bce: 9801         	ldr	r0, [sp, #0x4]
 8055bd0: f8d0 0090    	ldr.w	r0, [r0, #0x90]
 8055bd4: 9005         	str	r0, [sp, #0x14]
;                 pxEventList = listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) );
 8055bd6: 9801         	ldr	r0, [sp, #0x4]
 8055bd8: f8d0 00a4    	ldr.w	r0, [r0, #0xa4]
 8055bdc: 9004         	str	r0, [sp, #0x10]
;                 pxDelayedList = pxDelayedTaskList;
 8055bde: f240 0000    	movw	r0, #0x0
 8055be2: f2c0 0000    	movt	r0, #0x0
 8055be6: 6800         	ldr	r0, [r0]
 8055be8: 9003         	str	r0, [sp, #0xc]
;                 pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 8055bea: f240 0000    	movw	r0, #0x0
 8055bee: f2c0 0000    	movt	r0, #0x0
 8055bf2: 6800         	ldr	r0, [r0]
 8055bf4: 9002         	str	r0, [sp, #0x8]
;             taskEXIT_CRITICAL();
 8055bf6: f7ff fffe    	bl	0x8055bf6 <eTaskGetState+0x60> @ imm = #-0x4
;             if( pxEventList == &xPendingReadyList )
 8055bfa: 9804         	ldr	r0, [sp, #0x10]
 8055bfc: f240 0100    	movw	r1, #0x0
 8055c00: f2c0 0100    	movt	r1, #0x0
 8055c04: 4288         	cmp	r0, r1
 8055c06: d104         	bne	0x8055c12 <eTaskGetState+0x7c> @ imm = #0x8
 8055c08: e7ff         	b	0x8055c0a <eTaskGetState+0x74> @ imm = #-0x2
 8055c0a: 2001         	movs	r0, #0x1
;                 eReturn = eReady;
 8055c0c: f807 0c05    	strb	r0, [r7, #-5]
;             }
 8055c10: e051         	b	0x8055cb6 <eTaskGetState+0x120> @ imm = #0xa2
;             else if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 8055c12: 9805         	ldr	r0, [sp, #0x14]
 8055c14: 9903         	ldr	r1, [sp, #0xc]
 8055c16: 4288         	cmp	r0, r1
 8055c18: d005         	beq	0x8055c26 <eTaskGetState+0x90> @ imm = #0xa
 8055c1a: e7ff         	b	0x8055c1c <eTaskGetState+0x86> @ imm = #-0x2
 8055c1c: 9805         	ldr	r0, [sp, #0x14]
 8055c1e: 9902         	ldr	r1, [sp, #0x8]
 8055c20: 4288         	cmp	r0, r1
 8055c22: d104         	bne	0x8055c2e <eTaskGetState+0x98> @ imm = #0x8
 8055c24: e7ff         	b	0x8055c26 <eTaskGetState+0x90> @ imm = #-0x2
 8055c26: 2002         	movs	r0, #0x2
;                 eReturn = eBlocked;
 8055c28: f807 0c05    	strb	r0, [r7, #-5]
;             }
 8055c2c: e042         	b	0x8055cb4 <eTaskGetState+0x11e> @ imm = #0x84
;                 else if( pxStateList == &xSuspendedTaskList )
 8055c2e: 9805         	ldr	r0, [sp, #0x14]
 8055c30: f240 0100    	movw	r1, #0x0
 8055c34: f2c0 0100    	movt	r1, #0x0
 8055c38: 4288         	cmp	r0, r1
 8055c3a: d126         	bne	0x8055c8a <eTaskGetState+0xf4> @ imm = #0x4c
 8055c3c: e7ff         	b	0x8055c3e <eTaskGetState+0xa8> @ imm = #-0x2
;                     if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 8055c3e: 9801         	ldr	r0, [sp, #0x4]
 8055c40: f8d0 00a4    	ldr.w	r0, [r0, #0xa4]
 8055c44: b9e0         	cbnz	r0, 0x8055c80 <eTaskGetState+0xea> @ imm = #0x38
 8055c46: e7ff         	b	0x8055c48 <eTaskGetState+0xb2> @ imm = #-0x2
 8055c48: 2003         	movs	r0, #0x3
;                             eReturn = eSuspended;
 8055c4a: f807 0c05    	strb	r0, [r7, #-5]
 8055c4e: 2000         	movs	r0, #0x0
;                             for( x = ( BaseType_t ) 0; x < ( BaseType_t ) configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 8055c50: 9000         	str	r0, [sp]
 8055c52: e7ff         	b	0x8055c54 <eTaskGetState+0xbe> @ imm = #-0x2
 8055c54: 9800         	ldr	r0, [sp]
 8055c56: 2800         	cmp	r0, #0x0
 8055c58: dc11         	bgt	0x8055c7e <eTaskGetState+0xe8> @ imm = #0x22
 8055c5a: e7ff         	b	0x8055c5c <eTaskGetState+0xc6> @ imm = #-0x2
;                                 if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
 8055c5c: 9801         	ldr	r0, [sp, #0x4]
 8055c5e: 9900         	ldr	r1, [sp]
 8055c60: 4408         	add	r0, r1
 8055c62: f890 00d4    	ldrb.w	r0, [r0, #0xd4]
 8055c66: 2801         	cmp	r0, #0x1
 8055c68: d104         	bne	0x8055c74 <eTaskGetState+0xde> @ imm = #0x8
 8055c6a: e7ff         	b	0x8055c6c <eTaskGetState+0xd6> @ imm = #-0x2
 8055c6c: 2002         	movs	r0, #0x2
;                                     eReturn = eBlocked;
 8055c6e: f807 0c05    	strb	r0, [r7, #-5]
;                                     break;
 8055c72: e004         	b	0x8055c7e <eTaskGetState+0xe8> @ imm = #0x8
;                             }
 8055c74: e7ff         	b	0x8055c76 <eTaskGetState+0xe0> @ imm = #-0x2
;                             for( x = ( BaseType_t ) 0; x < ( BaseType_t ) configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 8055c76: 9800         	ldr	r0, [sp]
 8055c78: 3001         	adds	r0, #0x1
 8055c7a: 9000         	str	r0, [sp]
 8055c7c: e7ea         	b	0x8055c54 <eTaskGetState+0xbe> @ imm = #-0x2c
;                     }
 8055c7e: e003         	b	0x8055c88 <eTaskGetState+0xf2> @ imm = #0x6
 8055c80: 2002         	movs	r0, #0x2
;                         eReturn = eBlocked;
 8055c82: f807 0c05    	strb	r0, [r7, #-5]
 8055c86: e7ff         	b	0x8055c88 <eTaskGetState+0xf2> @ imm = #-0x2
;                 }
 8055c88: e013         	b	0x8055cb2 <eTaskGetState+0x11c> @ imm = #0x26
;                 else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 8055c8a: 9805         	ldr	r0, [sp, #0x14]
 8055c8c: f240 0100    	movw	r1, #0x0
 8055c90: f2c0 0100    	movt	r1, #0x0
 8055c94: 4288         	cmp	r0, r1
 8055c96: d003         	beq	0x8055ca0 <eTaskGetState+0x10a> @ imm = #0x6
 8055c98: e7ff         	b	0x8055c9a <eTaskGetState+0x104> @ imm = #-0x2
 8055c9a: 9805         	ldr	r0, [sp, #0x14]
 8055c9c: b920         	cbnz	r0, 0x8055ca8 <eTaskGetState+0x112> @ imm = #0x8
 8055c9e: e7ff         	b	0x8055ca0 <eTaskGetState+0x10a> @ imm = #-0x2
 8055ca0: 2004         	movs	r0, #0x4
;                     eReturn = eDeleted;
 8055ca2: f807 0c05    	strb	r0, [r7, #-5]
;                 }
 8055ca6: e003         	b	0x8055cb0 <eTaskGetState+0x11a> @ imm = #0x6
 8055ca8: 2001         	movs	r0, #0x1
;                     eReturn = eReady;
 8055caa: f807 0c05    	strb	r0, [r7, #-5]
 8055cae: e7ff         	b	0x8055cb0 <eTaskGetState+0x11a> @ imm = #-0x2
 8055cb0: e7ff         	b	0x8055cb2 <eTaskGetState+0x11c> @ imm = #-0x2
 8055cb2: e7ff         	b	0x8055cb4 <eTaskGetState+0x11e> @ imm = #-0x2
 8055cb4: e7ff         	b	0x8055cb6 <eTaskGetState+0x120> @ imm = #-0x2
 8055cb6: e7ff         	b	0x8055cb8 <eTaskGetState+0x122> @ imm = #-0x2
;         return eReturn;
 8055cb8: f817 0c05    	ldrb	r0, [r7, #-5]
 8055cbc: b008         	add	sp, #0x20
 8055cbe: bd80         	pop	{r7, pc}

08055cc0 <uxTaskPriorityGet>:
;     {
 8055cc0: b580         	push	{r7, lr}
 8055cc2: 466f         	mov	r7, sp
 8055cc4: b084         	sub	sp, #0x10
 8055cc6: 9003         	str	r0, [sp, #0xc]
;         taskENTER_CRITICAL();
 8055cc8: f7ff fffe    	bl	0x8055cc8 <uxTaskPriorityGet+0x8> @ imm = #-0x4
;             pxTCB = prvGetTCBFromHandle( xTask );
 8055ccc: 9803         	ldr	r0, [sp, #0xc]
 8055cce: b938         	cbnz	r0, 0x8055ce0 <uxTaskPriorityGet+0x20> @ imm = #0xe
 8055cd0: e7ff         	b	0x8055cd2 <uxTaskPriorityGet+0x12> @ imm = #-0x2
 8055cd2: f240 0000    	movw	r0, #0x0
 8055cd6: f2c0 0000    	movt	r0, #0x0
 8055cda: 6800         	ldr	r0, [r0]
 8055cdc: 9000         	str	r0, [sp]
 8055cde: e002         	b	0x8055ce6 <uxTaskPriorityGet+0x26> @ imm = #0x4
 8055ce0: 9803         	ldr	r0, [sp, #0xc]
 8055ce2: 9000         	str	r0, [sp]
 8055ce4: e7ff         	b	0x8055ce6 <uxTaskPriorityGet+0x26> @ imm = #-0x2
 8055ce6: 9800         	ldr	r0, [sp]
 8055ce8: 9002         	str	r0, [sp, #0x8]
;             uxReturn = pxTCB->uxPriority;
 8055cea: 9802         	ldr	r0, [sp, #0x8]
 8055cec: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 8055cf0: 9001         	str	r0, [sp, #0x4]
;         taskEXIT_CRITICAL();
 8055cf2: f7ff fffe    	bl	0x8055cf2 <uxTaskPriorityGet+0x32> @ imm = #-0x4
;         return uxReturn;
 8055cf6: 9801         	ldr	r0, [sp, #0x4]
 8055cf8: b004         	add	sp, #0x10
 8055cfa: bd80         	pop	{r7, pc}

08055cfc <uxTaskPriorityGetFromISR>:
;     {
 8055cfc: b580         	push	{r7, lr}
 8055cfe: 466f         	mov	r7, sp
 8055d00: b086         	sub	sp, #0x18
 8055d02: 9005         	str	r0, [sp, #0x14]
;         portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8055d04: f7ff fffe    	bl	0x8055d04 <uxTaskPriorityGetFromISR+0x8> @ imm = #-0x4
;         uxSavedInterruptStatus = taskENTER_CRITICAL_FROM_ISR();
 8055d08: f7ff fffe    	bl	0x8055d08 <uxTaskPriorityGetFromISR+0xc> @ imm = #-0x4
 8055d0c: 9002         	str	r0, [sp, #0x8]
;             pxTCB = prvGetTCBFromHandle( xTask );
 8055d0e: 9805         	ldr	r0, [sp, #0x14]
 8055d10: b938         	cbnz	r0, 0x8055d22 <uxTaskPriorityGetFromISR+0x26> @ imm = #0xe
 8055d12: e7ff         	b	0x8055d14 <uxTaskPriorityGetFromISR+0x18> @ imm = #-0x2
 8055d14: f240 0000    	movw	r0, #0x0
 8055d18: f2c0 0000    	movt	r0, #0x0
 8055d1c: 6800         	ldr	r0, [r0]
 8055d1e: 9001         	str	r0, [sp, #0x4]
 8055d20: e002         	b	0x8055d28 <uxTaskPriorityGetFromISR+0x2c> @ imm = #0x4
 8055d22: 9805         	ldr	r0, [sp, #0x14]
 8055d24: 9001         	str	r0, [sp, #0x4]
 8055d26: e7ff         	b	0x8055d28 <uxTaskPriorityGetFromISR+0x2c> @ imm = #-0x2
 8055d28: 9801         	ldr	r0, [sp, #0x4]
 8055d2a: 9004         	str	r0, [sp, #0x10]
;             uxReturn = pxTCB->uxPriority;
 8055d2c: 9804         	ldr	r0, [sp, #0x10]
 8055d2e: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 8055d32: 9003         	str	r0, [sp, #0xc]
;         taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );
 8055d34: 9802         	ldr	r0, [sp, #0x8]
 8055d36: f7ff fffe    	bl	0x8055d36 <uxTaskPriorityGetFromISR+0x3a> @ imm = #-0x4
;         return uxReturn;
 8055d3a: 9803         	ldr	r0, [sp, #0xc]
 8055d3c: b006         	add	sp, #0x18
 8055d3e: bd80         	pop	{r7, pc}

08055d40 <uxTaskBasePriorityGet>:
;     {
 8055d40: b580         	push	{r7, lr}
 8055d42: 466f         	mov	r7, sp
 8055d44: b084         	sub	sp, #0x10
 8055d46: 9003         	str	r0, [sp, #0xc]
;         taskENTER_CRITICAL();
 8055d48: f7ff fffe    	bl	0x8055d48 <uxTaskBasePriorityGet+0x8> @ imm = #-0x4
;             pxTCB = prvGetTCBFromHandle( xTask );
 8055d4c: 9803         	ldr	r0, [sp, #0xc]
 8055d4e: b938         	cbnz	r0, 0x8055d60 <uxTaskBasePriorityGet+0x20> @ imm = #0xe
 8055d50: e7ff         	b	0x8055d52 <uxTaskBasePriorityGet+0x12> @ imm = #-0x2
 8055d52: f240 0000    	movw	r0, #0x0
 8055d56: f2c0 0000    	movt	r0, #0x0
 8055d5a: 6800         	ldr	r0, [r0]
 8055d5c: 9000         	str	r0, [sp]
 8055d5e: e002         	b	0x8055d66 <uxTaskBasePriorityGet+0x26> @ imm = #0x4
 8055d60: 9803         	ldr	r0, [sp, #0xc]
 8055d62: 9000         	str	r0, [sp]
 8055d64: e7ff         	b	0x8055d66 <uxTaskBasePriorityGet+0x26> @ imm = #-0x2
 8055d66: 9800         	ldr	r0, [sp]
 8055d68: 9002         	str	r0, [sp, #0x8]
;             uxReturn = pxTCB->uxBasePriority;
 8055d6a: 9802         	ldr	r0, [sp, #0x8]
 8055d6c: f8d0 00c8    	ldr.w	r0, [r0, #0xc8]
 8055d70: 9001         	str	r0, [sp, #0x4]
;         taskEXIT_CRITICAL();
 8055d72: f7ff fffe    	bl	0x8055d72 <uxTaskBasePriorityGet+0x32> @ imm = #-0x4
;         return uxReturn;
 8055d76: 9801         	ldr	r0, [sp, #0x4]
 8055d78: b004         	add	sp, #0x10
 8055d7a: bd80         	pop	{r7, pc}

08055d7c <uxTaskBasePriorityGetFromISR>:
;     {
 8055d7c: b580         	push	{r7, lr}
 8055d7e: 466f         	mov	r7, sp
 8055d80: b086         	sub	sp, #0x18
 8055d82: 9005         	str	r0, [sp, #0x14]
;         portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8055d84: f7ff fffe    	bl	0x8055d84 <uxTaskBasePriorityGetFromISR+0x8> @ imm = #-0x4
;         uxSavedInterruptStatus = taskENTER_CRITICAL_FROM_ISR();
 8055d88: f7ff fffe    	bl	0x8055d88 <uxTaskBasePriorityGetFromISR+0xc> @ imm = #-0x4
 8055d8c: 9002         	str	r0, [sp, #0x8]
;             pxTCB = prvGetTCBFromHandle( xTask );
 8055d8e: 9805         	ldr	r0, [sp, #0x14]
 8055d90: b938         	cbnz	r0, 0x8055da2 <uxTaskBasePriorityGetFromISR+0x26> @ imm = #0xe
 8055d92: e7ff         	b	0x8055d94 <uxTaskBasePriorityGetFromISR+0x18> @ imm = #-0x2
 8055d94: f240 0000    	movw	r0, #0x0
 8055d98: f2c0 0000    	movt	r0, #0x0
 8055d9c: 6800         	ldr	r0, [r0]
 8055d9e: 9001         	str	r0, [sp, #0x4]
 8055da0: e002         	b	0x8055da8 <uxTaskBasePriorityGetFromISR+0x2c> @ imm = #0x4
 8055da2: 9805         	ldr	r0, [sp, #0x14]
 8055da4: 9001         	str	r0, [sp, #0x4]
 8055da6: e7ff         	b	0x8055da8 <uxTaskBasePriorityGetFromISR+0x2c> @ imm = #-0x2
 8055da8: 9801         	ldr	r0, [sp, #0x4]
 8055daa: 9004         	str	r0, [sp, #0x10]
;             uxReturn = pxTCB->uxBasePriority;
 8055dac: 9804         	ldr	r0, [sp, #0x10]
 8055dae: f8d0 00c8    	ldr.w	r0, [r0, #0xc8]
 8055db2: 9003         	str	r0, [sp, #0xc]
;         taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );
 8055db4: 9802         	ldr	r0, [sp, #0x8]
 8055db6: f7ff fffe    	bl	0x8055db6 <uxTaskBasePriorityGetFromISR+0x3a> @ imm = #-0x4
;         return uxReturn;
 8055dba: 9803         	ldr	r0, [sp, #0xc]
 8055dbc: b006         	add	sp, #0x18
 8055dbe: bd80         	pop	{r7, pc}

08055dc0 <vTaskPrioritySet>:
;     {
 8055dc0: b580         	push	{r7, lr}
 8055dc2: 466f         	mov	r7, sp
 8055dc4: b088         	sub	sp, #0x20
 8055dc6: 9007         	str	r0, [sp, #0x1c]
 8055dc8: 9106         	str	r1, [sp, #0x18]
 8055dca: 2000         	movs	r0, #0x0
;         BaseType_t xYieldRequired = pdFALSE;
 8055dcc: 9002         	str	r0, [sp, #0x8]
;         configASSERT( uxNewPriority < configMAX_PRIORITIES );
 8055dce: 9806         	ldr	r0, [sp, #0x18]
 8055dd0: 2810         	cmp	r0, #0x10
 8055dd2: d304         	blo	0x8055dde <vTaskPrioritySet+0x1e> @ imm = #0x8
 8055dd4: e7ff         	b	0x8055dd6 <vTaskPrioritySet+0x16> @ imm = #-0x2
 8055dd6: f7ff fffe    	bl	0x8055dd6 <vTaskPrioritySet+0x16> @ imm = #-0x4
 8055dda: e7ff         	b	0x8055ddc <vTaskPrioritySet+0x1c> @ imm = #-0x2
 8055ddc: e7fe         	b	0x8055ddc <vTaskPrioritySet+0x1c> @ imm = #-0x4
;         if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8055dde: 9806         	ldr	r0, [sp, #0x18]
 8055de0: 2810         	cmp	r0, #0x10
 8055de2: d303         	blo	0x8055dec <vTaskPrioritySet+0x2c> @ imm = #0x6
 8055de4: e7ff         	b	0x8055de6 <vTaskPrioritySet+0x26> @ imm = #-0x2
 8055de6: 200f         	movs	r0, #0xf
;             uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8055de8: 9006         	str	r0, [sp, #0x18]
;         }
 8055dea: e000         	b	0x8055dee <vTaskPrioritySet+0x2e> @ imm = #0x0
 8055dec: e7ff         	b	0x8055dee <vTaskPrioritySet+0x2e> @ imm = #-0x2
;         taskENTER_CRITICAL();
 8055dee: f7ff fffe    	bl	0x8055dee <vTaskPrioritySet+0x2e> @ imm = #-0x4
;             pxTCB = prvGetTCBFromHandle( xTask );
 8055df2: 9807         	ldr	r0, [sp, #0x1c]
 8055df4: b938         	cbnz	r0, 0x8055e06 <vTaskPrioritySet+0x46> @ imm = #0xe
 8055df6: e7ff         	b	0x8055df8 <vTaskPrioritySet+0x38> @ imm = #-0x2
 8055df8: f240 0000    	movw	r0, #0x0
 8055dfc: f2c0 0000    	movt	r0, #0x0
 8055e00: 6800         	ldr	r0, [r0]
 8055e02: 9000         	str	r0, [sp]
 8055e04: e002         	b	0x8055e0c <vTaskPrioritySet+0x4c> @ imm = #0x4
 8055e06: 9807         	ldr	r0, [sp, #0x1c]
 8055e08: 9000         	str	r0, [sp]
 8055e0a: e7ff         	b	0x8055e0c <vTaskPrioritySet+0x4c> @ imm = #-0x2
 8055e0c: 9800         	ldr	r0, [sp]
 8055e0e: 9005         	str	r0, [sp, #0x14]
;                 uxCurrentBasePriority = pxTCB->uxBasePriority;
 8055e10: 9805         	ldr	r0, [sp, #0x14]
 8055e12: f8d0 00c8    	ldr.w	r0, [r0, #0xc8]
 8055e16: 9004         	str	r0, [sp, #0x10]
;             if( uxCurrentBasePriority != uxNewPriority )
 8055e18: 9804         	ldr	r0, [sp, #0x10]
 8055e1a: 9906         	ldr	r1, [sp, #0x18]
 8055e1c: 4288         	cmp	r0, r1
 8055e1e: f000 80ca    	beq.w	0x8055fb6 <vTaskPrioritySet+0x1f6> @ imm = #0x194
 8055e22: e7ff         	b	0x8055e24 <vTaskPrioritySet+0x64> @ imm = #-0x2
;                 if( uxNewPriority > uxCurrentBasePriority )
 8055e24: 9806         	ldr	r0, [sp, #0x18]
 8055e26: 9904         	ldr	r1, [sp, #0x10]
 8055e28: 4288         	cmp	r0, r1
 8055e2a: d91b         	bls	0x8055e64 <vTaskPrioritySet+0xa4> @ imm = #0x36
 8055e2c: e7ff         	b	0x8055e2e <vTaskPrioritySet+0x6e> @ imm = #-0x2
;                         if( pxTCB != pxCurrentTCB )
 8055e2e: 9805         	ldr	r0, [sp, #0x14]
 8055e30: f240 0100    	movw	r1, #0x0
 8055e34: f2c0 0100    	movt	r1, #0x0
 8055e38: 6809         	ldr	r1, [r1]
 8055e3a: 4288         	cmp	r0, r1
 8055e3c: d010         	beq	0x8055e60 <vTaskPrioritySet+0xa0> @ imm = #0x20
 8055e3e: e7ff         	b	0x8055e40 <vTaskPrioritySet+0x80> @ imm = #-0x2
;                             if( uxNewPriority > pxCurrentTCB->uxPriority )
 8055e40: 9806         	ldr	r0, [sp, #0x18]
 8055e42: f240 0100    	movw	r1, #0x0
 8055e46: f2c0 0100    	movt	r1, #0x0
 8055e4a: 6809         	ldr	r1, [r1]
 8055e4c: f8d1 10a8    	ldr.w	r1, [r1, #0xa8]
 8055e50: 4288         	cmp	r0, r1
 8055e52: d903         	bls	0x8055e5c <vTaskPrioritySet+0x9c> @ imm = #0x6
 8055e54: e7ff         	b	0x8055e56 <vTaskPrioritySet+0x96> @ imm = #-0x2
 8055e56: 2001         	movs	r0, #0x1
;                                 xYieldRequired = pdTRUE;
 8055e58: 9002         	str	r0, [sp, #0x8]
;                             }
 8055e5a: e000         	b	0x8055e5e <vTaskPrioritySet+0x9e> @ imm = #0x0
 8055e5c: e7ff         	b	0x8055e5e <vTaskPrioritySet+0x9e> @ imm = #-0x2
;                         }
 8055e5e: e000         	b	0x8055e62 <vTaskPrioritySet+0xa2> @ imm = #0x0
 8055e60: e7ff         	b	0x8055e62 <vTaskPrioritySet+0xa2> @ imm = #-0x2
;                 }
 8055e62: e00d         	b	0x8055e80 <vTaskPrioritySet+0xc0> @ imm = #0x1a
;                 else if( taskTASK_IS_RUNNING( pxTCB ) == pdTRUE )
 8055e64: 9805         	ldr	r0, [sp, #0x14]
 8055e66: f240 0100    	movw	r1, #0x0
 8055e6a: f2c0 0100    	movt	r1, #0x0
 8055e6e: 6809         	ldr	r1, [r1]
 8055e70: 4288         	cmp	r0, r1
 8055e72: d103         	bne	0x8055e7c <vTaskPrioritySet+0xbc> @ imm = #0x6
 8055e74: e7ff         	b	0x8055e76 <vTaskPrioritySet+0xb6> @ imm = #-0x2
 8055e76: 2001         	movs	r0, #0x1
;                         xYieldRequired = pdTRUE;
 8055e78: 9002         	str	r0, [sp, #0x8]
;                 }
 8055e7a: e000         	b	0x8055e7e <vTaskPrioritySet+0xbe> @ imm = #0x0
 8055e7c: e7ff         	b	0x8055e7e <vTaskPrioritySet+0xbe> @ imm = #-0x2
 8055e7e: e7ff         	b	0x8055e80 <vTaskPrioritySet+0xc0> @ imm = #-0x2
;                 uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8055e80: 9805         	ldr	r0, [sp, #0x14]
 8055e82: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 8055e86: 9003         	str	r0, [sp, #0xc]
;                     if( ( pxTCB->uxBasePriority == pxTCB->uxPriority ) || ( uxNewPriority > pxTCB->uxPriority ) )
 8055e88: 9805         	ldr	r0, [sp, #0x14]
 8055e8a: f8d0 10a8    	ldr.w	r1, [r0, #0xa8]
 8055e8e: f8d0 00c8    	ldr.w	r0, [r0, #0xc8]
 8055e92: 4288         	cmp	r0, r1
 8055e94: d007         	beq	0x8055ea6 <vTaskPrioritySet+0xe6> @ imm = #0xe
 8055e96: e7ff         	b	0x8055e98 <vTaskPrioritySet+0xd8> @ imm = #-0x2
 8055e98: 9806         	ldr	r0, [sp, #0x18]
 8055e9a: 9905         	ldr	r1, [sp, #0x14]
 8055e9c: f8d1 10a8    	ldr.w	r1, [r1, #0xa8]
 8055ea0: 4288         	cmp	r0, r1
 8055ea2: d905         	bls	0x8055eb0 <vTaskPrioritySet+0xf0> @ imm = #0xa
 8055ea4: e7ff         	b	0x8055ea6 <vTaskPrioritySet+0xe6> @ imm = #-0x2
;                         pxTCB->uxPriority = uxNewPriority;
 8055ea6: 9806         	ldr	r0, [sp, #0x18]
 8055ea8: 9905         	ldr	r1, [sp, #0x14]
 8055eaa: f8c1 00a8    	str.w	r0, [r1, #0xa8]
;                     }
 8055eae: e000         	b	0x8055eb2 <vTaskPrioritySet+0xf2> @ imm = #0x0
 8055eb0: e7ff         	b	0x8055eb2 <vTaskPrioritySet+0xf2> @ imm = #-0x2
;                     pxTCB->uxBasePriority = uxNewPriority;
 8055eb2: 9806         	ldr	r0, [sp, #0x18]
 8055eb4: 9905         	ldr	r1, [sp, #0x14]
 8055eb6: f8c1 00c8    	str.w	r0, [r1, #0xc8]
;                 if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8055eba: 9805         	ldr	r0, [sp, #0x14]
 8055ebc: f890 0097    	ldrb.w	r0, [r0, #0x97]
 8055ec0: 0600         	lsls	r0, r0, #0x18
 8055ec2: 2800         	cmp	r0, #0x0
 8055ec4: d407         	bmi	0x8055ed6 <vTaskPrioritySet+0x116> @ imm = #0xe
 8055ec6: e7ff         	b	0x8055ec8 <vTaskPrioritySet+0x108> @ imm = #-0x2
;                     listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8055ec8: 9806         	ldr	r0, [sp, #0x18]
 8055eca: f1c0 0010    	rsb.w	r0, r0, #0x10
 8055ece: 9905         	ldr	r1, [sp, #0x14]
 8055ed0: f8c1 0094    	str.w	r0, [r1, #0x94]
;                 }
 8055ed4: e000         	b	0x8055ed8 <vTaskPrioritySet+0x118> @ imm = #0x0
 8055ed6: e7ff         	b	0x8055ed8 <vTaskPrioritySet+0x118> @ imm = #-0x2
;                 if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8055ed8: 9805         	ldr	r0, [sp, #0x14]
 8055eda: f8d0 0090    	ldr.w	r0, [r0, #0x90]
 8055ede: 9903         	ldr	r1, [sp, #0xc]
 8055ee0: eb01 0281    	add.w	r2, r1, r1, lsl #2
 8055ee4: f240 0100    	movw	r1, #0x0
 8055ee8: f2c0 0100    	movt	r1, #0x0
 8055eec: eb01 0182    	add.w	r1, r1, r2, lsl #2
 8055ef0: 4288         	cmp	r0, r1
 8055ef2: d155         	bne	0x8055fa0 <vTaskPrioritySet+0x1e0> @ imm = #0xaa
 8055ef4: e7ff         	b	0x8055ef6 <vTaskPrioritySet+0x136> @ imm = #-0x2
;                     if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8055ef6: 9805         	ldr	r0, [sp, #0x14]
 8055ef8: 3080         	adds	r0, #0x80
 8055efa: f7ff fffe    	bl	0x8055efa <vTaskPrioritySet+0x13a> @ imm = #-0x4
 8055efe: b908         	cbnz	r0, 0x8055f04 <vTaskPrioritySet+0x144> @ imm = #0x2
 8055f00: e7ff         	b	0x8055f02 <vTaskPrioritySet+0x142> @ imm = #-0x2
;                     }
 8055f02: e000         	b	0x8055f06 <vTaskPrioritySet+0x146> @ imm = #0x0
 8055f04: e7ff         	b	0x8055f06 <vTaskPrioritySet+0x146> @ imm = #-0x2
;                     prvAddTaskToReadyList( pxTCB );
 8055f06: e7ff         	b	0x8055f08 <vTaskPrioritySet+0x148> @ imm = #-0x2
 8055f08: e7ff         	b	0x8055f0a <vTaskPrioritySet+0x14a> @ imm = #-0x2
 8055f0a: 9805         	ldr	r0, [sp, #0x14]
 8055f0c: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 8055f10: f240 0100    	movw	r1, #0x0
 8055f14: f2c0 0100    	movt	r1, #0x0
 8055f18: 6809         	ldr	r1, [r1]
 8055f1a: 4288         	cmp	r0, r1
 8055f1c: d909         	bls	0x8055f32 <vTaskPrioritySet+0x172> @ imm = #0x12
 8055f1e: e7ff         	b	0x8055f20 <vTaskPrioritySet+0x160> @ imm = #-0x2
 8055f20: 9805         	ldr	r0, [sp, #0x14]
 8055f22: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 8055f26: f240 0100    	movw	r1, #0x0
 8055f2a: f2c0 0100    	movt	r1, #0x0
 8055f2e: 6008         	str	r0, [r1]
 8055f30: e7ff         	b	0x8055f32 <vTaskPrioritySet+0x172> @ imm = #-0x2
 8055f32: e7ff         	b	0x8055f34 <vTaskPrioritySet+0x174> @ imm = #-0x2
 8055f34: e7ff         	b	0x8055f36 <vTaskPrioritySet+0x176> @ imm = #-0x2
 8055f36: 9805         	ldr	r0, [sp, #0x14]
 8055f38: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 8055f3c: eb00 0080    	add.w	r0, r0, r0, lsl #2
 8055f40: f240 0100    	movw	r1, #0x0
 8055f44: f2c0 0100    	movt	r1, #0x0
 8055f48: eb01 0080    	add.w	r0, r1, r0, lsl #2
 8055f4c: 6840         	ldr	r0, [r0, #0x4]
 8055f4e: 9001         	str	r0, [sp, #0x4]
 8055f50: 9801         	ldr	r0, [sp, #0x4]
 8055f52: 9a05         	ldr	r2, [sp, #0x14]
 8055f54: f8c2 0084    	str.w	r0, [r2, #0x84]
 8055f58: 9801         	ldr	r0, [sp, #0x4]
 8055f5a: 6880         	ldr	r0, [r0, #0x8]
 8055f5c: 9a05         	ldr	r2, [sp, #0x14]
 8055f5e: f8c2 0088    	str.w	r0, [r2, #0x88]
 8055f62: 9805         	ldr	r0, [sp, #0x14]
 8055f64: 3080         	adds	r0, #0x80
 8055f66: 9a01         	ldr	r2, [sp, #0x4]
 8055f68: 6892         	ldr	r2, [r2, #0x8]
 8055f6a: 6050         	str	r0, [r2, #0x4]
 8055f6c: 9805         	ldr	r0, [sp, #0x14]
 8055f6e: 3080         	adds	r0, #0x80
 8055f70: 9a01         	ldr	r2, [sp, #0x4]
 8055f72: 6090         	str	r0, [r2, #0x8]
 8055f74: 9a05         	ldr	r2, [sp, #0x14]
 8055f76: f8d2 00a8    	ldr.w	r0, [r2, #0xa8]
 8055f7a: eb00 0080    	add.w	r0, r0, r0, lsl #2
 8055f7e: eb01 0080    	add.w	r0, r1, r0, lsl #2
 8055f82: f8c2 0090    	str.w	r0, [r2, #0x90]
 8055f86: 9805         	ldr	r0, [sp, #0x14]
 8055f88: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 8055f8c: eb00 0280    	add.w	r2, r0, r0, lsl #2
 8055f90: f851 0022    	ldr.w	r0, [r1, r2, lsl #2]
 8055f94: 3001         	adds	r0, #0x1
 8055f96: f841 0022    	str.w	r0, [r1, r2, lsl #2]
 8055f9a: e7ff         	b	0x8055f9c <vTaskPrioritySet+0x1dc> @ imm = #-0x2
 8055f9c: e7ff         	b	0x8055f9e <vTaskPrioritySet+0x1de> @ imm = #-0x2
;                 }
 8055f9e: e000         	b	0x8055fa2 <vTaskPrioritySet+0x1e2> @ imm = #0x0
 8055fa0: e7ff         	b	0x8055fa2 <vTaskPrioritySet+0x1e2> @ imm = #-0x2
;                 if( xYieldRequired != pdFALSE )
 8055fa2: 9802         	ldr	r0, [sp, #0x8]
 8055fa4: b128         	cbz	r0, 0x8055fb2 <vTaskPrioritySet+0x1f2> @ imm = #0xa
 8055fa6: e7ff         	b	0x8055fa8 <vTaskPrioritySet+0x1e8> @ imm = #-0x2
;                     taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxTCB );
 8055fa8: e7ff         	b	0x8055faa <vTaskPrioritySet+0x1ea> @ imm = #-0x2
 8055faa: f7ff fffe    	bl	0x8055faa <vTaskPrioritySet+0x1ea> @ imm = #-0x4
 8055fae: e7ff         	b	0x8055fb0 <vTaskPrioritySet+0x1f0> @ imm = #-0x2
;                 }
 8055fb0: e000         	b	0x8055fb4 <vTaskPrioritySet+0x1f4> @ imm = #0x0
 8055fb2: e7ff         	b	0x8055fb4 <vTaskPrioritySet+0x1f4> @ imm = #-0x2
;             }
 8055fb4: e7ff         	b	0x8055fb6 <vTaskPrioritySet+0x1f6> @ imm = #-0x2
;         taskEXIT_CRITICAL();
 8055fb6: f7ff fffe    	bl	0x8055fb6 <vTaskPrioritySet+0x1f6> @ imm = #-0x4
;     }
 8055fba: b008         	add	sp, #0x20
 8055fbc: bd80         	pop	{r7, pc}

08055fbe <vTaskSuspend>:
;     {
 8055fbe: b580         	push	{r7, lr}
 8055fc0: 466f         	mov	r7, sp
 8055fc2: b084         	sub	sp, #0x10
 8055fc4: 9003         	str	r0, [sp, #0xc]
;         taskENTER_CRITICAL();
 8055fc6: f7ff fffe    	bl	0x8055fc6 <vTaskSuspend+0x8> @ imm = #-0x4
;             pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8055fca: 9803         	ldr	r0, [sp, #0xc]
 8055fcc: b938         	cbnz	r0, 0x8055fde <vTaskSuspend+0x20> @ imm = #0xe
 8055fce: e7ff         	b	0x8055fd0 <vTaskSuspend+0x12> @ imm = #-0x2
 8055fd0: f240 0000    	movw	r0, #0x0
 8055fd4: f2c0 0000    	movt	r0, #0x0
 8055fd8: 6800         	ldr	r0, [r0]
 8055fda: 9000         	str	r0, [sp]
 8055fdc: e002         	b	0x8055fe4 <vTaskSuspend+0x26> @ imm = #0x4
 8055fde: 9803         	ldr	r0, [sp, #0xc]
 8055fe0: 9000         	str	r0, [sp]
 8055fe2: e7ff         	b	0x8055fe4 <vTaskSuspend+0x26> @ imm = #-0x2
 8055fe4: 9800         	ldr	r0, [sp]
 8055fe6: 9002         	str	r0, [sp, #0x8]
;             if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8055fe8: 9802         	ldr	r0, [sp, #0x8]
 8055fea: 3080         	adds	r0, #0x80
 8055fec: f7ff fffe    	bl	0x8055fec <vTaskSuspend+0x2e> @ imm = #-0x4
 8055ff0: b908         	cbnz	r0, 0x8055ff6 <vTaskSuspend+0x38> @ imm = #0x2
 8055ff2: e7ff         	b	0x8055ff4 <vTaskSuspend+0x36> @ imm = #-0x2
;             }
 8055ff4: e000         	b	0x8055ff8 <vTaskSuspend+0x3a> @ imm = #0x0
 8055ff6: e7ff         	b	0x8055ff8 <vTaskSuspend+0x3a> @ imm = #-0x2
;             if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8055ff8: 9802         	ldr	r0, [sp, #0x8]
 8055ffa: f8d0 00a4    	ldr.w	r0, [r0, #0xa4]
 8055ffe: b128         	cbz	r0, 0x805600c <vTaskSuspend+0x4e> @ imm = #0xa
 8056000: e7ff         	b	0x8056002 <vTaskSuspend+0x44> @ imm = #-0x2
;                 ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8056002: 9802         	ldr	r0, [sp, #0x8]
 8056004: 3094         	adds	r0, #0x94
 8056006: f7ff fffe    	bl	0x8056006 <vTaskSuspend+0x48> @ imm = #-0x4
;             }
 805600a: e000         	b	0x805600e <vTaskSuspend+0x50> @ imm = #0x0
 805600c: e7ff         	b	0x805600e <vTaskSuspend+0x50> @ imm = #-0x2
;             vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 805600e: 9802         	ldr	r0, [sp, #0x8]
 8056010: f100 0180    	add.w	r1, r0, #0x80
 8056014: f240 0000    	movw	r0, #0x0
 8056018: f2c0 0000    	movt	r0, #0x0
 805601c: f7ff fffe    	bl	0x805601c <vTaskSuspend+0x5e> @ imm = #-0x4
 8056020: 2000         	movs	r0, #0x0
;                 for( x = ( BaseType_t ) 0; x < ( BaseType_t ) configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 8056022: 9001         	str	r0, [sp, #0x4]
 8056024: e7ff         	b	0x8056026 <vTaskSuspend+0x68> @ imm = #-0x2
 8056026: 9801         	ldr	r0, [sp, #0x4]
 8056028: 2800         	cmp	r0, #0x0
 805602a: dc14         	bgt	0x8056056 <vTaskSuspend+0x98> @ imm = #0x28
 805602c: e7ff         	b	0x805602e <vTaskSuspend+0x70> @ imm = #-0x2
;                     if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
 805602e: 9802         	ldr	r0, [sp, #0x8]
 8056030: 9901         	ldr	r1, [sp, #0x4]
 8056032: 4408         	add	r0, r1
 8056034: f890 00d4    	ldrb.w	r0, [r0, #0xd4]
 8056038: 2801         	cmp	r0, #0x1
 805603a: d107         	bne	0x805604c <vTaskSuspend+0x8e> @ imm = #0xe
 805603c: e7ff         	b	0x805603e <vTaskSuspend+0x80> @ imm = #-0x2
;                         pxTCB->ucNotifyState[ x ] = taskNOT_WAITING_NOTIFICATION;
 805603e: 9802         	ldr	r0, [sp, #0x8]
 8056040: 9901         	ldr	r1, [sp, #0x4]
 8056042: 4401         	add	r1, r0
 8056044: 2000         	movs	r0, #0x0
 8056046: f881 00d4    	strb.w	r0, [r1, #0xd4]
;                     }
 805604a: e7ff         	b	0x805604c <vTaskSuspend+0x8e> @ imm = #-0x2
;                 }
 805604c: e7ff         	b	0x805604e <vTaskSuspend+0x90> @ imm = #-0x2
;                 for( x = ( BaseType_t ) 0; x < ( BaseType_t ) configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 805604e: 9801         	ldr	r0, [sp, #0x4]
 8056050: 3001         	adds	r0, #0x1
 8056052: 9001         	str	r0, [sp, #0x4]
 8056054: e7e7         	b	0x8056026 <vTaskSuspend+0x68> @ imm = #-0x32
;             taskEXIT_CRITICAL();
 8056056: f7ff fffe    	bl	0x8056056 <vTaskSuspend+0x98> @ imm = #-0x4
;             if( xSchedulerRunning != pdFALSE )
 805605a: f240 0000    	movw	r0, #0x0
 805605e: f2c0 0000    	movt	r0, #0x0
 8056062: 6800         	ldr	r0, [r0]
 8056064: b138         	cbz	r0, 0x8056076 <vTaskSuspend+0xb8> @ imm = #0xe
 8056066: e7ff         	b	0x8056068 <vTaskSuspend+0xaa> @ imm = #-0x2
;                 taskENTER_CRITICAL();
 8056068: f7ff fffe    	bl	0x8056068 <vTaskSuspend+0xaa> @ imm = #-0x4
;                     prvResetNextTaskUnblockTime();
 805606c: f7ff faed    	bl	0x805564a <prvResetNextTaskUnblockTime> @ imm = #-0xa26
;                 taskEXIT_CRITICAL();
 8056070: f7ff fffe    	bl	0x8056070 <vTaskSuspend+0xb2> @ imm = #-0x4
;             }
 8056074: e000         	b	0x8056078 <vTaskSuspend+0xba> @ imm = #0x0
 8056076: e7ff         	b	0x8056078 <vTaskSuspend+0xba> @ imm = #-0x2
;             if( pxTCB == pxCurrentTCB )
 8056078: 9802         	ldr	r0, [sp, #0x8]
 805607a: f240 0100    	movw	r1, #0x0
 805607e: f2c0 0100    	movt	r1, #0x0
 8056082: 6809         	ldr	r1, [r1]
 8056084: 4288         	cmp	r0, r1
 8056086: d12e         	bne	0x80560e6 <vTaskSuspend+0x128> @ imm = #0x5c
 8056088: e7ff         	b	0x805608a <vTaskSuspend+0xcc> @ imm = #-0x2
;                 if( xSchedulerRunning != pdFALSE )
 805608a: f240 0000    	movw	r0, #0x0
 805608e: f2c0 0000    	movt	r0, #0x0
 8056092: 6800         	ldr	r0, [r0]
 8056094: b170         	cbz	r0, 0x80560b4 <vTaskSuspend+0xf6> @ imm = #0x1c
 8056096: e7ff         	b	0x8056098 <vTaskSuspend+0xda> @ imm = #-0x2
;                     configASSERT( uxSchedulerSuspended == 0 );
 8056098: f240 0000    	movw	r0, #0x0
 805609c: f2c0 0000    	movt	r0, #0x0
 80560a0: 6800         	ldr	r0, [r0]
 80560a2: b120         	cbz	r0, 0x80560ae <vTaskSuspend+0xf0> @ imm = #0x8
 80560a4: e7ff         	b	0x80560a6 <vTaskSuspend+0xe8> @ imm = #-0x2
 80560a6: f7ff fffe    	bl	0x80560a6 <vTaskSuspend+0xe8> @ imm = #-0x4
 80560aa: e7ff         	b	0x80560ac <vTaskSuspend+0xee> @ imm = #-0x2
 80560ac: e7fe         	b	0x80560ac <vTaskSuspend+0xee> @ imm = #-0x4
;                     portYIELD_WITHIN_API();
 80560ae: f7ff fffe    	bl	0x80560ae <vTaskSuspend+0xf0> @ imm = #-0x4
;                 }
 80560b2: e017         	b	0x80560e4 <vTaskSuspend+0x126> @ imm = #0x2e
;                     if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 80560b4: f240 0000    	movw	r0, #0x0
 80560b8: f2c0 0000    	movt	r0, #0x0
 80560bc: 6800         	ldr	r0, [r0]
 80560be: f240 0100    	movw	r1, #0x0
 80560c2: f2c0 0100    	movt	r1, #0x0
 80560c6: 6809         	ldr	r1, [r1]
 80560c8: 4288         	cmp	r0, r1
 80560ca: d107         	bne	0x80560dc <vTaskSuspend+0x11e> @ imm = #0xe
 80560cc: e7ff         	b	0x80560ce <vTaskSuspend+0x110> @ imm = #-0x2
;                         pxCurrentTCB = NULL;
 80560ce: f240 0100    	movw	r1, #0x0
 80560d2: f2c0 0100    	movt	r1, #0x0
 80560d6: 2000         	movs	r0, #0x0
 80560d8: 6008         	str	r0, [r1]
;                     }
 80560da: e002         	b	0x80560e2 <vTaskSuspend+0x124> @ imm = #0x4
;                         vTaskSwitchContext();
 80560dc: f7ff fffe    	bl	0x80560dc <vTaskSuspend+0x11e> @ imm = #-0x4
 80560e0: e7ff         	b	0x80560e2 <vTaskSuspend+0x124> @ imm = #-0x2
 80560e2: e7ff         	b	0x80560e4 <vTaskSuspend+0x126> @ imm = #-0x2
;             }
 80560e4: e000         	b	0x80560e8 <vTaskSuspend+0x12a> @ imm = #0x0
 80560e6: e7ff         	b	0x80560e8 <vTaskSuspend+0x12a> @ imm = #-0x2
;     }
 80560e8: b004         	add	sp, #0x10
 80560ea: bd80         	pop	{r7, pc}

080560ec <vTaskSwitchContext>:
;     {
 80560ec: b580         	push	{r7, lr}
 80560ee: 466f         	mov	r7, sp
 80560f0: b082         	sub	sp, #0x8
;         if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 80560f2: f240 0000    	movw	r0, #0x0
 80560f6: f2c0 0000    	movt	r0, #0x0
 80560fa: 6800         	ldr	r0, [r0]
 80560fc: b138         	cbz	r0, 0x805610e <vTaskSwitchContext+0x22> @ imm = #0xe
 80560fe: e7ff         	b	0x8056100 <vTaskSwitchContext+0x14> @ imm = #-0x2
;             xYieldPendings[ 0 ] = pdTRUE;
 8056100: f240 0100    	movw	r1, #0x0
 8056104: f2c0 0100    	movt	r1, #0x0
 8056108: 2001         	movs	r0, #0x1
 805610a: 6008         	str	r0, [r1]
;         }
 805610c: e04d         	b	0x80561aa <vTaskSwitchContext+0xbe> @ imm = #0x9a
;             xYieldPendings[ 0 ] = pdFALSE;
 805610e: f240 0100    	movw	r1, #0x0
 8056112: f2c0 0100    	movt	r1, #0x0
 8056116: 2000         	movs	r0, #0x0
 8056118: 6008         	str	r0, [r1]
;             taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 805611a: e7ff         	b	0x805611c <vTaskSwitchContext+0x30> @ imm = #-0x2
 805611c: f240 0000    	movw	r0, #0x0
 8056120: f2c0 0000    	movt	r0, #0x0
 8056124: 6800         	ldr	r0, [r0]
 8056126: 9001         	str	r0, [sp, #0x4]
 8056128: e7ff         	b	0x805612a <vTaskSwitchContext+0x3e> @ imm = #-0x2
 805612a: 9801         	ldr	r0, [sp, #0x4]
 805612c: eb00 0180    	add.w	r1, r0, r0, lsl #2
 8056130: f240 0000    	movw	r0, #0x0
 8056134: f2c0 0000    	movt	r0, #0x0
 8056138: f850 0021    	ldr.w	r0, [r0, r1, lsl #2]
 805613c: b958         	cbnz	r0, 0x8056156 <vTaskSwitchContext+0x6a> @ imm = #0x16
 805613e: e7ff         	b	0x8056140 <vTaskSwitchContext+0x54> @ imm = #-0x2
 8056140: 9801         	ldr	r0, [sp, #0x4]
 8056142: b920         	cbnz	r0, 0x805614e <vTaskSwitchContext+0x62> @ imm = #0x8
 8056144: e7ff         	b	0x8056146 <vTaskSwitchContext+0x5a> @ imm = #-0x2
 8056146: f7ff fffe    	bl	0x8056146 <vTaskSwitchContext+0x5a> @ imm = #-0x4
 805614a: e7ff         	b	0x805614c <vTaskSwitchContext+0x60> @ imm = #-0x2
 805614c: e7fe         	b	0x805614c <vTaskSwitchContext+0x60> @ imm = #-0x4
 805614e: 9801         	ldr	r0, [sp, #0x4]
 8056150: 3801         	subs	r0, #0x1
 8056152: 9001         	str	r0, [sp, #0x4]
 8056154: e7e9         	b	0x805612a <vTaskSwitchContext+0x3e> @ imm = #-0x2e
 8056156: e7ff         	b	0x8056158 <vTaskSwitchContext+0x6c> @ imm = #-0x2
 8056158: 9801         	ldr	r0, [sp, #0x4]
 805615a: eb00 0180    	add.w	r1, r0, r0, lsl #2
 805615e: f240 0000    	movw	r0, #0x0
 8056162: f2c0 0000    	movt	r0, #0x0
 8056166: eb00 0081    	add.w	r0, r0, r1, lsl #2
 805616a: 9000         	str	r0, [sp]
 805616c: 9900         	ldr	r1, [sp]
 805616e: 6848         	ldr	r0, [r1, #0x4]
 8056170: 6840         	ldr	r0, [r0, #0x4]
 8056172: 6048         	str	r0, [r1, #0x4]
 8056174: 9900         	ldr	r1, [sp]
 8056176: 6848         	ldr	r0, [r1, #0x4]
 8056178: 3108         	adds	r1, #0x8
 805617a: 4288         	cmp	r0, r1
 805617c: d104         	bne	0x8056188 <vTaskSwitchContext+0x9c> @ imm = #0x8
 805617e: e7ff         	b	0x8056180 <vTaskSwitchContext+0x94> @ imm = #-0x2
 8056180: 9900         	ldr	r1, [sp]
 8056182: 68c8         	ldr	r0, [r1, #0xc]
 8056184: 6048         	str	r0, [r1, #0x4]
 8056186: e7ff         	b	0x8056188 <vTaskSwitchContext+0x9c> @ imm = #-0x2
 8056188: 9800         	ldr	r0, [sp]
 805618a: 6840         	ldr	r0, [r0, #0x4]
 805618c: 68c0         	ldr	r0, [r0, #0xc]
 805618e: f240 0100    	movw	r1, #0x0
 8056192: f2c0 0100    	movt	r1, #0x0
 8056196: 6008         	str	r0, [r1]
 8056198: e7ff         	b	0x805619a <vTaskSwitchContext+0xae> @ imm = #-0x2
 805619a: 9801         	ldr	r0, [sp, #0x4]
 805619c: f240 0100    	movw	r1, #0x0
 80561a0: f2c0 0100    	movt	r1, #0x0
 80561a4: 6008         	str	r0, [r1]
 80561a6: e7ff         	b	0x80561a8 <vTaskSwitchContext+0xbc> @ imm = #-0x2
 80561a8: e7ff         	b	0x80561aa <vTaskSwitchContext+0xbe> @ imm = #-0x2
;     }
 80561aa: b002         	add	sp, #0x8
 80561ac: bd80         	pop	{r7, pc}

080561ae <vTaskResume>:
;     {
 80561ae: b580         	push	{r7, lr}
 80561b0: 466f         	mov	r7, sp
 80561b2: b084         	sub	sp, #0x10
 80561b4: 9003         	str	r0, [sp, #0xc]
;         TCB_t * const pxTCB = xTaskToResume;
 80561b6: 9803         	ldr	r0, [sp, #0xc]
 80561b8: 9002         	str	r0, [sp, #0x8]
;         configASSERT( xTaskToResume );
 80561ba: 9803         	ldr	r0, [sp, #0xc]
 80561bc: b920         	cbnz	r0, 0x80561c8 <vTaskResume+0x1a> @ imm = #0x8
 80561be: e7ff         	b	0x80561c0 <vTaskResume+0x12> @ imm = #-0x2
 80561c0: f7ff fffe    	bl	0x80561c0 <vTaskResume+0x12> @ imm = #-0x4
 80561c4: e7ff         	b	0x80561c6 <vTaskResume+0x18> @ imm = #-0x2
 80561c6: e7fe         	b	0x80561c6 <vTaskResume+0x18> @ imm = #-0x4
;             if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 80561c8: 9802         	ldr	r0, [sp, #0x8]
 80561ca: f240 0100    	movw	r1, #0x0
 80561ce: f2c0 0100    	movt	r1, #0x0
 80561d2: 6809         	ldr	r1, [r1]
 80561d4: 4288         	cmp	r0, r1
 80561d6: d074         	beq	0x80562c2 <vTaskResume+0x114> @ imm = #0xe8
 80561d8: e7ff         	b	0x80561da <vTaskResume+0x2c> @ imm = #-0x2
 80561da: 9802         	ldr	r0, [sp, #0x8]
 80561dc: 2800         	cmp	r0, #0x0
 80561de: d070         	beq	0x80562c2 <vTaskResume+0x114> @ imm = #0xe0
 80561e0: e7ff         	b	0x80561e2 <vTaskResume+0x34> @ imm = #-0x2
;             taskENTER_CRITICAL();
 80561e2: f7ff fffe    	bl	0x80561e2 <vTaskResume+0x34> @ imm = #-0x4
;                 if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 80561e6: 9802         	ldr	r0, [sp, #0x8]
 80561e8: f000 f86e    	bl	0x80562c8 <prvTaskIsTaskSuspended> @ imm = #0xdc
 80561ec: 2800         	cmp	r0, #0x0
 80561ee: d064         	beq	0x80562ba <vTaskResume+0x10c> @ imm = #0xc8
 80561f0: e7ff         	b	0x80561f2 <vTaskResume+0x44> @ imm = #-0x2
;                     ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80561f2: 9802         	ldr	r0, [sp, #0x8]
 80561f4: 3080         	adds	r0, #0x80
 80561f6: f7ff fffe    	bl	0x80561f6 <vTaskResume+0x48> @ imm = #-0x4
;                     prvAddTaskToReadyList( pxTCB );
 80561fa: e7ff         	b	0x80561fc <vTaskResume+0x4e> @ imm = #-0x2
 80561fc: e7ff         	b	0x80561fe <vTaskResume+0x50> @ imm = #-0x2
 80561fe: 9802         	ldr	r0, [sp, #0x8]
 8056200: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 8056204: f240 0100    	movw	r1, #0x0
 8056208: f2c0 0100    	movt	r1, #0x0
 805620c: 6809         	ldr	r1, [r1]
 805620e: 4288         	cmp	r0, r1
 8056210: d909         	bls	0x8056226 <vTaskResume+0x78> @ imm = #0x12
 8056212: e7ff         	b	0x8056214 <vTaskResume+0x66> @ imm = #-0x2
 8056214: 9802         	ldr	r0, [sp, #0x8]
 8056216: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 805621a: f240 0100    	movw	r1, #0x0
 805621e: f2c0 0100    	movt	r1, #0x0
 8056222: 6008         	str	r0, [r1]
 8056224: e7ff         	b	0x8056226 <vTaskResume+0x78> @ imm = #-0x2
 8056226: e7ff         	b	0x8056228 <vTaskResume+0x7a> @ imm = #-0x2
 8056228: e7ff         	b	0x805622a <vTaskResume+0x7c> @ imm = #-0x2
 805622a: 9802         	ldr	r0, [sp, #0x8]
 805622c: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 8056230: eb00 0080    	add.w	r0, r0, r0, lsl #2
 8056234: f240 0100    	movw	r1, #0x0
 8056238: f2c0 0100    	movt	r1, #0x0
 805623c: eb01 0080    	add.w	r0, r1, r0, lsl #2
 8056240: 6840         	ldr	r0, [r0, #0x4]
 8056242: 9001         	str	r0, [sp, #0x4]
 8056244: 9801         	ldr	r0, [sp, #0x4]
 8056246: 9a02         	ldr	r2, [sp, #0x8]
 8056248: f8c2 0084    	str.w	r0, [r2, #0x84]
 805624c: 9801         	ldr	r0, [sp, #0x4]
 805624e: 6880         	ldr	r0, [r0, #0x8]
 8056250: 9a02         	ldr	r2, [sp, #0x8]
 8056252: f8c2 0088    	str.w	r0, [r2, #0x88]
 8056256: 9802         	ldr	r0, [sp, #0x8]
 8056258: 3080         	adds	r0, #0x80
 805625a: 9a01         	ldr	r2, [sp, #0x4]
 805625c: 6892         	ldr	r2, [r2, #0x8]
 805625e: 6050         	str	r0, [r2, #0x4]
 8056260: 9802         	ldr	r0, [sp, #0x8]
 8056262: 3080         	adds	r0, #0x80
 8056264: 9a01         	ldr	r2, [sp, #0x4]
 8056266: 6090         	str	r0, [r2, #0x8]
 8056268: 9a02         	ldr	r2, [sp, #0x8]
 805626a: f8d2 00a8    	ldr.w	r0, [r2, #0xa8]
 805626e: eb00 0080    	add.w	r0, r0, r0, lsl #2
 8056272: eb01 0080    	add.w	r0, r1, r0, lsl #2
 8056276: f8c2 0090    	str.w	r0, [r2, #0x90]
 805627a: 9802         	ldr	r0, [sp, #0x8]
 805627c: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 8056280: eb00 0280    	add.w	r2, r0, r0, lsl #2
 8056284: f851 0022    	ldr.w	r0, [r1, r2, lsl #2]
 8056288: 3001         	adds	r0, #0x1
 805628a: f841 0022    	str.w	r0, [r1, r2, lsl #2]
 805628e: e7ff         	b	0x8056290 <vTaskResume+0xe2> @ imm = #-0x2
 8056290: e7ff         	b	0x8056292 <vTaskResume+0xe4> @ imm = #-0x2
;                     taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxTCB );
 8056292: e7ff         	b	0x8056294 <vTaskResume+0xe6> @ imm = #-0x2
 8056294: f240 0000    	movw	r0, #0x0
 8056298: f2c0 0000    	movt	r0, #0x0
 805629c: 6800         	ldr	r0, [r0]
 805629e: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 80562a2: 9902         	ldr	r1, [sp, #0x8]
 80562a4: f8d1 10a8    	ldr.w	r1, [r1, #0xa8]
 80562a8: 4288         	cmp	r0, r1
 80562aa: d203         	bhs	0x80562b4 <vTaskResume+0x106> @ imm = #0x6
 80562ac: e7ff         	b	0x80562ae <vTaskResume+0x100> @ imm = #-0x2
 80562ae: f7ff fffe    	bl	0x80562ae <vTaskResume+0x100> @ imm = #-0x4
 80562b2: e000         	b	0x80562b6 <vTaskResume+0x108> @ imm = #0x0
 80562b4: e7ff         	b	0x80562b6 <vTaskResume+0x108> @ imm = #-0x2
;                     taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxTCB );
 80562b6: e7ff         	b	0x80562b8 <vTaskResume+0x10a> @ imm = #-0x2
;                 }
 80562b8: e000         	b	0x80562bc <vTaskResume+0x10e> @ imm = #0x0
 80562ba: e7ff         	b	0x80562bc <vTaskResume+0x10e> @ imm = #-0x2
;             taskEXIT_CRITICAL();
 80562bc: f7ff fffe    	bl	0x80562bc <vTaskResume+0x10e> @ imm = #-0x4
;         }
 80562c0: e000         	b	0x80562c4 <vTaskResume+0x116> @ imm = #0x0
 80562c2: e7ff         	b	0x80562c4 <vTaskResume+0x116> @ imm = #-0x2
;     }
 80562c4: b004         	add	sp, #0x10
 80562c6: bd80         	pop	{r7, pc}

080562c8 <prvTaskIsTaskSuspended>:
;     {
 80562c8: b580         	push	{r7, lr}
 80562ca: 466f         	mov	r7, sp
 80562cc: b084         	sub	sp, #0x10
 80562ce: 9003         	str	r0, [sp, #0xc]
 80562d0: 2000         	movs	r0, #0x0
;         BaseType_t xReturn = pdFALSE;
 80562d2: 9002         	str	r0, [sp, #0x8]
;         const TCB_t * const pxTCB = xTask;
 80562d4: 9803         	ldr	r0, [sp, #0xc]
 80562d6: 9001         	str	r0, [sp, #0x4]
;         configASSERT( xTask );
 80562d8: 9803         	ldr	r0, [sp, #0xc]
 80562da: b920         	cbnz	r0, 0x80562e6 <prvTaskIsTaskSuspended+0x1e> @ imm = #0x8
 80562dc: e7ff         	b	0x80562de <prvTaskIsTaskSuspended+0x16> @ imm = #-0x2
 80562de: f7ff fffe    	bl	0x80562de <prvTaskIsTaskSuspended+0x16> @ imm = #-0x4
 80562e2: e7ff         	b	0x80562e4 <prvTaskIsTaskSuspended+0x1c> @ imm = #-0x2
 80562e4: e7fe         	b	0x80562e4 <prvTaskIsTaskSuspended+0x1c> @ imm = #-0x4
;         if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 80562e6: 9801         	ldr	r0, [sp, #0x4]
 80562e8: f8d0 0090    	ldr.w	r0, [r0, #0x90]
 80562ec: f240 0100    	movw	r1, #0x0
 80562f0: f2c0 0100    	movt	r1, #0x0
 80562f4: 4288         	cmp	r0, r1
 80562f6: d116         	bne	0x8056326 <prvTaskIsTaskSuspended+0x5e> @ imm = #0x2c
 80562f8: e7ff         	b	0x80562fa <prvTaskIsTaskSuspended+0x32> @ imm = #-0x2
;             if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 80562fa: 9801         	ldr	r0, [sp, #0x4]
 80562fc: f8d0 00a4    	ldr.w	r0, [r0, #0xa4]
 8056300: f240 0100    	movw	r1, #0x0
 8056304: f2c0 0100    	movt	r1, #0x0
 8056308: 4288         	cmp	r0, r1
 805630a: d00a         	beq	0x8056322 <prvTaskIsTaskSuspended+0x5a> @ imm = #0x14
 805630c: e7ff         	b	0x805630e <prvTaskIsTaskSuspended+0x46> @ imm = #-0x2
;                 if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 805630e: 9801         	ldr	r0, [sp, #0x4]
 8056310: f8d0 00a4    	ldr.w	r0, [r0, #0xa4]
 8056314: b918         	cbnz	r0, 0x805631e <prvTaskIsTaskSuspended+0x56> @ imm = #0x6
 8056316: e7ff         	b	0x8056318 <prvTaskIsTaskSuspended+0x50> @ imm = #-0x2
 8056318: 2001         	movs	r0, #0x1
;                     xReturn = pdTRUE;
 805631a: 9002         	str	r0, [sp, #0x8]
;                 }
 805631c: e000         	b	0x8056320 <prvTaskIsTaskSuspended+0x58> @ imm = #0x0
 805631e: e7ff         	b	0x8056320 <prvTaskIsTaskSuspended+0x58> @ imm = #-0x2
;             }
 8056320: e000         	b	0x8056324 <prvTaskIsTaskSuspended+0x5c> @ imm = #0x0
 8056322: e7ff         	b	0x8056324 <prvTaskIsTaskSuspended+0x5c> @ imm = #-0x2
;         }
 8056324: e000         	b	0x8056328 <prvTaskIsTaskSuspended+0x60> @ imm = #0x0
 8056326: e7ff         	b	0x8056328 <prvTaskIsTaskSuspended+0x60> @ imm = #-0x2
;         return xReturn;
 8056328: 9802         	ldr	r0, [sp, #0x8]
 805632a: b004         	add	sp, #0x10
 805632c: bd80         	pop	{r7, pc}

0805632e <xTaskResumeFromISR>:
;     {
 805632e: b580         	push	{r7, lr}
 8056330: 466f         	mov	r7, sp
 8056332: b086         	sub	sp, #0x18
 8056334: 9005         	str	r0, [sp, #0x14]
 8056336: 2000         	movs	r0, #0x0
;         BaseType_t xYieldRequired = pdFALSE;
 8056338: 9004         	str	r0, [sp, #0x10]
;         TCB_t * const pxTCB = xTaskToResume;
 805633a: 9805         	ldr	r0, [sp, #0x14]
 805633c: 9003         	str	r0, [sp, #0xc]
;         configASSERT( xTaskToResume );
 805633e: 9805         	ldr	r0, [sp, #0x14]
 8056340: b920         	cbnz	r0, 0x805634c <xTaskResumeFromISR+0x1e> @ imm = #0x8
 8056342: e7ff         	b	0x8056344 <xTaskResumeFromISR+0x16> @ imm = #-0x2
 8056344: f7ff fffe    	bl	0x8056344 <xTaskResumeFromISR+0x16> @ imm = #-0x4
 8056348: e7ff         	b	0x805634a <xTaskResumeFromISR+0x1c> @ imm = #-0x2
 805634a: e7fe         	b	0x805634a <xTaskResumeFromISR+0x1c> @ imm = #-0x4
;         portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 805634c: f7ff fffe    	bl	0x805634c <xTaskResumeFromISR+0x1e> @ imm = #-0x4
;         uxSavedInterruptStatus = taskENTER_CRITICAL_FROM_ISR();
 8056350: f7ff fffe    	bl	0x8056350 <xTaskResumeFromISR+0x22> @ imm = #-0x4
 8056354: 9002         	str	r0, [sp, #0x8]
;             if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8056356: 9803         	ldr	r0, [sp, #0xc]
 8056358: f7ff ffb6    	bl	0x80562c8 <prvTaskIsTaskSuspended> @ imm = #-0x94
 805635c: 2800         	cmp	r0, #0x0
 805635e: d07a         	beq	0x8056456 <xTaskResumeFromISR+0x128> @ imm = #0xf4
 8056360: e7ff         	b	0x8056362 <xTaskResumeFromISR+0x34> @ imm = #-0x2
;                 if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8056362: f240 0000    	movw	r0, #0x0
 8056366: f2c0 0000    	movt	r0, #0x0
 805636a: 6800         	ldr	r0, [r0]
 805636c: 2800         	cmp	r0, #0x0
 805636e: d167         	bne	0x8056440 <xTaskResumeFromISR+0x112> @ imm = #0xce
 8056370: e7ff         	b	0x8056372 <xTaskResumeFromISR+0x44> @ imm = #-0x2
;                         if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8056372: 9803         	ldr	r0, [sp, #0xc]
 8056374: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 8056378: f240 0100    	movw	r1, #0x0
 805637c: f2c0 0100    	movt	r1, #0x0
 8056380: 6809         	ldr	r1, [r1]
 8056382: f8d1 10a8    	ldr.w	r1, [r1, #0xa8]
 8056386: 4288         	cmp	r0, r1
 8056388: d908         	bls	0x805639c <xTaskResumeFromISR+0x6e> @ imm = #0x10
 805638a: e7ff         	b	0x805638c <xTaskResumeFromISR+0x5e> @ imm = #-0x2
 805638c: 2001         	movs	r0, #0x1
;                             xYieldRequired = pdTRUE;
 805638e: 9004         	str	r0, [sp, #0x10]
;                             xYieldPendings[ 0 ] = pdTRUE;
 8056390: f240 0100    	movw	r1, #0x0
 8056394: f2c0 0100    	movt	r1, #0x0
 8056398: 6008         	str	r0, [r1]
;                         }
 805639a: e000         	b	0x805639e <xTaskResumeFromISR+0x70> @ imm = #0x0
 805639c: e7ff         	b	0x805639e <xTaskResumeFromISR+0x70> @ imm = #-0x2
;                     ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 805639e: 9803         	ldr	r0, [sp, #0xc]
 80563a0: 3080         	adds	r0, #0x80
 80563a2: f7ff fffe    	bl	0x80563a2 <xTaskResumeFromISR+0x74> @ imm = #-0x4
;                     prvAddTaskToReadyList( pxTCB );
 80563a6: e7ff         	b	0x80563a8 <xTaskResumeFromISR+0x7a> @ imm = #-0x2
 80563a8: e7ff         	b	0x80563aa <xTaskResumeFromISR+0x7c> @ imm = #-0x2
 80563aa: 9803         	ldr	r0, [sp, #0xc]
 80563ac: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 80563b0: f240 0100    	movw	r1, #0x0
 80563b4: f2c0 0100    	movt	r1, #0x0
 80563b8: 6809         	ldr	r1, [r1]
 80563ba: 4288         	cmp	r0, r1
 80563bc: d909         	bls	0x80563d2 <xTaskResumeFromISR+0xa4> @ imm = #0x12
 80563be: e7ff         	b	0x80563c0 <xTaskResumeFromISR+0x92> @ imm = #-0x2
 80563c0: 9803         	ldr	r0, [sp, #0xc]
 80563c2: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 80563c6: f240 0100    	movw	r1, #0x0
 80563ca: f2c0 0100    	movt	r1, #0x0
 80563ce: 6008         	str	r0, [r1]
 80563d0: e7ff         	b	0x80563d2 <xTaskResumeFromISR+0xa4> @ imm = #-0x2
 80563d2: e7ff         	b	0x80563d4 <xTaskResumeFromISR+0xa6> @ imm = #-0x2
 80563d4: e7ff         	b	0x80563d6 <xTaskResumeFromISR+0xa8> @ imm = #-0x2
 80563d6: 9803         	ldr	r0, [sp, #0xc]
 80563d8: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 80563dc: eb00 0080    	add.w	r0, r0, r0, lsl #2
 80563e0: f240 0100    	movw	r1, #0x0
 80563e4: f2c0 0100    	movt	r1, #0x0
 80563e8: eb01 0080    	add.w	r0, r1, r0, lsl #2
 80563ec: 6840         	ldr	r0, [r0, #0x4]
 80563ee: 9001         	str	r0, [sp, #0x4]
 80563f0: 9801         	ldr	r0, [sp, #0x4]
 80563f2: 9a03         	ldr	r2, [sp, #0xc]
 80563f4: f8c2 0084    	str.w	r0, [r2, #0x84]
 80563f8: 9801         	ldr	r0, [sp, #0x4]
 80563fa: 6880         	ldr	r0, [r0, #0x8]
 80563fc: 9a03         	ldr	r2, [sp, #0xc]
 80563fe: f8c2 0088    	str.w	r0, [r2, #0x88]
 8056402: 9803         	ldr	r0, [sp, #0xc]
 8056404: 3080         	adds	r0, #0x80
 8056406: 9a01         	ldr	r2, [sp, #0x4]
 8056408: 6892         	ldr	r2, [r2, #0x8]
 805640a: 6050         	str	r0, [r2, #0x4]
 805640c: 9803         	ldr	r0, [sp, #0xc]
 805640e: 3080         	adds	r0, #0x80
 8056410: 9a01         	ldr	r2, [sp, #0x4]
 8056412: 6090         	str	r0, [r2, #0x8]
 8056414: 9a03         	ldr	r2, [sp, #0xc]
 8056416: f8d2 00a8    	ldr.w	r0, [r2, #0xa8]
 805641a: eb00 0080    	add.w	r0, r0, r0, lsl #2
 805641e: eb01 0080    	add.w	r0, r1, r0, lsl #2
 8056422: f8c2 0090    	str.w	r0, [r2, #0x90]
 8056426: 9803         	ldr	r0, [sp, #0xc]
 8056428: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 805642c: eb00 0280    	add.w	r2, r0, r0, lsl #2
 8056430: f851 0022    	ldr.w	r0, [r1, r2, lsl #2]
 8056434: 3001         	adds	r0, #0x1
 8056436: f841 0022    	str.w	r0, [r1, r2, lsl #2]
 805643a: e7ff         	b	0x805643c <xTaskResumeFromISR+0x10e> @ imm = #-0x2
 805643c: e7ff         	b	0x805643e <xTaskResumeFromISR+0x110> @ imm = #-0x2
;                 }
 805643e: e009         	b	0x8056454 <xTaskResumeFromISR+0x126> @ imm = #0x12
;                     vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8056440: 9803         	ldr	r0, [sp, #0xc]
 8056442: f100 0194    	add.w	r1, r0, #0x94
 8056446: f240 0000    	movw	r0, #0x0
 805644a: f2c0 0000    	movt	r0, #0x0
 805644e: f7ff fffe    	bl	0x805644e <xTaskResumeFromISR+0x120> @ imm = #-0x4
 8056452: e7ff         	b	0x8056454 <xTaskResumeFromISR+0x126> @ imm = #-0x2
;             }
 8056454: e000         	b	0x8056458 <xTaskResumeFromISR+0x12a> @ imm = #0x0
 8056456: e7ff         	b	0x8056458 <xTaskResumeFromISR+0x12a> @ imm = #-0x2
;         taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );
 8056458: 9802         	ldr	r0, [sp, #0x8]
 805645a: f7ff fffe    	bl	0x805645a <xTaskResumeFromISR+0x12c> @ imm = #-0x4
;         return xYieldRequired;
 805645e: 9804         	ldr	r0, [sp, #0x10]
 8056460: b006         	add	sp, #0x18
 8056462: bd80         	pop	{r7, pc}

08056464 <vTaskStartScheduler>:
; {
 8056464: b580         	push	{r7, lr}
 8056466: 466f         	mov	r7, sp
 8056468: b082         	sub	sp, #0x8
;     xReturn = prvCreateIdleTasks();
 805646a: f7ff fffe    	bl	0x805646a <vTaskStartScheduler+0x6> @ imm = #-0x4
 805646e: 9001         	str	r0, [sp, #0x4]
;         if( xReturn == pdPASS )
 8056470: 9801         	ldr	r0, [sp, #0x4]
 8056472: 2801         	cmp	r0, #0x1
 8056474: d104         	bne	0x8056480 <vTaskStartScheduler+0x1c> @ imm = #0x8
 8056476: e7ff         	b	0x8056478 <vTaskStartScheduler+0x14> @ imm = #-0x2
;             xReturn = xTimerCreateTimerTask();
 8056478: f7ff fffe    	bl	0x8056478 <vTaskStartScheduler+0x14> @ imm = #-0x4
 805647c: 9001         	str	r0, [sp, #0x4]
;         }
 805647e: e000         	b	0x8056482 <vTaskStartScheduler+0x1e> @ imm = #0x0
 8056480: e7ff         	b	0x8056482 <vTaskStartScheduler+0x1e> @ imm = #-0x2
;     if( xReturn == pdPASS )
 8056482: 9801         	ldr	r0, [sp, #0x4]
 8056484: 2801         	cmp	r0, #0x1
 8056486: d118         	bne	0x80564ba <vTaskStartScheduler+0x56> @ imm = #0x30
 8056488: e7ff         	b	0x805648a <vTaskStartScheduler+0x26> @ imm = #-0x2
;         portDISABLE_INTERRUPTS();
 805648a: f7ff fffe    	bl	0x805648a <vTaskStartScheduler+0x26> @ imm = #-0x4
;         xNextTaskUnblockTime = portMAX_DELAY;
 805648e: f240 0100    	movw	r1, #0x0
 8056492: f2c0 0100    	movt	r1, #0x0
 8056496: f04f 30ff    	mov.w	r0, #0xffffffff
 805649a: 6008         	str	r0, [r1]
;         xSchedulerRunning = pdTRUE;
 805649c: f240 0100    	movw	r1, #0x0
 80564a0: f2c0 0100    	movt	r1, #0x0
 80564a4: 2001         	movs	r0, #0x1
 80564a6: 6008         	str	r0, [r1]
;         xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80564a8: f240 0100    	movw	r1, #0x0
 80564ac: f2c0 0100    	movt	r1, #0x0
 80564b0: 2000         	movs	r0, #0x0
 80564b2: 6008         	str	r0, [r1]
;         xPortStartScheduler();
 80564b4: f7ff fffe    	bl	0x80564b4 <vTaskStartScheduler+0x50> @ imm = #-0x4
;     }
 80564b8: e008         	b	0x80564cc <vTaskStartScheduler+0x68> @ imm = #0x10
;         configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80564ba: 9801         	ldr	r0, [sp, #0x4]
 80564bc: 3001         	adds	r0, #0x1
 80564be: b920         	cbnz	r0, 0x80564ca <vTaskStartScheduler+0x66> @ imm = #0x8
 80564c0: e7ff         	b	0x80564c2 <vTaskStartScheduler+0x5e> @ imm = #-0x2
 80564c2: f7ff fffe    	bl	0x80564c2 <vTaskStartScheduler+0x5e> @ imm = #-0x4
 80564c6: e7ff         	b	0x80564c8 <vTaskStartScheduler+0x64> @ imm = #-0x2
 80564c8: e7fe         	b	0x80564c8 <vTaskStartScheduler+0x64> @ imm = #-0x4
 80564ca: e7ff         	b	0x80564cc <vTaskStartScheduler+0x68> @ imm = #-0x2
;     ( void ) uxTopUsedPriority;
 80564cc: f240 0000    	movw	r0, #0x0
 80564d0: f2c0 0000    	movt	r0, #0x0
 80564d4: 6800         	ldr	r0, [r0]
; }
 80564d6: b002         	add	sp, #0x8
 80564d8: bd80         	pop	{r7, pc}

080564da <vTaskEndScheduler>:
; {
 80564da: b580         	push	{r7, lr}
 80564dc: 466f         	mov	r7, sp
;     portDISABLE_INTERRUPTS();
 80564de: f7ff fffe    	bl	0x80564de <vTaskEndScheduler+0x4> @ imm = #-0x4
;     xSchedulerRunning = pdFALSE;
 80564e2: f240 0100    	movw	r1, #0x0
 80564e6: f2c0 0100    	movt	r1, #0x0
 80564ea: 2000         	movs	r0, #0x0
 80564ec: 6008         	str	r0, [r1]
;     vPortEndScheduler();
 80564ee: f7ff fffe    	bl	0x80564ee <vTaskEndScheduler+0x14> @ imm = #-0x4
; }
 80564f2: bd80         	pop	{r7, pc}

080564f4 <xTaskIncrementTick>:
; {
 80564f4: b580         	push	{r7, lr}
 80564f6: 466f         	mov	r7, sp
 80564f8: b088         	sub	sp, #0x20
 80564fa: 2000         	movs	r0, #0x0
;     BaseType_t xSwitchRequired = pdFALSE;
 80564fc: 9005         	str	r0, [sp, #0x14]
;     if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 80564fe: f240 0000    	movw	r0, #0x0
 8056502: f2c0 0000    	movt	r0, #0x0
 8056506: 6800         	ldr	r0, [r0]
 8056508: 2800         	cmp	r0, #0x0
 805650a: f040 813f    	bne.w	0x805678c <xTaskIncrementTick+0x298> @ imm = #0x27e
 805650e: e7ff         	b	0x8056510 <xTaskIncrementTick+0x1c> @ imm = #-0x2
;         const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8056510: f240 0100    	movw	r1, #0x0
 8056514: f2c0 0100    	movt	r1, #0x0
 8056518: 6808         	ldr	r0, [r1]
 805651a: 3001         	adds	r0, #0x1
 805651c: 9004         	str	r0, [sp, #0x10]
;         xTickCount = xConstTickCount;
 805651e: 9804         	ldr	r0, [sp, #0x10]
 8056520: 6008         	str	r0, [r1]
;         if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8056522: 9804         	ldr	r0, [sp, #0x10]
 8056524: bb30         	cbnz	r0, 0x8056574 <xTaskIncrementTick+0x80> @ imm = #0x4c
 8056526: e7ff         	b	0x8056528 <xTaskIncrementTick+0x34> @ imm = #-0x2
;             taskSWITCH_DELAYED_LISTS();
 8056528: e7ff         	b	0x805652a <xTaskIncrementTick+0x36> @ imm = #-0x2
 805652a: f240 0000    	movw	r0, #0x0
 805652e: f2c0 0000    	movt	r0, #0x0
 8056532: 6800         	ldr	r0, [r0]
 8056534: 6800         	ldr	r0, [r0]
 8056536: b120         	cbz	r0, 0x8056542 <xTaskIncrementTick+0x4e> @ imm = #0x8
 8056538: e7ff         	b	0x805653a <xTaskIncrementTick+0x46> @ imm = #-0x2
 805653a: f7ff fffe    	bl	0x805653a <xTaskIncrementTick+0x46> @ imm = #-0x4
 805653e: e7ff         	b	0x8056540 <xTaskIncrementTick+0x4c> @ imm = #-0x2
 8056540: e7fe         	b	0x8056540 <xTaskIncrementTick+0x4c> @ imm = #-0x4
 8056542: f240 0200    	movw	r2, #0x0
 8056546: f2c0 0200    	movt	r2, #0x0
 805654a: 6810         	ldr	r0, [r2]
 805654c: 9003         	str	r0, [sp, #0xc]
 805654e: f240 0100    	movw	r1, #0x0
 8056552: f2c0 0100    	movt	r1, #0x0
 8056556: 6808         	ldr	r0, [r1]
 8056558: 6010         	str	r0, [r2]
 805655a: 9803         	ldr	r0, [sp, #0xc]
 805655c: 6008         	str	r0, [r1]
 805655e: f240 0100    	movw	r1, #0x0
 8056562: f2c0 0100    	movt	r1, #0x0
 8056566: 6808         	ldr	r0, [r1]
 8056568: 3001         	adds	r0, #0x1
 805656a: 6008         	str	r0, [r1]
 805656c: f7ff f86d    	bl	0x805564a <prvResetNextTaskUnblockTime> @ imm = #-0xf26
 8056570: e7ff         	b	0x8056572 <xTaskIncrementTick+0x7e> @ imm = #-0x2
;         }
 8056572: e000         	b	0x8056576 <xTaskIncrementTick+0x82> @ imm = #0x0
 8056574: e7ff         	b	0x8056576 <xTaskIncrementTick+0x82> @ imm = #-0x2
;         if( xConstTickCount >= xNextTaskUnblockTime )
 8056576: 9804         	ldr	r0, [sp, #0x10]
 8056578: f240 0100    	movw	r1, #0x0
 805657c: f2c0 0100    	movt	r1, #0x0
 8056580: 6809         	ldr	r1, [r1]
 8056582: 4288         	cmp	r0, r1
 8056584: f0c0 80e0    	blo.w	0x8056748 <xTaskIncrementTick+0x254> @ imm = #0x1c0
 8056588: e7ff         	b	0x805658a <xTaskIncrementTick+0x96> @ imm = #-0x2
;             for( ; ; )
 805658a: e7ff         	b	0x805658c <xTaskIncrementTick+0x98> @ imm = #-0x2
;                 if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 805658c: f240 0000    	movw	r0, #0x0
 8056590: f2c0 0000    	movt	r0, #0x0
 8056594: 6800         	ldr	r0, [r0]
 8056596: 6800         	ldr	r0, [r0]
 8056598: b940         	cbnz	r0, 0x80565ac <xTaskIncrementTick+0xb8> @ imm = #0x10
 805659a: e7ff         	b	0x805659c <xTaskIncrementTick+0xa8> @ imm = #-0x2
;                     xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 805659c: f240 0100    	movw	r1, #0x0
 80565a0: f2c0 0100    	movt	r1, #0x0
 80565a4: f04f 30ff    	mov.w	r0, #0xffffffff
 80565a8: 6008         	str	r0, [r1]
;                     break;
 80565aa: e0cc         	b	0x8056746 <xTaskIncrementTick+0x252> @ imm = #0x198
;                     pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80565ac: f240 0000    	movw	r0, #0x0
 80565b0: f2c0 0000    	movt	r0, #0x0
 80565b4: 6800         	ldr	r0, [r0]
 80565b6: 68c0         	ldr	r0, [r0, #0xc]
 80565b8: 68c0         	ldr	r0, [r0, #0xc]
 80565ba: 9007         	str	r0, [sp, #0x1c]
;                     xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80565bc: 9807         	ldr	r0, [sp, #0x1c]
 80565be: f8d0 0080    	ldr.w	r0, [r0, #0x80]
 80565c2: 9006         	str	r0, [sp, #0x18]
;                     if( xConstTickCount < xItemValue )
 80565c4: 9804         	ldr	r0, [sp, #0x10]
 80565c6: 9906         	ldr	r1, [sp, #0x18]
 80565c8: 4288         	cmp	r0, r1
 80565ca: d207         	bhs	0x80565dc <xTaskIncrementTick+0xe8> @ imm = #0xe
 80565cc: e7ff         	b	0x80565ce <xTaskIncrementTick+0xda> @ imm = #-0x2
;                         xNextTaskUnblockTime = xItemValue;
 80565ce: 9806         	ldr	r0, [sp, #0x18]
 80565d0: f240 0100    	movw	r1, #0x0
 80565d4: f2c0 0100    	movt	r1, #0x0
 80565d8: 6008         	str	r0, [r1]
;                         break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 80565da: e0b4         	b	0x8056746 <xTaskIncrementTick+0x252> @ imm = #0x168
 80565dc: e7ff         	b	0x80565de <xTaskIncrementTick+0xea> @ imm = #-0x2
;                     listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80565de: e7ff         	b	0x80565e0 <xTaskIncrementTick+0xec> @ imm = #-0x2
 80565e0: 9807         	ldr	r0, [sp, #0x1c]
 80565e2: f8d0 0090    	ldr.w	r0, [r0, #0x90]
 80565e6: 9002         	str	r0, [sp, #0x8]
 80565e8: 9807         	ldr	r0, [sp, #0x1c]
 80565ea: f8d0 1084    	ldr.w	r1, [r0, #0x84]
 80565ee: f8d0 0088    	ldr.w	r0, [r0, #0x88]
 80565f2: 6088         	str	r0, [r1, #0x8]
 80565f4: 9907         	ldr	r1, [sp, #0x1c]
 80565f6: f8d1 0084    	ldr.w	r0, [r1, #0x84]
 80565fa: f8d1 1088    	ldr.w	r1, [r1, #0x88]
 80565fe: 6048         	str	r0, [r1, #0x4]
 8056600: 9802         	ldr	r0, [sp, #0x8]
 8056602: 6840         	ldr	r0, [r0, #0x4]
 8056604: 9907         	ldr	r1, [sp, #0x1c]
 8056606: 3180         	adds	r1, #0x80
 8056608: 4288         	cmp	r0, r1
 805660a: d106         	bne	0x805661a <xTaskIncrementTick+0x126> @ imm = #0xc
 805660c: e7ff         	b	0x805660e <xTaskIncrementTick+0x11a> @ imm = #-0x2
 805660e: 9807         	ldr	r0, [sp, #0x1c]
 8056610: f8d0 0088    	ldr.w	r0, [r0, #0x88]
 8056614: 9902         	ldr	r1, [sp, #0x8]
 8056616: 6048         	str	r0, [r1, #0x4]
 8056618: e7ff         	b	0x805661a <xTaskIncrementTick+0x126> @ imm = #-0x2
 805661a: 9907         	ldr	r1, [sp, #0x1c]
 805661c: 2000         	movs	r0, #0x0
 805661e: f8c1 0090    	str.w	r0, [r1, #0x90]
 8056622: 9902         	ldr	r1, [sp, #0x8]
 8056624: 6808         	ldr	r0, [r1]
 8056626: 3801         	subs	r0, #0x1
 8056628: 6008         	str	r0, [r1]
 805662a: e7ff         	b	0x805662c <xTaskIncrementTick+0x138> @ imm = #-0x2
;                     if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 805662c: 9807         	ldr	r0, [sp, #0x1c]
 805662e: f8d0 00a4    	ldr.w	r0, [r0, #0xa4]
 8056632: b340         	cbz	r0, 0x8056686 <xTaskIncrementTick+0x192> @ imm = #0x50
 8056634: e7ff         	b	0x8056636 <xTaskIncrementTick+0x142> @ imm = #-0x2
;                         listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8056636: e7ff         	b	0x8056638 <xTaskIncrementTick+0x144> @ imm = #-0x2
 8056638: 9807         	ldr	r0, [sp, #0x1c]
 805663a: f8d0 00a4    	ldr.w	r0, [r0, #0xa4]
 805663e: 9001         	str	r0, [sp, #0x4]
 8056640: 9807         	ldr	r0, [sp, #0x1c]
 8056642: f8d0 1098    	ldr.w	r1, [r0, #0x98]
 8056646: f8d0 009c    	ldr.w	r0, [r0, #0x9c]
 805664a: 6088         	str	r0, [r1, #0x8]
 805664c: 9907         	ldr	r1, [sp, #0x1c]
 805664e: f8d1 0098    	ldr.w	r0, [r1, #0x98]
 8056652: f8d1 109c    	ldr.w	r1, [r1, #0x9c]
 8056656: 6048         	str	r0, [r1, #0x4]
 8056658: 9801         	ldr	r0, [sp, #0x4]
 805665a: 6840         	ldr	r0, [r0, #0x4]
 805665c: 9907         	ldr	r1, [sp, #0x1c]
 805665e: 3194         	adds	r1, #0x94
 8056660: 4288         	cmp	r0, r1
 8056662: d106         	bne	0x8056672 <xTaskIncrementTick+0x17e> @ imm = #0xc
 8056664: e7ff         	b	0x8056666 <xTaskIncrementTick+0x172> @ imm = #-0x2
 8056666: 9807         	ldr	r0, [sp, #0x1c]
 8056668: f8d0 009c    	ldr.w	r0, [r0, #0x9c]
 805666c: 9901         	ldr	r1, [sp, #0x4]
 805666e: 6048         	str	r0, [r1, #0x4]
 8056670: e7ff         	b	0x8056672 <xTaskIncrementTick+0x17e> @ imm = #-0x2
 8056672: 9907         	ldr	r1, [sp, #0x1c]
 8056674: 2000         	movs	r0, #0x0
 8056676: f8c1 00a4    	str.w	r0, [r1, #0xa4]
 805667a: 9901         	ldr	r1, [sp, #0x4]
 805667c: 6808         	ldr	r0, [r1]
 805667e: 3801         	subs	r0, #0x1
 8056680: 6008         	str	r0, [r1]
 8056682: e7ff         	b	0x8056684 <xTaskIncrementTick+0x190> @ imm = #-0x2
;                     }
 8056684: e000         	b	0x8056688 <xTaskIncrementTick+0x194> @ imm = #0x0
 8056686: e7ff         	b	0x8056688 <xTaskIncrementTick+0x194> @ imm = #-0x2
;                     prvAddTaskToReadyList( pxTCB );
 8056688: e7ff         	b	0x805668a <xTaskIncrementTick+0x196> @ imm = #-0x2
 805668a: e7ff         	b	0x805668c <xTaskIncrementTick+0x198> @ imm = #-0x2
 805668c: 9807         	ldr	r0, [sp, #0x1c]
 805668e: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 8056692: f240 0100    	movw	r1, #0x0
 8056696: f2c0 0100    	movt	r1, #0x0
 805669a: 6809         	ldr	r1, [r1]
 805669c: 4288         	cmp	r0, r1
 805669e: d909         	bls	0x80566b4 <xTaskIncrementTick+0x1c0> @ imm = #0x12
 80566a0: e7ff         	b	0x80566a2 <xTaskIncrementTick+0x1ae> @ imm = #-0x2
 80566a2: 9807         	ldr	r0, [sp, #0x1c]
 80566a4: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 80566a8: f240 0100    	movw	r1, #0x0
 80566ac: f2c0 0100    	movt	r1, #0x0
 80566b0: 6008         	str	r0, [r1]
 80566b2: e7ff         	b	0x80566b4 <xTaskIncrementTick+0x1c0> @ imm = #-0x2
 80566b4: e7ff         	b	0x80566b6 <xTaskIncrementTick+0x1c2> @ imm = #-0x2
 80566b6: e7ff         	b	0x80566b8 <xTaskIncrementTick+0x1c4> @ imm = #-0x2
 80566b8: 9807         	ldr	r0, [sp, #0x1c]
 80566ba: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 80566be: eb00 0080    	add.w	r0, r0, r0, lsl #2
 80566c2: f240 0100    	movw	r1, #0x0
 80566c6: f2c0 0100    	movt	r1, #0x0
 80566ca: eb01 0080    	add.w	r0, r1, r0, lsl #2
 80566ce: 6840         	ldr	r0, [r0, #0x4]
 80566d0: 9000         	str	r0, [sp]
 80566d2: 9800         	ldr	r0, [sp]
 80566d4: 9a07         	ldr	r2, [sp, #0x1c]
 80566d6: f8c2 0084    	str.w	r0, [r2, #0x84]
 80566da: 9800         	ldr	r0, [sp]
 80566dc: 6880         	ldr	r0, [r0, #0x8]
 80566de: 9a07         	ldr	r2, [sp, #0x1c]
 80566e0: f8c2 0088    	str.w	r0, [r2, #0x88]
 80566e4: 9807         	ldr	r0, [sp, #0x1c]
 80566e6: 3080         	adds	r0, #0x80
 80566e8: 9a00         	ldr	r2, [sp]
 80566ea: 6892         	ldr	r2, [r2, #0x8]
 80566ec: 6050         	str	r0, [r2, #0x4]
 80566ee: 9807         	ldr	r0, [sp, #0x1c]
 80566f0: 3080         	adds	r0, #0x80
 80566f2: 9a00         	ldr	r2, [sp]
 80566f4: 6090         	str	r0, [r2, #0x8]
 80566f6: 9a07         	ldr	r2, [sp, #0x1c]
 80566f8: f8d2 00a8    	ldr.w	r0, [r2, #0xa8]
 80566fc: eb00 0080    	add.w	r0, r0, r0, lsl #2
 8056700: eb01 0080    	add.w	r0, r1, r0, lsl #2
 8056704: f8c2 0090    	str.w	r0, [r2, #0x90]
 8056708: 9807         	ldr	r0, [sp, #0x1c]
 805670a: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 805670e: eb00 0280    	add.w	r2, r0, r0, lsl #2
 8056712: f851 0022    	ldr.w	r0, [r1, r2, lsl #2]
 8056716: 3001         	adds	r0, #0x1
 8056718: f841 0022    	str.w	r0, [r1, r2, lsl #2]
 805671c: e7ff         	b	0x805671e <xTaskIncrementTick+0x22a> @ imm = #-0x2
 805671e: e7ff         	b	0x8056720 <xTaskIncrementTick+0x22c> @ imm = #-0x2
;                             if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8056720: 9807         	ldr	r0, [sp, #0x1c]
 8056722: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 8056726: f240 0100    	movw	r1, #0x0
 805672a: f2c0 0100    	movt	r1, #0x0
 805672e: 6809         	ldr	r1, [r1]
 8056730: f8d1 10a8    	ldr.w	r1, [r1, #0xa8]
 8056734: 4288         	cmp	r0, r1
 8056736: d903         	bls	0x8056740 <xTaskIncrementTick+0x24c> @ imm = #0x6
 8056738: e7ff         	b	0x805673a <xTaskIncrementTick+0x246> @ imm = #-0x2
 805673a: 2001         	movs	r0, #0x1
;                                 xSwitchRequired = pdTRUE;
 805673c: 9005         	str	r0, [sp, #0x14]
;                             }
 805673e: e000         	b	0x8056742 <xTaskIncrementTick+0x24e> @ imm = #0x0
 8056740: e7ff         	b	0x8056742 <xTaskIncrementTick+0x24e> @ imm = #-0x2
 8056742: e7ff         	b	0x8056744 <xTaskIncrementTick+0x250> @ imm = #-0x2
;             for( ; ; )
 8056744: e722         	b	0x805658c <xTaskIncrementTick+0x98> @ imm = #-0x1bc
;         }
 8056746: e7ff         	b	0x8056748 <xTaskIncrementTick+0x254> @ imm = #-0x2
;                 if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8056748: f240 0000    	movw	r0, #0x0
 805674c: f2c0 0000    	movt	r0, #0x0
 8056750: 6800         	ldr	r0, [r0]
 8056752: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 8056756: eb00 0180    	add.w	r1, r0, r0, lsl #2
 805675a: f240 0000    	movw	r0, #0x0
 805675e: f2c0 0000    	movt	r0, #0x0
 8056762: f850 0021    	ldr.w	r0, [r0, r1, lsl #2]
 8056766: 2802         	cmp	r0, #0x2
 8056768: d303         	blo	0x8056772 <xTaskIncrementTick+0x27e> @ imm = #0x6
 805676a: e7ff         	b	0x805676c <xTaskIncrementTick+0x278> @ imm = #-0x2
 805676c: 2001         	movs	r0, #0x1
;                     xSwitchRequired = pdTRUE;
 805676e: 9005         	str	r0, [sp, #0x14]
;                 }
 8056770: e000         	b	0x8056774 <xTaskIncrementTick+0x280> @ imm = #0x0
 8056772: e7ff         	b	0x8056774 <xTaskIncrementTick+0x280> @ imm = #-0x2
;                 if( xYieldPendings[ 0 ] != pdFALSE )
 8056774: f240 0000    	movw	r0, #0x0
 8056778: f2c0 0000    	movt	r0, #0x0
 805677c: 6800         	ldr	r0, [r0]
 805677e: b118         	cbz	r0, 0x8056788 <xTaskIncrementTick+0x294> @ imm = #0x6
 8056780: e7ff         	b	0x8056782 <xTaskIncrementTick+0x28e> @ imm = #-0x2
 8056782: 2001         	movs	r0, #0x1
;                     xSwitchRequired = pdTRUE;
 8056784: 9005         	str	r0, [sp, #0x14]
;                 }
 8056786: e000         	b	0x805678a <xTaskIncrementTick+0x296> @ imm = #0x0
 8056788: e7ff         	b	0x805678a <xTaskIncrementTick+0x296> @ imm = #-0x2
;     }
 805678a: e007         	b	0x805679c <xTaskIncrementTick+0x2a8> @ imm = #0xe
;         ++xPendedTicks;
 805678c: f240 0100    	movw	r1, #0x0
 8056790: f2c0 0100    	movt	r1, #0x0
 8056794: 6808         	ldr	r0, [r1]
 8056796: 3001         	adds	r0, #0x1
 8056798: 6008         	str	r0, [r1]
 805679a: e7ff         	b	0x805679c <xTaskIncrementTick+0x2a8> @ imm = #-0x2
;     return xSwitchRequired;
 805679c: 9805         	ldr	r0, [sp, #0x14]
 805679e: b008         	add	sp, #0x20
 80567a0: bd80         	pop	{r7, pc}

080567a2 <xTaskGetTickCount>:
; {
 80567a2: b081         	sub	sp, #0x4
;         xTicks = xTickCount;
 80567a4: f240 0000    	movw	r0, #0x0
 80567a8: f2c0 0000    	movt	r0, #0x0
 80567ac: 6800         	ldr	r0, [r0]
 80567ae: 9000         	str	r0, [sp]
;     return xTicks;
 80567b0: 9800         	ldr	r0, [sp]
 80567b2: b001         	add	sp, #0x4
 80567b4: 4770         	bx	lr

080567b6 <xTaskGetTickCountFromISR>:
; {
 80567b6: b580         	push	{r7, lr}
 80567b8: 466f         	mov	r7, sp
 80567ba: b082         	sub	sp, #0x8
;     portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80567bc: f7ff fffe    	bl	0x80567bc <xTaskGetTickCountFromISR+0x6> @ imm = #-0x4
 80567c0: 2000         	movs	r0, #0x0
;     uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80567c2: 9000         	str	r0, [sp]
;         xReturn = xTickCount;
 80567c4: f240 0000    	movw	r0, #0x0
 80567c8: f2c0 0000    	movt	r0, #0x0
 80567cc: 6800         	ldr	r0, [r0]
 80567ce: 9001         	str	r0, [sp, #0x4]
;     return xReturn;
 80567d0: 9801         	ldr	r0, [sp, #0x4]
 80567d2: b002         	add	sp, #0x8
 80567d4: bd80         	pop	{r7, pc}

080567d6 <uxTaskGetNumberOfTasks>:
;     return uxCurrentNumberOfTasks;
 80567d6: f240 0000    	movw	r0, #0x0
 80567da: f2c0 0000    	movt	r0, #0x0
 80567de: 6800         	ldr	r0, [r0]
 80567e0: 4770         	bx	lr

080567e2 <pcTaskGetName>:
; {
 80567e2: b580         	push	{r7, lr}
 80567e4: 466f         	mov	r7, sp
 80567e6: b084         	sub	sp, #0x10
 80567e8: 9003         	str	r0, [sp, #0xc]
;     pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 80567ea: 9803         	ldr	r0, [sp, #0xc]
 80567ec: b938         	cbnz	r0, 0x80567fe <pcTaskGetName+0x1c> @ imm = #0xe
 80567ee: e7ff         	b	0x80567f0 <pcTaskGetName+0xe> @ imm = #-0x2
 80567f0: f240 0000    	movw	r0, #0x0
 80567f4: f2c0 0000    	movt	r0, #0x0
 80567f8: 6800         	ldr	r0, [r0]
 80567fa: 9001         	str	r0, [sp, #0x4]
 80567fc: e002         	b	0x8056804 <pcTaskGetName+0x22> @ imm = #0x4
 80567fe: 9803         	ldr	r0, [sp, #0xc]
 8056800: 9001         	str	r0, [sp, #0x4]
 8056802: e7ff         	b	0x8056804 <pcTaskGetName+0x22> @ imm = #-0x2
 8056804: 9801         	ldr	r0, [sp, #0x4]
 8056806: 9002         	str	r0, [sp, #0x8]
;     configASSERT( pxTCB );
 8056808: 9802         	ldr	r0, [sp, #0x8]
 805680a: b920         	cbnz	r0, 0x8056816 <pcTaskGetName+0x34> @ imm = #0x8
 805680c: e7ff         	b	0x805680e <pcTaskGetName+0x2c> @ imm = #-0x2
 805680e: f7ff fffe    	bl	0x805680e <pcTaskGetName+0x2c> @ imm = #-0x4
 8056812: e7ff         	b	0x8056814 <pcTaskGetName+0x32> @ imm = #-0x2
 8056814: e7fe         	b	0x8056814 <pcTaskGetName+0x32> @ imm = #-0x4
;     return &( pxTCB->pcTaskName[ 0 ] );
 8056816: 9802         	ldr	r0, [sp, #0x8]
 8056818: 30b0         	adds	r0, #0xb0
 805681a: b004         	add	sp, #0x10
 805681c: bd80         	pop	{r7, pc}

0805681e <uxTaskGetSystemState>:
;     {
 805681e: b580         	push	{r7, lr}
 8056820: 466f         	mov	r7, sp
 8056822: b08c         	sub	sp, #0x30
 8056824: 900b         	str	r0, [sp, #0x2c]
 8056826: 910a         	str	r1, [sp, #0x28]
 8056828: 9209         	str	r2, [sp, #0x24]
 805682a: 2000         	movs	r0, #0x0
;         UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 805682c: 9008         	str	r0, [sp, #0x20]
 805682e: 2010         	movs	r0, #0x10
 8056830: 9007         	str	r0, [sp, #0x1c]
;         vTaskSuspendAll();
 8056832: f7ff fffe    	bl	0x8056832 <uxTaskGetSystemState+0x14> @ imm = #-0x4
;             if( uxArraySize >= uxCurrentNumberOfTasks )
 8056836: 980a         	ldr	r0, [sp, #0x28]
 8056838: f240 0100    	movw	r1, #0x0
 805683c: f2c0 0100    	movt	r1, #0x0
 8056840: 6809         	ldr	r1, [r1]
 8056842: 4288         	cmp	r0, r1
 8056844: d373         	blo	0x805692e <uxTaskGetSystemState+0x110> @ imm = #0xe6
 8056846: e7ff         	b	0x8056848 <uxTaskGetSystemState+0x2a> @ imm = #-0x2
;                 do
 8056848: e7ff         	b	0x805684a <uxTaskGetSystemState+0x2c> @ imm = #-0x2
;                     uxQueue--;
 805684a: 9807         	ldr	r0, [sp, #0x1c]
 805684c: 3801         	subs	r0, #0x1
 805684e: 9007         	str	r0, [sp, #0x1c]
;                     uxTask = ( UBaseType_t ) ( uxTask + prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady ) );
 8056850: 9908         	ldr	r1, [sp, #0x20]
 8056852: 9106         	str	r1, [sp, #0x18]
 8056854: 980b         	ldr	r0, [sp, #0x2c]
 8056856: eb01 01c1    	add.w	r1, r1, r1, lsl #3
 805685a: eb00 0081    	add.w	r0, r0, r1, lsl #2
 805685e: 9907         	ldr	r1, [sp, #0x1c]
 8056860: eb01 0281    	add.w	r2, r1, r1, lsl #2
 8056864: f240 0100    	movw	r1, #0x0
 8056868: f2c0 0100    	movt	r1, #0x0
 805686c: eb01 0182    	add.w	r1, r1, r2, lsl #2
 8056870: 2201         	movs	r2, #0x1
 8056872: f000 f862    	bl	0x805693a <prvListTasksWithinSingleList> @ imm = #0xc4
 8056876: 4601         	mov	r1, r0
 8056878: 9806         	ldr	r0, [sp, #0x18]
 805687a: 4408         	add	r0, r1
 805687c: 9008         	str	r0, [sp, #0x20]
;                 } while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 805687e: e7ff         	b	0x8056880 <uxTaskGetSystemState+0x62> @ imm = #-0x2
 8056880: 9807         	ldr	r0, [sp, #0x1c]
 8056882: 2800         	cmp	r0, #0x0
 8056884: d1e1         	bne	0x805684a <uxTaskGetSystemState+0x2c> @ imm = #-0x3e
 8056886: e7ff         	b	0x8056888 <uxTaskGetSystemState+0x6a> @ imm = #-0x2
;                 uxTask = ( UBaseType_t ) ( uxTask + prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked ) );
 8056888: 9908         	ldr	r1, [sp, #0x20]
 805688a: 9102         	str	r1, [sp, #0x8]
 805688c: 980b         	ldr	r0, [sp, #0x2c]
 805688e: eb01 01c1    	add.w	r1, r1, r1, lsl #3
 8056892: eb00 0081    	add.w	r0, r0, r1, lsl #2
 8056896: f240 0100    	movw	r1, #0x0
 805689a: f2c0 0100    	movt	r1, #0x0
 805689e: 6809         	ldr	r1, [r1]
 80568a0: 2202         	movs	r2, #0x2
 80568a2: 9201         	str	r2, [sp, #0x4]
 80568a4: f000 f849    	bl	0x805693a <prvListTasksWithinSingleList> @ imm = #0x92
 80568a8: 9a01         	ldr	r2, [sp, #0x4]
 80568aa: 4601         	mov	r1, r0
 80568ac: 9802         	ldr	r0, [sp, #0x8]
 80568ae: 4408         	add	r0, r1
 80568b0: 9008         	str	r0, [sp, #0x20]
;                 uxTask = ( UBaseType_t ) ( uxTask + prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked ) );
 80568b2: 9908         	ldr	r1, [sp, #0x20]
 80568b4: 9103         	str	r1, [sp, #0xc]
 80568b6: 980b         	ldr	r0, [sp, #0x2c]
 80568b8: eb01 01c1    	add.w	r1, r1, r1, lsl #3
 80568bc: eb00 0081    	add.w	r0, r0, r1, lsl #2
 80568c0: f240 0100    	movw	r1, #0x0
 80568c4: f2c0 0100    	movt	r1, #0x0
 80568c8: 6809         	ldr	r1, [r1]
 80568ca: f000 f836    	bl	0x805693a <prvListTasksWithinSingleList> @ imm = #0x6c
 80568ce: 4601         	mov	r1, r0
 80568d0: 9803         	ldr	r0, [sp, #0xc]
 80568d2: 4408         	add	r0, r1
 80568d4: 9008         	str	r0, [sp, #0x20]
;                     uxTask = ( UBaseType_t ) ( uxTask + prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted ) );
 80568d6: 9908         	ldr	r1, [sp, #0x20]
 80568d8: 9104         	str	r1, [sp, #0x10]
 80568da: 980b         	ldr	r0, [sp, #0x2c]
 80568dc: eb01 01c1    	add.w	r1, r1, r1, lsl #3
 80568e0: eb00 0081    	add.w	r0, r0, r1, lsl #2
 80568e4: f240 0100    	movw	r1, #0x0
 80568e8: f2c0 0100    	movt	r1, #0x0
 80568ec: 2204         	movs	r2, #0x4
 80568ee: f000 f824    	bl	0x805693a <prvListTasksWithinSingleList> @ imm = #0x48
 80568f2: 4601         	mov	r1, r0
 80568f4: 9804         	ldr	r0, [sp, #0x10]
 80568f6: 4408         	add	r0, r1
 80568f8: 9008         	str	r0, [sp, #0x20]
;                     uxTask = ( UBaseType_t ) ( uxTask + prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended ) );
 80568fa: 9908         	ldr	r1, [sp, #0x20]
 80568fc: 9105         	str	r1, [sp, #0x14]
 80568fe: 980b         	ldr	r0, [sp, #0x2c]
 8056900: eb01 01c1    	add.w	r1, r1, r1, lsl #3
 8056904: eb00 0081    	add.w	r0, r0, r1, lsl #2
 8056908: f240 0100    	movw	r1, #0x0
 805690c: f2c0 0100    	movt	r1, #0x0
 8056910: 2203         	movs	r2, #0x3
 8056912: f000 f812    	bl	0x805693a <prvListTasksWithinSingleList> @ imm = #0x24
 8056916: 4601         	mov	r1, r0
 8056918: 9805         	ldr	r0, [sp, #0x14]
 805691a: 4408         	add	r0, r1
 805691c: 9008         	str	r0, [sp, #0x20]
;                     if( pulTotalRunTime != NULL )
 805691e: 9809         	ldr	r0, [sp, #0x24]
 8056920: b120         	cbz	r0, 0x805692c <uxTaskGetSystemState+0x10e> @ imm = #0x8
 8056922: e7ff         	b	0x8056924 <uxTaskGetSystemState+0x106> @ imm = #-0x2
;                         *pulTotalRunTime = 0;
 8056924: 9909         	ldr	r1, [sp, #0x24]
 8056926: 2000         	movs	r0, #0x0
 8056928: 6008         	str	r0, [r1]
;                     }
 805692a: e7ff         	b	0x805692c <uxTaskGetSystemState+0x10e> @ imm = #-0x2
;             }
 805692c: e000         	b	0x8056930 <uxTaskGetSystemState+0x112> @ imm = #0x0
 805692e: e7ff         	b	0x8056930 <uxTaskGetSystemState+0x112> @ imm = #-0x2
;         ( void ) xTaskResumeAll();
 8056930: f7ff fffe    	bl	0x8056930 <uxTaskGetSystemState+0x112> @ imm = #-0x4
;         return uxTask;
 8056934: 9808         	ldr	r0, [sp, #0x20]
 8056936: b00c         	add	sp, #0x30
 8056938: bd80         	pop	{r7, pc}

0805693a <prvListTasksWithinSingleList>:
;     {
 805693a: b580         	push	{r7, lr}
 805693c: 466f         	mov	r7, sp
 805693e: b088         	sub	sp, #0x20
 8056940: 9007         	str	r0, [sp, #0x1c]
 8056942: 9106         	str	r1, [sp, #0x18]
 8056944: f807 2c09    	strb	r2, [r7, #-9]
 8056948: 2000         	movs	r0, #0x0
;         UBaseType_t uxTask = 0;
 805694a: 9002         	str	r0, [sp, #0x8]
;         if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 805694c: 9806         	ldr	r0, [sp, #0x18]
 805694e: 6800         	ldr	r0, [r0]
 8056950: 2800         	cmp	r0, #0x0
 8056952: d043         	beq	0x80569dc <prvListTasksWithinSingleList+0xa2> @ imm = #0x86
 8056954: e7ff         	b	0x8056956 <prvListTasksWithinSingleList+0x1c> @ imm = #-0x2
;             listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8056956: e7ff         	b	0x8056958 <prvListTasksWithinSingleList+0x1e> @ imm = #-0x2
 8056958: 9806         	ldr	r0, [sp, #0x18]
 805695a: 9001         	str	r0, [sp, #0x4]
 805695c: 9901         	ldr	r1, [sp, #0x4]
 805695e: 6848         	ldr	r0, [r1, #0x4]
 8056960: 6840         	ldr	r0, [r0, #0x4]
 8056962: 6048         	str	r0, [r1, #0x4]
 8056964: 9901         	ldr	r1, [sp, #0x4]
 8056966: 6848         	ldr	r0, [r1, #0x4]
 8056968: 3108         	adds	r1, #0x8
 805696a: 4288         	cmp	r0, r1
 805696c: d104         	bne	0x8056978 <prvListTasksWithinSingleList+0x3e> @ imm = #0x8
 805696e: e7ff         	b	0x8056970 <prvListTasksWithinSingleList+0x36> @ imm = #-0x2
 8056970: 9901         	ldr	r1, [sp, #0x4]
 8056972: 68c8         	ldr	r0, [r1, #0xc]
 8056974: 6048         	str	r0, [r1, #0x4]
 8056976: e7ff         	b	0x8056978 <prvListTasksWithinSingleList+0x3e> @ imm = #-0x2
 8056978: 9801         	ldr	r0, [sp, #0x4]
 805697a: 6840         	ldr	r0, [r0, #0x4]
 805697c: 68c0         	ldr	r0, [r0, #0xc]
 805697e: 9003         	str	r0, [sp, #0xc]
 8056980: e7ff         	b	0x8056982 <prvListTasksWithinSingleList+0x48> @ imm = #-0x2
;             do
 8056982: e7ff         	b	0x8056984 <prvListTasksWithinSingleList+0x4a> @ imm = #-0x2
;                 listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8056984: e7ff         	b	0x8056986 <prvListTasksWithinSingleList+0x4c> @ imm = #-0x2
 8056986: 9806         	ldr	r0, [sp, #0x18]
 8056988: 9000         	str	r0, [sp]
 805698a: 9900         	ldr	r1, [sp]
 805698c: 6848         	ldr	r0, [r1, #0x4]
 805698e: 6840         	ldr	r0, [r0, #0x4]
 8056990: 6048         	str	r0, [r1, #0x4]
 8056992: 9900         	ldr	r1, [sp]
 8056994: 6848         	ldr	r0, [r1, #0x4]
 8056996: 3108         	adds	r1, #0x8
 8056998: 4288         	cmp	r0, r1
 805699a: d104         	bne	0x80569a6 <prvListTasksWithinSingleList+0x6c> @ imm = #0x8
 805699c: e7ff         	b	0x805699e <prvListTasksWithinSingleList+0x64> @ imm = #-0x2
 805699e: 9900         	ldr	r1, [sp]
 80569a0: 68c8         	ldr	r0, [r1, #0xc]
 80569a2: 6048         	str	r0, [r1, #0x4]
 80569a4: e7ff         	b	0x80569a6 <prvListTasksWithinSingleList+0x6c> @ imm = #-0x2
 80569a6: 9800         	ldr	r0, [sp]
 80569a8: 6840         	ldr	r0, [r0, #0x4]
 80569aa: 68c0         	ldr	r0, [r0, #0xc]
 80569ac: 9004         	str	r0, [sp, #0x10]
 80569ae: e7ff         	b	0x80569b0 <prvListTasksWithinSingleList+0x76> @ imm = #-0x2
;                 vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 80569b0: 9804         	ldr	r0, [sp, #0x10]
 80569b2: 9907         	ldr	r1, [sp, #0x1c]
 80569b4: 9a02         	ldr	r2, [sp, #0x8]
 80569b6: eb02 02c2    	add.w	r2, r2, r2, lsl #3
 80569ba: eb01 0182    	add.w	r1, r1, r2, lsl #2
 80569be: f817 3c09    	ldrb	r3, [r7, #-9]
 80569c2: 2201         	movs	r2, #0x1
 80569c4: f7ff fffe    	bl	0x80569c4 <prvListTasksWithinSingleList+0x8a> @ imm = #-0x4
;                 uxTask++;
 80569c8: 9802         	ldr	r0, [sp, #0x8]
 80569ca: 3001         	adds	r0, #0x1
 80569cc: 9002         	str	r0, [sp, #0x8]
;             } while( pxNextTCB != pxFirstTCB );
 80569ce: e7ff         	b	0x80569d0 <prvListTasksWithinSingleList+0x96> @ imm = #-0x2
 80569d0: 9804         	ldr	r0, [sp, #0x10]
 80569d2: 9903         	ldr	r1, [sp, #0xc]
 80569d4: 4288         	cmp	r0, r1
 80569d6: d1d5         	bne	0x8056984 <prvListTasksWithinSingleList+0x4a> @ imm = #-0x56
 80569d8: e7ff         	b	0x80569da <prvListTasksWithinSingleList+0xa0> @ imm = #-0x2
;         }
 80569da: e000         	b	0x80569de <prvListTasksWithinSingleList+0xa4> @ imm = #0x0
 80569dc: e7ff         	b	0x80569de <prvListTasksWithinSingleList+0xa4> @ imm = #-0x2
;         return uxTask;
 80569de: 9802         	ldr	r0, [sp, #0x8]
 80569e0: b008         	add	sp, #0x20
 80569e2: bd80         	pop	{r7, pc}

080569e4 <xTaskCatchUpTicks>:
; {
 80569e4: b580         	push	{r7, lr}
 80569e6: 466f         	mov	r7, sp
 80569e8: b082         	sub	sp, #0x8
 80569ea: 9001         	str	r0, [sp, #0x4]
;     configASSERT( uxSchedulerSuspended == ( UBaseType_t ) 0U );
 80569ec: f240 0000    	movw	r0, #0x0
 80569f0: f2c0 0000    	movt	r0, #0x0
 80569f4: 6800         	ldr	r0, [r0]
 80569f6: b120         	cbz	r0, 0x8056a02 <xTaskCatchUpTicks+0x1e> @ imm = #0x8
 80569f8: e7ff         	b	0x80569fa <xTaskCatchUpTicks+0x16> @ imm = #-0x2
 80569fa: f7ff fffe    	bl	0x80569fa <xTaskCatchUpTicks+0x16> @ imm = #-0x4
 80569fe: e7ff         	b	0x8056a00 <xTaskCatchUpTicks+0x1c> @ imm = #-0x2
 8056a00: e7fe         	b	0x8056a00 <xTaskCatchUpTicks+0x1c> @ imm = #-0x4
;     vTaskSuspendAll();
 8056a02: f7ff fffe    	bl	0x8056a02 <xTaskCatchUpTicks+0x1e> @ imm = #-0x4
;     taskENTER_CRITICAL();
 8056a06: f7ff fffe    	bl	0x8056a06 <xTaskCatchUpTicks+0x22> @ imm = #-0x4
;         xPendedTicks += xTicksToCatchUp;
 8056a0a: 9a01         	ldr	r2, [sp, #0x4]
 8056a0c: f240 0100    	movw	r1, #0x0
 8056a10: f2c0 0100    	movt	r1, #0x0
 8056a14: 6808         	ldr	r0, [r1]
 8056a16: 4410         	add	r0, r2
 8056a18: 6008         	str	r0, [r1]
;     taskEXIT_CRITICAL();
 8056a1a: f7ff fffe    	bl	0x8056a1a <xTaskCatchUpTicks+0x36> @ imm = #-0x4
;     xYieldOccurred = xTaskResumeAll();
 8056a1e: f7ff fffe    	bl	0x8056a1e <xTaskCatchUpTicks+0x3a> @ imm = #-0x4
 8056a22: 9000         	str	r0, [sp]
;     return xYieldOccurred;
 8056a24: 9800         	ldr	r0, [sp]
 8056a26: b002         	add	sp, #0x8
 8056a28: bd80         	pop	{r7, pc}

08056a2a <vTaskPlaceOnEventList>:
; {
 8056a2a: b580         	push	{r7, lr}
 8056a2c: 466f         	mov	r7, sp
 8056a2e: b082         	sub	sp, #0x8
 8056a30: 9001         	str	r0, [sp, #0x4]
 8056a32: 9100         	str	r1, [sp]
;     configASSERT( pxEventList );
 8056a34: 9801         	ldr	r0, [sp, #0x4]
 8056a36: b920         	cbnz	r0, 0x8056a42 <vTaskPlaceOnEventList+0x18> @ imm = #0x8
 8056a38: e7ff         	b	0x8056a3a <vTaskPlaceOnEventList+0x10> @ imm = #-0x2
 8056a3a: f7ff fffe    	bl	0x8056a3a <vTaskPlaceOnEventList+0x10> @ imm = #-0x4
 8056a3e: e7ff         	b	0x8056a40 <vTaskPlaceOnEventList+0x16> @ imm = #-0x2
 8056a40: e7fe         	b	0x8056a40 <vTaskPlaceOnEventList+0x16> @ imm = #-0x4
;     vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8056a42: 9801         	ldr	r0, [sp, #0x4]
 8056a44: f240 0100    	movw	r1, #0x0
 8056a48: f2c0 0100    	movt	r1, #0x0
 8056a4c: 6809         	ldr	r1, [r1]
 8056a4e: 3194         	adds	r1, #0x94
 8056a50: f7ff fffe    	bl	0x8056a50 <vTaskPlaceOnEventList+0x26> @ imm = #-0x4
;     prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8056a54: 9800         	ldr	r0, [sp]
 8056a56: 2101         	movs	r1, #0x1
 8056a58: f7fe feb6    	bl	0x80557c8 <prvAddCurrentTaskToDelayedList> @ imm = #-0x1294
; }
 8056a5c: b002         	add	sp, #0x8
 8056a5e: bd80         	pop	{r7, pc}

08056a60 <vTaskPlaceOnUnorderedEventList>:
; {
 8056a60: b580         	push	{r7, lr}
 8056a62: 466f         	mov	r7, sp
 8056a64: b084         	sub	sp, #0x10
 8056a66: 9003         	str	r0, [sp, #0xc]
 8056a68: 9102         	str	r1, [sp, #0x8]
 8056a6a: 9201         	str	r2, [sp, #0x4]
;     configASSERT( pxEventList );
 8056a6c: 9803         	ldr	r0, [sp, #0xc]
 8056a6e: b920         	cbnz	r0, 0x8056a7a <vTaskPlaceOnUnorderedEventList+0x1a> @ imm = #0x8
 8056a70: e7ff         	b	0x8056a72 <vTaskPlaceOnUnorderedEventList+0x12> @ imm = #-0x2
 8056a72: f7ff fffe    	bl	0x8056a72 <vTaskPlaceOnUnorderedEventList+0x12> @ imm = #-0x4
 8056a76: e7ff         	b	0x8056a78 <vTaskPlaceOnUnorderedEventList+0x18> @ imm = #-0x2
 8056a78: e7fe         	b	0x8056a78 <vTaskPlaceOnUnorderedEventList+0x18> @ imm = #-0x4
;     configASSERT( uxSchedulerSuspended != ( UBaseType_t ) 0U );
 8056a7a: f240 0000    	movw	r0, #0x0
 8056a7e: f2c0 0000    	movt	r0, #0x0
 8056a82: 6800         	ldr	r0, [r0]
 8056a84: b920         	cbnz	r0, 0x8056a90 <vTaskPlaceOnUnorderedEventList+0x30> @ imm = #0x8
 8056a86: e7ff         	b	0x8056a88 <vTaskPlaceOnUnorderedEventList+0x28> @ imm = #-0x2
 8056a88: f7ff fffe    	bl	0x8056a88 <vTaskPlaceOnUnorderedEventList+0x28> @ imm = #-0x4
 8056a8c: e7ff         	b	0x8056a8e <vTaskPlaceOnUnorderedEventList+0x2e> @ imm = #-0x2
 8056a8e: e7fe         	b	0x8056a8e <vTaskPlaceOnUnorderedEventList+0x2e> @ imm = #-0x4
;     listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8056a90: 9802         	ldr	r0, [sp, #0x8]
 8056a92: f040 4000    	orr	r0, r0, #0x80000000
 8056a96: f240 0100    	movw	r1, #0x0
 8056a9a: f2c0 0100    	movt	r1, #0x0
 8056a9e: 6809         	ldr	r1, [r1]
 8056aa0: f8c1 0094    	str.w	r0, [r1, #0x94]
;     listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8056aa4: e7ff         	b	0x8056aa6 <vTaskPlaceOnUnorderedEventList+0x46> @ imm = #-0x2
 8056aa6: 9803         	ldr	r0, [sp, #0xc]
 8056aa8: 6840         	ldr	r0, [r0, #0x4]
 8056aaa: 9000         	str	r0, [sp]
 8056aac: 9800         	ldr	r0, [sp]
 8056aae: f240 0100    	movw	r1, #0x0
 8056ab2: f2c0 0100    	movt	r1, #0x0
 8056ab6: 680a         	ldr	r2, [r1]
 8056ab8: f8c2 0098    	str.w	r0, [r2, #0x98]
 8056abc: 9800         	ldr	r0, [sp]
 8056abe: 6880         	ldr	r0, [r0, #0x8]
 8056ac0: 680a         	ldr	r2, [r1]
 8056ac2: f8c2 009c    	str.w	r0, [r2, #0x9c]
 8056ac6: 6808         	ldr	r0, [r1]
 8056ac8: 3094         	adds	r0, #0x94
 8056aca: 9a00         	ldr	r2, [sp]
 8056acc: 6892         	ldr	r2, [r2, #0x8]
 8056ace: 6050         	str	r0, [r2, #0x4]
 8056ad0: 6808         	ldr	r0, [r1]
 8056ad2: 3094         	adds	r0, #0x94
 8056ad4: 9a00         	ldr	r2, [sp]
 8056ad6: 6090         	str	r0, [r2, #0x8]
 8056ad8: 9803         	ldr	r0, [sp, #0xc]
 8056ada: 6809         	ldr	r1, [r1]
 8056adc: f8c1 00a4    	str.w	r0, [r1, #0xa4]
 8056ae0: 9903         	ldr	r1, [sp, #0xc]
 8056ae2: 6808         	ldr	r0, [r1]
 8056ae4: 3001         	adds	r0, #0x1
 8056ae6: 6008         	str	r0, [r1]
 8056ae8: e7ff         	b	0x8056aea <vTaskPlaceOnUnorderedEventList+0x8a> @ imm = #-0x2
;     prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8056aea: 9801         	ldr	r0, [sp, #0x4]
 8056aec: 2101         	movs	r1, #0x1
 8056aee: f7fe fe6b    	bl	0x80557c8 <prvAddCurrentTaskToDelayedList> @ imm = #-0x132a
; }
 8056af2: b004         	add	sp, #0x10
 8056af4: bd80         	pop	{r7, pc}

08056af6 <vTaskPlaceOnEventListRestricted>:
;     {
 8056af6: b580         	push	{r7, lr}
 8056af8: 466f         	mov	r7, sp
 8056afa: b084         	sub	sp, #0x10
 8056afc: 9003         	str	r0, [sp, #0xc]
 8056afe: 9102         	str	r1, [sp, #0x8]
 8056b00: 9201         	str	r2, [sp, #0x4]
;         configASSERT( pxEventList );
 8056b02: 9803         	ldr	r0, [sp, #0xc]
 8056b04: b920         	cbnz	r0, 0x8056b10 <vTaskPlaceOnEventListRestricted+0x1a> @ imm = #0x8
 8056b06: e7ff         	b	0x8056b08 <vTaskPlaceOnEventListRestricted+0x12> @ imm = #-0x2
 8056b08: f7ff fffe    	bl	0x8056b08 <vTaskPlaceOnEventListRestricted+0x12> @ imm = #-0x4
 8056b0c: e7ff         	b	0x8056b0e <vTaskPlaceOnEventListRestricted+0x18> @ imm = #-0x2
 8056b0e: e7fe         	b	0x8056b0e <vTaskPlaceOnEventListRestricted+0x18> @ imm = #-0x4
;         listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8056b10: e7ff         	b	0x8056b12 <vTaskPlaceOnEventListRestricted+0x1c> @ imm = #-0x2
 8056b12: 9803         	ldr	r0, [sp, #0xc]
 8056b14: 6840         	ldr	r0, [r0, #0x4]
 8056b16: 9000         	str	r0, [sp]
 8056b18: 9800         	ldr	r0, [sp]
 8056b1a: f240 0100    	movw	r1, #0x0
 8056b1e: f2c0 0100    	movt	r1, #0x0
 8056b22: 680a         	ldr	r2, [r1]
 8056b24: f8c2 0098    	str.w	r0, [r2, #0x98]
 8056b28: 9800         	ldr	r0, [sp]
 8056b2a: 6880         	ldr	r0, [r0, #0x8]
 8056b2c: 680a         	ldr	r2, [r1]
 8056b2e: f8c2 009c    	str.w	r0, [r2, #0x9c]
 8056b32: 6808         	ldr	r0, [r1]
 8056b34: 3094         	adds	r0, #0x94
 8056b36: 9a00         	ldr	r2, [sp]
 8056b38: 6892         	ldr	r2, [r2, #0x8]
 8056b3a: 6050         	str	r0, [r2, #0x4]
 8056b3c: 6808         	ldr	r0, [r1]
 8056b3e: 3094         	adds	r0, #0x94
 8056b40: 9a00         	ldr	r2, [sp]
 8056b42: 6090         	str	r0, [r2, #0x8]
 8056b44: 9803         	ldr	r0, [sp, #0xc]
 8056b46: 6809         	ldr	r1, [r1]
 8056b48: f8c1 00a4    	str.w	r0, [r1, #0xa4]
 8056b4c: 9903         	ldr	r1, [sp, #0xc]
 8056b4e: 6808         	ldr	r0, [r1]
 8056b50: 3001         	adds	r0, #0x1
 8056b52: 6008         	str	r0, [r1]
 8056b54: e7ff         	b	0x8056b56 <vTaskPlaceOnEventListRestricted+0x60> @ imm = #-0x2
;         if( xWaitIndefinitely != pdFALSE )
 8056b56: 9801         	ldr	r0, [sp, #0x4]
 8056b58: b120         	cbz	r0, 0x8056b64 <vTaskPlaceOnEventListRestricted+0x6e> @ imm = #0x8
 8056b5a: e7ff         	b	0x8056b5c <vTaskPlaceOnEventListRestricted+0x66> @ imm = #-0x2
 8056b5c: f04f 30ff    	mov.w	r0, #0xffffffff
;             xTicksToWait = portMAX_DELAY;
 8056b60: 9002         	str	r0, [sp, #0x8]
;         }
 8056b62: e7ff         	b	0x8056b64 <vTaskPlaceOnEventListRestricted+0x6e> @ imm = #-0x2
;         prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8056b64: 9802         	ldr	r0, [sp, #0x8]
 8056b66: 9901         	ldr	r1, [sp, #0x4]
 8056b68: f7fe fe2e    	bl	0x80557c8 <prvAddCurrentTaskToDelayedList> @ imm = #-0x13a4
;     }
 8056b6c: b004         	add	sp, #0x10
 8056b6e: bd80         	pop	{r7, pc}

08056b70 <xTaskRemoveFromEventList>:
; {
 8056b70: b580         	push	{r7, lr}
 8056b72: 466f         	mov	r7, sp
 8056b74: b088         	sub	sp, #0x20
 8056b76: 9007         	str	r0, [sp, #0x1c]
;     pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8056b78: 9807         	ldr	r0, [sp, #0x1c]
 8056b7a: 68c0         	ldr	r0, [r0, #0xc]
 8056b7c: 68c0         	ldr	r0, [r0, #0xc]
 8056b7e: 9006         	str	r0, [sp, #0x18]
;     configASSERT( pxUnblockedTCB );
 8056b80: 9806         	ldr	r0, [sp, #0x18]
 8056b82: b920         	cbnz	r0, 0x8056b8e <xTaskRemoveFromEventList+0x1e> @ imm = #0x8
 8056b84: e7ff         	b	0x8056b86 <xTaskRemoveFromEventList+0x16> @ imm = #-0x2
 8056b86: f7ff fffe    	bl	0x8056b86 <xTaskRemoveFromEventList+0x16> @ imm = #-0x4
 8056b8a: e7ff         	b	0x8056b8c <xTaskRemoveFromEventList+0x1c> @ imm = #-0x2
 8056b8c: e7fe         	b	0x8056b8c <xTaskRemoveFromEventList+0x1c> @ imm = #-0x4
;     listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8056b8e: e7ff         	b	0x8056b90 <xTaskRemoveFromEventList+0x20> @ imm = #-0x2
 8056b90: 9806         	ldr	r0, [sp, #0x18]
 8056b92: f8d0 00a4    	ldr.w	r0, [r0, #0xa4]
 8056b96: 9004         	str	r0, [sp, #0x10]
 8056b98: 9806         	ldr	r0, [sp, #0x18]
 8056b9a: f8d0 1098    	ldr.w	r1, [r0, #0x98]
 8056b9e: f8d0 009c    	ldr.w	r0, [r0, #0x9c]
 8056ba2: 6088         	str	r0, [r1, #0x8]
 8056ba4: 9906         	ldr	r1, [sp, #0x18]
 8056ba6: f8d1 0098    	ldr.w	r0, [r1, #0x98]
 8056baa: f8d1 109c    	ldr.w	r1, [r1, #0x9c]
 8056bae: 6048         	str	r0, [r1, #0x4]
 8056bb0: 9804         	ldr	r0, [sp, #0x10]
 8056bb2: 6840         	ldr	r0, [r0, #0x4]
 8056bb4: 9906         	ldr	r1, [sp, #0x18]
 8056bb6: 3194         	adds	r1, #0x94
 8056bb8: 4288         	cmp	r0, r1
 8056bba: d106         	bne	0x8056bca <xTaskRemoveFromEventList+0x5a> @ imm = #0xc
 8056bbc: e7ff         	b	0x8056bbe <xTaskRemoveFromEventList+0x4e> @ imm = #-0x2
 8056bbe: 9806         	ldr	r0, [sp, #0x18]
 8056bc0: f8d0 009c    	ldr.w	r0, [r0, #0x9c]
 8056bc4: 9904         	ldr	r1, [sp, #0x10]
 8056bc6: 6048         	str	r0, [r1, #0x4]
 8056bc8: e7ff         	b	0x8056bca <xTaskRemoveFromEventList+0x5a> @ imm = #-0x2
 8056bca: 9906         	ldr	r1, [sp, #0x18]
 8056bcc: 2000         	movs	r0, #0x0
 8056bce: f8c1 00a4    	str.w	r0, [r1, #0xa4]
 8056bd2: 9904         	ldr	r1, [sp, #0x10]
 8056bd4: 6808         	ldr	r0, [r1]
 8056bd6: 3801         	subs	r0, #0x1
 8056bd8: 6008         	str	r0, [r1]
 8056bda: e7ff         	b	0x8056bdc <xTaskRemoveFromEventList+0x6c> @ imm = #-0x2
;     if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8056bdc: f240 0000    	movw	r0, #0x0
 8056be0: f2c0 0000    	movt	r0, #0x0
 8056be4: 6800         	ldr	r0, [r0]
 8056be6: 2800         	cmp	r0, #0x0
 8056be8: d174         	bne	0x8056cd4 <xTaskRemoveFromEventList+0x164> @ imm = #0xe8
 8056bea: e7ff         	b	0x8056bec <xTaskRemoveFromEventList+0x7c> @ imm = #-0x2
;         listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8056bec: e7ff         	b	0x8056bee <xTaskRemoveFromEventList+0x7e> @ imm = #-0x2
 8056bee: 9806         	ldr	r0, [sp, #0x18]
 8056bf0: f8d0 0090    	ldr.w	r0, [r0, #0x90]
 8056bf4: 9003         	str	r0, [sp, #0xc]
 8056bf6: 9806         	ldr	r0, [sp, #0x18]
 8056bf8: f8d0 1084    	ldr.w	r1, [r0, #0x84]
 8056bfc: f8d0 0088    	ldr.w	r0, [r0, #0x88]
 8056c00: 6088         	str	r0, [r1, #0x8]
 8056c02: 9906         	ldr	r1, [sp, #0x18]
 8056c04: f8d1 0084    	ldr.w	r0, [r1, #0x84]
 8056c08: f8d1 1088    	ldr.w	r1, [r1, #0x88]
 8056c0c: 6048         	str	r0, [r1, #0x4]
 8056c0e: 9803         	ldr	r0, [sp, #0xc]
 8056c10: 6840         	ldr	r0, [r0, #0x4]
 8056c12: 9906         	ldr	r1, [sp, #0x18]
 8056c14: 3180         	adds	r1, #0x80
 8056c16: 4288         	cmp	r0, r1
 8056c18: d106         	bne	0x8056c28 <xTaskRemoveFromEventList+0xb8> @ imm = #0xc
 8056c1a: e7ff         	b	0x8056c1c <xTaskRemoveFromEventList+0xac> @ imm = #-0x2
 8056c1c: 9806         	ldr	r0, [sp, #0x18]
 8056c1e: f8d0 0088    	ldr.w	r0, [r0, #0x88]
 8056c22: 9903         	ldr	r1, [sp, #0xc]
 8056c24: 6048         	str	r0, [r1, #0x4]
 8056c26: e7ff         	b	0x8056c28 <xTaskRemoveFromEventList+0xb8> @ imm = #-0x2
 8056c28: 9906         	ldr	r1, [sp, #0x18]
 8056c2a: 2000         	movs	r0, #0x0
 8056c2c: f8c1 0090    	str.w	r0, [r1, #0x90]
 8056c30: 9903         	ldr	r1, [sp, #0xc]
 8056c32: 6808         	ldr	r0, [r1]
 8056c34: 3801         	subs	r0, #0x1
 8056c36: 6008         	str	r0, [r1]
 8056c38: e7ff         	b	0x8056c3a <xTaskRemoveFromEventList+0xca> @ imm = #-0x2
;         prvAddTaskToReadyList( pxUnblockedTCB );
 8056c3a: e7ff         	b	0x8056c3c <xTaskRemoveFromEventList+0xcc> @ imm = #-0x2
 8056c3c: e7ff         	b	0x8056c3e <xTaskRemoveFromEventList+0xce> @ imm = #-0x2
 8056c3e: 9806         	ldr	r0, [sp, #0x18]
 8056c40: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 8056c44: f240 0100    	movw	r1, #0x0
 8056c48: f2c0 0100    	movt	r1, #0x0
 8056c4c: 6809         	ldr	r1, [r1]
 8056c4e: 4288         	cmp	r0, r1
 8056c50: d909         	bls	0x8056c66 <xTaskRemoveFromEventList+0xf6> @ imm = #0x12
 8056c52: e7ff         	b	0x8056c54 <xTaskRemoveFromEventList+0xe4> @ imm = #-0x2
 8056c54: 9806         	ldr	r0, [sp, #0x18]
 8056c56: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 8056c5a: f240 0100    	movw	r1, #0x0
 8056c5e: f2c0 0100    	movt	r1, #0x0
 8056c62: 6008         	str	r0, [r1]
 8056c64: e7ff         	b	0x8056c66 <xTaskRemoveFromEventList+0xf6> @ imm = #-0x2
 8056c66: e7ff         	b	0x8056c68 <xTaskRemoveFromEventList+0xf8> @ imm = #-0x2
 8056c68: e7ff         	b	0x8056c6a <xTaskRemoveFromEventList+0xfa> @ imm = #-0x2
 8056c6a: 9806         	ldr	r0, [sp, #0x18]
 8056c6c: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 8056c70: eb00 0080    	add.w	r0, r0, r0, lsl #2
 8056c74: f240 0100    	movw	r1, #0x0
 8056c78: f2c0 0100    	movt	r1, #0x0
 8056c7c: eb01 0080    	add.w	r0, r1, r0, lsl #2
 8056c80: 6840         	ldr	r0, [r0, #0x4]
 8056c82: 9002         	str	r0, [sp, #0x8]
 8056c84: 9802         	ldr	r0, [sp, #0x8]
 8056c86: 9a06         	ldr	r2, [sp, #0x18]
 8056c88: f8c2 0084    	str.w	r0, [r2, #0x84]
 8056c8c: 9802         	ldr	r0, [sp, #0x8]
 8056c8e: 6880         	ldr	r0, [r0, #0x8]
 8056c90: 9a06         	ldr	r2, [sp, #0x18]
 8056c92: f8c2 0088    	str.w	r0, [r2, #0x88]
 8056c96: 9806         	ldr	r0, [sp, #0x18]
 8056c98: 3080         	adds	r0, #0x80
 8056c9a: 9a02         	ldr	r2, [sp, #0x8]
 8056c9c: 6892         	ldr	r2, [r2, #0x8]
 8056c9e: 6050         	str	r0, [r2, #0x4]
 8056ca0: 9806         	ldr	r0, [sp, #0x18]
 8056ca2: 3080         	adds	r0, #0x80
 8056ca4: 9a02         	ldr	r2, [sp, #0x8]
 8056ca6: 6090         	str	r0, [r2, #0x8]
 8056ca8: 9a06         	ldr	r2, [sp, #0x18]
 8056caa: f8d2 00a8    	ldr.w	r0, [r2, #0xa8]
 8056cae: eb00 0080    	add.w	r0, r0, r0, lsl #2
 8056cb2: eb01 0080    	add.w	r0, r1, r0, lsl #2
 8056cb6: f8c2 0090    	str.w	r0, [r2, #0x90]
 8056cba: 9806         	ldr	r0, [sp, #0x18]
 8056cbc: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 8056cc0: eb00 0280    	add.w	r2, r0, r0, lsl #2
 8056cc4: f851 0022    	ldr.w	r0, [r1, r2, lsl #2]
 8056cc8: 3001         	adds	r0, #0x1
 8056cca: f841 0022    	str.w	r0, [r1, r2, lsl #2]
 8056cce: e7ff         	b	0x8056cd0 <xTaskRemoveFromEventList+0x160> @ imm = #-0x2
 8056cd0: e7ff         	b	0x8056cd2 <xTaskRemoveFromEventList+0x162> @ imm = #-0x2
;     }
 8056cd2: e020         	b	0x8056d16 <xTaskRemoveFromEventList+0x1a6> @ imm = #0x40
;         listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8056cd4: e7ff         	b	0x8056cd6 <xTaskRemoveFromEventList+0x166> @ imm = #-0x2
 8056cd6: f240 0100    	movw	r1, #0x0
 8056cda: f2c0 0100    	movt	r1, #0x0
 8056cde: 6848         	ldr	r0, [r1, #0x4]
 8056ce0: 9001         	str	r0, [sp, #0x4]
 8056ce2: 9801         	ldr	r0, [sp, #0x4]
 8056ce4: 9a06         	ldr	r2, [sp, #0x18]
 8056ce6: f8c2 0098    	str.w	r0, [r2, #0x98]
 8056cea: 9801         	ldr	r0, [sp, #0x4]
 8056cec: 6880         	ldr	r0, [r0, #0x8]
 8056cee: 9a06         	ldr	r2, [sp, #0x18]
 8056cf0: f8c2 009c    	str.w	r0, [r2, #0x9c]
 8056cf4: 9806         	ldr	r0, [sp, #0x18]
 8056cf6: 3094         	adds	r0, #0x94
 8056cf8: 9a01         	ldr	r2, [sp, #0x4]
 8056cfa: 6892         	ldr	r2, [r2, #0x8]
 8056cfc: 6050         	str	r0, [r2, #0x4]
 8056cfe: 9806         	ldr	r0, [sp, #0x18]
 8056d00: 3094         	adds	r0, #0x94
 8056d02: 9a01         	ldr	r2, [sp, #0x4]
 8056d04: 6090         	str	r0, [r2, #0x8]
 8056d06: 9806         	ldr	r0, [sp, #0x18]
 8056d08: f8c0 10a4    	str.w	r1, [r0, #0xa4]
 8056d0c: 6808         	ldr	r0, [r1]
 8056d0e: 3001         	adds	r0, #0x1
 8056d10: 6008         	str	r0, [r1]
 8056d12: e7ff         	b	0x8056d14 <xTaskRemoveFromEventList+0x1a4> @ imm = #-0x2
 8056d14: e7ff         	b	0x8056d16 <xTaskRemoveFromEventList+0x1a6> @ imm = #-0x2
;         if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8056d16: 9806         	ldr	r0, [sp, #0x18]
 8056d18: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 8056d1c: f240 0100    	movw	r1, #0x0
 8056d20: f2c0 0100    	movt	r1, #0x0
 8056d24: 6809         	ldr	r1, [r1]
 8056d26: f8d1 10a8    	ldr.w	r1, [r1, #0xa8]
 8056d2a: 4288         	cmp	r0, r1
 8056d2c: d908         	bls	0x8056d40 <xTaskRemoveFromEventList+0x1d0> @ imm = #0x10
 8056d2e: e7ff         	b	0x8056d30 <xTaskRemoveFromEventList+0x1c0> @ imm = #-0x2
 8056d30: 2001         	movs	r0, #0x1
;             xReturn = pdTRUE;
 8056d32: 9005         	str	r0, [sp, #0x14]
;             xYieldPendings[ 0 ] = pdTRUE;
 8056d34: f240 0100    	movw	r1, #0x0
 8056d38: f2c0 0100    	movt	r1, #0x0
 8056d3c: 6008         	str	r0, [r1]
;         }
 8056d3e: e002         	b	0x8056d46 <xTaskRemoveFromEventList+0x1d6> @ imm = #0x4
 8056d40: 2000         	movs	r0, #0x0
;             xReturn = pdFALSE;
 8056d42: 9005         	str	r0, [sp, #0x14]
 8056d44: e7ff         	b	0x8056d46 <xTaskRemoveFromEventList+0x1d6> @ imm = #-0x2
;     return xReturn;
 8056d46: 9805         	ldr	r0, [sp, #0x14]
 8056d48: b008         	add	sp, #0x20
 8056d4a: bd80         	pop	{r7, pc}

08056d4c <vTaskRemoveFromUnorderedEventList>:
; {
 8056d4c: b580         	push	{r7, lr}
 8056d4e: 466f         	mov	r7, sp
 8056d50: b086         	sub	sp, #0x18
 8056d52: 9005         	str	r0, [sp, #0x14]
 8056d54: 9104         	str	r1, [sp, #0x10]
;     configASSERT( uxSchedulerSuspended != ( UBaseType_t ) 0U );
 8056d56: f240 0000    	movw	r0, #0x0
 8056d5a: f2c0 0000    	movt	r0, #0x0
 8056d5e: 6800         	ldr	r0, [r0]
 8056d60: b920         	cbnz	r0, 0x8056d6c <vTaskRemoveFromUnorderedEventList+0x20> @ imm = #0x8
 8056d62: e7ff         	b	0x8056d64 <vTaskRemoveFromUnorderedEventList+0x18> @ imm = #-0x2
 8056d64: f7ff fffe    	bl	0x8056d64 <vTaskRemoveFromUnorderedEventList+0x18> @ imm = #-0x4
 8056d68: e7ff         	b	0x8056d6a <vTaskRemoveFromUnorderedEventList+0x1e> @ imm = #-0x2
 8056d6a: e7fe         	b	0x8056d6a <vTaskRemoveFromUnorderedEventList+0x1e> @ imm = #-0x4
;     listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8056d6c: 9804         	ldr	r0, [sp, #0x10]
 8056d6e: f040 4000    	orr	r0, r0, #0x80000000
 8056d72: 9905         	ldr	r1, [sp, #0x14]
 8056d74: 6008         	str	r0, [r1]
;     pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8056d76: 9805         	ldr	r0, [sp, #0x14]
 8056d78: 68c0         	ldr	r0, [r0, #0xc]
 8056d7a: 9003         	str	r0, [sp, #0xc]
;     configASSERT( pxUnblockedTCB );
 8056d7c: 9803         	ldr	r0, [sp, #0xc]
 8056d7e: b920         	cbnz	r0, 0x8056d8a <vTaskRemoveFromUnorderedEventList+0x3e> @ imm = #0x8
 8056d80: e7ff         	b	0x8056d82 <vTaskRemoveFromUnorderedEventList+0x36> @ imm = #-0x2
 8056d82: f7ff fffe    	bl	0x8056d82 <vTaskRemoveFromUnorderedEventList+0x36> @ imm = #-0x4
 8056d86: e7ff         	b	0x8056d88 <vTaskRemoveFromUnorderedEventList+0x3c> @ imm = #-0x2
 8056d88: e7fe         	b	0x8056d88 <vTaskRemoveFromUnorderedEventList+0x3c> @ imm = #-0x4
;     listREMOVE_ITEM( pxEventListItem );
 8056d8a: e7ff         	b	0x8056d8c <vTaskRemoveFromUnorderedEventList+0x40> @ imm = #-0x2
 8056d8c: 9805         	ldr	r0, [sp, #0x14]
 8056d8e: 6900         	ldr	r0, [r0, #0x10]
 8056d90: 9002         	str	r0, [sp, #0x8]
 8056d92: 9805         	ldr	r0, [sp, #0x14]
 8056d94: 6841         	ldr	r1, [r0, #0x4]
 8056d96: 6880         	ldr	r0, [r0, #0x8]
 8056d98: 6088         	str	r0, [r1, #0x8]
 8056d9a: 9905         	ldr	r1, [sp, #0x14]
 8056d9c: 6848         	ldr	r0, [r1, #0x4]
 8056d9e: 6889         	ldr	r1, [r1, #0x8]
 8056da0: 6048         	str	r0, [r1, #0x4]
 8056da2: 9802         	ldr	r0, [sp, #0x8]
 8056da4: 6840         	ldr	r0, [r0, #0x4]
 8056da6: 9905         	ldr	r1, [sp, #0x14]
 8056da8: 4288         	cmp	r0, r1
 8056daa: d105         	bne	0x8056db8 <vTaskRemoveFromUnorderedEventList+0x6c> @ imm = #0xa
 8056dac: e7ff         	b	0x8056dae <vTaskRemoveFromUnorderedEventList+0x62> @ imm = #-0x2
 8056dae: 9805         	ldr	r0, [sp, #0x14]
 8056db0: 6880         	ldr	r0, [r0, #0x8]
 8056db2: 9902         	ldr	r1, [sp, #0x8]
 8056db4: 6048         	str	r0, [r1, #0x4]
 8056db6: e7ff         	b	0x8056db8 <vTaskRemoveFromUnorderedEventList+0x6c> @ imm = #-0x2
 8056db8: 9905         	ldr	r1, [sp, #0x14]
 8056dba: 2000         	movs	r0, #0x0
 8056dbc: 6108         	str	r0, [r1, #0x10]
 8056dbe: 9902         	ldr	r1, [sp, #0x8]
 8056dc0: 6808         	ldr	r0, [r1]
 8056dc2: 3801         	subs	r0, #0x1
 8056dc4: 6008         	str	r0, [r1]
 8056dc6: e7ff         	b	0x8056dc8 <vTaskRemoveFromUnorderedEventList+0x7c> @ imm = #-0x2
;     listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8056dc8: e7ff         	b	0x8056dca <vTaskRemoveFromUnorderedEventList+0x7e> @ imm = #-0x2
 8056dca: 9803         	ldr	r0, [sp, #0xc]
 8056dcc: f8d0 0090    	ldr.w	r0, [r0, #0x90]
 8056dd0: 9001         	str	r0, [sp, #0x4]
 8056dd2: 9803         	ldr	r0, [sp, #0xc]
 8056dd4: f8d0 1084    	ldr.w	r1, [r0, #0x84]
 8056dd8: f8d0 0088    	ldr.w	r0, [r0, #0x88]
 8056ddc: 6088         	str	r0, [r1, #0x8]
 8056dde: 9903         	ldr	r1, [sp, #0xc]
 8056de0: f8d1 0084    	ldr.w	r0, [r1, #0x84]
 8056de4: f8d1 1088    	ldr.w	r1, [r1, #0x88]
 8056de8: 6048         	str	r0, [r1, #0x4]
 8056dea: 9801         	ldr	r0, [sp, #0x4]
 8056dec: 6840         	ldr	r0, [r0, #0x4]
 8056dee: 9903         	ldr	r1, [sp, #0xc]
 8056df0: 3180         	adds	r1, #0x80
 8056df2: 4288         	cmp	r0, r1
 8056df4: d106         	bne	0x8056e04 <vTaskRemoveFromUnorderedEventList+0xb8> @ imm = #0xc
 8056df6: e7ff         	b	0x8056df8 <vTaskRemoveFromUnorderedEventList+0xac> @ imm = #-0x2
 8056df8: 9803         	ldr	r0, [sp, #0xc]
 8056dfa: f8d0 0088    	ldr.w	r0, [r0, #0x88]
 8056dfe: 9901         	ldr	r1, [sp, #0x4]
 8056e00: 6048         	str	r0, [r1, #0x4]
 8056e02: e7ff         	b	0x8056e04 <vTaskRemoveFromUnorderedEventList+0xb8> @ imm = #-0x2
 8056e04: 9903         	ldr	r1, [sp, #0xc]
 8056e06: 2000         	movs	r0, #0x0
 8056e08: f8c1 0090    	str.w	r0, [r1, #0x90]
 8056e0c: 9901         	ldr	r1, [sp, #0x4]
 8056e0e: 6808         	ldr	r0, [r1]
 8056e10: 3801         	subs	r0, #0x1
 8056e12: 6008         	str	r0, [r1]
 8056e14: e7ff         	b	0x8056e16 <vTaskRemoveFromUnorderedEventList+0xca> @ imm = #-0x2
;     prvAddTaskToReadyList( pxUnblockedTCB );
 8056e16: e7ff         	b	0x8056e18 <vTaskRemoveFromUnorderedEventList+0xcc> @ imm = #-0x2
 8056e18: e7ff         	b	0x8056e1a <vTaskRemoveFromUnorderedEventList+0xce> @ imm = #-0x2
 8056e1a: 9803         	ldr	r0, [sp, #0xc]
 8056e1c: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 8056e20: f240 0100    	movw	r1, #0x0
 8056e24: f2c0 0100    	movt	r1, #0x0
 8056e28: 6809         	ldr	r1, [r1]
 8056e2a: 4288         	cmp	r0, r1
 8056e2c: d909         	bls	0x8056e42 <vTaskRemoveFromUnorderedEventList+0xf6> @ imm = #0x12
 8056e2e: e7ff         	b	0x8056e30 <vTaskRemoveFromUnorderedEventList+0xe4> @ imm = #-0x2
 8056e30: 9803         	ldr	r0, [sp, #0xc]
 8056e32: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 8056e36: f240 0100    	movw	r1, #0x0
 8056e3a: f2c0 0100    	movt	r1, #0x0
 8056e3e: 6008         	str	r0, [r1]
 8056e40: e7ff         	b	0x8056e42 <vTaskRemoveFromUnorderedEventList+0xf6> @ imm = #-0x2
 8056e42: e7ff         	b	0x8056e44 <vTaskRemoveFromUnorderedEventList+0xf8> @ imm = #-0x2
 8056e44: e7ff         	b	0x8056e46 <vTaskRemoveFromUnorderedEventList+0xfa> @ imm = #-0x2
 8056e46: 9803         	ldr	r0, [sp, #0xc]
 8056e48: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 8056e4c: eb00 0080    	add.w	r0, r0, r0, lsl #2
 8056e50: f240 0100    	movw	r1, #0x0
 8056e54: f2c0 0100    	movt	r1, #0x0
 8056e58: eb01 0080    	add.w	r0, r1, r0, lsl #2
 8056e5c: 6840         	ldr	r0, [r0, #0x4]
 8056e5e: 9000         	str	r0, [sp]
 8056e60: 9800         	ldr	r0, [sp]
 8056e62: 9a03         	ldr	r2, [sp, #0xc]
 8056e64: f8c2 0084    	str.w	r0, [r2, #0x84]
 8056e68: 9800         	ldr	r0, [sp]
 8056e6a: 6880         	ldr	r0, [r0, #0x8]
 8056e6c: 9a03         	ldr	r2, [sp, #0xc]
 8056e6e: f8c2 0088    	str.w	r0, [r2, #0x88]
 8056e72: 9803         	ldr	r0, [sp, #0xc]
 8056e74: 3080         	adds	r0, #0x80
 8056e76: 9a00         	ldr	r2, [sp]
 8056e78: 6892         	ldr	r2, [r2, #0x8]
 8056e7a: 6050         	str	r0, [r2, #0x4]
 8056e7c: 9803         	ldr	r0, [sp, #0xc]
 8056e7e: 3080         	adds	r0, #0x80
 8056e80: 9a00         	ldr	r2, [sp]
 8056e82: 6090         	str	r0, [r2, #0x8]
 8056e84: 9a03         	ldr	r2, [sp, #0xc]
 8056e86: f8d2 00a8    	ldr.w	r0, [r2, #0xa8]
 8056e8a: eb00 0080    	add.w	r0, r0, r0, lsl #2
 8056e8e: eb01 0080    	add.w	r0, r1, r0, lsl #2
 8056e92: f8c2 0090    	str.w	r0, [r2, #0x90]
 8056e96: 9803         	ldr	r0, [sp, #0xc]
 8056e98: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 8056e9c: eb00 0280    	add.w	r2, r0, r0, lsl #2
 8056ea0: f851 0022    	ldr.w	r0, [r1, r2, lsl #2]
 8056ea4: 3001         	adds	r0, #0x1
 8056ea6: f841 0022    	str.w	r0, [r1, r2, lsl #2]
 8056eaa: e7ff         	b	0x8056eac <vTaskRemoveFromUnorderedEventList+0x160> @ imm = #-0x2
 8056eac: e7ff         	b	0x8056eae <vTaskRemoveFromUnorderedEventList+0x162> @ imm = #-0x2
;         if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8056eae: 9803         	ldr	r0, [sp, #0xc]
 8056eb0: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 8056eb4: f240 0100    	movw	r1, #0x0
 8056eb8: f2c0 0100    	movt	r1, #0x0
 8056ebc: 6809         	ldr	r1, [r1]
 8056ebe: f8d1 10a8    	ldr.w	r1, [r1, #0xa8]
 8056ec2: 4288         	cmp	r0, r1
 8056ec4: d907         	bls	0x8056ed6 <vTaskRemoveFromUnorderedEventList+0x18a> @ imm = #0xe
 8056ec6: e7ff         	b	0x8056ec8 <vTaskRemoveFromUnorderedEventList+0x17c> @ imm = #-0x2
;             xYieldPendings[ 0 ] = pdTRUE;
 8056ec8: f240 0100    	movw	r1, #0x0
 8056ecc: f2c0 0100    	movt	r1, #0x0
 8056ed0: 2001         	movs	r0, #0x1
 8056ed2: 6008         	str	r0, [r1]
;         }
 8056ed4: e7ff         	b	0x8056ed6 <vTaskRemoveFromUnorderedEventList+0x18a> @ imm = #-0x2
; }
 8056ed6: b006         	add	sp, #0x18
 8056ed8: bd80         	pop	{r7, pc}

08056eda <vTaskSetTimeOutState>:
; {
 8056eda: b580         	push	{r7, lr}
 8056edc: 466f         	mov	r7, sp
 8056ede: b082         	sub	sp, #0x8
 8056ee0: 9001         	str	r0, [sp, #0x4]
;     configASSERT( pxTimeOut );
 8056ee2: 9801         	ldr	r0, [sp, #0x4]
 8056ee4: b920         	cbnz	r0, 0x8056ef0 <vTaskSetTimeOutState+0x16> @ imm = #0x8
 8056ee6: e7ff         	b	0x8056ee8 <vTaskSetTimeOutState+0xe> @ imm = #-0x2
 8056ee8: f7ff fffe    	bl	0x8056ee8 <vTaskSetTimeOutState+0xe> @ imm = #-0x4
 8056eec: e7ff         	b	0x8056eee <vTaskSetTimeOutState+0x14> @ imm = #-0x2
 8056eee: e7fe         	b	0x8056eee <vTaskSetTimeOutState+0x14> @ imm = #-0x4
;     taskENTER_CRITICAL();
 8056ef0: f7ff fffe    	bl	0x8056ef0 <vTaskSetTimeOutState+0x16> @ imm = #-0x4
;         pxTimeOut->xOverflowCount = xNumOfOverflows;
 8056ef4: f240 0000    	movw	r0, #0x0
 8056ef8: f2c0 0000    	movt	r0, #0x0
 8056efc: 6800         	ldr	r0, [r0]
 8056efe: 9901         	ldr	r1, [sp, #0x4]
 8056f00: 6008         	str	r0, [r1]
;         pxTimeOut->xTimeOnEntering = xTickCount;
 8056f02: f240 0000    	movw	r0, #0x0
 8056f06: f2c0 0000    	movt	r0, #0x0
 8056f0a: 6800         	ldr	r0, [r0]
 8056f0c: 9901         	ldr	r1, [sp, #0x4]
 8056f0e: 6048         	str	r0, [r1, #0x4]
;     taskEXIT_CRITICAL();
 8056f10: f7ff fffe    	bl	0x8056f10 <vTaskSetTimeOutState+0x36> @ imm = #-0x4
; }
 8056f14: b002         	add	sp, #0x8
 8056f16: bd80         	pop	{r7, pc}

08056f18 <vTaskInternalSetTimeOutState>:
; {
 8056f18: b081         	sub	sp, #0x4
 8056f1a: 9000         	str	r0, [sp]
;     pxTimeOut->xOverflowCount = xNumOfOverflows;
 8056f1c: f240 0000    	movw	r0, #0x0
 8056f20: f2c0 0000    	movt	r0, #0x0
 8056f24: 6800         	ldr	r0, [r0]
 8056f26: 9900         	ldr	r1, [sp]
 8056f28: 6008         	str	r0, [r1]
;     pxTimeOut->xTimeOnEntering = xTickCount;
 8056f2a: f240 0000    	movw	r0, #0x0
 8056f2e: f2c0 0000    	movt	r0, #0x0
 8056f32: 6800         	ldr	r0, [r0]
 8056f34: 9900         	ldr	r1, [sp]
 8056f36: 6048         	str	r0, [r1, #0x4]
; }
 8056f38: b001         	add	sp, #0x4
 8056f3a: 4770         	bx	lr

08056f3c <xTaskCheckForTimeOut>:
; {
 8056f3c: b580         	push	{r7, lr}
 8056f3e: 466f         	mov	r7, sp
 8056f40: b086         	sub	sp, #0x18
 8056f42: 9005         	str	r0, [sp, #0x14]
 8056f44: 9104         	str	r1, [sp, #0x10]
;     configASSERT( pxTimeOut );
 8056f46: 9805         	ldr	r0, [sp, #0x14]
 8056f48: b920         	cbnz	r0, 0x8056f54 <xTaskCheckForTimeOut+0x18> @ imm = #0x8
 8056f4a: e7ff         	b	0x8056f4c <xTaskCheckForTimeOut+0x10> @ imm = #-0x2
 8056f4c: f7ff fffe    	bl	0x8056f4c <xTaskCheckForTimeOut+0x10> @ imm = #-0x4
 8056f50: e7ff         	b	0x8056f52 <xTaskCheckForTimeOut+0x16> @ imm = #-0x2
 8056f52: e7fe         	b	0x8056f52 <xTaskCheckForTimeOut+0x16> @ imm = #-0x4
;     configASSERT( pxTicksToWait );
 8056f54: 9804         	ldr	r0, [sp, #0x10]
 8056f56: b920         	cbnz	r0, 0x8056f62 <xTaskCheckForTimeOut+0x26> @ imm = #0x8
 8056f58: e7ff         	b	0x8056f5a <xTaskCheckForTimeOut+0x1e> @ imm = #-0x2
 8056f5a: f7ff fffe    	bl	0x8056f5a <xTaskCheckForTimeOut+0x1e> @ imm = #-0x4
 8056f5e: e7ff         	b	0x8056f60 <xTaskCheckForTimeOut+0x24> @ imm = #-0x2
 8056f60: e7fe         	b	0x8056f60 <xTaskCheckForTimeOut+0x24> @ imm = #-0x4
;     taskENTER_CRITICAL();
 8056f62: f7ff fffe    	bl	0x8056f62 <xTaskCheckForTimeOut+0x26> @ imm = #-0x4
;         const TickType_t xConstTickCount = xTickCount;
 8056f66: f240 0000    	movw	r0, #0x0
 8056f6a: f2c0 0000    	movt	r0, #0x0
 8056f6e: 6800         	ldr	r0, [r0]
 8056f70: 9002         	str	r0, [sp, #0x8]
;         const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8056f72: 9802         	ldr	r0, [sp, #0x8]
 8056f74: 9905         	ldr	r1, [sp, #0x14]
 8056f76: 6849         	ldr	r1, [r1, #0x4]
 8056f78: 1a40         	subs	r0, r0, r1
 8056f7a: 9001         	str	r0, [sp, #0x4]
;             if( *pxTicksToWait == portMAX_DELAY )
 8056f7c: 9804         	ldr	r0, [sp, #0x10]
 8056f7e: 6800         	ldr	r0, [r0]
 8056f80: 3001         	adds	r0, #0x1
 8056f82: b918         	cbnz	r0, 0x8056f8c <xTaskCheckForTimeOut+0x50> @ imm = #0x6
 8056f84: e7ff         	b	0x8056f86 <xTaskCheckForTimeOut+0x4a> @ imm = #-0x2
 8056f86: 2000         	movs	r0, #0x0
;                 xReturn = pdFALSE;
 8056f88: 9003         	str	r0, [sp, #0xc]
;             }
 8056f8a: e02e         	b	0x8056fea <xTaskCheckForTimeOut+0xae> @ imm = #0x5c
;         if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8056f8c: f240 0000    	movw	r0, #0x0
 8056f90: f2c0 0000    	movt	r0, #0x0
 8056f94: 6800         	ldr	r0, [r0]
 8056f96: 9905         	ldr	r1, [sp, #0x14]
 8056f98: 6809         	ldr	r1, [r1]
 8056f9a: 4288         	cmp	r0, r1
 8056f9c: d00c         	beq	0x8056fb8 <xTaskCheckForTimeOut+0x7c> @ imm = #0x18
 8056f9e: e7ff         	b	0x8056fa0 <xTaskCheckForTimeOut+0x64> @ imm = #-0x2
 8056fa0: 9802         	ldr	r0, [sp, #0x8]
 8056fa2: 9905         	ldr	r1, [sp, #0x14]
 8056fa4: 6849         	ldr	r1, [r1, #0x4]
 8056fa6: 4288         	cmp	r0, r1
 8056fa8: d306         	blo	0x8056fb8 <xTaskCheckForTimeOut+0x7c> @ imm = #0xc
 8056faa: e7ff         	b	0x8056fac <xTaskCheckForTimeOut+0x70> @ imm = #-0x2
 8056fac: 2001         	movs	r0, #0x1
;             xReturn = pdTRUE;
 8056fae: 9003         	str	r0, [sp, #0xc]
;             *pxTicksToWait = ( TickType_t ) 0;
 8056fb0: 9904         	ldr	r1, [sp, #0x10]
 8056fb2: 2000         	movs	r0, #0x0
 8056fb4: 6008         	str	r0, [r1]
;         }
 8056fb6: e017         	b	0x8056fe8 <xTaskCheckForTimeOut+0xac> @ imm = #0x2e
;         else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8056fb8: 9801         	ldr	r0, [sp, #0x4]
 8056fba: 9904         	ldr	r1, [sp, #0x10]
 8056fbc: 6809         	ldr	r1, [r1]
 8056fbe: 4288         	cmp	r0, r1
 8056fc0: d20b         	bhs	0x8056fda <xTaskCheckForTimeOut+0x9e> @ imm = #0x16
 8056fc2: e7ff         	b	0x8056fc4 <xTaskCheckForTimeOut+0x88> @ imm = #-0x2
;             *pxTicksToWait -= xElapsedTime;
 8056fc4: 9a01         	ldr	r2, [sp, #0x4]
 8056fc6: 9904         	ldr	r1, [sp, #0x10]
 8056fc8: 6808         	ldr	r0, [r1]
 8056fca: 1a80         	subs	r0, r0, r2
 8056fcc: 6008         	str	r0, [r1]
;             vTaskInternalSetTimeOutState( pxTimeOut );
 8056fce: 9805         	ldr	r0, [sp, #0x14]
 8056fd0: f7ff fffe    	bl	0x8056fd0 <xTaskCheckForTimeOut+0x94> @ imm = #-0x4
 8056fd4: 2000         	movs	r0, #0x0
;             xReturn = pdFALSE;
 8056fd6: 9003         	str	r0, [sp, #0xc]
;         }
 8056fd8: e005         	b	0x8056fe6 <xTaskCheckForTimeOut+0xaa> @ imm = #0xa
;             *pxTicksToWait = ( TickType_t ) 0;
 8056fda: 9904         	ldr	r1, [sp, #0x10]
 8056fdc: 2000         	movs	r0, #0x0
 8056fde: 6008         	str	r0, [r1]
 8056fe0: 2001         	movs	r0, #0x1
;             xReturn = pdTRUE;
 8056fe2: 9003         	str	r0, [sp, #0xc]
 8056fe4: e7ff         	b	0x8056fe6 <xTaskCheckForTimeOut+0xaa> @ imm = #-0x2
 8056fe6: e7ff         	b	0x8056fe8 <xTaskCheckForTimeOut+0xac> @ imm = #-0x2
 8056fe8: e7ff         	b	0x8056fea <xTaskCheckForTimeOut+0xae> @ imm = #-0x2
;     taskEXIT_CRITICAL();
 8056fea: f7ff fffe    	bl	0x8056fea <xTaskCheckForTimeOut+0xae> @ imm = #-0x4
;     return xReturn;
 8056fee: 9803         	ldr	r0, [sp, #0xc]
 8056ff0: b006         	add	sp, #0x18
 8056ff2: bd80         	pop	{r7, pc}

08056ff4 <vTaskMissedYield>:
;     xYieldPendings[ portGET_CORE_ID() ] = pdTRUE;
 8056ff4: f240 0100    	movw	r1, #0x0
 8056ff8: f2c0 0100    	movt	r1, #0x0
 8056ffc: 2001         	movs	r0, #0x1
 8056ffe: 6008         	str	r0, [r1]
; }
 8057000: 4770         	bx	lr

08057002 <uxTaskGetTaskNumber>:
;     {
 8057002: b083         	sub	sp, #0xc
 8057004: 9002         	str	r0, [sp, #0x8]
;         if( xTask != NULL )
 8057006: 9802         	ldr	r0, [sp, #0x8]
 8057008: b138         	cbz	r0, 0x805701a <uxTaskGetTaskNumber+0x18> @ imm = #0xe
 805700a: e7ff         	b	0x805700c <uxTaskGetTaskNumber+0xa> @ imm = #-0x2
;             pxTCB = xTask;
 805700c: 9802         	ldr	r0, [sp, #0x8]
 805700e: 9000         	str	r0, [sp]
;             uxReturn = pxTCB->uxTaskNumber;
 8057010: 9800         	ldr	r0, [sp]
 8057012: f8d0 00c4    	ldr.w	r0, [r0, #0xc4]
 8057016: 9001         	str	r0, [sp, #0x4]
;         }
 8057018: e002         	b	0x8057020 <uxTaskGetTaskNumber+0x1e> @ imm = #0x4
 805701a: 2000         	movs	r0, #0x0
;             uxReturn = 0U;
 805701c: 9001         	str	r0, [sp, #0x4]
 805701e: e7ff         	b	0x8057020 <uxTaskGetTaskNumber+0x1e> @ imm = #-0x2
;         return uxReturn;
 8057020: 9801         	ldr	r0, [sp, #0x4]
 8057022: b003         	add	sp, #0xc
 8057024: 4770         	bx	lr

08057026 <vTaskSetTaskNumber>:
;     {
 8057026: b083         	sub	sp, #0xc
 8057028: 9002         	str	r0, [sp, #0x8]
 805702a: 9101         	str	r1, [sp, #0x4]
;         if( xTask != NULL )
 805702c: 9802         	ldr	r0, [sp, #0x8]
 805702e: b138         	cbz	r0, 0x8057040 <vTaskSetTaskNumber+0x1a> @ imm = #0xe
 8057030: e7ff         	b	0x8057032 <vTaskSetTaskNumber+0xc> @ imm = #-0x2
;             pxTCB = xTask;
 8057032: 9802         	ldr	r0, [sp, #0x8]
 8057034: 9000         	str	r0, [sp]
;             pxTCB->uxTaskNumber = uxHandle;
 8057036: 9801         	ldr	r0, [sp, #0x4]
 8057038: 9900         	ldr	r1, [sp]
 805703a: f8c1 00c4    	str.w	r0, [r1, #0xc4]
;         }
 805703e: e7ff         	b	0x8057040 <vTaskSetTaskNumber+0x1a> @ imm = #-0x2
;     }
 8057040: b003         	add	sp, #0xc
 8057042: 4770         	bx	lr

08057044 <vTaskAllocateMPURegions>:
;     {
 8057044: b580         	push	{r7, lr}
 8057046: 466f         	mov	r7, sp
 8057048: b084         	sub	sp, #0x10
 805704a: 9003         	str	r0, [sp, #0xc]
 805704c: 9102         	str	r1, [sp, #0x8]
;         pxTCB = prvGetTCBFromHandle( xTaskToModify );
 805704e: 9803         	ldr	r0, [sp, #0xc]
 8057050: b938         	cbnz	r0, 0x8057062 <vTaskAllocateMPURegions+0x1e> @ imm = #0xe
 8057052: e7ff         	b	0x8057054 <vTaskAllocateMPURegions+0x10> @ imm = #-0x2
 8057054: f240 0000    	movw	r0, #0x0
 8057058: f2c0 0000    	movt	r0, #0x0
 805705c: 6800         	ldr	r0, [r0]
 805705e: 9000         	str	r0, [sp]
 8057060: e002         	b	0x8057068 <vTaskAllocateMPURegions+0x24> @ imm = #0x4
 8057062: 9803         	ldr	r0, [sp, #0xc]
 8057064: 9000         	str	r0, [sp]
 8057066: e7ff         	b	0x8057068 <vTaskAllocateMPURegions+0x24> @ imm = #-0x2
 8057068: 9800         	ldr	r0, [sp]
 805706a: 9001         	str	r0, [sp, #0x4]
;         vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), pxRegions, NULL, 0 );
 805706c: 9801         	ldr	r0, [sp, #0x4]
 805706e: 3004         	adds	r0, #0x4
 8057070: 9902         	ldr	r1, [sp, #0x8]
 8057072: 2300         	movs	r3, #0x0
 8057074: 461a         	mov	r2, r3
 8057076: f7ff fffe    	bl	0x8057076 <vTaskAllocateMPURegions+0x32> @ imm = #-0x4
;     }
 805707a: b004         	add	sp, #0x10
 805707c: bd80         	pop	{r7, pc}

0805707e <vTaskGetInfo>:
;     {
 805707e: b580         	push	{r7, lr}
 8057080: 466f         	mov	r7, sp
 8057082: b086         	sub	sp, #0x18
 8057084: 9005         	str	r0, [sp, #0x14]
 8057086: 9104         	str	r1, [sp, #0x10]
 8057088: 9203         	str	r2, [sp, #0xc]
 805708a: f807 3c0d    	strb	r3, [r7, #-13]
;         pxTCB = prvGetTCBFromHandle( xTask );
 805708e: 9805         	ldr	r0, [sp, #0x14]
 8057090: b938         	cbnz	r0, 0x80570a2 <vTaskGetInfo+0x24> @ imm = #0xe
 8057092: e7ff         	b	0x8057094 <vTaskGetInfo+0x16> @ imm = #-0x2
 8057094: f240 0000    	movw	r0, #0x0
 8057098: f2c0 0000    	movt	r0, #0x0
 805709c: 6800         	ldr	r0, [r0]
 805709e: 9000         	str	r0, [sp]
 80570a0: e002         	b	0x80570a8 <vTaskGetInfo+0x2a> @ imm = #0x4
 80570a2: 9805         	ldr	r0, [sp, #0x14]
 80570a4: 9000         	str	r0, [sp]
 80570a6: e7ff         	b	0x80570a8 <vTaskGetInfo+0x2a> @ imm = #-0x2
 80570a8: 9800         	ldr	r0, [sp]
 80570aa: 9001         	str	r0, [sp, #0x4]
;         pxTaskStatus->xHandle = pxTCB;
 80570ac: 9801         	ldr	r0, [sp, #0x4]
 80570ae: 9904         	ldr	r1, [sp, #0x10]
 80570b0: 6008         	str	r0, [r1]
;         pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName[ 0 ] );
 80570b2: 9801         	ldr	r0, [sp, #0x4]
 80570b4: 30b0         	adds	r0, #0xb0
 80570b6: 9904         	ldr	r1, [sp, #0x10]
 80570b8: 6048         	str	r0, [r1, #0x4]
;         pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 80570ba: 9801         	ldr	r0, [sp, #0x4]
 80570bc: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 80570c0: 9904         	ldr	r1, [sp, #0x10]
 80570c2: 6108         	str	r0, [r1, #0x10]
;         pxTaskStatus->pxStackBase = pxTCB->pxStack;
 80570c4: 9801         	ldr	r0, [sp, #0x4]
 80570c6: f8d0 00ac    	ldr.w	r0, [r0, #0xac]
 80570ca: 9904         	ldr	r1, [sp, #0x10]
 80570cc: 61c8         	str	r0, [r1, #0x1c]
;         pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 80570ce: 9801         	ldr	r0, [sp, #0x4]
 80570d0: f8d0 00c0    	ldr.w	r0, [r0, #0xc0]
 80570d4: 9904         	ldr	r1, [sp, #0x10]
 80570d6: 6088         	str	r0, [r1, #0x8]
;             pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 80570d8: 9801         	ldr	r0, [sp, #0x4]
 80570da: f8d0 00c8    	ldr.w	r0, [r0, #0xc8]
 80570de: 9904         	ldr	r1, [sp, #0x10]
 80570e0: 6148         	str	r0, [r1, #0x14]
;             pxTaskStatus->ulRunTimeCounter = ( configRUN_TIME_COUNTER_TYPE ) 0;
 80570e2: 9904         	ldr	r1, [sp, #0x10]
 80570e4: 2000         	movs	r0, #0x0
 80570e6: 6188         	str	r0, [r1, #0x18]
;         if( eState != eInvalid )
 80570e8: f817 0c0d    	ldrb	r0, [r7, #-13]
 80570ec: 2805         	cmp	r0, #0x5
 80570ee: d038         	beq	0x8057162 <vTaskGetInfo+0xe4> @ imm = #0x70
 80570f0: e7ff         	b	0x80570f2 <vTaskGetInfo+0x74> @ imm = #-0x2
;             if( taskTASK_IS_RUNNING( pxTCB ) == pdTRUE )
 80570f2: 9801         	ldr	r0, [sp, #0x4]
 80570f4: f240 0100    	movw	r1, #0x0
 80570f8: f2c0 0100    	movt	r1, #0x0
 80570fc: 6809         	ldr	r1, [r1]
 80570fe: 4288         	cmp	r0, r1
 8057100: d104         	bne	0x805710c <vTaskGetInfo+0x8e> @ imm = #0x8
 8057102: e7ff         	b	0x8057104 <vTaskGetInfo+0x86> @ imm = #-0x2
;                 pxTaskStatus->eCurrentState = eRunning;
 8057104: 9904         	ldr	r1, [sp, #0x10]
 8057106: 2000         	movs	r0, #0x0
 8057108: 7308         	strb	r0, [r1, #0xc]
;             }
 805710a: e029         	b	0x8057160 <vTaskGetInfo+0xe2> @ imm = #0x52
;                 pxTaskStatus->eCurrentState = eState;
 805710c: f817 0c0d    	ldrb	r0, [r7, #-13]
 8057110: 9904         	ldr	r1, [sp, #0x10]
 8057112: 7308         	strb	r0, [r1, #0xc]
;                     if( eState == eSuspended )
 8057114: f817 0c0d    	ldrb	r0, [r7, #-13]
 8057118: 2803         	cmp	r0, #0x3
 805711a: d10e         	bne	0x805713a <vTaskGetInfo+0xbc> @ imm = #0x1c
 805711c: e7ff         	b	0x805711e <vTaskGetInfo+0xa0> @ imm = #-0x2
;                         vTaskSuspendAll();
 805711e: f7ff fffe    	bl	0x805711e <vTaskGetInfo+0xa0> @ imm = #-0x4
;                             if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8057122: 9801         	ldr	r0, [sp, #0x4]
 8057124: f8d0 00a4    	ldr.w	r0, [r0, #0xa4]
 8057128: b120         	cbz	r0, 0x8057134 <vTaskGetInfo+0xb6> @ imm = #0x8
 805712a: e7ff         	b	0x805712c <vTaskGetInfo+0xae> @ imm = #-0x2
;                                 pxTaskStatus->eCurrentState = eBlocked;
 805712c: 9904         	ldr	r1, [sp, #0x10]
 805712e: 2002         	movs	r0, #0x2
 8057130: 7308         	strb	r0, [r1, #0xc]
;                             }
 8057132: e7ff         	b	0x8057134 <vTaskGetInfo+0xb6> @ imm = #-0x2
;                         ( void ) xTaskResumeAll();
 8057134: f7ff fffe    	bl	0x8057134 <vTaskGetInfo+0xb6> @ imm = #-0x4
;                     }
 8057138: e7ff         	b	0x805713a <vTaskGetInfo+0xbc> @ imm = #-0x2
;                 taskENTER_CRITICAL();
 805713a: f7ff fffe    	bl	0x805713a <vTaskGetInfo+0xbc> @ imm = #-0x4
;                     if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) != pdFALSE )
 805713e: 9801         	ldr	r0, [sp, #0x4]
 8057140: f8d0 00a4    	ldr.w	r0, [r0, #0xa4]
 8057144: f240 0100    	movw	r1, #0x0
 8057148: f2c0 0100    	movt	r1, #0x0
 805714c: 4288         	cmp	r0, r1
 805714e: d104         	bne	0x805715a <vTaskGetInfo+0xdc> @ imm = #0x8
 8057150: e7ff         	b	0x8057152 <vTaskGetInfo+0xd4> @ imm = #-0x2
;                         pxTaskStatus->eCurrentState = eReady;
 8057152: 9904         	ldr	r1, [sp, #0x10]
 8057154: 2001         	movs	r0, #0x1
 8057156: 7308         	strb	r0, [r1, #0xc]
;                     }
 8057158: e7ff         	b	0x805715a <vTaskGetInfo+0xdc> @ imm = #-0x2
;                 taskEXIT_CRITICAL();
 805715a: f7ff fffe    	bl	0x805715a <vTaskGetInfo+0xdc> @ imm = #-0x4
 805715e: e7ff         	b	0x8057160 <vTaskGetInfo+0xe2> @ imm = #-0x2
;         }
 8057160: e005         	b	0x805716e <vTaskGetInfo+0xf0> @ imm = #0xa
;             pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 8057162: 9801         	ldr	r0, [sp, #0x4]
 8057164: f7ff fffe    	bl	0x8057164 <vTaskGetInfo+0xe6> @ imm = #-0x4
 8057168: 9904         	ldr	r1, [sp, #0x10]
 805716a: 7308         	strb	r0, [r1, #0xc]
 805716c: e7ff         	b	0x805716e <vTaskGetInfo+0xf0> @ imm = #-0x2
;         if( xGetFreeStackSpace != pdFALSE )
 805716e: 9803         	ldr	r0, [sp, #0xc]
 8057170: b140         	cbz	r0, 0x8057184 <vTaskGetInfo+0x106> @ imm = #0x10
 8057172: e7ff         	b	0x8057174 <vTaskGetInfo+0xf6> @ imm = #-0x2
;                 pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 8057174: 9801         	ldr	r0, [sp, #0x4]
 8057176: f8d0 00ac    	ldr.w	r0, [r0, #0xac]
 805717a: f000 f809    	bl	0x8057190 <prvTaskCheckFreeStackSpace> @ imm = #0x12
 805717e: 9904         	ldr	r1, [sp, #0x10]
 8057180: 8408         	strh	r0, [r1, #0x20]
;         }
 8057182: e003         	b	0x805718c <vTaskGetInfo+0x10e> @ imm = #0x6
;             pxTaskStatus->usStackHighWaterMark = 0;
 8057184: 9904         	ldr	r1, [sp, #0x10]
 8057186: 2000         	movs	r0, #0x0
 8057188: 8408         	strh	r0, [r1, #0x20]
 805718a: e7ff         	b	0x805718c <vTaskGetInfo+0x10e> @ imm = #-0x2
;     }
 805718c: b006         	add	sp, #0x18
 805718e: bd80         	pop	{r7, pc}

08057190 <prvTaskCheckFreeStackSpace>:
;     {
 8057190: b082         	sub	sp, #0x8
 8057192: 9001         	str	r0, [sp, #0x4]
 8057194: 2000         	movs	r0, #0x0
;         uint32_t ulCount = 0U;
 8057196: 9000         	str	r0, [sp]
;         while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8057198: e7ff         	b	0x805719a <prvTaskCheckFreeStackSpace+0xa> @ imm = #-0x2
 805719a: 9801         	ldr	r0, [sp, #0x4]
 805719c: 7800         	ldrb	r0, [r0]
 805719e: 28a5         	cmp	r0, #0xa5
 80571a0: d107         	bne	0x80571b2 <prvTaskCheckFreeStackSpace+0x22> @ imm = #0xe
 80571a2: e7ff         	b	0x80571a4 <prvTaskCheckFreeStackSpace+0x14> @ imm = #-0x2
;             pucStackByte -= portSTACK_GROWTH;
 80571a4: 9801         	ldr	r0, [sp, #0x4]
 80571a6: 3001         	adds	r0, #0x1
 80571a8: 9001         	str	r0, [sp, #0x4]
;             ulCount++;
 80571aa: 9800         	ldr	r0, [sp]
 80571ac: 3001         	adds	r0, #0x1
 80571ae: 9000         	str	r0, [sp]
;         while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 80571b0: e7f3         	b	0x805719a <prvTaskCheckFreeStackSpace+0xa> @ imm = #-0x1a
;         ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 80571b2: 9800         	ldr	r0, [sp]
 80571b4: 0880         	lsrs	r0, r0, #0x2
 80571b6: 9000         	str	r0, [sp]
;         return ( configSTACK_DEPTH_TYPE ) ulCount;
 80571b8: f8bd 0000    	ldrh.w	r0, [sp]
 80571bc: b002         	add	sp, #0x8
 80571be: 4770         	bx	lr

080571c0 <uxTaskGetStackHighWaterMark>:
;     {
 80571c0: b580         	push	{r7, lr}
 80571c2: 466f         	mov	r7, sp
 80571c4: b086         	sub	sp, #0x18
 80571c6: 9005         	str	r0, [sp, #0x14]
;         pxTCB = prvGetTCBFromHandle( xTask );
 80571c8: 9805         	ldr	r0, [sp, #0x14]
 80571ca: b938         	cbnz	r0, 0x80571dc <uxTaskGetStackHighWaterMark+0x1c> @ imm = #0xe
 80571cc: e7ff         	b	0x80571ce <uxTaskGetStackHighWaterMark+0xe> @ imm = #-0x2
 80571ce: f240 0000    	movw	r0, #0x0
 80571d2: f2c0 0000    	movt	r0, #0x0
 80571d6: 6800         	ldr	r0, [r0]
 80571d8: 9001         	str	r0, [sp, #0x4]
 80571da: e002         	b	0x80571e2 <uxTaskGetStackHighWaterMark+0x22> @ imm = #0x4
 80571dc: 9805         	ldr	r0, [sp, #0x14]
 80571de: 9001         	str	r0, [sp, #0x4]
 80571e0: e7ff         	b	0x80571e2 <uxTaskGetStackHighWaterMark+0x22> @ imm = #-0x2
 80571e2: 9801         	ldr	r0, [sp, #0x4]
 80571e4: 9004         	str	r0, [sp, #0x10]
;             pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 80571e6: 9804         	ldr	r0, [sp, #0x10]
 80571e8: f8d0 00ac    	ldr.w	r0, [r0, #0xac]
 80571ec: 9003         	str	r0, [sp, #0xc]
;         uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 80571ee: 9803         	ldr	r0, [sp, #0xc]
 80571f0: f7ff ffce    	bl	0x8057190 <prvTaskCheckFreeStackSpace> @ imm = #-0x64
 80571f4: 9002         	str	r0, [sp, #0x8]
;         return uxReturn;
 80571f6: 9802         	ldr	r0, [sp, #0x8]
 80571f8: b006         	add	sp, #0x18
 80571fa: bd80         	pop	{r7, pc}

080571fc <xTaskGetCurrentTaskHandle>:
;         {
 80571fc: b081         	sub	sp, #0x4
;             xReturn = pxCurrentTCB;
 80571fe: f240 0000    	movw	r0, #0x0
 8057202: f2c0 0000    	movt	r0, #0x0
 8057206: 6800         	ldr	r0, [r0]
 8057208: 9000         	str	r0, [sp]
;             return xReturn;
 805720a: 9800         	ldr	r0, [sp]
 805720c: b001         	add	sp, #0x4
 805720e: 4770         	bx	lr

08057210 <xTaskGetSchedulerState>:
;     {
 8057210: b081         	sub	sp, #0x4
;         if( xSchedulerRunning == pdFALSE )
 8057212: f240 0000    	movw	r0, #0x0
 8057216: f2c0 0000    	movt	r0, #0x0
 805721a: 6800         	ldr	r0, [r0]
 805721c: b918         	cbnz	r0, 0x8057226 <xTaskGetSchedulerState+0x16> @ imm = #0x6
 805721e: e7ff         	b	0x8057220 <xTaskGetSchedulerState+0x10> @ imm = #-0x2
 8057220: 2001         	movs	r0, #0x1
;             xReturn = taskSCHEDULER_NOT_STARTED;
 8057222: 9000         	str	r0, [sp]
;         }
 8057224: e00d         	b	0x8057242 <xTaskGetSchedulerState+0x32> @ imm = #0x1a
;                 if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8057226: f240 0000    	movw	r0, #0x0
 805722a: f2c0 0000    	movt	r0, #0x0
 805722e: 6800         	ldr	r0, [r0]
 8057230: b918         	cbnz	r0, 0x805723a <xTaskGetSchedulerState+0x2a> @ imm = #0x6
 8057232: e7ff         	b	0x8057234 <xTaskGetSchedulerState+0x24> @ imm = #-0x2
 8057234: 2002         	movs	r0, #0x2
;                     xReturn = taskSCHEDULER_RUNNING;
 8057236: 9000         	str	r0, [sp]
;                 }
 8057238: e002         	b	0x8057240 <xTaskGetSchedulerState+0x30> @ imm = #0x4
 805723a: 2000         	movs	r0, #0x0
;                     xReturn = taskSCHEDULER_SUSPENDED;
 805723c: 9000         	str	r0, [sp]
 805723e: e7ff         	b	0x8057240 <xTaskGetSchedulerState+0x30> @ imm = #-0x2
 8057240: e7ff         	b	0x8057242 <xTaskGetSchedulerState+0x32> @ imm = #-0x2
;         return xReturn;
 8057242: 9800         	ldr	r0, [sp]
 8057244: b001         	add	sp, #0x4
 8057246: 4770         	bx	lr

08057248 <xTaskPriorityInherit>:
;     {
 8057248: b580         	push	{r7, lr}
 805724a: 466f         	mov	r7, sp
 805724c: b084         	sub	sp, #0x10
 805724e: 9003         	str	r0, [sp, #0xc]
;         TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8057250: 9803         	ldr	r0, [sp, #0xc]
 8057252: 9002         	str	r0, [sp, #0x8]
 8057254: 2000         	movs	r0, #0x0
;         BaseType_t xReturn = pdFALSE;
 8057256: 9001         	str	r0, [sp, #0x4]
;         if( pxMutexHolder != NULL )
 8057258: 9803         	ldr	r0, [sp, #0xc]
 805725a: 2800         	cmp	r0, #0x0
 805725c: f000 80b4    	beq.w	0x80573c8 <xTaskPriorityInherit+0x180> @ imm = #0x168
 8057260: e7ff         	b	0x8057262 <xTaskPriorityInherit+0x1a> @ imm = #-0x2
;             if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8057262: 9802         	ldr	r0, [sp, #0x8]
 8057264: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 8057268: f240 0100    	movw	r1, #0x0
 805726c: f2c0 0100    	movt	r1, #0x0
 8057270: 6809         	ldr	r1, [r1]
 8057272: f8d1 10a8    	ldr.w	r1, [r1, #0xa8]
 8057276: 4288         	cmp	r0, r1
 8057278: f080 8093    	bhs.w	0x80573a2 <xTaskPriorityInherit+0x15a> @ imm = #0x126
 805727c: e7ff         	b	0x805727e <xTaskPriorityInherit+0x36> @ imm = #-0x2
;                 if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 805727e: 9802         	ldr	r0, [sp, #0x8]
 8057280: f890 0097    	ldrb.w	r0, [r0, #0x97]
 8057284: 0600         	lsls	r0, r0, #0x18
 8057286: 2800         	cmp	r0, #0x0
 8057288: d40d         	bmi	0x80572a6 <xTaskPriorityInherit+0x5e> @ imm = #0x1a
 805728a: e7ff         	b	0x805728c <xTaskPriorityInherit+0x44> @ imm = #-0x2
;                     listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 805728c: f240 0000    	movw	r0, #0x0
 8057290: f2c0 0000    	movt	r0, #0x0
 8057294: 6800         	ldr	r0, [r0]
 8057296: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 805729a: f1c0 0010    	rsb.w	r0, r0, #0x10
 805729e: 9902         	ldr	r1, [sp, #0x8]
 80572a0: f8c1 0094    	str.w	r0, [r1, #0x94]
;                 }
 80572a4: e000         	b	0x80572a8 <xTaskPriorityInherit+0x60> @ imm = #0x0
 80572a6: e7ff         	b	0x80572a8 <xTaskPriorityInherit+0x60> @ imm = #-0x2
;                 if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80572a8: 9902         	ldr	r1, [sp, #0x8]
 80572aa: f8d1 0090    	ldr.w	r0, [r1, #0x90]
 80572ae: f8d1 10a8    	ldr.w	r1, [r1, #0xa8]
 80572b2: eb01 0281    	add.w	r2, r1, r1, lsl #2
 80572b6: f240 0100    	movw	r1, #0x0
 80572ba: f2c0 0100    	movt	r1, #0x0
 80572be: eb01 0182    	add.w	r1, r1, r2, lsl #2
 80572c2: 4288         	cmp	r0, r1
 80572c4: d15f         	bne	0x8057386 <xTaskPriorityInherit+0x13e> @ imm = #0xbe
 80572c6: e7ff         	b	0x80572c8 <xTaskPriorityInherit+0x80> @ imm = #-0x2
;                     if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80572c8: 9802         	ldr	r0, [sp, #0x8]
 80572ca: 3080         	adds	r0, #0x80
 80572cc: f7ff fffe    	bl	0x80572cc <xTaskPriorityInherit+0x84> @ imm = #-0x4
 80572d0: b908         	cbnz	r0, 0x80572d6 <xTaskPriorityInherit+0x8e> @ imm = #0x2
 80572d2: e7ff         	b	0x80572d4 <xTaskPriorityInherit+0x8c> @ imm = #-0x2
;                     }
 80572d4: e000         	b	0x80572d8 <xTaskPriorityInherit+0x90> @ imm = #0x0
 80572d6: e7ff         	b	0x80572d8 <xTaskPriorityInherit+0x90> @ imm = #-0x2
;                     pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80572d8: f240 0000    	movw	r0, #0x0
 80572dc: f2c0 0000    	movt	r0, #0x0
 80572e0: 6800         	ldr	r0, [r0]
 80572e2: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 80572e6: 9902         	ldr	r1, [sp, #0x8]
 80572e8: f8c1 00a8    	str.w	r0, [r1, #0xa8]
;                     prvAddTaskToReadyList( pxMutexHolderTCB );
 80572ec: e7ff         	b	0x80572ee <xTaskPriorityInherit+0xa6> @ imm = #-0x2
 80572ee: e7ff         	b	0x80572f0 <xTaskPriorityInherit+0xa8> @ imm = #-0x2
 80572f0: 9802         	ldr	r0, [sp, #0x8]
 80572f2: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 80572f6: f240 0100    	movw	r1, #0x0
 80572fa: f2c0 0100    	movt	r1, #0x0
 80572fe: 6809         	ldr	r1, [r1]
 8057300: 4288         	cmp	r0, r1
 8057302: d909         	bls	0x8057318 <xTaskPriorityInherit+0xd0> @ imm = #0x12
 8057304: e7ff         	b	0x8057306 <xTaskPriorityInherit+0xbe> @ imm = #-0x2
 8057306: 9802         	ldr	r0, [sp, #0x8]
 8057308: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 805730c: f240 0100    	movw	r1, #0x0
 8057310: f2c0 0100    	movt	r1, #0x0
 8057314: 6008         	str	r0, [r1]
 8057316: e7ff         	b	0x8057318 <xTaskPriorityInherit+0xd0> @ imm = #-0x2
 8057318: e7ff         	b	0x805731a <xTaskPriorityInherit+0xd2> @ imm = #-0x2
 805731a: e7ff         	b	0x805731c <xTaskPriorityInherit+0xd4> @ imm = #-0x2
 805731c: 9802         	ldr	r0, [sp, #0x8]
 805731e: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 8057322: eb00 0080    	add.w	r0, r0, r0, lsl #2
 8057326: f240 0100    	movw	r1, #0x0
 805732a: f2c0 0100    	movt	r1, #0x0
 805732e: eb01 0080    	add.w	r0, r1, r0, lsl #2
 8057332: 6840         	ldr	r0, [r0, #0x4]
 8057334: 9000         	str	r0, [sp]
 8057336: 9800         	ldr	r0, [sp]
 8057338: 9a02         	ldr	r2, [sp, #0x8]
 805733a: f8c2 0084    	str.w	r0, [r2, #0x84]
 805733e: 9800         	ldr	r0, [sp]
 8057340: 6880         	ldr	r0, [r0, #0x8]
 8057342: 9a02         	ldr	r2, [sp, #0x8]
 8057344: f8c2 0088    	str.w	r0, [r2, #0x88]
 8057348: 9802         	ldr	r0, [sp, #0x8]
 805734a: 3080         	adds	r0, #0x80
 805734c: 9a00         	ldr	r2, [sp]
 805734e: 6892         	ldr	r2, [r2, #0x8]
 8057350: 6050         	str	r0, [r2, #0x4]
 8057352: 9802         	ldr	r0, [sp, #0x8]
 8057354: 3080         	adds	r0, #0x80
 8057356: 9a00         	ldr	r2, [sp]
 8057358: 6090         	str	r0, [r2, #0x8]
 805735a: 9a02         	ldr	r2, [sp, #0x8]
 805735c: f8d2 00a8    	ldr.w	r0, [r2, #0xa8]
 8057360: eb00 0080    	add.w	r0, r0, r0, lsl #2
 8057364: eb01 0080    	add.w	r0, r1, r0, lsl #2
 8057368: f8c2 0090    	str.w	r0, [r2, #0x90]
 805736c: 9802         	ldr	r0, [sp, #0x8]
 805736e: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 8057372: eb00 0280    	add.w	r2, r0, r0, lsl #2
 8057376: f851 0022    	ldr.w	r0, [r1, r2, lsl #2]
 805737a: 3001         	adds	r0, #0x1
 805737c: f841 0022    	str.w	r0, [r1, r2, lsl #2]
 8057380: e7ff         	b	0x8057382 <xTaskPriorityInherit+0x13a> @ imm = #-0x2
 8057382: e7ff         	b	0x8057384 <xTaskPriorityInherit+0x13c> @ imm = #-0x2
;                 }
 8057384: e00a         	b	0x805739c <xTaskPriorityInherit+0x154> @ imm = #0x14
;                     pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8057386: f240 0000    	movw	r0, #0x0
 805738a: f2c0 0000    	movt	r0, #0x0
 805738e: 6800         	ldr	r0, [r0]
 8057390: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 8057394: 9902         	ldr	r1, [sp, #0x8]
 8057396: f8c1 00a8    	str.w	r0, [r1, #0xa8]
 805739a: e7ff         	b	0x805739c <xTaskPriorityInherit+0x154> @ imm = #-0x2
 805739c: 2001         	movs	r0, #0x1
;                 xReturn = pdTRUE;
 805739e: 9001         	str	r0, [sp, #0x4]
;             }
 80573a0: e011         	b	0x80573c6 <xTaskPriorityInherit+0x17e> @ imm = #0x22
;                 if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80573a2: 9802         	ldr	r0, [sp, #0x8]
 80573a4: f8d0 00c8    	ldr.w	r0, [r0, #0xc8]
 80573a8: f240 0100    	movw	r1, #0x0
 80573ac: f2c0 0100    	movt	r1, #0x0
 80573b0: 6809         	ldr	r1, [r1]
 80573b2: f8d1 10a8    	ldr.w	r1, [r1, #0xa8]
 80573b6: 4288         	cmp	r0, r1
 80573b8: d203         	bhs	0x80573c2 <xTaskPriorityInherit+0x17a> @ imm = #0x6
 80573ba: e7ff         	b	0x80573bc <xTaskPriorityInherit+0x174> @ imm = #-0x2
 80573bc: 2001         	movs	r0, #0x1
;                     xReturn = pdTRUE;
 80573be: 9001         	str	r0, [sp, #0x4]
;                 }
 80573c0: e000         	b	0x80573c4 <xTaskPriorityInherit+0x17c> @ imm = #0x0
 80573c2: e7ff         	b	0x80573c4 <xTaskPriorityInherit+0x17c> @ imm = #-0x2
 80573c4: e7ff         	b	0x80573c6 <xTaskPriorityInherit+0x17e> @ imm = #-0x2
;         }
 80573c6: e000         	b	0x80573ca <xTaskPriorityInherit+0x182> @ imm = #0x0
 80573c8: e7ff         	b	0x80573ca <xTaskPriorityInherit+0x182> @ imm = #-0x2
;         return xReturn;
 80573ca: 9801         	ldr	r0, [sp, #0x4]
 80573cc: b004         	add	sp, #0x10
 80573ce: bd80         	pop	{r7, pc}

080573d0 <xTaskPriorityDisinherit>:
;     {
 80573d0: b580         	push	{r7, lr}
 80573d2: 466f         	mov	r7, sp
 80573d4: b084         	sub	sp, #0x10
 80573d6: 9003         	str	r0, [sp, #0xc]
;         TCB_t * const pxTCB = pxMutexHolder;
 80573d8: 9803         	ldr	r0, [sp, #0xc]
 80573da: 9002         	str	r0, [sp, #0x8]
 80573dc: 2000         	movs	r0, #0x0
;         BaseType_t xReturn = pdFALSE;
 80573de: 9001         	str	r0, [sp, #0x4]
;         if( pxMutexHolder != NULL )
 80573e0: 9803         	ldr	r0, [sp, #0xc]
 80573e2: 2800         	cmp	r0, #0x0
 80573e4: f000 8092    	beq.w	0x805750c <xTaskPriorityDisinherit+0x13c> @ imm = #0x124
 80573e8: e7ff         	b	0x80573ea <xTaskPriorityDisinherit+0x1a> @ imm = #-0x2
;             configASSERT( pxTCB == pxCurrentTCB );
 80573ea: 9802         	ldr	r0, [sp, #0x8]
 80573ec: f240 0100    	movw	r1, #0x0
 80573f0: f2c0 0100    	movt	r1, #0x0
 80573f4: 6809         	ldr	r1, [r1]
 80573f6: 4288         	cmp	r0, r1
 80573f8: d004         	beq	0x8057404 <xTaskPriorityDisinherit+0x34> @ imm = #0x8
 80573fa: e7ff         	b	0x80573fc <xTaskPriorityDisinherit+0x2c> @ imm = #-0x2
 80573fc: f7ff fffe    	bl	0x80573fc <xTaskPriorityDisinherit+0x2c> @ imm = #-0x4
 8057400: e7ff         	b	0x8057402 <xTaskPriorityDisinherit+0x32> @ imm = #-0x2
 8057402: e7fe         	b	0x8057402 <xTaskPriorityDisinherit+0x32> @ imm = #-0x4
;             configASSERT( pxTCB->uxMutexesHeld );
 8057404: 9802         	ldr	r0, [sp, #0x8]
 8057406: f8d0 00cc    	ldr.w	r0, [r0, #0xcc]
 805740a: b920         	cbnz	r0, 0x8057416 <xTaskPriorityDisinherit+0x46> @ imm = #0x8
 805740c: e7ff         	b	0x805740e <xTaskPriorityDisinherit+0x3e> @ imm = #-0x2
 805740e: f7ff fffe    	bl	0x805740e <xTaskPriorityDisinherit+0x3e> @ imm = #-0x4
 8057412: e7ff         	b	0x8057414 <xTaskPriorityDisinherit+0x44> @ imm = #-0x2
 8057414: e7fe         	b	0x8057414 <xTaskPriorityDisinherit+0x44> @ imm = #-0x4
;             ( pxTCB->uxMutexesHeld )--;
 8057416: 9902         	ldr	r1, [sp, #0x8]
 8057418: f8d1 00cc    	ldr.w	r0, [r1, #0xcc]
 805741c: 3801         	subs	r0, #0x1
 805741e: f8c1 00cc    	str.w	r0, [r1, #0xcc]
;             if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8057422: 9902         	ldr	r1, [sp, #0x8]
 8057424: f8d1 00a8    	ldr.w	r0, [r1, #0xa8]
 8057428: f8d1 10c8    	ldr.w	r1, [r1, #0xc8]
 805742c: 4288         	cmp	r0, r1
 805742e: d06b         	beq	0x8057508 <xTaskPriorityDisinherit+0x138> @ imm = #0xd6
 8057430: e7ff         	b	0x8057432 <xTaskPriorityDisinherit+0x62> @ imm = #-0x2
;                 if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8057432: 9802         	ldr	r0, [sp, #0x8]
 8057434: f8d0 00cc    	ldr.w	r0, [r0, #0xcc]
 8057438: 2800         	cmp	r0, #0x0
 805743a: d163         	bne	0x8057504 <xTaskPriorityDisinherit+0x134> @ imm = #0xc6
 805743c: e7ff         	b	0x805743e <xTaskPriorityDisinherit+0x6e> @ imm = #-0x2
;                     if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 805743e: 9802         	ldr	r0, [sp, #0x8]
 8057440: 3080         	adds	r0, #0x80
 8057442: f7ff fffe    	bl	0x8057442 <xTaskPriorityDisinherit+0x72> @ imm = #-0x4
 8057446: b908         	cbnz	r0, 0x805744c <xTaskPriorityDisinherit+0x7c> @ imm = #0x2
 8057448: e7ff         	b	0x805744a <xTaskPriorityDisinherit+0x7a> @ imm = #-0x2
;                     }
 805744a: e000         	b	0x805744e <xTaskPriorityDisinherit+0x7e> @ imm = #0x0
 805744c: e7ff         	b	0x805744e <xTaskPriorityDisinherit+0x7e> @ imm = #-0x2
;                     pxTCB->uxPriority = pxTCB->uxBasePriority;
 805744e: 9902         	ldr	r1, [sp, #0x8]
 8057450: f8d1 00c8    	ldr.w	r0, [r1, #0xc8]
 8057454: f8c1 00a8    	str.w	r0, [r1, #0xa8]
;                     listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8057458: 9902         	ldr	r1, [sp, #0x8]
 805745a: f8d1 00a8    	ldr.w	r0, [r1, #0xa8]
 805745e: f1c0 0010    	rsb.w	r0, r0, #0x10
 8057462: f8c1 0094    	str.w	r0, [r1, #0x94]
;                     prvAddTaskToReadyList( pxTCB );
 8057466: e7ff         	b	0x8057468 <xTaskPriorityDisinherit+0x98> @ imm = #-0x2
 8057468: e7ff         	b	0x805746a <xTaskPriorityDisinherit+0x9a> @ imm = #-0x2
 805746a: 9802         	ldr	r0, [sp, #0x8]
 805746c: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 8057470: f240 0100    	movw	r1, #0x0
 8057474: f2c0 0100    	movt	r1, #0x0
 8057478: 6809         	ldr	r1, [r1]
 805747a: 4288         	cmp	r0, r1
 805747c: d909         	bls	0x8057492 <xTaskPriorityDisinherit+0xc2> @ imm = #0x12
 805747e: e7ff         	b	0x8057480 <xTaskPriorityDisinherit+0xb0> @ imm = #-0x2
 8057480: 9802         	ldr	r0, [sp, #0x8]
 8057482: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 8057486: f240 0100    	movw	r1, #0x0
 805748a: f2c0 0100    	movt	r1, #0x0
 805748e: 6008         	str	r0, [r1]
 8057490: e7ff         	b	0x8057492 <xTaskPriorityDisinherit+0xc2> @ imm = #-0x2
 8057492: e7ff         	b	0x8057494 <xTaskPriorityDisinherit+0xc4> @ imm = #-0x2
 8057494: e7ff         	b	0x8057496 <xTaskPriorityDisinherit+0xc6> @ imm = #-0x2
 8057496: 9802         	ldr	r0, [sp, #0x8]
 8057498: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 805749c: eb00 0080    	add.w	r0, r0, r0, lsl #2
 80574a0: f240 0100    	movw	r1, #0x0
 80574a4: f2c0 0100    	movt	r1, #0x0
 80574a8: eb01 0080    	add.w	r0, r1, r0, lsl #2
 80574ac: 6840         	ldr	r0, [r0, #0x4]
 80574ae: 9000         	str	r0, [sp]
 80574b0: 9800         	ldr	r0, [sp]
 80574b2: 9a02         	ldr	r2, [sp, #0x8]
 80574b4: f8c2 0084    	str.w	r0, [r2, #0x84]
 80574b8: 9800         	ldr	r0, [sp]
 80574ba: 6880         	ldr	r0, [r0, #0x8]
 80574bc: 9a02         	ldr	r2, [sp, #0x8]
 80574be: f8c2 0088    	str.w	r0, [r2, #0x88]
 80574c2: 9802         	ldr	r0, [sp, #0x8]
 80574c4: 3080         	adds	r0, #0x80
 80574c6: 9a00         	ldr	r2, [sp]
 80574c8: 6892         	ldr	r2, [r2, #0x8]
 80574ca: 6050         	str	r0, [r2, #0x4]
 80574cc: 9802         	ldr	r0, [sp, #0x8]
 80574ce: 3080         	adds	r0, #0x80
 80574d0: 9a00         	ldr	r2, [sp]
 80574d2: 6090         	str	r0, [r2, #0x8]
 80574d4: 9a02         	ldr	r2, [sp, #0x8]
 80574d6: f8d2 00a8    	ldr.w	r0, [r2, #0xa8]
 80574da: eb00 0080    	add.w	r0, r0, r0, lsl #2
 80574de: eb01 0080    	add.w	r0, r1, r0, lsl #2
 80574e2: f8c2 0090    	str.w	r0, [r2, #0x90]
 80574e6: 9802         	ldr	r0, [sp, #0x8]
 80574e8: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 80574ec: eb00 0280    	add.w	r2, r0, r0, lsl #2
 80574f0: f851 0022    	ldr.w	r0, [r1, r2, lsl #2]
 80574f4: 3001         	adds	r0, #0x1
 80574f6: f841 0022    	str.w	r0, [r1, r2, lsl #2]
 80574fa: e7ff         	b	0x80574fc <xTaskPriorityDisinherit+0x12c> @ imm = #-0x2
 80574fc: e7ff         	b	0x80574fe <xTaskPriorityDisinherit+0x12e> @ imm = #-0x2
 80574fe: 2001         	movs	r0, #0x1
;                     xReturn = pdTRUE;
 8057500: 9001         	str	r0, [sp, #0x4]
;                 }
 8057502: e000         	b	0x8057506 <xTaskPriorityDisinherit+0x136> @ imm = #0x0
 8057504: e7ff         	b	0x8057506 <xTaskPriorityDisinherit+0x136> @ imm = #-0x2
;             }
 8057506: e000         	b	0x805750a <xTaskPriorityDisinherit+0x13a> @ imm = #0x0
 8057508: e7ff         	b	0x805750a <xTaskPriorityDisinherit+0x13a> @ imm = #-0x2
;         }
 805750a: e000         	b	0x805750e <xTaskPriorityDisinherit+0x13e> @ imm = #0x0
 805750c: e7ff         	b	0x805750e <xTaskPriorityDisinherit+0x13e> @ imm = #-0x2
;         return xReturn;
 805750e: 9801         	ldr	r0, [sp, #0x4]
 8057510: b004         	add	sp, #0x10
 8057512: bd80         	pop	{r7, pc}

08057514 <vTaskPriorityDisinheritAfterTimeout>:
;     {
 8057514: b580         	push	{r7, lr}
 8057516: 466f         	mov	r7, sp
 8057518: b088         	sub	sp, #0x20
 805751a: 9007         	str	r0, [sp, #0x1c]
 805751c: 9106         	str	r1, [sp, #0x18]
;         TCB_t * const pxTCB = pxMutexHolder;
 805751e: 9807         	ldr	r0, [sp, #0x1c]
 8057520: 9005         	str	r0, [sp, #0x14]
 8057522: 2001         	movs	r0, #0x1
;         const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8057524: 9002         	str	r0, [sp, #0x8]
;         if( pxMutexHolder != NULL )
 8057526: 9807         	ldr	r0, [sp, #0x1c]
 8057528: 2800         	cmp	r0, #0x0
 805752a: f000 80b6    	beq.w	0x805769a <vTaskPriorityDisinheritAfterTimeout+0x186> @ imm = #0x16c
 805752e: e7ff         	b	0x8057530 <vTaskPriorityDisinheritAfterTimeout+0x1c> @ imm = #-0x2
;             configASSERT( pxTCB->uxMutexesHeld );
 8057530: 9805         	ldr	r0, [sp, #0x14]
 8057532: f8d0 00cc    	ldr.w	r0, [r0, #0xcc]
 8057536: b920         	cbnz	r0, 0x8057542 <vTaskPriorityDisinheritAfterTimeout+0x2e> @ imm = #0x8
 8057538: e7ff         	b	0x805753a <vTaskPriorityDisinheritAfterTimeout+0x26> @ imm = #-0x2
 805753a: f7ff fffe    	bl	0x805753a <vTaskPriorityDisinheritAfterTimeout+0x26> @ imm = #-0x4
 805753e: e7ff         	b	0x8057540 <vTaskPriorityDisinheritAfterTimeout+0x2c> @ imm = #-0x2
 8057540: e7fe         	b	0x8057540 <vTaskPriorityDisinheritAfterTimeout+0x2c> @ imm = #-0x4
;             if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8057542: 9805         	ldr	r0, [sp, #0x14]
 8057544: f8d0 00c8    	ldr.w	r0, [r0, #0xc8]
 8057548: 9906         	ldr	r1, [sp, #0x18]
 805754a: 4288         	cmp	r0, r1
 805754c: d203         	bhs	0x8057556 <vTaskPriorityDisinheritAfterTimeout+0x42> @ imm = #0x6
 805754e: e7ff         	b	0x8057550 <vTaskPriorityDisinheritAfterTimeout+0x3c> @ imm = #-0x2
;                 uxPriorityToUse = uxHighestPriorityWaitingTask;
 8057550: 9806         	ldr	r0, [sp, #0x18]
 8057552: 9003         	str	r0, [sp, #0xc]
;             }
 8057554: e004         	b	0x8057560 <vTaskPriorityDisinheritAfterTimeout+0x4c> @ imm = #0x8
;                 uxPriorityToUse = pxTCB->uxBasePriority;
 8057556: 9805         	ldr	r0, [sp, #0x14]
 8057558: f8d0 00c8    	ldr.w	r0, [r0, #0xc8]
 805755c: 9003         	str	r0, [sp, #0xc]
 805755e: e7ff         	b	0x8057560 <vTaskPriorityDisinheritAfterTimeout+0x4c> @ imm = #-0x2
;             if( pxTCB->uxPriority != uxPriorityToUse )
 8057560: 9805         	ldr	r0, [sp, #0x14]
 8057562: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 8057566: 9903         	ldr	r1, [sp, #0xc]
 8057568: 4288         	cmp	r0, r1
 805756a: f000 8094    	beq.w	0x8057696 <vTaskPriorityDisinheritAfterTimeout+0x182> @ imm = #0x128
 805756e: e7ff         	b	0x8057570 <vTaskPriorityDisinheritAfterTimeout+0x5c> @ imm = #-0x2
;                 if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8057570: 9805         	ldr	r0, [sp, #0x14]
 8057572: f8d0 00cc    	ldr.w	r0, [r0, #0xcc]
 8057576: 2801         	cmp	r0, #0x1
 8057578: f040 808b    	bne.w	0x8057692 <vTaskPriorityDisinheritAfterTimeout+0x17e> @ imm = #0x116
 805757c: e7ff         	b	0x805757e <vTaskPriorityDisinheritAfterTimeout+0x6a> @ imm = #-0x2
;                     configASSERT( pxTCB != pxCurrentTCB );
 805757e: 9805         	ldr	r0, [sp, #0x14]
 8057580: f240 0100    	movw	r1, #0x0
 8057584: f2c0 0100    	movt	r1, #0x0
 8057588: 6809         	ldr	r1, [r1]
 805758a: 4288         	cmp	r0, r1
 805758c: d104         	bne	0x8057598 <vTaskPriorityDisinheritAfterTimeout+0x84> @ imm = #0x8
 805758e: e7ff         	b	0x8057590 <vTaskPriorityDisinheritAfterTimeout+0x7c> @ imm = #-0x2
 8057590: f7ff fffe    	bl	0x8057590 <vTaskPriorityDisinheritAfterTimeout+0x7c> @ imm = #-0x4
 8057594: e7ff         	b	0x8057596 <vTaskPriorityDisinheritAfterTimeout+0x82> @ imm = #-0x2
 8057596: e7fe         	b	0x8057596 <vTaskPriorityDisinheritAfterTimeout+0x82> @ imm = #-0x4
;                     uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8057598: 9805         	ldr	r0, [sp, #0x14]
 805759a: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 805759e: 9004         	str	r0, [sp, #0x10]
;                     pxTCB->uxPriority = uxPriorityToUse;
 80575a0: 9803         	ldr	r0, [sp, #0xc]
 80575a2: 9905         	ldr	r1, [sp, #0x14]
 80575a4: f8c1 00a8    	str.w	r0, [r1, #0xa8]
;                     if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80575a8: 9805         	ldr	r0, [sp, #0x14]
 80575aa: f890 0097    	ldrb.w	r0, [r0, #0x97]
 80575ae: 0600         	lsls	r0, r0, #0x18
 80575b0: 2800         	cmp	r0, #0x0
 80575b2: d407         	bmi	0x80575c4 <vTaskPriorityDisinheritAfterTimeout+0xb0> @ imm = #0xe
 80575b4: e7ff         	b	0x80575b6 <vTaskPriorityDisinheritAfterTimeout+0xa2> @ imm = #-0x2
;                         listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80575b6: 9803         	ldr	r0, [sp, #0xc]
 80575b8: f1c0 0010    	rsb.w	r0, r0, #0x10
 80575bc: 9905         	ldr	r1, [sp, #0x14]
 80575be: f8c1 0094    	str.w	r0, [r1, #0x94]
;                     }
 80575c2: e000         	b	0x80575c6 <vTaskPriorityDisinheritAfterTimeout+0xb2> @ imm = #0x0
 80575c4: e7ff         	b	0x80575c6 <vTaskPriorityDisinheritAfterTimeout+0xb2> @ imm = #-0x2
;                     if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80575c6: 9805         	ldr	r0, [sp, #0x14]
 80575c8: f8d0 0090    	ldr.w	r0, [r0, #0x90]
 80575cc: 9904         	ldr	r1, [sp, #0x10]
 80575ce: eb01 0281    	add.w	r2, r1, r1, lsl #2
 80575d2: f240 0100    	movw	r1, #0x0
 80575d6: f2c0 0100    	movt	r1, #0x0
 80575da: eb01 0182    	add.w	r1, r1, r2, lsl #2
 80575de: 4288         	cmp	r0, r1
 80575e0: d155         	bne	0x805768e <vTaskPriorityDisinheritAfterTimeout+0x17a> @ imm = #0xaa
 80575e2: e7ff         	b	0x80575e4 <vTaskPriorityDisinheritAfterTimeout+0xd0> @ imm = #-0x2
;                         if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80575e4: 9805         	ldr	r0, [sp, #0x14]
 80575e6: 3080         	adds	r0, #0x80
 80575e8: f7ff fffe    	bl	0x80575e8 <vTaskPriorityDisinheritAfterTimeout+0xd4> @ imm = #-0x4
 80575ec: b908         	cbnz	r0, 0x80575f2 <vTaskPriorityDisinheritAfterTimeout+0xde> @ imm = #0x2
 80575ee: e7ff         	b	0x80575f0 <vTaskPriorityDisinheritAfterTimeout+0xdc> @ imm = #-0x2
;                         }
 80575f0: e000         	b	0x80575f4 <vTaskPriorityDisinheritAfterTimeout+0xe0> @ imm = #0x0
 80575f2: e7ff         	b	0x80575f4 <vTaskPriorityDisinheritAfterTimeout+0xe0> @ imm = #-0x2
;                         prvAddTaskToReadyList( pxTCB );
 80575f4: e7ff         	b	0x80575f6 <vTaskPriorityDisinheritAfterTimeout+0xe2> @ imm = #-0x2
 80575f6: e7ff         	b	0x80575f8 <vTaskPriorityDisinheritAfterTimeout+0xe4> @ imm = #-0x2
 80575f8: 9805         	ldr	r0, [sp, #0x14]
 80575fa: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 80575fe: f240 0100    	movw	r1, #0x0
 8057602: f2c0 0100    	movt	r1, #0x0
 8057606: 6809         	ldr	r1, [r1]
 8057608: 4288         	cmp	r0, r1
 805760a: d909         	bls	0x8057620 <vTaskPriorityDisinheritAfterTimeout+0x10c> @ imm = #0x12
 805760c: e7ff         	b	0x805760e <vTaskPriorityDisinheritAfterTimeout+0xfa> @ imm = #-0x2
 805760e: 9805         	ldr	r0, [sp, #0x14]
 8057610: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 8057614: f240 0100    	movw	r1, #0x0
 8057618: f2c0 0100    	movt	r1, #0x0
 805761c: 6008         	str	r0, [r1]
 805761e: e7ff         	b	0x8057620 <vTaskPriorityDisinheritAfterTimeout+0x10c> @ imm = #-0x2
 8057620: e7ff         	b	0x8057622 <vTaskPriorityDisinheritAfterTimeout+0x10e> @ imm = #-0x2
 8057622: e7ff         	b	0x8057624 <vTaskPriorityDisinheritAfterTimeout+0x110> @ imm = #-0x2
 8057624: 9805         	ldr	r0, [sp, #0x14]
 8057626: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 805762a: eb00 0080    	add.w	r0, r0, r0, lsl #2
 805762e: f240 0100    	movw	r1, #0x0
 8057632: f2c0 0100    	movt	r1, #0x0
 8057636: eb01 0080    	add.w	r0, r1, r0, lsl #2
 805763a: 6840         	ldr	r0, [r0, #0x4]
 805763c: 9001         	str	r0, [sp, #0x4]
 805763e: 9801         	ldr	r0, [sp, #0x4]
 8057640: 9a05         	ldr	r2, [sp, #0x14]
 8057642: f8c2 0084    	str.w	r0, [r2, #0x84]
 8057646: 9801         	ldr	r0, [sp, #0x4]
 8057648: 6880         	ldr	r0, [r0, #0x8]
 805764a: 9a05         	ldr	r2, [sp, #0x14]
 805764c: f8c2 0088    	str.w	r0, [r2, #0x88]
 8057650: 9805         	ldr	r0, [sp, #0x14]
 8057652: 3080         	adds	r0, #0x80
 8057654: 9a01         	ldr	r2, [sp, #0x4]
 8057656: 6892         	ldr	r2, [r2, #0x8]
 8057658: 6050         	str	r0, [r2, #0x4]
 805765a: 9805         	ldr	r0, [sp, #0x14]
 805765c: 3080         	adds	r0, #0x80
 805765e: 9a01         	ldr	r2, [sp, #0x4]
 8057660: 6090         	str	r0, [r2, #0x8]
 8057662: 9a05         	ldr	r2, [sp, #0x14]
 8057664: f8d2 00a8    	ldr.w	r0, [r2, #0xa8]
 8057668: eb00 0080    	add.w	r0, r0, r0, lsl #2
 805766c: eb01 0080    	add.w	r0, r1, r0, lsl #2
 8057670: f8c2 0090    	str.w	r0, [r2, #0x90]
 8057674: 9805         	ldr	r0, [sp, #0x14]
 8057676: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 805767a: eb00 0280    	add.w	r2, r0, r0, lsl #2
 805767e: f851 0022    	ldr.w	r0, [r1, r2, lsl #2]
 8057682: 3001         	adds	r0, #0x1
 8057684: f841 0022    	str.w	r0, [r1, r2, lsl #2]
 8057688: e7ff         	b	0x805768a <vTaskPriorityDisinheritAfterTimeout+0x176> @ imm = #-0x2
 805768a: e7ff         	b	0x805768c <vTaskPriorityDisinheritAfterTimeout+0x178> @ imm = #-0x2
;                     }
 805768c: e000         	b	0x8057690 <vTaskPriorityDisinheritAfterTimeout+0x17c> @ imm = #0x0
 805768e: e7ff         	b	0x8057690 <vTaskPriorityDisinheritAfterTimeout+0x17c> @ imm = #-0x2
;                 }
 8057690: e000         	b	0x8057694 <vTaskPriorityDisinheritAfterTimeout+0x180> @ imm = #0x0
 8057692: e7ff         	b	0x8057694 <vTaskPriorityDisinheritAfterTimeout+0x180> @ imm = #-0x2
;             }
 8057694: e000         	b	0x8057698 <vTaskPriorityDisinheritAfterTimeout+0x184> @ imm = #0x0
 8057696: e7ff         	b	0x8057698 <vTaskPriorityDisinheritAfterTimeout+0x184> @ imm = #-0x2
;         }
 8057698: e000         	b	0x805769c <vTaskPriorityDisinheritAfterTimeout+0x188> @ imm = #0x0
 805769a: e7ff         	b	0x805769c <vTaskPriorityDisinheritAfterTimeout+0x188> @ imm = #-0x2
;     }
 805769c: b008         	add	sp, #0x20
 805769e: bd80         	pop	{r7, pc}

080576a0 <uxTaskResetEventItemValue>:
; {
 80576a0: b081         	sub	sp, #0x4
;     uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 80576a2: f240 0100    	movw	r1, #0x0
 80576a6: f2c0 0100    	movt	r1, #0x0
 80576aa: 6808         	ldr	r0, [r1]
 80576ac: f8d0 0094    	ldr.w	r0, [r0, #0x94]
 80576b0: 9000         	str	r0, [sp]
;     listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80576b2: 6808         	ldr	r0, [r1]
 80576b4: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 80576b8: f1c0 0010    	rsb.w	r0, r0, #0x10
 80576bc: 6809         	ldr	r1, [r1]
 80576be: f8c1 0094    	str.w	r0, [r1, #0x94]
;     return uxReturn;
 80576c2: 9800         	ldr	r0, [sp]
 80576c4: b001         	add	sp, #0x4
 80576c6: 4770         	bx	lr

080576c8 <pvTaskIncrementMutexHeldCount>:
;     {
 80576c8: b081         	sub	sp, #0x4
;         pxTCB = pxCurrentTCB;
 80576ca: f240 0000    	movw	r0, #0x0
 80576ce: f2c0 0000    	movt	r0, #0x0
 80576d2: 6800         	ldr	r0, [r0]
 80576d4: 9000         	str	r0, [sp]
;         if( pxTCB != NULL )
 80576d6: 9800         	ldr	r0, [sp]
 80576d8: b138         	cbz	r0, 0x80576ea <pvTaskIncrementMutexHeldCount+0x22> @ imm = #0xe
 80576da: e7ff         	b	0x80576dc <pvTaskIncrementMutexHeldCount+0x14> @ imm = #-0x2
;             ( pxTCB->uxMutexesHeld )++;
 80576dc: 9900         	ldr	r1, [sp]
 80576de: f8d1 00cc    	ldr.w	r0, [r1, #0xcc]
 80576e2: 3001         	adds	r0, #0x1
 80576e4: f8c1 00cc    	str.w	r0, [r1, #0xcc]
;         }
 80576e8: e7ff         	b	0x80576ea <pvTaskIncrementMutexHeldCount+0x22> @ imm = #-0x2
;         return pxTCB;
 80576ea: 9800         	ldr	r0, [sp]
 80576ec: b001         	add	sp, #0x4
 80576ee: 4770         	bx	lr

080576f0 <ulTaskGenericNotifyTake>:
;     {
 80576f0: b580         	push	{r7, lr}
 80576f2: 466f         	mov	r7, sp
 80576f4: b086         	sub	sp, #0x18
 80576f6: 9005         	str	r0, [sp, #0x14]
 80576f8: 9104         	str	r1, [sp, #0x10]
 80576fa: 9203         	str	r2, [sp, #0xc]
;         configASSERT( uxIndexToWaitOn < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80576fc: 9805         	ldr	r0, [sp, #0x14]
 80576fe: b120         	cbz	r0, 0x805770a <ulTaskGenericNotifyTake+0x1a> @ imm = #0x8
 8057700: e7ff         	b	0x8057702 <ulTaskGenericNotifyTake+0x12> @ imm = #-0x2
 8057702: f7ff fffe    	bl	0x8057702 <ulTaskGenericNotifyTake+0x12> @ imm = #-0x4
 8057706: e7ff         	b	0x8057708 <ulTaskGenericNotifyTake+0x18> @ imm = #-0x2
 8057708: e7fe         	b	0x8057708 <ulTaskGenericNotifyTake+0x18> @ imm = #-0x4
;         taskENTER_CRITICAL();
 805770a: f7ff fffe    	bl	0x805770a <ulTaskGenericNotifyTake+0x1a> @ imm = #-0x4
;         if( pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] == 0UL )
 805770e: f240 0000    	movw	r0, #0x0
 8057712: f2c0 0000    	movt	r0, #0x0
 8057716: 6800         	ldr	r0, [r0]
 8057718: 9905         	ldr	r1, [sp, #0x14]
 805771a: eb00 0081    	add.w	r0, r0, r1, lsl #2
 805771e: f8d0 00d0    	ldr.w	r0, [r0, #0xd0]
 8057722: bb20         	cbnz	r0, 0x805776e <ulTaskGenericNotifyTake+0x7e> @ imm = #0x48
 8057724: e7ff         	b	0x8057726 <ulTaskGenericNotifyTake+0x36> @ imm = #-0x2
;             pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] = taskWAITING_NOTIFICATION;
 8057726: f240 0000    	movw	r0, #0x0
 805772a: f2c0 0000    	movt	r0, #0x0
 805772e: 6800         	ldr	r0, [r0]
 8057730: 9905         	ldr	r1, [sp, #0x14]
 8057732: 4401         	add	r1, r0
 8057734: 2001         	movs	r0, #0x1
 8057736: f881 00d4    	strb.w	r0, [r1, #0xd4]
;             if( xTicksToWait > ( TickType_t ) 0 )
 805773a: 9803         	ldr	r0, [sp, #0xc]
 805773c: b198         	cbz	r0, 0x8057766 <ulTaskGenericNotifyTake+0x76> @ imm = #0x26
 805773e: e7ff         	b	0x8057740 <ulTaskGenericNotifyTake+0x50> @ imm = #-0x2
;                 vTaskSuspendAll();
 8057740: f7ff fffe    	bl	0x8057740 <ulTaskGenericNotifyTake+0x50> @ imm = #-0x4
;                     taskEXIT_CRITICAL();
 8057744: f7ff fffe    	bl	0x8057744 <ulTaskGenericNotifyTake+0x54> @ imm = #-0x4
;                     prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8057748: 9803         	ldr	r0, [sp, #0xc]
 805774a: 2101         	movs	r1, #0x1
 805774c: f7fe f83c    	bl	0x80557c8 <prvAddCurrentTaskToDelayedList> @ imm = #-0x1f88
;                 xAlreadyYielded = xTaskResumeAll();
 8057750: f7ff fffe    	bl	0x8057750 <ulTaskGenericNotifyTake+0x60> @ imm = #-0x4
 8057754: 9001         	str	r0, [sp, #0x4]
;                 if( xAlreadyYielded == pdFALSE )
 8057756: 9801         	ldr	r0, [sp, #0x4]
 8057758: b918         	cbnz	r0, 0x8057762 <ulTaskGenericNotifyTake+0x72> @ imm = #0x6
 805775a: e7ff         	b	0x805775c <ulTaskGenericNotifyTake+0x6c> @ imm = #-0x2
;                     taskYIELD_WITHIN_API();
 805775c: f7ff fffe    	bl	0x805775c <ulTaskGenericNotifyTake+0x6c> @ imm = #-0x4
;                 }
 8057760: e000         	b	0x8057764 <ulTaskGenericNotifyTake+0x74> @ imm = #0x0
 8057762: e7ff         	b	0x8057764 <ulTaskGenericNotifyTake+0x74> @ imm = #-0x2
;             }
 8057764: e002         	b	0x805776c <ulTaskGenericNotifyTake+0x7c> @ imm = #0x4
;                 taskEXIT_CRITICAL();
 8057766: f7ff fffe    	bl	0x8057766 <ulTaskGenericNotifyTake+0x76> @ imm = #-0x4
 805776a: e7ff         	b	0x805776c <ulTaskGenericNotifyTake+0x7c> @ imm = #-0x2
;         }
 805776c: e002         	b	0x8057774 <ulTaskGenericNotifyTake+0x84> @ imm = #0x4
;             taskEXIT_CRITICAL();
 805776e: f7ff fffe    	bl	0x805776e <ulTaskGenericNotifyTake+0x7e> @ imm = #-0x4
 8057772: e7ff         	b	0x8057774 <ulTaskGenericNotifyTake+0x84> @ imm = #-0x2
;         taskENTER_CRITICAL();
 8057774: f7ff fffe    	bl	0x8057774 <ulTaskGenericNotifyTake+0x84> @ imm = #-0x4
;             ulReturn = pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ];
 8057778: f240 0000    	movw	r0, #0x0
 805777c: f2c0 0000    	movt	r0, #0x0
 8057780: 6800         	ldr	r0, [r0]
 8057782: 9905         	ldr	r1, [sp, #0x14]
 8057784: eb00 0081    	add.w	r0, r0, r1, lsl #2
 8057788: f8d0 00d0    	ldr.w	r0, [r0, #0xd0]
 805778c: 9002         	str	r0, [sp, #0x8]
;             if( ulReturn != 0UL )
 805778e: 9802         	ldr	r0, [sp, #0x8]
 8057790: b1e8         	cbz	r0, 0x80577ce <ulTaskGenericNotifyTake+0xde> @ imm = #0x3a
 8057792: e7ff         	b	0x8057794 <ulTaskGenericNotifyTake+0xa4> @ imm = #-0x2
;                 if( xClearCountOnExit != pdFALSE )
 8057794: 9804         	ldr	r0, [sp, #0x10]
 8057796: b160         	cbz	r0, 0x80577b2 <ulTaskGenericNotifyTake+0xc2> @ imm = #0x18
 8057798: e7ff         	b	0x805779a <ulTaskGenericNotifyTake+0xaa> @ imm = #-0x2
;                     pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] = 0UL;
 805779a: f240 0000    	movw	r0, #0x0
 805779e: f2c0 0000    	movt	r0, #0x0
 80577a2: 6800         	ldr	r0, [r0]
 80577a4: 9905         	ldr	r1, [sp, #0x14]
 80577a6: eb00 0181    	add.w	r1, r0, r1, lsl #2
 80577aa: 2000         	movs	r0, #0x0
 80577ac: f8c1 00d0    	str.w	r0, [r1, #0xd0]
;                 }
 80577b0: e00c         	b	0x80577cc <ulTaskGenericNotifyTake+0xdc> @ imm = #0x18
;                     pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] = ulReturn - ( uint32_t ) 1;
 80577b2: 9802         	ldr	r0, [sp, #0x8]
 80577b4: 3801         	subs	r0, #0x1
 80577b6: f240 0100    	movw	r1, #0x0
 80577ba: f2c0 0100    	movt	r1, #0x0
 80577be: 6809         	ldr	r1, [r1]
 80577c0: 9a05         	ldr	r2, [sp, #0x14]
 80577c2: eb01 0182    	add.w	r1, r1, r2, lsl #2
 80577c6: f8c1 00d0    	str.w	r0, [r1, #0xd0]
 80577ca: e7ff         	b	0x80577cc <ulTaskGenericNotifyTake+0xdc> @ imm = #-0x2
;             }
 80577cc: e000         	b	0x80577d0 <ulTaskGenericNotifyTake+0xe0> @ imm = #0x0
 80577ce: e7ff         	b	0x80577d0 <ulTaskGenericNotifyTake+0xe0> @ imm = #-0x2
;             pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] = taskNOT_WAITING_NOTIFICATION;
 80577d0: f240 0000    	movw	r0, #0x0
 80577d4: f2c0 0000    	movt	r0, #0x0
 80577d8: 6800         	ldr	r0, [r0]
 80577da: 9905         	ldr	r1, [sp, #0x14]
 80577dc: 4401         	add	r1, r0
 80577de: 2000         	movs	r0, #0x0
 80577e0: f881 00d4    	strb.w	r0, [r1, #0xd4]
;         taskEXIT_CRITICAL();
 80577e4: f7ff fffe    	bl	0x80577e4 <ulTaskGenericNotifyTake+0xf4> @ imm = #-0x4
;         return ulReturn;
 80577e8: 9802         	ldr	r0, [sp, #0x8]
 80577ea: b006         	add	sp, #0x18
 80577ec: bd80         	pop	{r7, pc}

080577ee <xTaskGenericNotifyWait>:
;     {
 80577ee: b580         	push	{r7, lr}
 80577f0: 466f         	mov	r7, sp
 80577f2: b086         	sub	sp, #0x18
 80577f4: f8d7 c008    	ldr.w	r12, [r7, #0x8]
 80577f8: 9005         	str	r0, [sp, #0x14]
 80577fa: 9104         	str	r1, [sp, #0x10]
 80577fc: 9203         	str	r2, [sp, #0xc]
 80577fe: 9302         	str	r3, [sp, #0x8]
;         configASSERT( uxIndexToWaitOn < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8057800: 9805         	ldr	r0, [sp, #0x14]
 8057802: b120         	cbz	r0, 0x805780e <xTaskGenericNotifyWait+0x20> @ imm = #0x8
 8057804: e7ff         	b	0x8057806 <xTaskGenericNotifyWait+0x18> @ imm = #-0x2
 8057806: f7ff fffe    	bl	0x8057806 <xTaskGenericNotifyWait+0x18> @ imm = #-0x4
 805780a: e7ff         	b	0x805780c <xTaskGenericNotifyWait+0x1e> @ imm = #-0x2
 805780c: e7fe         	b	0x805780c <xTaskGenericNotifyWait+0x1e> @ imm = #-0x4
;         taskENTER_CRITICAL();
 805780e: f7ff fffe    	bl	0x805780e <xTaskGenericNotifyWait+0x20> @ imm = #-0x4
;         if( pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] != taskNOTIFICATION_RECEIVED )
 8057812: f240 0000    	movw	r0, #0x0
 8057816: f2c0 0000    	movt	r0, #0x0
 805781a: 6800         	ldr	r0, [r0]
 805781c: 9905         	ldr	r1, [sp, #0x14]
 805781e: 4408         	add	r0, r1
 8057820: f890 00d4    	ldrb.w	r0, [r0, #0xd4]
 8057824: 2802         	cmp	r0, #0x2
 8057826: d02e         	beq	0x8057886 <xTaskGenericNotifyWait+0x98> @ imm = #0x5c
 8057828: e7ff         	b	0x805782a <xTaskGenericNotifyWait+0x3c> @ imm = #-0x2
;             pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] &= ~ulBitsToClearOnEntry;
 805782a: 9b04         	ldr	r3, [sp, #0x10]
 805782c: f240 0000    	movw	r0, #0x0
 8057830: f2c0 0000    	movt	r0, #0x0
 8057834: 6801         	ldr	r1, [r0]
 8057836: 9a05         	ldr	r2, [sp, #0x14]
 8057838: eb01 0282    	add.w	r2, r1, r2, lsl #2
 805783c: f8d2 10d0    	ldr.w	r1, [r2, #0xd0]
 8057840: 4399         	bics	r1, r3
 8057842: f8c2 10d0    	str.w	r1, [r2, #0xd0]
;             pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] = taskWAITING_NOTIFICATION;
 8057846: 6800         	ldr	r0, [r0]
 8057848: 9905         	ldr	r1, [sp, #0x14]
 805784a: 4401         	add	r1, r0
 805784c: 2001         	movs	r0, #0x1
 805784e: f881 00d4    	strb.w	r0, [r1, #0xd4]
;             if( xTicksToWait > ( TickType_t ) 0 )
 8057852: 68b8         	ldr	r0, [r7, #0x8]
 8057854: b198         	cbz	r0, 0x805787e <xTaskGenericNotifyWait+0x90> @ imm = #0x26
 8057856: e7ff         	b	0x8057858 <xTaskGenericNotifyWait+0x6a> @ imm = #-0x2
;                 vTaskSuspendAll();
 8057858: f7ff fffe    	bl	0x8057858 <xTaskGenericNotifyWait+0x6a> @ imm = #-0x4
;                     taskEXIT_CRITICAL();
 805785c: f7ff fffe    	bl	0x805785c <xTaskGenericNotifyWait+0x6e> @ imm = #-0x4
;                     prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8057860: 68b8         	ldr	r0, [r7, #0x8]
 8057862: 2101         	movs	r1, #0x1
 8057864: f7fd ffb0    	bl	0x80557c8 <prvAddCurrentTaskToDelayedList> @ imm = #-0x20a0
;                 xAlreadyYielded = xTaskResumeAll();
 8057868: f7ff fffe    	bl	0x8057868 <xTaskGenericNotifyWait+0x7a> @ imm = #-0x4
 805786c: 9000         	str	r0, [sp]
;                 if( xAlreadyYielded == pdFALSE )
 805786e: 9800         	ldr	r0, [sp]
 8057870: b918         	cbnz	r0, 0x805787a <xTaskGenericNotifyWait+0x8c> @ imm = #0x6
 8057872: e7ff         	b	0x8057874 <xTaskGenericNotifyWait+0x86> @ imm = #-0x2
;                     taskYIELD_WITHIN_API();
 8057874: f7ff fffe    	bl	0x8057874 <xTaskGenericNotifyWait+0x86> @ imm = #-0x4
;                 }
 8057878: e000         	b	0x805787c <xTaskGenericNotifyWait+0x8e> @ imm = #0x0
 805787a: e7ff         	b	0x805787c <xTaskGenericNotifyWait+0x8e> @ imm = #-0x2
;             }
 805787c: e002         	b	0x8057884 <xTaskGenericNotifyWait+0x96> @ imm = #0x4
;                 taskEXIT_CRITICAL();
 805787e: f7ff fffe    	bl	0x805787e <xTaskGenericNotifyWait+0x90> @ imm = #-0x4
 8057882: e7ff         	b	0x8057884 <xTaskGenericNotifyWait+0x96> @ imm = #-0x2
;         }
 8057884: e002         	b	0x805788c <xTaskGenericNotifyWait+0x9e> @ imm = #0x4
;             taskEXIT_CRITICAL();
 8057886: f7ff fffe    	bl	0x8057886 <xTaskGenericNotifyWait+0x98> @ imm = #-0x4
 805788a: e7ff         	b	0x805788c <xTaskGenericNotifyWait+0x9e> @ imm = #-0x2
;         taskENTER_CRITICAL();
 805788c: f7ff fffe    	bl	0x805788c <xTaskGenericNotifyWait+0x9e> @ imm = #-0x4
;             if( pulNotificationValue != NULL )
 8057890: 9802         	ldr	r0, [sp, #0x8]
 8057892: b168         	cbz	r0, 0x80578b0 <xTaskGenericNotifyWait+0xc2> @ imm = #0x1a
 8057894: e7ff         	b	0x8057896 <xTaskGenericNotifyWait+0xa8> @ imm = #-0x2
;                 *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ];
 8057896: f240 0000    	movw	r0, #0x0
 805789a: f2c0 0000    	movt	r0, #0x0
 805789e: 6800         	ldr	r0, [r0]
 80578a0: 9905         	ldr	r1, [sp, #0x14]
 80578a2: eb00 0081    	add.w	r0, r0, r1, lsl #2
 80578a6: f8d0 00d0    	ldr.w	r0, [r0, #0xd0]
 80578aa: 9902         	ldr	r1, [sp, #0x8]
 80578ac: 6008         	str	r0, [r1]
;             }
 80578ae: e7ff         	b	0x80578b0 <xTaskGenericNotifyWait+0xc2> @ imm = #-0x2
;             if( pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] != taskNOTIFICATION_RECEIVED )
 80578b0: f240 0000    	movw	r0, #0x0
 80578b4: f2c0 0000    	movt	r0, #0x0
 80578b8: 6800         	ldr	r0, [r0]
 80578ba: 9905         	ldr	r1, [sp, #0x14]
 80578bc: 4408         	add	r0, r1
 80578be: f890 00d4    	ldrb.w	r0, [r0, #0xd4]
 80578c2: 2802         	cmp	r0, #0x2
 80578c4: d003         	beq	0x80578ce <xTaskGenericNotifyWait+0xe0> @ imm = #0x6
 80578c6: e7ff         	b	0x80578c8 <xTaskGenericNotifyWait+0xda> @ imm = #-0x2
 80578c8: 2000         	movs	r0, #0x0
;                 xReturn = pdFALSE;
 80578ca: 9001         	str	r0, [sp, #0x4]
;             }
 80578cc: e010         	b	0x80578f0 <xTaskGenericNotifyWait+0x102> @ imm = #0x20
;                 pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] &= ~ulBitsToClearOnExit;
 80578ce: 9a03         	ldr	r2, [sp, #0xc]
 80578d0: f240 0000    	movw	r0, #0x0
 80578d4: f2c0 0000    	movt	r0, #0x0
 80578d8: 6800         	ldr	r0, [r0]
 80578da: 9905         	ldr	r1, [sp, #0x14]
 80578dc: eb00 0181    	add.w	r1, r0, r1, lsl #2
 80578e0: f8d1 00d0    	ldr.w	r0, [r1, #0xd0]
 80578e4: 4390         	bics	r0, r2
 80578e6: f8c1 00d0    	str.w	r0, [r1, #0xd0]
 80578ea: 2001         	movs	r0, #0x1
;                 xReturn = pdTRUE;
 80578ec: 9001         	str	r0, [sp, #0x4]
 80578ee: e7ff         	b	0x80578f0 <xTaskGenericNotifyWait+0x102> @ imm = #-0x2
;             pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] = taskNOT_WAITING_NOTIFICATION;
 80578f0: f240 0000    	movw	r0, #0x0
 80578f4: f2c0 0000    	movt	r0, #0x0
 80578f8: 6800         	ldr	r0, [r0]
 80578fa: 9905         	ldr	r1, [sp, #0x14]
 80578fc: 4401         	add	r1, r0
 80578fe: 2000         	movs	r0, #0x0
 8057900: f881 00d4    	strb.w	r0, [r1, #0xd4]
;         taskEXIT_CRITICAL();
 8057904: f7ff fffe    	bl	0x8057904 <xTaskGenericNotifyWait+0x116> @ imm = #-0x4
;         return xReturn;
 8057908: 9801         	ldr	r0, [sp, #0x4]
 805790a: b006         	add	sp, #0x18
 805790c: bd80         	pop	{r7, pc}
 805790e: bf00         	nop

08057910 <xTaskGenericNotify>:
;     {
 8057910: b580         	push	{r7, lr}
 8057912: 466f         	mov	r7, sp
 8057914: b08a         	sub	sp, #0x28
 8057916: f8d7 c008    	ldr.w	r12, [r7, #0x8]
 805791a: 9009         	str	r0, [sp, #0x24]
 805791c: 9108         	str	r1, [sp, #0x20]
 805791e: 9207         	str	r2, [sp, #0x1c]
 8057920: f807 3c0d    	strb	r3, [r7, #-13]
 8057924: 2001         	movs	r0, #0x1
;         BaseType_t xReturn = pdPASS;
 8057926: 9004         	str	r0, [sp, #0x10]
;         configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8057928: 9808         	ldr	r0, [sp, #0x20]
 805792a: b120         	cbz	r0, 0x8057936 <xTaskGenericNotify+0x26> @ imm = #0x8
 805792c: e7ff         	b	0x805792e <xTaskGenericNotify+0x1e> @ imm = #-0x2
 805792e: f7ff fffe    	bl	0x805792e <xTaskGenericNotify+0x1e> @ imm = #-0x4
 8057932: e7ff         	b	0x8057934 <xTaskGenericNotify+0x24> @ imm = #-0x2
 8057934: e7fe         	b	0x8057934 <xTaskGenericNotify+0x24> @ imm = #-0x4
;         configASSERT( xTaskToNotify );
 8057936: 9809         	ldr	r0, [sp, #0x24]
 8057938: b920         	cbnz	r0, 0x8057944 <xTaskGenericNotify+0x34> @ imm = #0x8
 805793a: e7ff         	b	0x805793c <xTaskGenericNotify+0x2c> @ imm = #-0x2
 805793c: f7ff fffe    	bl	0x805793c <xTaskGenericNotify+0x2c> @ imm = #-0x4
 8057940: e7ff         	b	0x8057942 <xTaskGenericNotify+0x32> @ imm = #-0x2
 8057942: e7fe         	b	0x8057942 <xTaskGenericNotify+0x32> @ imm = #-0x4
;         pxTCB = xTaskToNotify;
 8057944: 9809         	ldr	r0, [sp, #0x24]
 8057946: 9005         	str	r0, [sp, #0x14]
;         taskENTER_CRITICAL();
 8057948: f7ff fffe    	bl	0x8057948 <xTaskGenericNotify+0x38> @ imm = #-0x4
;             if( pulPreviousNotificationValue != NULL )
 805794c: 68b8         	ldr	r0, [r7, #0x8]
 805794e: b148         	cbz	r0, 0x8057964 <xTaskGenericNotify+0x54> @ imm = #0x12
 8057950: e7ff         	b	0x8057952 <xTaskGenericNotify+0x42> @ imm = #-0x2
;                 *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8057952: 9805         	ldr	r0, [sp, #0x14]
 8057954: 9908         	ldr	r1, [sp, #0x20]
 8057956: eb00 0081    	add.w	r0, r0, r1, lsl #2
 805795a: f8d0 00d0    	ldr.w	r0, [r0, #0xd0]
 805795e: 68b9         	ldr	r1, [r7, #0x8]
 8057960: 6008         	str	r0, [r1]
;             }
 8057962: e7ff         	b	0x8057964 <xTaskGenericNotify+0x54> @ imm = #-0x2
;             ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8057964: 9805         	ldr	r0, [sp, #0x14]
 8057966: 9908         	ldr	r1, [sp, #0x20]
 8057968: 4408         	add	r0, r1
 805796a: f890 00d4    	ldrb.w	r0, [r0, #0xd4]
 805796e: f807 0c19    	strb	r0, [r7, #-25]
;             pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8057972: 9805         	ldr	r0, [sp, #0x14]
 8057974: 9908         	ldr	r1, [sp, #0x20]
 8057976: 4401         	add	r1, r0
 8057978: 2002         	movs	r0, #0x2
 805797a: f881 00d4    	strb.w	r0, [r1, #0xd4]
;             switch( eAction )
 805797e: f817 0c0d    	ldrb	r0, [r7, #-13]
 8057982: 4601         	mov	r1, r0
 8057984: 9100         	str	r1, [sp]
 8057986: 2804         	cmp	r0, #0x4
 8057988: d834         	bhi	0x80579f4 <xTaskGenericNotify+0xe4> @ imm = #0x68
 805798a: 9900         	ldr	r1, [sp]
 805798c: e8df f001    	tbb	[pc, r1]

08057990 <$d.2>:
 8057990: 31 03 0e 18  	.word	0x180e0331
 8057994: 20 00        	.short	0x0020

08057996 <$t.3>:
;                     pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8057996: 9a07         	ldr	r2, [sp, #0x1c]
 8057998: 9805         	ldr	r0, [sp, #0x14]
 805799a: 9908         	ldr	r1, [sp, #0x20]
 805799c: eb00 0181    	add.w	r1, r0, r1, lsl #2
 80579a0: f8d1 00d0    	ldr.w	r0, [r1, #0xd0]
 80579a4: 4310         	orrs	r0, r2
 80579a6: f8c1 00d0    	str.w	r0, [r1, #0xd0]
;                     break;
 80579aa: e02f         	b	0x8057a0c <xTaskGenericNotify+0xfc> @ imm = #0x5e
;                     ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 80579ac: 9805         	ldr	r0, [sp, #0x14]
 80579ae: 9908         	ldr	r1, [sp, #0x20]
 80579b0: eb00 0181    	add.w	r1, r0, r1, lsl #2
 80579b4: f8d1 00d0    	ldr.w	r0, [r1, #0xd0]
 80579b8: 3001         	adds	r0, #0x1
 80579ba: f8c1 00d0    	str.w	r0, [r1, #0xd0]
;                     break;
 80579be: e025         	b	0x8057a0c <xTaskGenericNotify+0xfc> @ imm = #0x4a
;                     pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80579c0: 9807         	ldr	r0, [sp, #0x1c]
 80579c2: 9905         	ldr	r1, [sp, #0x14]
 80579c4: 9a08         	ldr	r2, [sp, #0x20]
 80579c6: eb01 0182    	add.w	r1, r1, r2, lsl #2
 80579ca: f8c1 00d0    	str.w	r0, [r1, #0xd0]
;                     break;
 80579ce: e01d         	b	0x8057a0c <xTaskGenericNotify+0xfc> @ imm = #0x3a
;                     if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80579d0: f817 0c19    	ldrb	r0, [r7, #-25]
 80579d4: 2802         	cmp	r0, #0x2
 80579d6: d008         	beq	0x80579ea <xTaskGenericNotify+0xda> @ imm = #0x10
 80579d8: e7ff         	b	0x80579da <xTaskGenericNotify+0xca> @ imm = #-0x2
;                         pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80579da: 9807         	ldr	r0, [sp, #0x1c]
 80579dc: 9905         	ldr	r1, [sp, #0x14]
 80579de: 9a08         	ldr	r2, [sp, #0x20]
 80579e0: eb01 0182    	add.w	r1, r1, r2, lsl #2
 80579e4: f8c1 00d0    	str.w	r0, [r1, #0xd0]
;                     }
 80579e8: e002         	b	0x80579f0 <xTaskGenericNotify+0xe0> @ imm = #0x4
 80579ea: 2000         	movs	r0, #0x0
;                         xReturn = pdFAIL;
 80579ec: 9004         	str	r0, [sp, #0x10]
 80579ee: e7ff         	b	0x80579f0 <xTaskGenericNotify+0xe0> @ imm = #-0x2
;                     break;
 80579f0: e00c         	b	0x8057a0c <xTaskGenericNotify+0xfc> @ imm = #0x18
;                     break;
 80579f2: e00b         	b	0x8057a0c <xTaskGenericNotify+0xfc> @ imm = #0x16
;                     configASSERT( xTickCount == ( TickType_t ) 0 );
 80579f4: f240 0000    	movw	r0, #0x0
 80579f8: f2c0 0000    	movt	r0, #0x0
 80579fc: 6800         	ldr	r0, [r0]
 80579fe: b120         	cbz	r0, 0x8057a0a <xTaskGenericNotify+0xfa> @ imm = #0x8
 8057a00: e7ff         	b	0x8057a02 <xTaskGenericNotify+0xf2> @ imm = #-0x2
 8057a02: f7ff fffe    	bl	0x8057a02 <xTaskGenericNotify+0xf2> @ imm = #-0x4
 8057a06: e7ff         	b	0x8057a08 <xTaskGenericNotify+0xf8> @ imm = #-0x2
 8057a08: e7fe         	b	0x8057a08 <xTaskGenericNotify+0xf8> @ imm = #-0x4
;                     break;
 8057a0a: e7ff         	b	0x8057a0c <xTaskGenericNotify+0xfc> @ imm = #-0x2
;             if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8057a0c: f817 0c19    	ldrb	r0, [r7, #-25]
 8057a10: 2801         	cmp	r0, #0x1
 8057a12: f040 8091    	bne.w	0x8057b38 <xTaskGenericNotify+0x228> @ imm = #0x122
 8057a16: e7ff         	b	0x8057a18 <xTaskGenericNotify+0x108> @ imm = #-0x2
;                 listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8057a18: e7ff         	b	0x8057a1a <xTaskGenericNotify+0x10a> @ imm = #-0x2
 8057a1a: 9805         	ldr	r0, [sp, #0x14]
 8057a1c: f8d0 0090    	ldr.w	r0, [r0, #0x90]
 8057a20: 9002         	str	r0, [sp, #0x8]
 8057a22: 9805         	ldr	r0, [sp, #0x14]
 8057a24: f8d0 1084    	ldr.w	r1, [r0, #0x84]
 8057a28: f8d0 0088    	ldr.w	r0, [r0, #0x88]
 8057a2c: 6088         	str	r0, [r1, #0x8]
 8057a2e: 9905         	ldr	r1, [sp, #0x14]
 8057a30: f8d1 0084    	ldr.w	r0, [r1, #0x84]
 8057a34: f8d1 1088    	ldr.w	r1, [r1, #0x88]
 8057a38: 6048         	str	r0, [r1, #0x4]
 8057a3a: 9802         	ldr	r0, [sp, #0x8]
 8057a3c: 6840         	ldr	r0, [r0, #0x4]
 8057a3e: 9905         	ldr	r1, [sp, #0x14]
 8057a40: 3180         	adds	r1, #0x80
 8057a42: 4288         	cmp	r0, r1
 8057a44: d106         	bne	0x8057a54 <xTaskGenericNotify+0x144> @ imm = #0xc
 8057a46: e7ff         	b	0x8057a48 <xTaskGenericNotify+0x138> @ imm = #-0x2
 8057a48: 9805         	ldr	r0, [sp, #0x14]
 8057a4a: f8d0 0088    	ldr.w	r0, [r0, #0x88]
 8057a4e: 9902         	ldr	r1, [sp, #0x8]
 8057a50: 6048         	str	r0, [r1, #0x4]
 8057a52: e7ff         	b	0x8057a54 <xTaskGenericNotify+0x144> @ imm = #-0x2
 8057a54: 9905         	ldr	r1, [sp, #0x14]
 8057a56: 2000         	movs	r0, #0x0
 8057a58: f8c1 0090    	str.w	r0, [r1, #0x90]
 8057a5c: 9902         	ldr	r1, [sp, #0x8]
 8057a5e: 6808         	ldr	r0, [r1]
 8057a60: 3801         	subs	r0, #0x1
 8057a62: 6008         	str	r0, [r1]
 8057a64: e7ff         	b	0x8057a66 <xTaskGenericNotify+0x156> @ imm = #-0x2
;                 prvAddTaskToReadyList( pxTCB );
 8057a66: e7ff         	b	0x8057a68 <xTaskGenericNotify+0x158> @ imm = #-0x2
 8057a68: e7ff         	b	0x8057a6a <xTaskGenericNotify+0x15a> @ imm = #-0x2
 8057a6a: 9805         	ldr	r0, [sp, #0x14]
 8057a6c: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 8057a70: f240 0100    	movw	r1, #0x0
 8057a74: f2c0 0100    	movt	r1, #0x0
 8057a78: 6809         	ldr	r1, [r1]
 8057a7a: 4288         	cmp	r0, r1
 8057a7c: d909         	bls	0x8057a92 <xTaskGenericNotify+0x182> @ imm = #0x12
 8057a7e: e7ff         	b	0x8057a80 <xTaskGenericNotify+0x170> @ imm = #-0x2
 8057a80: 9805         	ldr	r0, [sp, #0x14]
 8057a82: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 8057a86: f240 0100    	movw	r1, #0x0
 8057a8a: f2c0 0100    	movt	r1, #0x0
 8057a8e: 6008         	str	r0, [r1]
 8057a90: e7ff         	b	0x8057a92 <xTaskGenericNotify+0x182> @ imm = #-0x2
 8057a92: e7ff         	b	0x8057a94 <xTaskGenericNotify+0x184> @ imm = #-0x2
 8057a94: e7ff         	b	0x8057a96 <xTaskGenericNotify+0x186> @ imm = #-0x2
 8057a96: 9805         	ldr	r0, [sp, #0x14]
 8057a98: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 8057a9c: eb00 0080    	add.w	r0, r0, r0, lsl #2
 8057aa0: f240 0100    	movw	r1, #0x0
 8057aa4: f2c0 0100    	movt	r1, #0x0
 8057aa8: eb01 0080    	add.w	r0, r1, r0, lsl #2
 8057aac: 6840         	ldr	r0, [r0, #0x4]
 8057aae: 9001         	str	r0, [sp, #0x4]
 8057ab0: 9801         	ldr	r0, [sp, #0x4]
 8057ab2: 9a05         	ldr	r2, [sp, #0x14]
 8057ab4: f8c2 0084    	str.w	r0, [r2, #0x84]
 8057ab8: 9801         	ldr	r0, [sp, #0x4]
 8057aba: 6880         	ldr	r0, [r0, #0x8]
 8057abc: 9a05         	ldr	r2, [sp, #0x14]
 8057abe: f8c2 0088    	str.w	r0, [r2, #0x88]
 8057ac2: 9805         	ldr	r0, [sp, #0x14]
 8057ac4: 3080         	adds	r0, #0x80
 8057ac6: 9a01         	ldr	r2, [sp, #0x4]
 8057ac8: 6892         	ldr	r2, [r2, #0x8]
 8057aca: 6050         	str	r0, [r2, #0x4]
 8057acc: 9805         	ldr	r0, [sp, #0x14]
 8057ace: 3080         	adds	r0, #0x80
 8057ad0: 9a01         	ldr	r2, [sp, #0x4]
 8057ad2: 6090         	str	r0, [r2, #0x8]
 8057ad4: 9a05         	ldr	r2, [sp, #0x14]
 8057ad6: f8d2 00a8    	ldr.w	r0, [r2, #0xa8]
 8057ada: eb00 0080    	add.w	r0, r0, r0, lsl #2
 8057ade: eb01 0080    	add.w	r0, r1, r0, lsl #2
 8057ae2: f8c2 0090    	str.w	r0, [r2, #0x90]
 8057ae6: 9805         	ldr	r0, [sp, #0x14]
 8057ae8: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 8057aec: eb00 0280    	add.w	r2, r0, r0, lsl #2
 8057af0: f851 0022    	ldr.w	r0, [r1, r2, lsl #2]
 8057af4: 3001         	adds	r0, #0x1
 8057af6: f841 0022    	str.w	r0, [r1, r2, lsl #2]
 8057afa: e7ff         	b	0x8057afc <xTaskGenericNotify+0x1ec> @ imm = #-0x2
 8057afc: e7ff         	b	0x8057afe <xTaskGenericNotify+0x1ee> @ imm = #-0x2
;                 configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8057afe: 9805         	ldr	r0, [sp, #0x14]
 8057b00: f8d0 00a4    	ldr.w	r0, [r0, #0xa4]
 8057b04: b120         	cbz	r0, 0x8057b10 <xTaskGenericNotify+0x200> @ imm = #0x8
 8057b06: e7ff         	b	0x8057b08 <xTaskGenericNotify+0x1f8> @ imm = #-0x2
 8057b08: f7ff fffe    	bl	0x8057b08 <xTaskGenericNotify+0x1f8> @ imm = #-0x4
 8057b0c: e7ff         	b	0x8057b0e <xTaskGenericNotify+0x1fe> @ imm = #-0x2
 8057b0e: e7fe         	b	0x8057b0e <xTaskGenericNotify+0x1fe> @ imm = #-0x4
;                 taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxTCB );
 8057b10: e7ff         	b	0x8057b12 <xTaskGenericNotify+0x202> @ imm = #-0x2
 8057b12: f240 0000    	movw	r0, #0x0
 8057b16: f2c0 0000    	movt	r0, #0x0
 8057b1a: 6800         	ldr	r0, [r0]
 8057b1c: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 8057b20: 9905         	ldr	r1, [sp, #0x14]
 8057b22: f8d1 10a8    	ldr.w	r1, [r1, #0xa8]
 8057b26: 4288         	cmp	r0, r1
 8057b28: d203         	bhs	0x8057b32 <xTaskGenericNotify+0x222> @ imm = #0x6
 8057b2a: e7ff         	b	0x8057b2c <xTaskGenericNotify+0x21c> @ imm = #-0x2
 8057b2c: f7ff fffe    	bl	0x8057b2c <xTaskGenericNotify+0x21c> @ imm = #-0x4
 8057b30: e000         	b	0x8057b34 <xTaskGenericNotify+0x224> @ imm = #0x0
 8057b32: e7ff         	b	0x8057b34 <xTaskGenericNotify+0x224> @ imm = #-0x2
;                 taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxTCB );
 8057b34: e7ff         	b	0x8057b36 <xTaskGenericNotify+0x226> @ imm = #-0x2
;             }
 8057b36: e000         	b	0x8057b3a <xTaskGenericNotify+0x22a> @ imm = #0x0
 8057b38: e7ff         	b	0x8057b3a <xTaskGenericNotify+0x22a> @ imm = #-0x2
;         taskEXIT_CRITICAL();
 8057b3a: f7ff fffe    	bl	0x8057b3a <xTaskGenericNotify+0x22a> @ imm = #-0x4
;         return xReturn;
 8057b3e: 9804         	ldr	r0, [sp, #0x10]
 8057b40: b00a         	add	sp, #0x28
 8057b42: bd80         	pop	{r7, pc}

08057b44 <xTaskGenericNotifyFromISR>:
;     {
 8057b44: b580         	push	{r7, lr}
 8057b46: 466f         	mov	r7, sp
 8057b48: b08c         	sub	sp, #0x30
 8057b4a: f8d7 c00c    	ldr.w	r12, [r7, #0xc]
 8057b4e: f8d7 c008    	ldr.w	r12, [r7, #0x8]
 8057b52: 900b         	str	r0, [sp, #0x2c]
 8057b54: 910a         	str	r1, [sp, #0x28]
 8057b56: 9209         	str	r2, [sp, #0x24]
 8057b58: f807 3c0d    	strb	r3, [r7, #-13]
 8057b5c: 2001         	movs	r0, #0x1
;         BaseType_t xReturn = pdPASS;
 8057b5e: 9005         	str	r0, [sp, #0x14]
;         configASSERT( xTaskToNotify );
 8057b60: 980b         	ldr	r0, [sp, #0x2c]
 8057b62: b920         	cbnz	r0, 0x8057b6e <xTaskGenericNotifyFromISR+0x2a> @ imm = #0x8
 8057b64: e7ff         	b	0x8057b66 <xTaskGenericNotifyFromISR+0x22> @ imm = #-0x2
 8057b66: f7ff fffe    	bl	0x8057b66 <xTaskGenericNotifyFromISR+0x22> @ imm = #-0x4
 8057b6a: e7ff         	b	0x8057b6c <xTaskGenericNotifyFromISR+0x28> @ imm = #-0x2
 8057b6c: e7fe         	b	0x8057b6c <xTaskGenericNotifyFromISR+0x28> @ imm = #-0x4
;         configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8057b6e: 980a         	ldr	r0, [sp, #0x28]
 8057b70: b120         	cbz	r0, 0x8057b7c <xTaskGenericNotifyFromISR+0x38> @ imm = #0x8
 8057b72: e7ff         	b	0x8057b74 <xTaskGenericNotifyFromISR+0x30> @ imm = #-0x2
 8057b74: f7ff fffe    	bl	0x8057b74 <xTaskGenericNotifyFromISR+0x30> @ imm = #-0x4
 8057b78: e7ff         	b	0x8057b7a <xTaskGenericNotifyFromISR+0x36> @ imm = #-0x2
 8057b7a: e7fe         	b	0x8057b7a <xTaskGenericNotifyFromISR+0x36> @ imm = #-0x4
;         portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8057b7c: f7ff fffe    	bl	0x8057b7c <xTaskGenericNotifyFromISR+0x38> @ imm = #-0x4
;         pxTCB = xTaskToNotify;
 8057b80: 980b         	ldr	r0, [sp, #0x2c]
 8057b82: 9007         	str	r0, [sp, #0x1c]
;         uxSavedInterruptStatus = taskENTER_CRITICAL_FROM_ISR();
 8057b84: f7ff fffe    	bl	0x8057b84 <xTaskGenericNotifyFromISR+0x40> @ imm = #-0x4
 8057b88: 9004         	str	r0, [sp, #0x10]
;             if( pulPreviousNotificationValue != NULL )
 8057b8a: 68b8         	ldr	r0, [r7, #0x8]
 8057b8c: b148         	cbz	r0, 0x8057ba2 <xTaskGenericNotifyFromISR+0x5e> @ imm = #0x12
 8057b8e: e7ff         	b	0x8057b90 <xTaskGenericNotifyFromISR+0x4c> @ imm = #-0x2
;                 *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8057b90: 9807         	ldr	r0, [sp, #0x1c]
 8057b92: 990a         	ldr	r1, [sp, #0x28]
 8057b94: eb00 0081    	add.w	r0, r0, r1, lsl #2
 8057b98: f8d0 00d0    	ldr.w	r0, [r0, #0xd0]
 8057b9c: 68b9         	ldr	r1, [r7, #0x8]
 8057b9e: 6008         	str	r0, [r1]
;             }
 8057ba0: e7ff         	b	0x8057ba2 <xTaskGenericNotifyFromISR+0x5e> @ imm = #-0x2
;             ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8057ba2: 9807         	ldr	r0, [sp, #0x1c]
 8057ba4: 990a         	ldr	r1, [sp, #0x28]
 8057ba6: 4408         	add	r0, r1
 8057ba8: f890 00d4    	ldrb.w	r0, [r0, #0xd4]
 8057bac: f807 0c15    	strb	r0, [r7, #-21]
;             pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8057bb0: 9807         	ldr	r0, [sp, #0x1c]
 8057bb2: 990a         	ldr	r1, [sp, #0x28]
 8057bb4: 4401         	add	r1, r0
 8057bb6: 2002         	movs	r0, #0x2
 8057bb8: f881 00d4    	strb.w	r0, [r1, #0xd4]
;             switch( eAction )
 8057bbc: f817 0c0d    	ldrb	r0, [r7, #-13]
 8057bc0: 4601         	mov	r1, r0
 8057bc2: 9100         	str	r1, [sp]
 8057bc4: 2804         	cmp	r0, #0x4
 8057bc6: d834         	bhi	0x8057c32 <xTaskGenericNotifyFromISR+0xee> @ imm = #0x68
 8057bc8: 9900         	ldr	r1, [sp]
 8057bca: e8df f001    	tbb	[pc, r1]

08057bce <$d.4>:
 8057bce: 31 03 0e 18  	.word	0x180e0331
 8057bd2: 20 00        	.short	0x0020

08057bd4 <$t.5>:
;                     pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8057bd4: 9a09         	ldr	r2, [sp, #0x24]
 8057bd6: 9807         	ldr	r0, [sp, #0x1c]
 8057bd8: 990a         	ldr	r1, [sp, #0x28]
 8057bda: eb00 0181    	add.w	r1, r0, r1, lsl #2
 8057bde: f8d1 00d0    	ldr.w	r0, [r1, #0xd0]
 8057be2: 4310         	orrs	r0, r2
 8057be4: f8c1 00d0    	str.w	r0, [r1, #0xd0]
;                     break;
 8057be8: e02f         	b	0x8057c4a <xTaskGenericNotifyFromISR+0x106> @ imm = #0x5e
;                     ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8057bea: 9807         	ldr	r0, [sp, #0x1c]
 8057bec: 990a         	ldr	r1, [sp, #0x28]
 8057bee: eb00 0181    	add.w	r1, r0, r1, lsl #2
 8057bf2: f8d1 00d0    	ldr.w	r0, [r1, #0xd0]
 8057bf6: 3001         	adds	r0, #0x1
 8057bf8: f8c1 00d0    	str.w	r0, [r1, #0xd0]
;                     break;
 8057bfc: e025         	b	0x8057c4a <xTaskGenericNotifyFromISR+0x106> @ imm = #0x4a
;                     pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8057bfe: 9809         	ldr	r0, [sp, #0x24]
 8057c00: 9907         	ldr	r1, [sp, #0x1c]
 8057c02: 9a0a         	ldr	r2, [sp, #0x28]
 8057c04: eb01 0182    	add.w	r1, r1, r2, lsl #2
 8057c08: f8c1 00d0    	str.w	r0, [r1, #0xd0]
;                     break;
 8057c0c: e01d         	b	0x8057c4a <xTaskGenericNotifyFromISR+0x106> @ imm = #0x3a
;                     if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8057c0e: f817 0c15    	ldrb	r0, [r7, #-21]
 8057c12: 2802         	cmp	r0, #0x2
 8057c14: d008         	beq	0x8057c28 <xTaskGenericNotifyFromISR+0xe4> @ imm = #0x10
 8057c16: e7ff         	b	0x8057c18 <xTaskGenericNotifyFromISR+0xd4> @ imm = #-0x2
;                         pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8057c18: 9809         	ldr	r0, [sp, #0x24]
 8057c1a: 9907         	ldr	r1, [sp, #0x1c]
 8057c1c: 9a0a         	ldr	r2, [sp, #0x28]
 8057c1e: eb01 0182    	add.w	r1, r1, r2, lsl #2
 8057c22: f8c1 00d0    	str.w	r0, [r1, #0xd0]
;                     }
 8057c26: e002         	b	0x8057c2e <xTaskGenericNotifyFromISR+0xea> @ imm = #0x4
 8057c28: 2000         	movs	r0, #0x0
;                         xReturn = pdFAIL;
 8057c2a: 9005         	str	r0, [sp, #0x14]
 8057c2c: e7ff         	b	0x8057c2e <xTaskGenericNotifyFromISR+0xea> @ imm = #-0x2
;                     break;
 8057c2e: e00c         	b	0x8057c4a <xTaskGenericNotifyFromISR+0x106> @ imm = #0x18
;                     break;
 8057c30: e00b         	b	0x8057c4a <xTaskGenericNotifyFromISR+0x106> @ imm = #0x16
;                     configASSERT( xTickCount == ( TickType_t ) 0 );
 8057c32: f240 0000    	movw	r0, #0x0
 8057c36: f2c0 0000    	movt	r0, #0x0
 8057c3a: 6800         	ldr	r0, [r0]
 8057c3c: b120         	cbz	r0, 0x8057c48 <xTaskGenericNotifyFromISR+0x104> @ imm = #0x8
 8057c3e: e7ff         	b	0x8057c40 <xTaskGenericNotifyFromISR+0xfc> @ imm = #-0x2
 8057c40: f7ff fffe    	bl	0x8057c40 <xTaskGenericNotifyFromISR+0xfc> @ imm = #-0x4
 8057c44: e7ff         	b	0x8057c46 <xTaskGenericNotifyFromISR+0x102> @ imm = #-0x2
 8057c46: e7fe         	b	0x8057c46 <xTaskGenericNotifyFromISR+0x102> @ imm = #-0x4
;                     break;
 8057c48: e7ff         	b	0x8057c4a <xTaskGenericNotifyFromISR+0x106> @ imm = #-0x2
;             if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8057c4a: f817 0c15    	ldrb	r0, [r7, #-21]
 8057c4e: 2801         	cmp	r0, #0x1
 8057c50: f040 80c4    	bne.w	0x8057ddc <xTaskGenericNotifyFromISR+0x298> @ imm = #0x188
 8057c54: e7ff         	b	0x8057c56 <xTaskGenericNotifyFromISR+0x112> @ imm = #-0x2
;                 configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8057c56: 9807         	ldr	r0, [sp, #0x1c]
 8057c58: f8d0 00a4    	ldr.w	r0, [r0, #0xa4]
 8057c5c: b120         	cbz	r0, 0x8057c68 <xTaskGenericNotifyFromISR+0x124> @ imm = #0x8
 8057c5e: e7ff         	b	0x8057c60 <xTaskGenericNotifyFromISR+0x11c> @ imm = #-0x2
 8057c60: f7ff fffe    	bl	0x8057c60 <xTaskGenericNotifyFromISR+0x11c> @ imm = #-0x4
 8057c64: e7ff         	b	0x8057c66 <xTaskGenericNotifyFromISR+0x122> @ imm = #-0x2
 8057c66: e7fe         	b	0x8057c66 <xTaskGenericNotifyFromISR+0x122> @ imm = #-0x4
;                 if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8057c68: f240 0000    	movw	r0, #0x0
 8057c6c: f2c0 0000    	movt	r0, #0x0
 8057c70: 6800         	ldr	r0, [r0]
 8057c72: 2800         	cmp	r0, #0x0
 8057c74: d174         	bne	0x8057d60 <xTaskGenericNotifyFromISR+0x21c> @ imm = #0xe8
 8057c76: e7ff         	b	0x8057c78 <xTaskGenericNotifyFromISR+0x134> @ imm = #-0x2
;                     listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8057c78: e7ff         	b	0x8057c7a <xTaskGenericNotifyFromISR+0x136> @ imm = #-0x2
 8057c7a: 9807         	ldr	r0, [sp, #0x1c]
 8057c7c: f8d0 0090    	ldr.w	r0, [r0, #0x90]
 8057c80: 9003         	str	r0, [sp, #0xc]
 8057c82: 9807         	ldr	r0, [sp, #0x1c]
 8057c84: f8d0 1084    	ldr.w	r1, [r0, #0x84]
 8057c88: f8d0 0088    	ldr.w	r0, [r0, #0x88]
 8057c8c: 6088         	str	r0, [r1, #0x8]
 8057c8e: 9907         	ldr	r1, [sp, #0x1c]
 8057c90: f8d1 0084    	ldr.w	r0, [r1, #0x84]
 8057c94: f8d1 1088    	ldr.w	r1, [r1, #0x88]
 8057c98: 6048         	str	r0, [r1, #0x4]
 8057c9a: 9803         	ldr	r0, [sp, #0xc]
 8057c9c: 6840         	ldr	r0, [r0, #0x4]
 8057c9e: 9907         	ldr	r1, [sp, #0x1c]
 8057ca0: 3180         	adds	r1, #0x80
 8057ca2: 4288         	cmp	r0, r1
 8057ca4: d106         	bne	0x8057cb4 <xTaskGenericNotifyFromISR+0x170> @ imm = #0xc
 8057ca6: e7ff         	b	0x8057ca8 <xTaskGenericNotifyFromISR+0x164> @ imm = #-0x2
 8057ca8: 9807         	ldr	r0, [sp, #0x1c]
 8057caa: f8d0 0088    	ldr.w	r0, [r0, #0x88]
 8057cae: 9903         	ldr	r1, [sp, #0xc]
 8057cb0: 6048         	str	r0, [r1, #0x4]
 8057cb2: e7ff         	b	0x8057cb4 <xTaskGenericNotifyFromISR+0x170> @ imm = #-0x2
 8057cb4: 9907         	ldr	r1, [sp, #0x1c]
 8057cb6: 2000         	movs	r0, #0x0
 8057cb8: f8c1 0090    	str.w	r0, [r1, #0x90]
 8057cbc: 9903         	ldr	r1, [sp, #0xc]
 8057cbe: 6808         	ldr	r0, [r1]
 8057cc0: 3801         	subs	r0, #0x1
 8057cc2: 6008         	str	r0, [r1]
 8057cc4: e7ff         	b	0x8057cc6 <xTaskGenericNotifyFromISR+0x182> @ imm = #-0x2
;                     prvAddTaskToReadyList( pxTCB );
 8057cc6: e7ff         	b	0x8057cc8 <xTaskGenericNotifyFromISR+0x184> @ imm = #-0x2
 8057cc8: e7ff         	b	0x8057cca <xTaskGenericNotifyFromISR+0x186> @ imm = #-0x2
 8057cca: 9807         	ldr	r0, [sp, #0x1c]
 8057ccc: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 8057cd0: f240 0100    	movw	r1, #0x0
 8057cd4: f2c0 0100    	movt	r1, #0x0
 8057cd8: 6809         	ldr	r1, [r1]
 8057cda: 4288         	cmp	r0, r1
 8057cdc: d909         	bls	0x8057cf2 <xTaskGenericNotifyFromISR+0x1ae> @ imm = #0x12
 8057cde: e7ff         	b	0x8057ce0 <xTaskGenericNotifyFromISR+0x19c> @ imm = #-0x2
 8057ce0: 9807         	ldr	r0, [sp, #0x1c]
 8057ce2: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 8057ce6: f240 0100    	movw	r1, #0x0
 8057cea: f2c0 0100    	movt	r1, #0x0
 8057cee: 6008         	str	r0, [r1]
 8057cf0: e7ff         	b	0x8057cf2 <xTaskGenericNotifyFromISR+0x1ae> @ imm = #-0x2
 8057cf2: e7ff         	b	0x8057cf4 <xTaskGenericNotifyFromISR+0x1b0> @ imm = #-0x2
 8057cf4: e7ff         	b	0x8057cf6 <xTaskGenericNotifyFromISR+0x1b2> @ imm = #-0x2
 8057cf6: 9807         	ldr	r0, [sp, #0x1c]
 8057cf8: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 8057cfc: eb00 0080    	add.w	r0, r0, r0, lsl #2
 8057d00: f240 0100    	movw	r1, #0x0
 8057d04: f2c0 0100    	movt	r1, #0x0
 8057d08: eb01 0080    	add.w	r0, r1, r0, lsl #2
 8057d0c: 6840         	ldr	r0, [r0, #0x4]
 8057d0e: 9002         	str	r0, [sp, #0x8]
 8057d10: 9802         	ldr	r0, [sp, #0x8]
 8057d12: 9a07         	ldr	r2, [sp, #0x1c]
 8057d14: f8c2 0084    	str.w	r0, [r2, #0x84]
 8057d18: 9802         	ldr	r0, [sp, #0x8]
 8057d1a: 6880         	ldr	r0, [r0, #0x8]
 8057d1c: 9a07         	ldr	r2, [sp, #0x1c]
 8057d1e: f8c2 0088    	str.w	r0, [r2, #0x88]
 8057d22: 9807         	ldr	r0, [sp, #0x1c]
 8057d24: 3080         	adds	r0, #0x80
 8057d26: 9a02         	ldr	r2, [sp, #0x8]
 8057d28: 6892         	ldr	r2, [r2, #0x8]
 8057d2a: 6050         	str	r0, [r2, #0x4]
 8057d2c: 9807         	ldr	r0, [sp, #0x1c]
 8057d2e: 3080         	adds	r0, #0x80
 8057d30: 9a02         	ldr	r2, [sp, #0x8]
 8057d32: 6090         	str	r0, [r2, #0x8]
 8057d34: 9a07         	ldr	r2, [sp, #0x1c]
 8057d36: f8d2 00a8    	ldr.w	r0, [r2, #0xa8]
 8057d3a: eb00 0080    	add.w	r0, r0, r0, lsl #2
 8057d3e: eb01 0080    	add.w	r0, r1, r0, lsl #2
 8057d42: f8c2 0090    	str.w	r0, [r2, #0x90]
 8057d46: 9807         	ldr	r0, [sp, #0x1c]
 8057d48: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 8057d4c: eb00 0280    	add.w	r2, r0, r0, lsl #2
 8057d50: f851 0022    	ldr.w	r0, [r1, r2, lsl #2]
 8057d54: 3001         	adds	r0, #0x1
 8057d56: f841 0022    	str.w	r0, [r1, r2, lsl #2]
 8057d5a: e7ff         	b	0x8057d5c <xTaskGenericNotifyFromISR+0x218> @ imm = #-0x2
 8057d5c: e7ff         	b	0x8057d5e <xTaskGenericNotifyFromISR+0x21a> @ imm = #-0x2
;                 }
 8057d5e: e020         	b	0x8057da2 <xTaskGenericNotifyFromISR+0x25e> @ imm = #0x40
;                     listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8057d60: e7ff         	b	0x8057d62 <xTaskGenericNotifyFromISR+0x21e> @ imm = #-0x2
 8057d62: f240 0100    	movw	r1, #0x0
 8057d66: f2c0 0100    	movt	r1, #0x0
 8057d6a: 6848         	ldr	r0, [r1, #0x4]
 8057d6c: 9001         	str	r0, [sp, #0x4]
 8057d6e: 9801         	ldr	r0, [sp, #0x4]
 8057d70: 9a07         	ldr	r2, [sp, #0x1c]
 8057d72: f8c2 0098    	str.w	r0, [r2, #0x98]
 8057d76: 9801         	ldr	r0, [sp, #0x4]
 8057d78: 6880         	ldr	r0, [r0, #0x8]
 8057d7a: 9a07         	ldr	r2, [sp, #0x1c]
 8057d7c: f8c2 009c    	str.w	r0, [r2, #0x9c]
 8057d80: 9807         	ldr	r0, [sp, #0x1c]
 8057d82: 3094         	adds	r0, #0x94
 8057d84: 9a01         	ldr	r2, [sp, #0x4]
 8057d86: 6892         	ldr	r2, [r2, #0x8]
 8057d88: 6050         	str	r0, [r2, #0x4]
 8057d8a: 9807         	ldr	r0, [sp, #0x1c]
 8057d8c: 3094         	adds	r0, #0x94
 8057d8e: 9a01         	ldr	r2, [sp, #0x4]
 8057d90: 6090         	str	r0, [r2, #0x8]
 8057d92: 9807         	ldr	r0, [sp, #0x1c]
 8057d94: f8c0 10a4    	str.w	r1, [r0, #0xa4]
 8057d98: 6808         	ldr	r0, [r1]
 8057d9a: 3001         	adds	r0, #0x1
 8057d9c: 6008         	str	r0, [r1]
 8057d9e: e7ff         	b	0x8057da0 <xTaskGenericNotifyFromISR+0x25c> @ imm = #-0x2
 8057da0: e7ff         	b	0x8057da2 <xTaskGenericNotifyFromISR+0x25e> @ imm = #-0x2
;                     if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8057da2: 9807         	ldr	r0, [sp, #0x1c]
 8057da4: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 8057da8: f240 0100    	movw	r1, #0x0
 8057dac: f2c0 0100    	movt	r1, #0x0
 8057db0: 6809         	ldr	r1, [r1]
 8057db2: f8d1 10a8    	ldr.w	r1, [r1, #0xa8]
 8057db6: 4288         	cmp	r0, r1
 8057db8: d90e         	bls	0x8057dd8 <xTaskGenericNotifyFromISR+0x294> @ imm = #0x1c
 8057dba: e7ff         	b	0x8057dbc <xTaskGenericNotifyFromISR+0x278> @ imm = #-0x2
;                         if( pxHigherPriorityTaskWoken != NULL )
 8057dbc: 68f8         	ldr	r0, [r7, #0xc]
 8057dbe: b120         	cbz	r0, 0x8057dca <xTaskGenericNotifyFromISR+0x286> @ imm = #0x8
 8057dc0: e7ff         	b	0x8057dc2 <xTaskGenericNotifyFromISR+0x27e> @ imm = #-0x2
;                             *pxHigherPriorityTaskWoken = pdTRUE;
 8057dc2: 68f9         	ldr	r1, [r7, #0xc]
 8057dc4: 2001         	movs	r0, #0x1
 8057dc6: 6008         	str	r0, [r1]
;                         }
 8057dc8: e7ff         	b	0x8057dca <xTaskGenericNotifyFromISR+0x286> @ imm = #-0x2
;                         xYieldPendings[ 0 ] = pdTRUE;
 8057dca: f240 0100    	movw	r1, #0x0
 8057dce: f2c0 0100    	movt	r1, #0x0
 8057dd2: 2001         	movs	r0, #0x1
 8057dd4: 6008         	str	r0, [r1]
;                     }
 8057dd6: e000         	b	0x8057dda <xTaskGenericNotifyFromISR+0x296> @ imm = #0x0
 8057dd8: e7ff         	b	0x8057dda <xTaskGenericNotifyFromISR+0x296> @ imm = #-0x2
;             }
 8057dda: e7ff         	b	0x8057ddc <xTaskGenericNotifyFromISR+0x298> @ imm = #-0x2
;         taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );
 8057ddc: 9804         	ldr	r0, [sp, #0x10]
 8057dde: f7ff fffe    	bl	0x8057dde <xTaskGenericNotifyFromISR+0x29a> @ imm = #-0x4
;         return xReturn;
 8057de2: 9805         	ldr	r0, [sp, #0x14]
 8057de4: b00c         	add	sp, #0x30
 8057de6: bd80         	pop	{r7, pc}

08057de8 <vTaskGenericNotifyGiveFromISR>:
;     {
 8057de8: b580         	push	{r7, lr}
 8057dea: 466f         	mov	r7, sp
 8057dec: b08a         	sub	sp, #0x28
 8057dee: 9009         	str	r0, [sp, #0x24]
 8057df0: 9108         	str	r1, [sp, #0x20]
 8057df2: 9207         	str	r2, [sp, #0x1c]
;         configASSERT( xTaskToNotify );
 8057df4: 9809         	ldr	r0, [sp, #0x24]
 8057df6: b920         	cbnz	r0, 0x8057e02 <vTaskGenericNotifyGiveFromISR+0x1a> @ imm = #0x8
 8057df8: e7ff         	b	0x8057dfa <vTaskGenericNotifyGiveFromISR+0x12> @ imm = #-0x2
 8057dfa: f7ff fffe    	bl	0x8057dfa <vTaskGenericNotifyGiveFromISR+0x12> @ imm = #-0x4
 8057dfe: e7ff         	b	0x8057e00 <vTaskGenericNotifyGiveFromISR+0x18> @ imm = #-0x2
 8057e00: e7fe         	b	0x8057e00 <vTaskGenericNotifyGiveFromISR+0x18> @ imm = #-0x4
;         configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8057e02: 9808         	ldr	r0, [sp, #0x20]
 8057e04: b120         	cbz	r0, 0x8057e10 <vTaskGenericNotifyGiveFromISR+0x28> @ imm = #0x8
 8057e06: e7ff         	b	0x8057e08 <vTaskGenericNotifyGiveFromISR+0x20> @ imm = #-0x2
 8057e08: f7ff fffe    	bl	0x8057e08 <vTaskGenericNotifyGiveFromISR+0x20> @ imm = #-0x4
 8057e0c: e7ff         	b	0x8057e0e <vTaskGenericNotifyGiveFromISR+0x26> @ imm = #-0x2
 8057e0e: e7fe         	b	0x8057e0e <vTaskGenericNotifyGiveFromISR+0x26> @ imm = #-0x4
;         portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8057e10: f7ff fffe    	bl	0x8057e10 <vTaskGenericNotifyGiveFromISR+0x28> @ imm = #-0x4
;         pxTCB = xTaskToNotify;
 8057e14: 9809         	ldr	r0, [sp, #0x24]
 8057e16: 9006         	str	r0, [sp, #0x18]
;         uxSavedInterruptStatus = taskENTER_CRITICAL_FROM_ISR();
 8057e18: f7ff fffe    	bl	0x8057e18 <vTaskGenericNotifyGiveFromISR+0x30> @ imm = #-0x4
 8057e1c: 9004         	str	r0, [sp, #0x10]
;             ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8057e1e: 9806         	ldr	r0, [sp, #0x18]
 8057e20: 9908         	ldr	r1, [sp, #0x20]
 8057e22: 4408         	add	r0, r1
 8057e24: f890 00d4    	ldrb.w	r0, [r0, #0xd4]
 8057e28: f807 0c11    	strb	r0, [r7, #-17]
;             pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8057e2c: 9806         	ldr	r0, [sp, #0x18]
 8057e2e: 9908         	ldr	r1, [sp, #0x20]
 8057e30: 4401         	add	r1, r0
 8057e32: 2002         	movs	r0, #0x2
 8057e34: f881 00d4    	strb.w	r0, [r1, #0xd4]
;             ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8057e38: 9806         	ldr	r0, [sp, #0x18]
 8057e3a: 9908         	ldr	r1, [sp, #0x20]
 8057e3c: eb00 0181    	add.w	r1, r0, r1, lsl #2
 8057e40: f8d1 00d0    	ldr.w	r0, [r1, #0xd0]
 8057e44: 3001         	adds	r0, #0x1
 8057e46: f8c1 00d0    	str.w	r0, [r1, #0xd0]
;             if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8057e4a: f817 0c11    	ldrb	r0, [r7, #-17]
 8057e4e: 2801         	cmp	r0, #0x1
 8057e50: f040 80c4    	bne.w	0x8057fdc <vTaskGenericNotifyGiveFromISR+0x1f4> @ imm = #0x188
 8057e54: e7ff         	b	0x8057e56 <vTaskGenericNotifyGiveFromISR+0x6e> @ imm = #-0x2
;                 configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8057e56: 9806         	ldr	r0, [sp, #0x18]
 8057e58: f8d0 00a4    	ldr.w	r0, [r0, #0xa4]
 8057e5c: b120         	cbz	r0, 0x8057e68 <vTaskGenericNotifyGiveFromISR+0x80> @ imm = #0x8
 8057e5e: e7ff         	b	0x8057e60 <vTaskGenericNotifyGiveFromISR+0x78> @ imm = #-0x2
 8057e60: f7ff fffe    	bl	0x8057e60 <vTaskGenericNotifyGiveFromISR+0x78> @ imm = #-0x4
 8057e64: e7ff         	b	0x8057e66 <vTaskGenericNotifyGiveFromISR+0x7e> @ imm = #-0x2
 8057e66: e7fe         	b	0x8057e66 <vTaskGenericNotifyGiveFromISR+0x7e> @ imm = #-0x4
;                 if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8057e68: f240 0000    	movw	r0, #0x0
 8057e6c: f2c0 0000    	movt	r0, #0x0
 8057e70: 6800         	ldr	r0, [r0]
 8057e72: 2800         	cmp	r0, #0x0
 8057e74: d174         	bne	0x8057f60 <vTaskGenericNotifyGiveFromISR+0x178> @ imm = #0xe8
 8057e76: e7ff         	b	0x8057e78 <vTaskGenericNotifyGiveFromISR+0x90> @ imm = #-0x2
;                     listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8057e78: e7ff         	b	0x8057e7a <vTaskGenericNotifyGiveFromISR+0x92> @ imm = #-0x2
 8057e7a: 9806         	ldr	r0, [sp, #0x18]
 8057e7c: f8d0 0090    	ldr.w	r0, [r0, #0x90]
 8057e80: 9003         	str	r0, [sp, #0xc]
 8057e82: 9806         	ldr	r0, [sp, #0x18]
 8057e84: f8d0 1084    	ldr.w	r1, [r0, #0x84]
 8057e88: f8d0 0088    	ldr.w	r0, [r0, #0x88]
 8057e8c: 6088         	str	r0, [r1, #0x8]
 8057e8e: 9906         	ldr	r1, [sp, #0x18]
 8057e90: f8d1 0084    	ldr.w	r0, [r1, #0x84]
 8057e94: f8d1 1088    	ldr.w	r1, [r1, #0x88]
 8057e98: 6048         	str	r0, [r1, #0x4]
 8057e9a: 9803         	ldr	r0, [sp, #0xc]
 8057e9c: 6840         	ldr	r0, [r0, #0x4]
 8057e9e: 9906         	ldr	r1, [sp, #0x18]
 8057ea0: 3180         	adds	r1, #0x80
 8057ea2: 4288         	cmp	r0, r1
 8057ea4: d106         	bne	0x8057eb4 <vTaskGenericNotifyGiveFromISR+0xcc> @ imm = #0xc
 8057ea6: e7ff         	b	0x8057ea8 <vTaskGenericNotifyGiveFromISR+0xc0> @ imm = #-0x2
 8057ea8: 9806         	ldr	r0, [sp, #0x18]
 8057eaa: f8d0 0088    	ldr.w	r0, [r0, #0x88]
 8057eae: 9903         	ldr	r1, [sp, #0xc]
 8057eb0: 6048         	str	r0, [r1, #0x4]
 8057eb2: e7ff         	b	0x8057eb4 <vTaskGenericNotifyGiveFromISR+0xcc> @ imm = #-0x2
 8057eb4: 9906         	ldr	r1, [sp, #0x18]
 8057eb6: 2000         	movs	r0, #0x0
 8057eb8: f8c1 0090    	str.w	r0, [r1, #0x90]
 8057ebc: 9903         	ldr	r1, [sp, #0xc]
 8057ebe: 6808         	ldr	r0, [r1]
 8057ec0: 3801         	subs	r0, #0x1
 8057ec2: 6008         	str	r0, [r1]
 8057ec4: e7ff         	b	0x8057ec6 <vTaskGenericNotifyGiveFromISR+0xde> @ imm = #-0x2
;                     prvAddTaskToReadyList( pxTCB );
 8057ec6: e7ff         	b	0x8057ec8 <vTaskGenericNotifyGiveFromISR+0xe0> @ imm = #-0x2
 8057ec8: e7ff         	b	0x8057eca <vTaskGenericNotifyGiveFromISR+0xe2> @ imm = #-0x2
 8057eca: 9806         	ldr	r0, [sp, #0x18]
 8057ecc: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 8057ed0: f240 0100    	movw	r1, #0x0
 8057ed4: f2c0 0100    	movt	r1, #0x0
 8057ed8: 6809         	ldr	r1, [r1]
 8057eda: 4288         	cmp	r0, r1
 8057edc: d909         	bls	0x8057ef2 <vTaskGenericNotifyGiveFromISR+0x10a> @ imm = #0x12
 8057ede: e7ff         	b	0x8057ee0 <vTaskGenericNotifyGiveFromISR+0xf8> @ imm = #-0x2
 8057ee0: 9806         	ldr	r0, [sp, #0x18]
 8057ee2: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 8057ee6: f240 0100    	movw	r1, #0x0
 8057eea: f2c0 0100    	movt	r1, #0x0
 8057eee: 6008         	str	r0, [r1]
 8057ef0: e7ff         	b	0x8057ef2 <vTaskGenericNotifyGiveFromISR+0x10a> @ imm = #-0x2
 8057ef2: e7ff         	b	0x8057ef4 <vTaskGenericNotifyGiveFromISR+0x10c> @ imm = #-0x2
 8057ef4: e7ff         	b	0x8057ef6 <vTaskGenericNotifyGiveFromISR+0x10e> @ imm = #-0x2
 8057ef6: 9806         	ldr	r0, [sp, #0x18]
 8057ef8: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 8057efc: eb00 0080    	add.w	r0, r0, r0, lsl #2
 8057f00: f240 0100    	movw	r1, #0x0
 8057f04: f2c0 0100    	movt	r1, #0x0
 8057f08: eb01 0080    	add.w	r0, r1, r0, lsl #2
 8057f0c: 6840         	ldr	r0, [r0, #0x4]
 8057f0e: 9002         	str	r0, [sp, #0x8]
 8057f10: 9802         	ldr	r0, [sp, #0x8]
 8057f12: 9a06         	ldr	r2, [sp, #0x18]
 8057f14: f8c2 0084    	str.w	r0, [r2, #0x84]
 8057f18: 9802         	ldr	r0, [sp, #0x8]
 8057f1a: 6880         	ldr	r0, [r0, #0x8]
 8057f1c: 9a06         	ldr	r2, [sp, #0x18]
 8057f1e: f8c2 0088    	str.w	r0, [r2, #0x88]
 8057f22: 9806         	ldr	r0, [sp, #0x18]
 8057f24: 3080         	adds	r0, #0x80
 8057f26: 9a02         	ldr	r2, [sp, #0x8]
 8057f28: 6892         	ldr	r2, [r2, #0x8]
 8057f2a: 6050         	str	r0, [r2, #0x4]
 8057f2c: 9806         	ldr	r0, [sp, #0x18]
 8057f2e: 3080         	adds	r0, #0x80
 8057f30: 9a02         	ldr	r2, [sp, #0x8]
 8057f32: 6090         	str	r0, [r2, #0x8]
 8057f34: 9a06         	ldr	r2, [sp, #0x18]
 8057f36: f8d2 00a8    	ldr.w	r0, [r2, #0xa8]
 8057f3a: eb00 0080    	add.w	r0, r0, r0, lsl #2
 8057f3e: eb01 0080    	add.w	r0, r1, r0, lsl #2
 8057f42: f8c2 0090    	str.w	r0, [r2, #0x90]
 8057f46: 9806         	ldr	r0, [sp, #0x18]
 8057f48: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 8057f4c: eb00 0280    	add.w	r2, r0, r0, lsl #2
 8057f50: f851 0022    	ldr.w	r0, [r1, r2, lsl #2]
 8057f54: 3001         	adds	r0, #0x1
 8057f56: f841 0022    	str.w	r0, [r1, r2, lsl #2]
 8057f5a: e7ff         	b	0x8057f5c <vTaskGenericNotifyGiveFromISR+0x174> @ imm = #-0x2
 8057f5c: e7ff         	b	0x8057f5e <vTaskGenericNotifyGiveFromISR+0x176> @ imm = #-0x2
;                 }
 8057f5e: e020         	b	0x8057fa2 <vTaskGenericNotifyGiveFromISR+0x1ba> @ imm = #0x40
;                     listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8057f60: e7ff         	b	0x8057f62 <vTaskGenericNotifyGiveFromISR+0x17a> @ imm = #-0x2
 8057f62: f240 0100    	movw	r1, #0x0
 8057f66: f2c0 0100    	movt	r1, #0x0
 8057f6a: 6848         	ldr	r0, [r1, #0x4]
 8057f6c: 9001         	str	r0, [sp, #0x4]
 8057f6e: 9801         	ldr	r0, [sp, #0x4]
 8057f70: 9a06         	ldr	r2, [sp, #0x18]
 8057f72: f8c2 0098    	str.w	r0, [r2, #0x98]
 8057f76: 9801         	ldr	r0, [sp, #0x4]
 8057f78: 6880         	ldr	r0, [r0, #0x8]
 8057f7a: 9a06         	ldr	r2, [sp, #0x18]
 8057f7c: f8c2 009c    	str.w	r0, [r2, #0x9c]
 8057f80: 9806         	ldr	r0, [sp, #0x18]
 8057f82: 3094         	adds	r0, #0x94
 8057f84: 9a01         	ldr	r2, [sp, #0x4]
 8057f86: 6892         	ldr	r2, [r2, #0x8]
 8057f88: 6050         	str	r0, [r2, #0x4]
 8057f8a: 9806         	ldr	r0, [sp, #0x18]
 8057f8c: 3094         	adds	r0, #0x94
 8057f8e: 9a01         	ldr	r2, [sp, #0x4]
 8057f90: 6090         	str	r0, [r2, #0x8]
 8057f92: 9806         	ldr	r0, [sp, #0x18]
 8057f94: f8c0 10a4    	str.w	r1, [r0, #0xa4]
 8057f98: 6808         	ldr	r0, [r1]
 8057f9a: 3001         	adds	r0, #0x1
 8057f9c: 6008         	str	r0, [r1]
 8057f9e: e7ff         	b	0x8057fa0 <vTaskGenericNotifyGiveFromISR+0x1b8> @ imm = #-0x2
 8057fa0: e7ff         	b	0x8057fa2 <vTaskGenericNotifyGiveFromISR+0x1ba> @ imm = #-0x2
;                     if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8057fa2: 9806         	ldr	r0, [sp, #0x18]
 8057fa4: f8d0 00a8    	ldr.w	r0, [r0, #0xa8]
 8057fa8: f240 0100    	movw	r1, #0x0
 8057fac: f2c0 0100    	movt	r1, #0x0
 8057fb0: 6809         	ldr	r1, [r1]
 8057fb2: f8d1 10a8    	ldr.w	r1, [r1, #0xa8]
 8057fb6: 4288         	cmp	r0, r1
 8057fb8: d90e         	bls	0x8057fd8 <vTaskGenericNotifyGiveFromISR+0x1f0> @ imm = #0x1c
 8057fba: e7ff         	b	0x8057fbc <vTaskGenericNotifyGiveFromISR+0x1d4> @ imm = #-0x2
;                         if( pxHigherPriorityTaskWoken != NULL )
 8057fbc: 9807         	ldr	r0, [sp, #0x1c]
 8057fbe: b120         	cbz	r0, 0x8057fca <vTaskGenericNotifyGiveFromISR+0x1e2> @ imm = #0x8
 8057fc0: e7ff         	b	0x8057fc2 <vTaskGenericNotifyGiveFromISR+0x1da> @ imm = #-0x2
;                             *pxHigherPriorityTaskWoken = pdTRUE;
 8057fc2: 9907         	ldr	r1, [sp, #0x1c]
 8057fc4: 2001         	movs	r0, #0x1
 8057fc6: 6008         	str	r0, [r1]
;                         }
 8057fc8: e7ff         	b	0x8057fca <vTaskGenericNotifyGiveFromISR+0x1e2> @ imm = #-0x2
;                         xYieldPendings[ 0 ] = pdTRUE;
 8057fca: f240 0100    	movw	r1, #0x0
 8057fce: f2c0 0100    	movt	r1, #0x0
 8057fd2: 2001         	movs	r0, #0x1
 8057fd4: 6008         	str	r0, [r1]
;                     }
 8057fd6: e000         	b	0x8057fda <vTaskGenericNotifyGiveFromISR+0x1f2> @ imm = #0x0
 8057fd8: e7ff         	b	0x8057fda <vTaskGenericNotifyGiveFromISR+0x1f2> @ imm = #-0x2
;             }
 8057fda: e7ff         	b	0x8057fdc <vTaskGenericNotifyGiveFromISR+0x1f4> @ imm = #-0x2
;         taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );
 8057fdc: 9804         	ldr	r0, [sp, #0x10]
 8057fde: f7ff fffe    	bl	0x8057fde <vTaskGenericNotifyGiveFromISR+0x1f6> @ imm = #-0x4
;     }
 8057fe2: b00a         	add	sp, #0x28
 8057fe4: bd80         	pop	{r7, pc}

08057fe6 <xTaskGenericNotifyStateClear>:
;     {
 8057fe6: b580         	push	{r7, lr}
 8057fe8: 466f         	mov	r7, sp
 8057fea: b086         	sub	sp, #0x18
 8057fec: 9005         	str	r0, [sp, #0x14]
 8057fee: 9104         	str	r1, [sp, #0x10]
;         configASSERT( uxIndexToClear < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8057ff0: 9804         	ldr	r0, [sp, #0x10]
 8057ff2: b120         	cbz	r0, 0x8057ffe <xTaskGenericNotifyStateClear+0x18> @ imm = #0x8
 8057ff4: e7ff         	b	0x8057ff6 <xTaskGenericNotifyStateClear+0x10> @ imm = #-0x2
 8057ff6: f7ff fffe    	bl	0x8057ff6 <xTaskGenericNotifyStateClear+0x10> @ imm = #-0x4
 8057ffa: e7ff         	b	0x8057ffc <xTaskGenericNotifyStateClear+0x16> @ imm = #-0x2
 8057ffc: e7fe         	b	0x8057ffc <xTaskGenericNotifyStateClear+0x16> @ imm = #-0x4
;         pxTCB = prvGetTCBFromHandle( xTask );
 8057ffe: 9805         	ldr	r0, [sp, #0x14]
 8058000: b938         	cbnz	r0, 0x8058012 <xTaskGenericNotifyStateClear+0x2c> @ imm = #0xe
 8058002: e7ff         	b	0x8058004 <xTaskGenericNotifyStateClear+0x1e> @ imm = #-0x2
 8058004: f240 0000    	movw	r0, #0x0
 8058008: f2c0 0000    	movt	r0, #0x0
 805800c: 6800         	ldr	r0, [r0]
 805800e: 9001         	str	r0, [sp, #0x4]
 8058010: e002         	b	0x8058018 <xTaskGenericNotifyStateClear+0x32> @ imm = #0x4
 8058012: 9805         	ldr	r0, [sp, #0x14]
 8058014: 9001         	str	r0, [sp, #0x4]
 8058016: e7ff         	b	0x8058018 <xTaskGenericNotifyStateClear+0x32> @ imm = #-0x2
 8058018: 9801         	ldr	r0, [sp, #0x4]
 805801a: 9003         	str	r0, [sp, #0xc]
;         taskENTER_CRITICAL();
 805801c: f7ff fffe    	bl	0x805801c <xTaskGenericNotifyStateClear+0x36> @ imm = #-0x4
;             if( pxTCB->ucNotifyState[ uxIndexToClear ] == taskNOTIFICATION_RECEIVED )
 8058020: 9803         	ldr	r0, [sp, #0xc]
 8058022: 9904         	ldr	r1, [sp, #0x10]
 8058024: 4408         	add	r0, r1
 8058026: f890 00d4    	ldrb.w	r0, [r0, #0xd4]
 805802a: 2802         	cmp	r0, #0x2
 805802c: d109         	bne	0x8058042 <xTaskGenericNotifyStateClear+0x5c> @ imm = #0x12
 805802e: e7ff         	b	0x8058030 <xTaskGenericNotifyStateClear+0x4a> @ imm = #-0x2
;                 pxTCB->ucNotifyState[ uxIndexToClear ] = taskNOT_WAITING_NOTIFICATION;
 8058030: 9803         	ldr	r0, [sp, #0xc]
 8058032: 9904         	ldr	r1, [sp, #0x10]
 8058034: 4401         	add	r1, r0
 8058036: 2000         	movs	r0, #0x0
 8058038: f881 00d4    	strb.w	r0, [r1, #0xd4]
 805803c: 2001         	movs	r0, #0x1
;                 xReturn = pdPASS;
 805803e: 9002         	str	r0, [sp, #0x8]
;             }
 8058040: e002         	b	0x8058048 <xTaskGenericNotifyStateClear+0x62> @ imm = #0x4
 8058042: 2000         	movs	r0, #0x0
;                 xReturn = pdFAIL;
 8058044: 9002         	str	r0, [sp, #0x8]
 8058046: e7ff         	b	0x8058048 <xTaskGenericNotifyStateClear+0x62> @ imm = #-0x2
;         taskEXIT_CRITICAL();
 8058048: f7ff fffe    	bl	0x8058048 <xTaskGenericNotifyStateClear+0x62> @ imm = #-0x4
;         return xReturn;
 805804c: 9802         	ldr	r0, [sp, #0x8]
 805804e: b006         	add	sp, #0x18
 8058050: bd80         	pop	{r7, pc}

08058052 <ulTaskGenericNotifyValueClear>:
;     {
 8058052: b580         	push	{r7, lr}
 8058054: 466f         	mov	r7, sp
 8058056: b086         	sub	sp, #0x18
 8058058: 9005         	str	r0, [sp, #0x14]
 805805a: 9104         	str	r1, [sp, #0x10]
 805805c: 9203         	str	r2, [sp, #0xc]
;         configASSERT( uxIndexToClear < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 805805e: 9804         	ldr	r0, [sp, #0x10]
 8058060: b120         	cbz	r0, 0x805806c <ulTaskGenericNotifyValueClear+0x1a> @ imm = #0x8
 8058062: e7ff         	b	0x8058064 <ulTaskGenericNotifyValueClear+0x12> @ imm = #-0x2
 8058064: f7ff fffe    	bl	0x8058064 <ulTaskGenericNotifyValueClear+0x12> @ imm = #-0x4
 8058068: e7ff         	b	0x805806a <ulTaskGenericNotifyValueClear+0x18> @ imm = #-0x2
 805806a: e7fe         	b	0x805806a <ulTaskGenericNotifyValueClear+0x18> @ imm = #-0x4
;         pxTCB = prvGetTCBFromHandle( xTask );
 805806c: 9805         	ldr	r0, [sp, #0x14]
 805806e: b938         	cbnz	r0, 0x8058080 <ulTaskGenericNotifyValueClear+0x2e> @ imm = #0xe
 8058070: e7ff         	b	0x8058072 <ulTaskGenericNotifyValueClear+0x20> @ imm = #-0x2
 8058072: f240 0000    	movw	r0, #0x0
 8058076: f2c0 0000    	movt	r0, #0x0
 805807a: 6800         	ldr	r0, [r0]
 805807c: 9000         	str	r0, [sp]
 805807e: e002         	b	0x8058086 <ulTaskGenericNotifyValueClear+0x34> @ imm = #0x4
 8058080: 9805         	ldr	r0, [sp, #0x14]
 8058082: 9000         	str	r0, [sp]
 8058084: e7ff         	b	0x8058086 <ulTaskGenericNotifyValueClear+0x34> @ imm = #-0x2
 8058086: 9800         	ldr	r0, [sp]
 8058088: 9002         	str	r0, [sp, #0x8]
;         taskENTER_CRITICAL();
 805808a: f7ff fffe    	bl	0x805808a <ulTaskGenericNotifyValueClear+0x38> @ imm = #-0x4
;             ulReturn = pxTCB->ulNotifiedValue[ uxIndexToClear ];
 805808e: 9802         	ldr	r0, [sp, #0x8]
 8058090: 9904         	ldr	r1, [sp, #0x10]
 8058092: eb00 0081    	add.w	r0, r0, r1, lsl #2
 8058096: f8d0 00d0    	ldr.w	r0, [r0, #0xd0]
 805809a: 9001         	str	r0, [sp, #0x4]
;             pxTCB->ulNotifiedValue[ uxIndexToClear ] &= ~ulBitsToClear;
 805809c: 9a03         	ldr	r2, [sp, #0xc]
 805809e: 9802         	ldr	r0, [sp, #0x8]
 80580a0: 9904         	ldr	r1, [sp, #0x10]
 80580a2: eb00 0181    	add.w	r1, r0, r1, lsl #2
 80580a6: f8d1 00d0    	ldr.w	r0, [r1, #0xd0]
 80580aa: 4390         	bics	r0, r2
 80580ac: f8c1 00d0    	str.w	r0, [r1, #0xd0]
;         taskEXIT_CRITICAL();
 80580b0: f7ff fffe    	bl	0x80580b0 <ulTaskGenericNotifyValueClear+0x5e> @ imm = #-0x4
;         return ulReturn;
 80580b4: 9801         	ldr	r0, [sp, #0x4]
 80580b6: b006         	add	sp, #0x18
 80580b8: bd80         	pop	{r7, pc}

080580ba <xTaskGetMPUSettings>:
;     {
 80580ba: b083         	sub	sp, #0xc
 80580bc: 9002         	str	r0, [sp, #0x8]
;         pxTCB = prvGetTCBFromHandle( xTask );
 80580be: 9802         	ldr	r0, [sp, #0x8]
 80580c0: b938         	cbnz	r0, 0x80580d2 <xTaskGetMPUSettings+0x18> @ imm = #0xe
 80580c2: e7ff         	b	0x80580c4 <xTaskGetMPUSettings+0xa> @ imm = #-0x2
 80580c4: f240 0000    	movw	r0, #0x0
 80580c8: f2c0 0000    	movt	r0, #0x0
 80580cc: 6800         	ldr	r0, [r0]
 80580ce: 9000         	str	r0, [sp]
 80580d0: e002         	b	0x80580d8 <xTaskGetMPUSettings+0x1e> @ imm = #0x4
 80580d2: 9802         	ldr	r0, [sp, #0x8]
 80580d4: 9000         	str	r0, [sp]
 80580d6: e7ff         	b	0x80580d8 <xTaskGetMPUSettings+0x1e> @ imm = #-0x2
 80580d8: 9800         	ldr	r0, [sp]
 80580da: 9001         	str	r0, [sp, #0x4]
;         return &( pxTCB->xMPUSettings );
 80580dc: 9801         	ldr	r0, [sp, #0x4]
 80580de: 3004         	adds	r0, #0x4
 80580e0: b003         	add	sp, #0xc
 80580e2: 4770         	bx	lr

080580e4 <prvInitialiseNewTask>:
; {
 80580e4: b5d0         	push	{r4, r6, r7, lr}
 80580e6: af02         	add	r7, sp, #0x8
 80580e8: b08a         	sub	sp, #0x28
 80580ea: f8d7 c014    	ldr.w	r12, [r7, #0x14]
 80580ee: f8d7 c010    	ldr.w	r12, [r7, #0x10]
 80580f2: f8d7 c00c    	ldr.w	r12, [r7, #0xc]
 80580f6: f8d7 c008    	ldr.w	r12, [r7, #0x8]
 80580fa: 9009         	str	r0, [sp, #0x24]
 80580fc: 9108         	str	r1, [sp, #0x20]
 80580fe: 9207         	str	r2, [sp, #0x1c]
 8058100: 9306         	str	r3, [sp, #0x18]
;         if( ( uxPriority & portPRIVILEGE_BIT ) != 0U )
 8058102: 7af8         	ldrb	r0, [r7, #0xb]
 8058104: 0600         	lsls	r0, r0, #0x18
 8058106: 2800         	cmp	r0, #0x0
 8058108: d503         	bpl	0x8058112 <prvInitialiseNewTask+0x2e> @ imm = #0x6
 805810a: e7ff         	b	0x805810c <prvInitialiseNewTask+0x28> @ imm = #-0x2
 805810c: 2001         	movs	r0, #0x1
;             xRunPrivileged = pdTRUE;
 805810e: 9003         	str	r0, [sp, #0xc]
;         }
 8058110: e002         	b	0x8058118 <prvInitialiseNewTask+0x34> @ imm = #0x4
 8058112: 2000         	movs	r0, #0x0
;             xRunPrivileged = pdFALSE;
 8058114: 9003         	str	r0, [sp, #0xc]
 8058116: e7ff         	b	0x8058118 <prvInitialiseNewTask+0x34> @ imm = #-0x2
;         uxPriority &= ~portPRIVILEGE_BIT;
 8058118: 68b8         	ldr	r0, [r7, #0x8]
 805811a: f020 4000    	bic	r0, r0, #0x80000000
 805811e: 60b8         	str	r0, [r7, #0x8]
;         ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8058120: 6938         	ldr	r0, [r7, #0x10]
 8058122: f8d0 00ac    	ldr.w	r0, [r0, #0xac]
 8058126: 9907         	ldr	r1, [sp, #0x1c]
 8058128: 008a         	lsls	r2, r1, #0x2
 805812a: 21a5         	movs	r1, #0xa5
 805812c: f7ff fffe    	bl	0x805812c <prvInitialiseNewTask+0x48> @ imm = #-0x4
;         pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8058130: 6938         	ldr	r0, [r7, #0x10]
 8058132: f8d0 00ac    	ldr.w	r0, [r0, #0xac]
 8058136: 9907         	ldr	r1, [sp, #0x1c]
 8058138: eb00 0081    	add.w	r0, r0, r1, lsl #2
 805813c: 3804         	subs	r0, #0x4
 805813e: 9005         	str	r0, [sp, #0x14]
;         pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8058140: 9805         	ldr	r0, [sp, #0x14]
 8058142: f020 0007    	bic	r0, r0, #0x7
 8058146: 9005         	str	r0, [sp, #0x14]
;         configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8058148: f89d 0014    	ldrb.w	r0, [sp, #0x14]
 805814c: 0740         	lsls	r0, r0, #0x1d
 805814e: b120         	cbz	r0, 0x805815a <prvInitialiseNewTask+0x76> @ imm = #0x8
 8058150: e7ff         	b	0x8058152 <prvInitialiseNewTask+0x6e> @ imm = #-0x2
 8058152: f7ff fffe    	bl	0x8058152 <prvInitialiseNewTask+0x6e> @ imm = #-0x4
 8058156: e7ff         	b	0x8058158 <prvInitialiseNewTask+0x74> @ imm = #-0x2
 8058158: e7fe         	b	0x8058158 <prvInitialiseNewTask+0x74> @ imm = #-0x4
;     if( pcName != NULL )
 805815a: 9808         	ldr	r0, [sp, #0x20]
 805815c: b1f8         	cbz	r0, 0x805819e <prvInitialiseNewTask+0xba> @ imm = #0x3e
 805815e: e7ff         	b	0x8058160 <prvInitialiseNewTask+0x7c> @ imm = #-0x2
 8058160: 2000         	movs	r0, #0x0
;         for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8058162: 9004         	str	r0, [sp, #0x10]
 8058164: e7ff         	b	0x8058166 <prvInitialiseNewTask+0x82> @ imm = #-0x2
 8058166: 9804         	ldr	r0, [sp, #0x10]
 8058168: 280f         	cmp	r0, #0xf
 805816a: d813         	bhi	0x8058194 <prvInitialiseNewTask+0xb0> @ imm = #0x26
 805816c: e7ff         	b	0x805816e <prvInitialiseNewTask+0x8a> @ imm = #-0x2
;             pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 805816e: 9808         	ldr	r0, [sp, #0x20]
 8058170: 9a04         	ldr	r2, [sp, #0x10]
 8058172: 5c80         	ldrb	r0, [r0, r2]
 8058174: 6939         	ldr	r1, [r7, #0x10]
 8058176: 4411         	add	r1, r2
 8058178: f881 00b0    	strb.w	r0, [r1, #0xb0]
;             if( pcName[ x ] == ( char ) 0x00 )
 805817c: 9808         	ldr	r0, [sp, #0x20]
 805817e: 9904         	ldr	r1, [sp, #0x10]
 8058180: 5c40         	ldrb	r0, [r0, r1]
 8058182: b908         	cbnz	r0, 0x8058188 <prvInitialiseNewTask+0xa4> @ imm = #0x2
 8058184: e7ff         	b	0x8058186 <prvInitialiseNewTask+0xa2> @ imm = #-0x2
;                 break;
 8058186: e005         	b	0x8058194 <prvInitialiseNewTask+0xb0> @ imm = #0xa
 8058188: e7ff         	b	0x805818a <prvInitialiseNewTask+0xa6> @ imm = #-0x2
;         }
 805818a: e7ff         	b	0x805818c <prvInitialiseNewTask+0xa8> @ imm = #-0x2
;         for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 805818c: 9804         	ldr	r0, [sp, #0x10]
 805818e: 3001         	adds	r0, #0x1
 8058190: 9004         	str	r0, [sp, #0x10]
 8058192: e7e8         	b	0x8058166 <prvInitialiseNewTask+0x82> @ imm = #-0x30
;         pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8058194: 6939         	ldr	r1, [r7, #0x10]
 8058196: 2000         	movs	r0, #0x0
 8058198: f881 00bf    	strb.w	r0, [r1, #0xbf]
;     }
 805819c: e000         	b	0x80581a0 <prvInitialiseNewTask+0xbc> @ imm = #0x0
 805819e: e7ff         	b	0x80581a0 <prvInitialiseNewTask+0xbc> @ imm = #-0x2
;     configASSERT( uxPriority < configMAX_PRIORITIES );
 80581a0: 68b8         	ldr	r0, [r7, #0x8]
 80581a2: 2810         	cmp	r0, #0x10
 80581a4: d304         	blo	0x80581b0 <prvInitialiseNewTask+0xcc> @ imm = #0x8
 80581a6: e7ff         	b	0x80581a8 <prvInitialiseNewTask+0xc4> @ imm = #-0x2
 80581a8: f7ff fffe    	bl	0x80581a8 <prvInitialiseNewTask+0xc4> @ imm = #-0x4
 80581ac: e7ff         	b	0x80581ae <prvInitialiseNewTask+0xca> @ imm = #-0x2
 80581ae: e7fe         	b	0x80581ae <prvInitialiseNewTask+0xca> @ imm = #-0x4
;     if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80581b0: 68b8         	ldr	r0, [r7, #0x8]
 80581b2: 2810         	cmp	r0, #0x10
 80581b4: d303         	blo	0x80581be <prvInitialiseNewTask+0xda> @ imm = #0x6
 80581b6: e7ff         	b	0x80581b8 <prvInitialiseNewTask+0xd4> @ imm = #-0x2
 80581b8: 200f         	movs	r0, #0xf
;         uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80581ba: 60b8         	str	r0, [r7, #0x8]
;     }
 80581bc: e000         	b	0x80581c0 <prvInitialiseNewTask+0xdc> @ imm = #0x0
 80581be: e7ff         	b	0x80581c0 <prvInitialiseNewTask+0xdc> @ imm = #-0x2
;     pxNewTCB->uxPriority = uxPriority;
 80581c0: 68b8         	ldr	r0, [r7, #0x8]
 80581c2: 6939         	ldr	r1, [r7, #0x10]
 80581c4: f8c1 00a8    	str.w	r0, [r1, #0xa8]
;         pxNewTCB->uxBasePriority = uxPriority;
 80581c8: 68b8         	ldr	r0, [r7, #0x8]
 80581ca: 6939         	ldr	r1, [r7, #0x10]
 80581cc: f8c1 00c8    	str.w	r0, [r1, #0xc8]
;     vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80581d0: 6938         	ldr	r0, [r7, #0x10]
 80581d2: 3080         	adds	r0, #0x80
 80581d4: f7ff fffe    	bl	0x80581d4 <prvInitialiseNewTask+0xf0> @ imm = #-0x4
;     vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80581d8: 6938         	ldr	r0, [r7, #0x10]
 80581da: 3094         	adds	r0, #0x94
 80581dc: f7ff fffe    	bl	0x80581dc <prvInitialiseNewTask+0xf8> @ imm = #-0x4
;     listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80581e0: 6938         	ldr	r0, [r7, #0x10]
 80581e2: f8c0 008c    	str.w	r0, [r0, #0x8c]
;     listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80581e6: 68b8         	ldr	r0, [r7, #0x8]
 80581e8: f1c0 0010    	rsb.w	r0, r0, #0x10
 80581ec: 6939         	ldr	r1, [r7, #0x10]
 80581ee: f8c1 0094    	str.w	r0, [r1, #0x94]
;     listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80581f2: 6938         	ldr	r0, [r7, #0x10]
 80581f4: f8c0 00a0    	str.w	r0, [r0, #0xa0]
;         vPortStoreTaskMPUSettings( &( pxNewTCB->xMPUSettings ), xRegions, pxNewTCB->pxStack, ulStackDepth );
 80581f8: 693a         	ldr	r2, [r7, #0x10]
 80581fa: 1d10         	adds	r0, r2, #0x4
 80581fc: 6979         	ldr	r1, [r7, #0x14]
 80581fe: f8d2 20ac    	ldr.w	r2, [r2, #0xac]
 8058202: 9b07         	ldr	r3, [sp, #0x1c]
 8058204: f7ff fffe    	bl	0x8058204 <prvInitialiseNewTask+0x120> @ imm = #-0x4
;                 pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pvParameters, xRunPrivileged, &( pxNewTCB->xMPUSettings ) );
 8058208: 9805         	ldr	r0, [sp, #0x14]
 805820a: f8d7 e010    	ldr.w	lr, [r7, #0x10]
 805820e: f8de 10ac    	ldr.w	r1, [lr, #0xac]
 8058212: 9a09         	ldr	r2, [sp, #0x24]
 8058214: 9b06         	ldr	r3, [sp, #0x18]
 8058216: f8dd c00c    	ldr.w	r12, [sp, #0xc]
 805821a: f10e 0404    	add.w	r4, lr, #0x4
 805821e: 46ee         	mov	lr, sp
 8058220: f8ce 4004    	str.w	r4, [lr, #0x4]
 8058224: f8ce c000    	str.w	r12, [lr]
 8058228: f7ff fffe    	bl	0x8058228 <prvInitialiseNewTask+0x144> @ imm = #-0x4
 805822c: 6939         	ldr	r1, [r7, #0x10]
 805822e: 6008         	str	r0, [r1]
;     if( pxCreatedTask != NULL )
 8058230: 68f8         	ldr	r0, [r7, #0xc]
 8058232: b120         	cbz	r0, 0x805823e <prvInitialiseNewTask+0x15a> @ imm = #0x8
 8058234: e7ff         	b	0x8058236 <prvInitialiseNewTask+0x152> @ imm = #-0x2
;         *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8058236: 6938         	ldr	r0, [r7, #0x10]
 8058238: 68f9         	ldr	r1, [r7, #0xc]
 805823a: 6008         	str	r0, [r1]
;     }
 805823c: e000         	b	0x8058240 <prvInitialiseNewTask+0x15c> @ imm = #0x0
 805823e: e7ff         	b	0x8058240 <prvInitialiseNewTask+0x15c> @ imm = #-0x2
; }
 8058240: b00a         	add	sp, #0x28
 8058242: bdd0         	pop	{r4, r6, r7, pc}

08058244 <prvInitialiseTaskLists>:
; {
 8058244: b580         	push	{r7, lr}
 8058246: 466f         	mov	r7, sp
 8058248: b084         	sub	sp, #0x10
 805824a: 2000         	movs	r0, #0x0
;     for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 805824c: 9003         	str	r0, [sp, #0xc]
 805824e: e7ff         	b	0x8058250 <prvInitialiseTaskLists+0xc> @ imm = #-0x2
 8058250: 9803         	ldr	r0, [sp, #0xc]
 8058252: 280f         	cmp	r0, #0xf
 8058254: d810         	bhi	0x8058278 <prvInitialiseTaskLists+0x34> @ imm = #0x20
 8058256: e7ff         	b	0x8058258 <prvInitialiseTaskLists+0x14> @ imm = #-0x2
;         vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8058258: 9803         	ldr	r0, [sp, #0xc]
 805825a: eb00 0180    	add.w	r1, r0, r0, lsl #2
 805825e: f240 0000    	movw	r0, #0x0
 8058262: f2c0 0000    	movt	r0, #0x0
 8058266: eb00 0081    	add.w	r0, r0, r1, lsl #2
 805826a: f7ff fffe    	bl	0x805826a <prvInitialiseTaskLists+0x26> @ imm = #-0x4
;     }
 805826e: e7ff         	b	0x8058270 <prvInitialiseTaskLists+0x2c> @ imm = #-0x2
;     for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8058270: 9803         	ldr	r0, [sp, #0xc]
 8058272: 3001         	adds	r0, #0x1
 8058274: 9003         	str	r0, [sp, #0xc]
 8058276: e7eb         	b	0x8058250 <prvInitialiseTaskLists+0xc> @ imm = #-0x2a
;     vListInitialise( &xDelayedTaskList1 );
 8058278: f240 0000    	movw	r0, #0x0
 805827c: f2c0 0000    	movt	r0, #0x0
 8058280: 9001         	str	r0, [sp, #0x4]
 8058282: f7ff fffe    	bl	0x8058282 <prvInitialiseTaskLists+0x3e> @ imm = #-0x4
;     vListInitialise( &xDelayedTaskList2 );
 8058286: f240 0000    	movw	r0, #0x0
 805828a: f2c0 0000    	movt	r0, #0x0
 805828e: 9002         	str	r0, [sp, #0x8]
 8058290: f7ff fffe    	bl	0x8058290 <prvInitialiseTaskLists+0x4c> @ imm = #-0x4
;     vListInitialise( &xPendingReadyList );
 8058294: f240 0000    	movw	r0, #0x0
 8058298: f2c0 0000    	movt	r0, #0x0
 805829c: f7ff fffe    	bl	0x805829c <prvInitialiseTaskLists+0x58> @ imm = #-0x4
;         vListInitialise( &xTasksWaitingTermination );
 80582a0: f240 0000    	movw	r0, #0x0
 80582a4: f2c0 0000    	movt	r0, #0x0
 80582a8: f7ff fffe    	bl	0x80582a8 <prvInitialiseTaskLists+0x64> @ imm = #-0x4
;         vListInitialise( &xSuspendedTaskList );
 80582ac: f240 0000    	movw	r0, #0x0
 80582b0: f2c0 0000    	movt	r0, #0x0
 80582b4: f7ff fffe    	bl	0x80582b4 <prvInitialiseTaskLists+0x70> @ imm = #-0x4
 80582b8: 9901         	ldr	r1, [sp, #0x4]
 80582ba: 9802         	ldr	r0, [sp, #0x8]
;     pxDelayedTaskList = &xDelayedTaskList1;
 80582bc: f240 0200    	movw	r2, #0x0
 80582c0: f2c0 0200    	movt	r2, #0x0
 80582c4: 6011         	str	r1, [r2]
;     pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80582c6: f240 0100    	movw	r1, #0x0
 80582ca: f2c0 0100    	movt	r1, #0x0
 80582ce: 6008         	str	r0, [r1]
; }
 80582d0: b004         	add	sp, #0x10
 80582d2: bd80         	pop	{r7, pc}

080582d4 <prvIdleTask>:
; {
 80582d4: b580         	push	{r7, lr}
 80582d6: 466f         	mov	r7, sp
 80582d8: b082         	sub	sp, #0x8
 80582da: 9001         	str	r0, [sp, #0x4]
;     for( ; configCONTROL_INFINITE_LOOP(); )
 80582dc: e7ff         	b	0x80582de <prvIdleTask+0xa> @ imm = #-0x2
;         prvCheckTasksWaitingTermination();
 80582de: f000 f80c    	bl	0x80582fa <prvCheckTasksWaitingTermination> @ imm = #0x18
;             if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) configNUMBER_OF_CORES )
 80582e2: f240 0000    	movw	r0, #0x0
 80582e6: f2c0 0000    	movt	r0, #0x0
 80582ea: 6800         	ldr	r0, [r0]
 80582ec: 2802         	cmp	r0, #0x2
 80582ee: d302         	blo	0x80582f6 <prvIdleTask+0x22> @ imm = #0x4
 80582f0: e7ff         	b	0x80582f2 <prvIdleTask+0x1e> @ imm = #-0x2
;                 taskYIELD();
 80582f2: df07         	svc	#0x7
;             }
 80582f4: e000         	b	0x80582f8 <prvIdleTask+0x24> @ imm = #0x0
 80582f6: e7ff         	b	0x80582f8 <prvIdleTask+0x24> @ imm = #-0x2
;     for( ; configCONTROL_INFINITE_LOOP(); )
 80582f8: e7f1         	b	0x80582de <prvIdleTask+0xa> @ imm = #-0x1e

080582fa <prvCheckTasksWaitingTermination>:
; {
 80582fa: b580         	push	{r7, lr}
 80582fc: 466f         	mov	r7, sp
 80582fe: b082         	sub	sp, #0x8
;         while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8058300: e7ff         	b	0x8058302 <prvCheckTasksWaitingTermination+0x8> @ imm = #-0x2
 8058302: f240 0000    	movw	r0, #0x0
 8058306: f2c0 0000    	movt	r0, #0x0
 805830a: 6800         	ldr	r0, [r0]
 805830c: b308         	cbz	r0, 0x8058352 <prvCheckTasksWaitingTermination+0x58> @ imm = #0x42
 805830e: e7ff         	b	0x8058310 <prvCheckTasksWaitingTermination+0x16> @ imm = #-0x2
;                 taskENTER_CRITICAL();
 8058310: f7ff fffe    	bl	0x8058310 <prvCheckTasksWaitingTermination+0x16> @ imm = #-0x4
;                         pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8058314: f240 0000    	movw	r0, #0x0
 8058318: f2c0 0000    	movt	r0, #0x0
 805831c: 68c0         	ldr	r0, [r0, #0xc]
 805831e: 68c0         	ldr	r0, [r0, #0xc]
 8058320: 9001         	str	r0, [sp, #0x4]
;                         ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8058322: 9801         	ldr	r0, [sp, #0x4]
 8058324: 3080         	adds	r0, #0x80
 8058326: f7ff fffe    	bl	0x8058326 <prvCheckTasksWaitingTermination+0x2c> @ imm = #-0x4
;                         --uxCurrentNumberOfTasks;
 805832a: f240 0100    	movw	r1, #0x0
 805832e: f2c0 0100    	movt	r1, #0x0
 8058332: 6808         	ldr	r0, [r1]
 8058334: 3801         	subs	r0, #0x1
 8058336: 6008         	str	r0, [r1]
;                         --uxDeletedTasksWaitingCleanUp;
 8058338: f240 0100    	movw	r1, #0x0
 805833c: f2c0 0100    	movt	r1, #0x0
 8058340: 6808         	ldr	r0, [r1]
 8058342: 3801         	subs	r0, #0x1
 8058344: 6008         	str	r0, [r1]
;                 taskEXIT_CRITICAL();
 8058346: f7ff fffe    	bl	0x8058346 <prvCheckTasksWaitingTermination+0x4c> @ imm = #-0x4
;                 prvDeleteTCB( pxTCB );
 805834a: 9801         	ldr	r0, [sp, #0x4]
 805834c: f7fd f99b    	bl	0x8055686 <prvDeleteTCB> @ imm = #-0x2cca
;         while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8058350: e7d7         	b	0x8058302 <prvCheckTasksWaitingTermination+0x8> @ imm = #-0x52
; }
 8058352: b002         	add	sp, #0x8
 8058354: bd80         	pop	{r7, pc}
 8058356: 0000         	movs	r0, r0

08058358 <xTimerCreateTimerTask>:
;     {
 8058358: b580         	push	{r7, lr}
 805835a: 466f         	mov	r7, sp
 805835c: b084         	sub	sp, #0x10
 805835e: 2000         	movs	r0, #0x0
;         BaseType_t xReturn = pdFAIL;
 8058360: 9003         	str	r0, [sp, #0xc]
;         prvCheckForValidListAndQueue();
 8058362: f000 f82b    	bl	0x80583bc <prvCheckForValidListAndQueue> @ imm = #0x56
;         if( xTimerQueue != NULL )
 8058366: f240 0000    	movw	r0, #0x0
 805836a: f2c0 0000    	movt	r0, #0x0
 805836e: 6800         	ldr	r0, [r0]
 8058370: b1c8         	cbz	r0, 0x80583a6 <xTimerCreateTimerTask+0x4e> @ imm = #0x32
 8058372: e7ff         	b	0x8058374 <xTimerCreateTimerTask+0x1c> @ imm = #-0x2
;                     xReturn = xTaskCreate( prvTimerTask,
 8058374: f240 0000    	movw	r0, #0x0
 8058378: f2c0 0000    	movt	r0, #0x0
 805837c: 4669         	mov	r1, sp
 805837e: 6048         	str	r0, [r1, #0x4]
 8058380: 2002         	movs	r0, #0x2
 8058382: f2c8 0000    	movt	r0, #0x8000
 8058386: 6008         	str	r0, [r1]
 8058388: f240 0000    	movw	r0, #0x0
 805838c: f2c0 0000    	movt	r0, #0x0
 8058390: f240 0100    	movw	r1, #0x0
 8058394: f2c0 0100    	movt	r1, #0x0
 8058398: f44f 7280    	mov.w	r2, #0x100
 805839c: 2300         	movs	r3, #0x0
 805839e: f7ff fffe    	bl	0x805839e <xTimerCreateTimerTask+0x46> @ imm = #-0x4
 80583a2: 9003         	str	r0, [sp, #0xc]
;         }
 80583a4: e000         	b	0x80583a8 <xTimerCreateTimerTask+0x50> @ imm = #0x0
 80583a6: e7ff         	b	0x80583a8 <xTimerCreateTimerTask+0x50> @ imm = #-0x2
;         configASSERT( xReturn );
 80583a8: 9803         	ldr	r0, [sp, #0xc]
 80583aa: b920         	cbnz	r0, 0x80583b6 <xTimerCreateTimerTask+0x5e> @ imm = #0x8
 80583ac: e7ff         	b	0x80583ae <xTimerCreateTimerTask+0x56> @ imm = #-0x2
 80583ae: f7ff fffe    	bl	0x80583ae <xTimerCreateTimerTask+0x56> @ imm = #-0x4
 80583b2: e7ff         	b	0x80583b4 <xTimerCreateTimerTask+0x5c> @ imm = #-0x2
 80583b4: e7fe         	b	0x80583b4 <xTimerCreateTimerTask+0x5c> @ imm = #-0x4
;         return xReturn;
 80583b6: 9803         	ldr	r0, [sp, #0xc]
 80583b8: b004         	add	sp, #0x10
 80583ba: bd80         	pop	{r7, pc}

080583bc <prvCheckForValidListAndQueue>:
;     {
 80583bc: b580         	push	{r7, lr}
 80583be: 466f         	mov	r7, sp
 80583c0: b082         	sub	sp, #0x8
;         taskENTER_CRITICAL();
 80583c2: f7ff fffe    	bl	0x80583c2 <prvCheckForValidListAndQueue+0x6> @ imm = #-0x4
;             if( xTimerQueue == NULL )
 80583c6: f240 0000    	movw	r0, #0x0
 80583ca: f2c0 0000    	movt	r0, #0x0
 80583ce: 6800         	ldr	r0, [r0]
 80583d0: bbb0         	cbnz	r0, 0x8058440 <prvCheckForValidListAndQueue+0x84> @ imm = #0x6c
 80583d2: e7ff         	b	0x80583d4 <prvCheckForValidListAndQueue+0x18> @ imm = #-0x2
;                 vListInitialise( &xActiveTimerList1 );
 80583d4: f240 0000    	movw	r0, #0x0
 80583d8: f2c0 0000    	movt	r0, #0x0
 80583dc: 9000         	str	r0, [sp]
 80583de: f7ff fffe    	bl	0x80583de <prvCheckForValidListAndQueue+0x22> @ imm = #-0x4
;                 vListInitialise( &xActiveTimerList2 );
 80583e2: f240 0000    	movw	r0, #0x0
 80583e6: f2c0 0000    	movt	r0, #0x0
 80583ea: 9001         	str	r0, [sp, #0x4]
 80583ec: f7ff fffe    	bl	0x80583ec <prvCheckForValidListAndQueue+0x30> @ imm = #-0x4
 80583f0: 9900         	ldr	r1, [sp]
 80583f2: 9801         	ldr	r0, [sp, #0x4]
;                 pxCurrentTimerList = &xActiveTimerList1;
 80583f4: f240 0200    	movw	r2, #0x0
 80583f8: f2c0 0200    	movt	r2, #0x0
 80583fc: 6011         	str	r1, [r2]
;                 pxOverflowTimerList = &xActiveTimerList2;
 80583fe: f240 0100    	movw	r1, #0x0
 8058402: f2c0 0100    	movt	r1, #0x0
 8058406: 6008         	str	r0, [r1]
 8058408: 200a         	movs	r0, #0xa
 805840a: 2110         	movs	r1, #0x10
 805840c: 2200         	movs	r2, #0x0
;                     xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 805840e: f7ff fffe    	bl	0x805840e <prvCheckForValidListAndQueue+0x52> @ imm = #-0x4
 8058412: 4601         	mov	r1, r0
 8058414: f240 0000    	movw	r0, #0x0
 8058418: f2c0 0000    	movt	r0, #0x0
 805841c: 6001         	str	r1, [r0]
;                     if( xTimerQueue != NULL )
 805841e: 6800         	ldr	r0, [r0]
 8058420: b160         	cbz	r0, 0x805843c <prvCheckForValidListAndQueue+0x80> @ imm = #0x18
 8058422: e7ff         	b	0x8058424 <prvCheckForValidListAndQueue+0x68> @ imm = #-0x2
;                         vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8058424: f240 0000    	movw	r0, #0x0
 8058428: f2c0 0000    	movt	r0, #0x0
 805842c: 6800         	ldr	r0, [r0]
 805842e: f240 0100    	movw	r1, #0x0
 8058432: f2c0 0100    	movt	r1, #0x0
 8058436: f7ff fffe    	bl	0x8058436 <prvCheckForValidListAndQueue+0x7a> @ imm = #-0x4
;                     }
 805843a: e000         	b	0x805843e <prvCheckForValidListAndQueue+0x82> @ imm = #0x0
 805843c: e7ff         	b	0x805843e <prvCheckForValidListAndQueue+0x82> @ imm = #-0x2
;             }
 805843e: e000         	b	0x8058442 <prvCheckForValidListAndQueue+0x86> @ imm = #0x0
 8058440: e7ff         	b	0x8058442 <prvCheckForValidListAndQueue+0x86> @ imm = #-0x2
;         taskEXIT_CRITICAL();
 8058442: f7ff fffe    	bl	0x8058442 <prvCheckForValidListAndQueue+0x86> @ imm = #-0x4
;     }
 8058446: b002         	add	sp, #0x8
 8058448: bd80         	pop	{r7, pc}

0805844a <prvTimerTask>:
;     {
 805844a: b580         	push	{r7, lr}
 805844c: 466f         	mov	r7, sp
 805844e: b084         	sub	sp, #0x10
 8058450: 9003         	str	r0, [sp, #0xc]
;         for( ; configCONTROL_INFINITE_LOOP(); )
 8058452: e7ff         	b	0x8058454 <prvTimerTask+0xa> @ imm = #-0x2
 8058454: a801         	add	r0, sp, #0x4
;             xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8058456: f000 fa27    	bl	0x80588a8 <prvGetNextExpireTime> @ imm = #0x44e
 805845a: 9002         	str	r0, [sp, #0x8]
;             prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 805845c: 9802         	ldr	r0, [sp, #0x8]
 805845e: 9901         	ldr	r1, [sp, #0x4]
 8058460: f000 fa42    	bl	0x80588e8 <prvProcessTimerOrBlockTask> @ imm = #0x484
;             prvProcessReceivedCommands();
 8058464: f000 fa86    	bl	0x8058974 <prvProcessReceivedCommands> @ imm = #0x50c
;         for( ; configCONTROL_INFINITE_LOOP(); )
 8058468: e7f4         	b	0x8058454 <prvTimerTask+0xa> @ imm = #-0x18

0805846a <xTimerCreate>:
;         {
 805846a: b5d0         	push	{r4, r6, r7, lr}
 805846c: af02         	add	r7, sp, #0x8
 805846e: b088         	sub	sp, #0x20
 8058470: f8d7 c008    	ldr.w	r12, [r7, #0x8]
 8058474: 9007         	str	r0, [sp, #0x1c]
 8058476: 9106         	str	r1, [sp, #0x18]
 8058478: 9205         	str	r2, [sp, #0x14]
 805847a: 9304         	str	r3, [sp, #0x10]
 805847c: 202c         	movs	r0, #0x2c
;             pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's name. */
 805847e: f7ff fffe    	bl	0x805847e <xTimerCreate+0x14> @ imm = #-0x4
 8058482: 9003         	str	r0, [sp, #0xc]
;             if( pxNewTimer != NULL )
 8058484: 9803         	ldr	r0, [sp, #0xc]
 8058486: b198         	cbz	r0, 0x80584b0 <xTimerCreate+0x46> @ imm = #0x26
 8058488: e7ff         	b	0x805848a <xTimerCreate+0x20> @ imm = #-0x2
;                 pxNewTimer->ucStatus = 0x00;
 805848a: 9903         	ldr	r1, [sp, #0xc]
 805848c: 2000         	movs	r0, #0x0
 805848e: f881 0028    	strb.w	r0, [r1, #0x28]
;                 prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, xAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8058492: 9807         	ldr	r0, [sp, #0x1c]
 8058494: 9906         	ldr	r1, [sp, #0x18]
 8058496: 9a05         	ldr	r2, [sp, #0x14]
 8058498: 9b04         	ldr	r3, [sp, #0x10]
 805849a: f8d7 c008    	ldr.w	r12, [r7, #0x8]
 805849e: 9c03         	ldr	r4, [sp, #0xc]
 80584a0: 46ee         	mov	lr, sp
 80584a2: f8ce 4004    	str.w	r4, [lr, #0x4]
 80584a6: f8ce c000    	str.w	r12, [lr]
 80584aa: f000 f804    	bl	0x80584b6 <prvInitialiseNewTimer> @ imm = #0x8
;             }
 80584ae: e7ff         	b	0x80584b0 <xTimerCreate+0x46> @ imm = #-0x2
;             return pxNewTimer;
 80584b0: 9803         	ldr	r0, [sp, #0xc]
 80584b2: b008         	add	sp, #0x20
 80584b4: bdd0         	pop	{r4, r6, r7, pc}

080584b6 <prvInitialiseNewTimer>:
;     {
 80584b6: b580         	push	{r7, lr}
 80584b8: 466f         	mov	r7, sp
 80584ba: b084         	sub	sp, #0x10
 80584bc: f8d7 c00c    	ldr.w	r12, [r7, #0xc]
 80584c0: f8d7 c008    	ldr.w	r12, [r7, #0x8]
 80584c4: 9003         	str	r0, [sp, #0xc]
 80584c6: 9102         	str	r1, [sp, #0x8]
 80584c8: 9201         	str	r2, [sp, #0x4]
 80584ca: 9300         	str	r3, [sp]
;         configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80584cc: 9802         	ldr	r0, [sp, #0x8]
 80584ce: b920         	cbnz	r0, 0x80584da <prvInitialiseNewTimer+0x24> @ imm = #0x8
 80584d0: e7ff         	b	0x80584d2 <prvInitialiseNewTimer+0x1c> @ imm = #-0x2
 80584d2: f7ff fffe    	bl	0x80584d2 <prvInitialiseNewTimer+0x1c> @ imm = #-0x4
 80584d6: e7ff         	b	0x80584d8 <prvInitialiseNewTimer+0x22> @ imm = #-0x2
 80584d8: e7fe         	b	0x80584d8 <prvInitialiseNewTimer+0x22> @ imm = #-0x4
;         prvCheckForValidListAndQueue();
 80584da: f7ff ff6f    	bl	0x80583bc <prvCheckForValidListAndQueue> @ imm = #-0x122
;         pxNewTimer->pcTimerName = pcTimerName;
 80584de: 9803         	ldr	r0, [sp, #0xc]
 80584e0: 68f9         	ldr	r1, [r7, #0xc]
 80584e2: 6008         	str	r0, [r1]
;         pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80584e4: 9802         	ldr	r0, [sp, #0x8]
 80584e6: 68f9         	ldr	r1, [r7, #0xc]
 80584e8: 6188         	str	r0, [r1, #0x18]
;         pxNewTimer->pvTimerID = pvTimerID;
 80584ea: 9800         	ldr	r0, [sp]
 80584ec: 68f9         	ldr	r1, [r7, #0xc]
 80584ee: 61c8         	str	r0, [r1, #0x1c]
;         pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80584f0: 68b8         	ldr	r0, [r7, #0x8]
 80584f2: 68f9         	ldr	r1, [r7, #0xc]
 80584f4: 6208         	str	r0, [r1, #0x20]
;         vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80584f6: 68f8         	ldr	r0, [r7, #0xc]
 80584f8: 3004         	adds	r0, #0x4
 80584fa: f7ff fffe    	bl	0x80584fa <prvInitialiseNewTimer+0x44> @ imm = #-0x4
;         if( xAutoReload != pdFALSE )
 80584fe: 9801         	ldr	r0, [sp, #0x4]
 8058500: b140         	cbz	r0, 0x8058514 <prvInitialiseNewTimer+0x5e> @ imm = #0x10
 8058502: e7ff         	b	0x8058504 <prvInitialiseNewTimer+0x4e> @ imm = #-0x2
;             pxNewTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_AUTORELOAD;
 8058504: 68f9         	ldr	r1, [r7, #0xc]
 8058506: f891 0028    	ldrb.w	r0, [r1, #0x28]
 805850a: f040 0004    	orr	r0, r0, #0x4
 805850e: f881 0028    	strb.w	r0, [r1, #0x28]
;         }
 8058512: e7ff         	b	0x8058514 <prvInitialiseNewTimer+0x5e> @ imm = #-0x2
;     }
 8058514: b004         	add	sp, #0x10
 8058516: bd80         	pop	{r7, pc}

08058518 <xTimerGenericCommandFromTask>:
;     {
 8058518: b580         	push	{r7, lr}
 805851a: 466f         	mov	r7, sp
 805851c: b08a         	sub	sp, #0x28
 805851e: f8d7 c008    	ldr.w	r12, [r7, #0x8]
 8058522: 9009         	str	r0, [sp, #0x24]
 8058524: 9108         	str	r1, [sp, #0x20]
 8058526: 9207         	str	r2, [sp, #0x1c]
 8058528: 9306         	str	r3, [sp, #0x18]
 805852a: 2000         	movs	r0, #0x0
;         BaseType_t xReturn = pdFAIL;
 805852c: 9005         	str	r0, [sp, #0x14]
;         configASSERT( xTimer );
 805852e: 9809         	ldr	r0, [sp, #0x24]
 8058530: b920         	cbnz	r0, 0x805853c <xTimerGenericCommandFromTask+0x24> @ imm = #0x8
 8058532: e7ff         	b	0x8058534 <xTimerGenericCommandFromTask+0x1c> @ imm = #-0x2
 8058534: f7ff fffe    	bl	0x8058534 <xTimerGenericCommandFromTask+0x1c> @ imm = #-0x4
 8058538: e7ff         	b	0x805853a <xTimerGenericCommandFromTask+0x22> @ imm = #-0x2
 805853a: e7fe         	b	0x805853a <xTimerGenericCommandFromTask+0x22> @ imm = #-0x4
;         if( xTimerQueue != NULL )
 805853c: f240 0000    	movw	r0, #0x0
 8058540: f2c0 0000    	movt	r0, #0x0
 8058544: 6800         	ldr	r0, [r0]
 8058546: b388         	cbz	r0, 0x80585ac <xTimerGenericCommandFromTask+0x94> @ imm = #0x62
 8058548: e7ff         	b	0x805854a <xTimerGenericCommandFromTask+0x32> @ imm = #-0x2
;             xMessage.xMessageID = xCommandID;
 805854a: 9808         	ldr	r0, [sp, #0x20]
 805854c: 9001         	str	r0, [sp, #0x4]
;             xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 805854e: 9807         	ldr	r0, [sp, #0x1c]
 8058550: 9002         	str	r0, [sp, #0x8]
;             xMessage.u.xTimerParameters.pxTimer = xTimer;
 8058552: 9809         	ldr	r0, [sp, #0x24]
 8058554: 9003         	str	r0, [sp, #0xc]
;             configASSERT( xCommandID < tmrFIRST_FROM_ISR_COMMAND );
 8058556: 9808         	ldr	r0, [sp, #0x20]
 8058558: 2806         	cmp	r0, #0x6
 805855a: db04         	blt	0x8058566 <xTimerGenericCommandFromTask+0x4e> @ imm = #0x8
 805855c: e7ff         	b	0x805855e <xTimerGenericCommandFromTask+0x46> @ imm = #-0x2
 805855e: f7ff fffe    	bl	0x805855e <xTimerGenericCommandFromTask+0x46> @ imm = #-0x4
 8058562: e7ff         	b	0x8058564 <xTimerGenericCommandFromTask+0x4c> @ imm = #-0x2
 8058564: e7fe         	b	0x8058564 <xTimerGenericCommandFromTask+0x4c> @ imm = #-0x4
;             if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8058566: 9808         	ldr	r0, [sp, #0x20]
 8058568: 2805         	cmp	r0, #0x5
 805856a: dc1e         	bgt	0x80585aa <xTimerGenericCommandFromTask+0x92> @ imm = #0x3c
 805856c: e7ff         	b	0x805856e <xTimerGenericCommandFromTask+0x56> @ imm = #-0x2
;                 if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 805856e: f7ff fffe    	bl	0x805856e <xTimerGenericCommandFromTask+0x56> @ imm = #-0x4
 8058572: 2802         	cmp	r0, #0x2
 8058574: d10c         	bne	0x8058590 <xTimerGenericCommandFromTask+0x78> @ imm = #0x18
 8058576: e7ff         	b	0x8058578 <xTimerGenericCommandFromTask+0x60> @ imm = #-0x2
;                     xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8058578: f240 0000    	movw	r0, #0x0
 805857c: f2c0 0000    	movt	r0, #0x0
 8058580: 6800         	ldr	r0, [r0]
 8058582: 68ba         	ldr	r2, [r7, #0x8]
 8058584: a901         	add	r1, sp, #0x4
 8058586: 2300         	movs	r3, #0x0
 8058588: f7ff fffe    	bl	0x8058588 <xTimerGenericCommandFromTask+0x70> @ imm = #-0x4
 805858c: 9005         	str	r0, [sp, #0x14]
;                 }
 805858e: e00b         	b	0x80585a8 <xTimerGenericCommandFromTask+0x90> @ imm = #0x16
;                     xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8058590: f240 0000    	movw	r0, #0x0
 8058594: f2c0 0000    	movt	r0, #0x0
 8058598: 6800         	ldr	r0, [r0]
 805859a: a901         	add	r1, sp, #0x4
 805859c: 2300         	movs	r3, #0x0
 805859e: 461a         	mov	r2, r3
 80585a0: f7ff fffe    	bl	0x80585a0 <xTimerGenericCommandFromTask+0x88> @ imm = #-0x4
 80585a4: 9005         	str	r0, [sp, #0x14]
 80585a6: e7ff         	b	0x80585a8 <xTimerGenericCommandFromTask+0x90> @ imm = #-0x2
;             }
 80585a8: e7ff         	b	0x80585aa <xTimerGenericCommandFromTask+0x92> @ imm = #-0x2
;         }
 80585aa: e000         	b	0x80585ae <xTimerGenericCommandFromTask+0x96> @ imm = #0x0
 80585ac: e7ff         	b	0x80585ae <xTimerGenericCommandFromTask+0x96> @ imm = #-0x2
;         return xReturn;
 80585ae: 9805         	ldr	r0, [sp, #0x14]
 80585b0: b00a         	add	sp, #0x28
 80585b2: bd80         	pop	{r7, pc}

080585b4 <xTimerGenericCommandFromISR>:
;     {
 80585b4: b580         	push	{r7, lr}
 80585b6: 466f         	mov	r7, sp
 80585b8: b08a         	sub	sp, #0x28
 80585ba: f8d7 c008    	ldr.w	r12, [r7, #0x8]
 80585be: 9009         	str	r0, [sp, #0x24]
 80585c0: 9108         	str	r1, [sp, #0x20]
 80585c2: 9207         	str	r2, [sp, #0x1c]
 80585c4: 9306         	str	r3, [sp, #0x18]
 80585c6: 2000         	movs	r0, #0x0
;         BaseType_t xReturn = pdFAIL;
 80585c8: 9005         	str	r0, [sp, #0x14]
;         configASSERT( xTimer );
 80585ca: 9809         	ldr	r0, [sp, #0x24]
 80585cc: b920         	cbnz	r0, 0x80585d8 <xTimerGenericCommandFromISR+0x24> @ imm = #0x8
 80585ce: e7ff         	b	0x80585d0 <xTimerGenericCommandFromISR+0x1c> @ imm = #-0x2
 80585d0: f7ff fffe    	bl	0x80585d0 <xTimerGenericCommandFromISR+0x1c> @ imm = #-0x4
 80585d4: e7ff         	b	0x80585d6 <xTimerGenericCommandFromISR+0x22> @ imm = #-0x2
 80585d6: e7fe         	b	0x80585d6 <xTimerGenericCommandFromISR+0x22> @ imm = #-0x4
;         if( xTimerQueue != NULL )
 80585d8: f240 0000    	movw	r0, #0x0
 80585dc: f2c0 0000    	movt	r0, #0x0
 80585e0: 6800         	ldr	r0, [r0]
 80585e2: b1f8         	cbz	r0, 0x8058624 <xTimerGenericCommandFromISR+0x70> @ imm = #0x3e
 80585e4: e7ff         	b	0x80585e6 <xTimerGenericCommandFromISR+0x32> @ imm = #-0x2
;             xMessage.xMessageID = xCommandID;
 80585e6: 9808         	ldr	r0, [sp, #0x20]
 80585e8: 9001         	str	r0, [sp, #0x4]
;             xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80585ea: 9807         	ldr	r0, [sp, #0x1c]
 80585ec: 9002         	str	r0, [sp, #0x8]
;             xMessage.u.xTimerParameters.pxTimer = xTimer;
 80585ee: 9809         	ldr	r0, [sp, #0x24]
 80585f0: 9003         	str	r0, [sp, #0xc]
;             configASSERT( xCommandID >= tmrFIRST_FROM_ISR_COMMAND );
 80585f2: 9808         	ldr	r0, [sp, #0x20]
 80585f4: 2805         	cmp	r0, #0x5
 80585f6: dc04         	bgt	0x8058602 <xTimerGenericCommandFromISR+0x4e> @ imm = #0x8
 80585f8: e7ff         	b	0x80585fa <xTimerGenericCommandFromISR+0x46> @ imm = #-0x2
 80585fa: f7ff fffe    	bl	0x80585fa <xTimerGenericCommandFromISR+0x46> @ imm = #-0x4
 80585fe: e7ff         	b	0x8058600 <xTimerGenericCommandFromISR+0x4c> @ imm = #-0x2
 8058600: e7fe         	b	0x8058600 <xTimerGenericCommandFromISR+0x4c> @ imm = #-0x4
;             if( xCommandID >= tmrFIRST_FROM_ISR_COMMAND )
 8058602: 9808         	ldr	r0, [sp, #0x20]
 8058604: 2806         	cmp	r0, #0x6
 8058606: db0c         	blt	0x8058622 <xTimerGenericCommandFromISR+0x6e> @ imm = #0x18
 8058608: e7ff         	b	0x805860a <xTimerGenericCommandFromISR+0x56> @ imm = #-0x2
;                 xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 805860a: f240 0000    	movw	r0, #0x0
 805860e: f2c0 0000    	movt	r0, #0x0
 8058612: 6800         	ldr	r0, [r0]
 8058614: 9a06         	ldr	r2, [sp, #0x18]
 8058616: a901         	add	r1, sp, #0x4
 8058618: 2300         	movs	r3, #0x0
 805861a: f7ff fffe    	bl	0x805861a <xTimerGenericCommandFromISR+0x66> @ imm = #-0x4
 805861e: 9005         	str	r0, [sp, #0x14]
;             }
 8058620: e7ff         	b	0x8058622 <xTimerGenericCommandFromISR+0x6e> @ imm = #-0x2
;         }
 8058622: e000         	b	0x8058626 <xTimerGenericCommandFromISR+0x72> @ imm = #0x0
 8058624: e7ff         	b	0x8058626 <xTimerGenericCommandFromISR+0x72> @ imm = #-0x2
;         return xReturn;
 8058626: 9805         	ldr	r0, [sp, #0x14]
 8058628: b00a         	add	sp, #0x28
 805862a: bd80         	pop	{r7, pc}

0805862c <xTimerGetTimerDaemonTaskHandle>:
;     {
 805862c: b580         	push	{r7, lr}
 805862e: 466f         	mov	r7, sp
;         configASSERT( ( xTimerTaskHandle != NULL ) );
 8058630: f240 0000    	movw	r0, #0x0
 8058634: f2c0 0000    	movt	r0, #0x0
 8058638: 6800         	ldr	r0, [r0]
 805863a: b920         	cbnz	r0, 0x8058646 <xTimerGetTimerDaemonTaskHandle+0x1a> @ imm = #0x8
 805863c: e7ff         	b	0x805863e <xTimerGetTimerDaemonTaskHandle+0x12> @ imm = #-0x2
 805863e: f7ff fffe    	bl	0x805863e <xTimerGetTimerDaemonTaskHandle+0x12> @ imm = #-0x4
 8058642: e7ff         	b	0x8058644 <xTimerGetTimerDaemonTaskHandle+0x18> @ imm = #-0x2
 8058644: e7fe         	b	0x8058644 <xTimerGetTimerDaemonTaskHandle+0x18> @ imm = #-0x4
;         return xTimerTaskHandle;
 8058646: f240 0000    	movw	r0, #0x0
 805864a: f2c0 0000    	movt	r0, #0x0
 805864e: 6800         	ldr	r0, [r0]
 8058650: bd80         	pop	{r7, pc}

08058652 <xTimerGetPeriod>:
;     {
 8058652: b580         	push	{r7, lr}
 8058654: 466f         	mov	r7, sp
 8058656: b082         	sub	sp, #0x8
 8058658: 9001         	str	r0, [sp, #0x4]
;         Timer_t * pxTimer = xTimer;
 805865a: 9801         	ldr	r0, [sp, #0x4]
 805865c: 9000         	str	r0, [sp]
;         configASSERT( xTimer );
 805865e: 9801         	ldr	r0, [sp, #0x4]
 8058660: b920         	cbnz	r0, 0x805866c <xTimerGetPeriod+0x1a> @ imm = #0x8
 8058662: e7ff         	b	0x8058664 <xTimerGetPeriod+0x12> @ imm = #-0x2
 8058664: f7ff fffe    	bl	0x8058664 <xTimerGetPeriod+0x12> @ imm = #-0x4
 8058668: e7ff         	b	0x805866a <xTimerGetPeriod+0x18> @ imm = #-0x2
 805866a: e7fe         	b	0x805866a <xTimerGetPeriod+0x18> @ imm = #-0x4
;         return pxTimer->xTimerPeriodInTicks;
 805866c: 9800         	ldr	r0, [sp]
 805866e: 6980         	ldr	r0, [r0, #0x18]
 8058670: b002         	add	sp, #0x8
 8058672: bd80         	pop	{r7, pc}

08058674 <vTimerSetReloadMode>:
;     {
 8058674: b580         	push	{r7, lr}
 8058676: 466f         	mov	r7, sp
 8058678: b084         	sub	sp, #0x10
 805867a: 9003         	str	r0, [sp, #0xc]
 805867c: 9102         	str	r1, [sp, #0x8]
;         Timer_t * pxTimer = xTimer;
 805867e: 9803         	ldr	r0, [sp, #0xc]
 8058680: 9001         	str	r0, [sp, #0x4]
;         configASSERT( xTimer );
 8058682: 9803         	ldr	r0, [sp, #0xc]
 8058684: b920         	cbnz	r0, 0x8058690 <vTimerSetReloadMode+0x1c> @ imm = #0x8
 8058686: e7ff         	b	0x8058688 <vTimerSetReloadMode+0x14> @ imm = #-0x2
 8058688: f7ff fffe    	bl	0x8058688 <vTimerSetReloadMode+0x14> @ imm = #-0x4
 805868c: e7ff         	b	0x805868e <vTimerSetReloadMode+0x1a> @ imm = #-0x2
 805868e: e7fe         	b	0x805868e <vTimerSetReloadMode+0x1a> @ imm = #-0x4
;         taskENTER_CRITICAL();
 8058690: f7ff fffe    	bl	0x8058690 <vTimerSetReloadMode+0x1c> @ imm = #-0x4
;             if( xAutoReload != pdFALSE )
 8058694: 9802         	ldr	r0, [sp, #0x8]
 8058696: b140         	cbz	r0, 0x80586aa <vTimerSetReloadMode+0x36> @ imm = #0x10
 8058698: e7ff         	b	0x805869a <vTimerSetReloadMode+0x26> @ imm = #-0x2
;                 pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_AUTORELOAD;
 805869a: 9901         	ldr	r1, [sp, #0x4]
 805869c: f891 0028    	ldrb.w	r0, [r1, #0x28]
 80586a0: f040 0004    	orr	r0, r0, #0x4
 80586a4: f881 0028    	strb.w	r0, [r1, #0x28]
;             }
 80586a8: e007         	b	0x80586ba <vTimerSetReloadMode+0x46> @ imm = #0xe
;                 pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_AUTORELOAD );
 80586aa: 9901         	ldr	r1, [sp, #0x4]
 80586ac: f891 0028    	ldrb.w	r0, [r1, #0x28]
 80586b0: f000 00fb    	and	r0, r0, #0xfb
 80586b4: f881 0028    	strb.w	r0, [r1, #0x28]
 80586b8: e7ff         	b	0x80586ba <vTimerSetReloadMode+0x46> @ imm = #-0x2
;         taskEXIT_CRITICAL();
 80586ba: f7ff fffe    	bl	0x80586ba <vTimerSetReloadMode+0x46> @ imm = #-0x4
;     }
 80586be: b004         	add	sp, #0x10
 80586c0: bd80         	pop	{r7, pc}

080586c2 <xTimerGetReloadMode>:
;     {
 80586c2: b580         	push	{r7, lr}
 80586c4: 466f         	mov	r7, sp
 80586c6: b084         	sub	sp, #0x10
 80586c8: 9003         	str	r0, [sp, #0xc]
;         Timer_t * pxTimer = xTimer;
 80586ca: 9803         	ldr	r0, [sp, #0xc]
 80586cc: 9002         	str	r0, [sp, #0x8]
;         configASSERT( xTimer );
 80586ce: 9803         	ldr	r0, [sp, #0xc]
 80586d0: b920         	cbnz	r0, 0x80586dc <xTimerGetReloadMode+0x1a> @ imm = #0x8
 80586d2: e7ff         	b	0x80586d4 <xTimerGetReloadMode+0x12> @ imm = #-0x2
 80586d4: f7ff fffe    	bl	0x80586d4 <xTimerGetReloadMode+0x12> @ imm = #-0x4
 80586d8: e7ff         	b	0x80586da <xTimerGetReloadMode+0x18> @ imm = #-0x2
 80586da: e7fe         	b	0x80586da <xTimerGetReloadMode+0x18> @ imm = #-0x4
;         taskENTER_CRITICAL();
 80586dc: f7ff fffe    	bl	0x80586dc <xTimerGetReloadMode+0x1a> @ imm = #-0x4
;             if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) == 0 )
 80586e0: 9802         	ldr	r0, [sp, #0x8]
 80586e2: f890 0028    	ldrb.w	r0, [r0, #0x28]
 80586e6: 0740         	lsls	r0, r0, #0x1d
 80586e8: 2800         	cmp	r0, #0x0
 80586ea: d403         	bmi	0x80586f4 <xTimerGetReloadMode+0x32> @ imm = #0x6
 80586ec: e7ff         	b	0x80586ee <xTimerGetReloadMode+0x2c> @ imm = #-0x2
 80586ee: 2000         	movs	r0, #0x0
;                 xReturn = pdFALSE;
 80586f0: 9001         	str	r0, [sp, #0x4]
;             }
 80586f2: e002         	b	0x80586fa <xTimerGetReloadMode+0x38> @ imm = #0x4
 80586f4: 2001         	movs	r0, #0x1
;                 xReturn = pdTRUE;
 80586f6: 9001         	str	r0, [sp, #0x4]
 80586f8: e7ff         	b	0x80586fa <xTimerGetReloadMode+0x38> @ imm = #-0x2
;         taskEXIT_CRITICAL();
 80586fa: f7ff fffe    	bl	0x80586fa <xTimerGetReloadMode+0x38> @ imm = #-0x4
;         return xReturn;
 80586fe: 9801         	ldr	r0, [sp, #0x4]
 8058700: b004         	add	sp, #0x10
 8058702: bd80         	pop	{r7, pc}

08058704 <uxTimerGetReloadMode>:
;     {
 8058704: b580         	push	{r7, lr}
 8058706: 466f         	mov	r7, sp
 8058708: b082         	sub	sp, #0x8
 805870a: 9001         	str	r0, [sp, #0x4]
;         uxReturn = ( UBaseType_t ) xTimerGetReloadMode( xTimer );
 805870c: 9801         	ldr	r0, [sp, #0x4]
 805870e: f7ff fffe    	bl	0x805870e <uxTimerGetReloadMode+0xa> @ imm = #-0x4
 8058712: 9000         	str	r0, [sp]
;         return uxReturn;
 8058714: 9800         	ldr	r0, [sp]
 8058716: b002         	add	sp, #0x8
 8058718: bd80         	pop	{r7, pc}

0805871a <xTimerGetExpiryTime>:
;     {
 805871a: b580         	push	{r7, lr}
 805871c: 466f         	mov	r7, sp
 805871e: b084         	sub	sp, #0x10
 8058720: 9003         	str	r0, [sp, #0xc]
;         Timer_t * pxTimer = xTimer;
 8058722: 9803         	ldr	r0, [sp, #0xc]
 8058724: 9002         	str	r0, [sp, #0x8]
;         configASSERT( xTimer );
 8058726: 9803         	ldr	r0, [sp, #0xc]
 8058728: b920         	cbnz	r0, 0x8058734 <xTimerGetExpiryTime+0x1a> @ imm = #0x8
 805872a: e7ff         	b	0x805872c <xTimerGetExpiryTime+0x12> @ imm = #-0x2
 805872c: f7ff fffe    	bl	0x805872c <xTimerGetExpiryTime+0x12> @ imm = #-0x4
 8058730: e7ff         	b	0x8058732 <xTimerGetExpiryTime+0x18> @ imm = #-0x2
 8058732: e7fe         	b	0x8058732 <xTimerGetExpiryTime+0x18> @ imm = #-0x4
;         xReturn = listGET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ) );
 8058734: 9802         	ldr	r0, [sp, #0x8]
 8058736: 6840         	ldr	r0, [r0, #0x4]
 8058738: 9001         	str	r0, [sp, #0x4]
;         return xReturn;
 805873a: 9801         	ldr	r0, [sp, #0x4]
 805873c: b004         	add	sp, #0x10
 805873e: bd80         	pop	{r7, pc}

08058740 <pcTimerGetName>:
;     {
 8058740: b580         	push	{r7, lr}
 8058742: 466f         	mov	r7, sp
 8058744: b082         	sub	sp, #0x8
 8058746: 9001         	str	r0, [sp, #0x4]
;         Timer_t * pxTimer = xTimer;
 8058748: 9801         	ldr	r0, [sp, #0x4]
 805874a: 9000         	str	r0, [sp]
;         configASSERT( xTimer );
 805874c: 9801         	ldr	r0, [sp, #0x4]
 805874e: b920         	cbnz	r0, 0x805875a <pcTimerGetName+0x1a> @ imm = #0x8
 8058750: e7ff         	b	0x8058752 <pcTimerGetName+0x12> @ imm = #-0x2
 8058752: f7ff fffe    	bl	0x8058752 <pcTimerGetName+0x12> @ imm = #-0x4
 8058756: e7ff         	b	0x8058758 <pcTimerGetName+0x18> @ imm = #-0x2
 8058758: e7fe         	b	0x8058758 <pcTimerGetName+0x18> @ imm = #-0x4
;         return pxTimer->pcTimerName;
 805875a: 9800         	ldr	r0, [sp]
 805875c: 6800         	ldr	r0, [r0]
 805875e: b002         	add	sp, #0x8
 8058760: bd80         	pop	{r7, pc}

08058762 <xTimerIsTimerActive>:
;     {
 8058762: b580         	push	{r7, lr}
 8058764: 466f         	mov	r7, sp
 8058766: b084         	sub	sp, #0x10
 8058768: 9003         	str	r0, [sp, #0xc]
;         Timer_t * pxTimer = xTimer;
 805876a: 9803         	ldr	r0, [sp, #0xc]
 805876c: 9001         	str	r0, [sp, #0x4]
;         configASSERT( xTimer );
 805876e: 9803         	ldr	r0, [sp, #0xc]
 8058770: b920         	cbnz	r0, 0x805877c <xTimerIsTimerActive+0x1a> @ imm = #0x8
 8058772: e7ff         	b	0x8058774 <xTimerIsTimerActive+0x12> @ imm = #-0x2
 8058774: f7ff fffe    	bl	0x8058774 <xTimerIsTimerActive+0x12> @ imm = #-0x4
 8058778: e7ff         	b	0x805877a <xTimerIsTimerActive+0x18> @ imm = #-0x2
 805877a: e7fe         	b	0x805877a <xTimerIsTimerActive+0x18> @ imm = #-0x4
;         taskENTER_CRITICAL();
 805877c: f7ff fffe    	bl	0x805877c <xTimerIsTimerActive+0x1a> @ imm = #-0x4
;             if( ( pxTimer->ucStatus & tmrSTATUS_IS_ACTIVE ) == 0 )
 8058780: 9801         	ldr	r0, [sp, #0x4]
 8058782: f890 0028    	ldrb.w	r0, [r0, #0x28]
 8058786: 07c0         	lsls	r0, r0, #0x1f
 8058788: b918         	cbnz	r0, 0x8058792 <xTimerIsTimerActive+0x30> @ imm = #0x6
 805878a: e7ff         	b	0x805878c <xTimerIsTimerActive+0x2a> @ imm = #-0x2
 805878c: 2000         	movs	r0, #0x0
;                 xReturn = pdFALSE;
 805878e: 9002         	str	r0, [sp, #0x8]
;             }
 8058790: e002         	b	0x8058798 <xTimerIsTimerActive+0x36> @ imm = #0x4
 8058792: 2001         	movs	r0, #0x1
;                 xReturn = pdTRUE;
 8058794: 9002         	str	r0, [sp, #0x8]
 8058796: e7ff         	b	0x8058798 <xTimerIsTimerActive+0x36> @ imm = #-0x2
;         taskEXIT_CRITICAL();
 8058798: f7ff fffe    	bl	0x8058798 <xTimerIsTimerActive+0x36> @ imm = #-0x4
;         return xReturn;
 805879c: 9802         	ldr	r0, [sp, #0x8]
 805879e: b004         	add	sp, #0x10
 80587a0: bd80         	pop	{r7, pc}

080587a2 <pvTimerGetTimerID>:
;     {
 80587a2: b580         	push	{r7, lr}
 80587a4: 466f         	mov	r7, sp
 80587a6: b084         	sub	sp, #0x10
 80587a8: 9003         	str	r0, [sp, #0xc]
;         Timer_t * const pxTimer = xTimer;
 80587aa: 9803         	ldr	r0, [sp, #0xc]
 80587ac: 9002         	str	r0, [sp, #0x8]
;         configASSERT( xTimer );
 80587ae: 9803         	ldr	r0, [sp, #0xc]
 80587b0: b920         	cbnz	r0, 0x80587bc <pvTimerGetTimerID+0x1a> @ imm = #0x8
 80587b2: e7ff         	b	0x80587b4 <pvTimerGetTimerID+0x12> @ imm = #-0x2
 80587b4: f7ff fffe    	bl	0x80587b4 <pvTimerGetTimerID+0x12> @ imm = #-0x4
 80587b8: e7ff         	b	0x80587ba <pvTimerGetTimerID+0x18> @ imm = #-0x2
 80587ba: e7fe         	b	0x80587ba <pvTimerGetTimerID+0x18> @ imm = #-0x4
;         taskENTER_CRITICAL();
 80587bc: f7ff fffe    	bl	0x80587bc <pvTimerGetTimerID+0x1a> @ imm = #-0x4
;             pvReturn = pxTimer->pvTimerID;
 80587c0: 9802         	ldr	r0, [sp, #0x8]
 80587c2: 69c0         	ldr	r0, [r0, #0x1c]
 80587c4: 9001         	str	r0, [sp, #0x4]
;         taskEXIT_CRITICAL();
 80587c6: f7ff fffe    	bl	0x80587c6 <pvTimerGetTimerID+0x24> @ imm = #-0x4
;         return pvReturn;
 80587ca: 9801         	ldr	r0, [sp, #0x4]
 80587cc: b004         	add	sp, #0x10
 80587ce: bd80         	pop	{r7, pc}

080587d0 <vTimerSetTimerID>:
;     {
 80587d0: b580         	push	{r7, lr}
 80587d2: 466f         	mov	r7, sp
 80587d4: b084         	sub	sp, #0x10
 80587d6: 9003         	str	r0, [sp, #0xc]
 80587d8: 9102         	str	r1, [sp, #0x8]
;         Timer_t * const pxTimer = xTimer;
 80587da: 9803         	ldr	r0, [sp, #0xc]
 80587dc: 9001         	str	r0, [sp, #0x4]
;         configASSERT( xTimer );
 80587de: 9803         	ldr	r0, [sp, #0xc]
 80587e0: b920         	cbnz	r0, 0x80587ec <vTimerSetTimerID+0x1c> @ imm = #0x8
 80587e2: e7ff         	b	0x80587e4 <vTimerSetTimerID+0x14> @ imm = #-0x2
 80587e4: f7ff fffe    	bl	0x80587e4 <vTimerSetTimerID+0x14> @ imm = #-0x4
 80587e8: e7ff         	b	0x80587ea <vTimerSetTimerID+0x1a> @ imm = #-0x2
 80587ea: e7fe         	b	0x80587ea <vTimerSetTimerID+0x1a> @ imm = #-0x4
;         taskENTER_CRITICAL();
 80587ec: f7ff fffe    	bl	0x80587ec <vTimerSetTimerID+0x1c> @ imm = #-0x4
;             pxTimer->pvTimerID = pvNewID;
 80587f0: 9802         	ldr	r0, [sp, #0x8]
 80587f2: 9901         	ldr	r1, [sp, #0x4]
 80587f4: 61c8         	str	r0, [r1, #0x1c]
;         taskEXIT_CRITICAL();
 80587f6: f7ff fffe    	bl	0x80587f6 <vTimerSetTimerID+0x26> @ imm = #-0x4
;     }
 80587fa: b004         	add	sp, #0x10
 80587fc: bd80         	pop	{r7, pc}

080587fe <xTimerPendFunctionCallFromISR>:
;         {
 80587fe: b580         	push	{r7, lr}
 8058800: 466f         	mov	r7, sp
 8058802: b08a         	sub	sp, #0x28
 8058804: 9009         	str	r0, [sp, #0x24]
 8058806: 9108         	str	r1, [sp, #0x20]
 8058808: 9207         	str	r2, [sp, #0x1c]
 805880a: 9306         	str	r3, [sp, #0x18]
 805880c: f06f 0001    	mvn	r0, #0x1
;             xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8058810: 9002         	str	r0, [sp, #0x8]
;             xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8058812: 9809         	ldr	r0, [sp, #0x24]
 8058814: 9003         	str	r0, [sp, #0xc]
;             xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8058816: 9808         	ldr	r0, [sp, #0x20]
 8058818: 9004         	str	r0, [sp, #0x10]
;             xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 805881a: 9807         	ldr	r0, [sp, #0x1c]
 805881c: 9005         	str	r0, [sp, #0x14]
;             xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 805881e: f240 0000    	movw	r0, #0x0
 8058822: f2c0 0000    	movt	r0, #0x0
 8058826: 6800         	ldr	r0, [r0]
 8058828: 9a06         	ldr	r2, [sp, #0x18]
 805882a: a902         	add	r1, sp, #0x8
 805882c: 2300         	movs	r3, #0x0
 805882e: f7ff fffe    	bl	0x805882e <xTimerPendFunctionCallFromISR+0x30> @ imm = #-0x4
 8058832: 9001         	str	r0, [sp, #0x4]
;             return xReturn;
 8058834: 9801         	ldr	r0, [sp, #0x4]
 8058836: b00a         	add	sp, #0x28
 8058838: bd80         	pop	{r7, pc}

0805883a <xTimerPendFunctionCall>:
;         {
 805883a: b580         	push	{r7, lr}
 805883c: 466f         	mov	r7, sp
 805883e: b08a         	sub	sp, #0x28
 8058840: 9009         	str	r0, [sp, #0x24]
 8058842: 9108         	str	r1, [sp, #0x20]
 8058844: 9207         	str	r2, [sp, #0x1c]
 8058846: 9306         	str	r3, [sp, #0x18]
;             configASSERT( xTimerQueue );
 8058848: f240 0000    	movw	r0, #0x0
 805884c: f2c0 0000    	movt	r0, #0x0
 8058850: 6800         	ldr	r0, [r0]
 8058852: b920         	cbnz	r0, 0x805885e <xTimerPendFunctionCall+0x24> @ imm = #0x8
 8058854: e7ff         	b	0x8058856 <xTimerPendFunctionCall+0x1c> @ imm = #-0x2
 8058856: f7ff fffe    	bl	0x8058856 <xTimerPendFunctionCall+0x1c> @ imm = #-0x4
 805885a: e7ff         	b	0x805885c <xTimerPendFunctionCall+0x22> @ imm = #-0x2
 805885c: e7fe         	b	0x805885c <xTimerPendFunctionCall+0x22> @ imm = #-0x4
 805885e: f04f 30ff    	mov.w	r0, #0xffffffff
;             xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK;
 8058862: 9002         	str	r0, [sp, #0x8]
;             xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8058864: 9809         	ldr	r0, [sp, #0x24]
 8058866: 9003         	str	r0, [sp, #0xc]
;             xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8058868: 9808         	ldr	r0, [sp, #0x20]
 805886a: 9004         	str	r0, [sp, #0x10]
;             xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 805886c: 9807         	ldr	r0, [sp, #0x1c]
 805886e: 9005         	str	r0, [sp, #0x14]
;             xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8058870: f240 0000    	movw	r0, #0x0
 8058874: f2c0 0000    	movt	r0, #0x0
 8058878: 6800         	ldr	r0, [r0]
 805887a: 9a06         	ldr	r2, [sp, #0x18]
 805887c: a902         	add	r1, sp, #0x8
 805887e: 2300         	movs	r3, #0x0
 8058880: f7ff fffe    	bl	0x8058880 <xTimerPendFunctionCall+0x46> @ imm = #-0x4
 8058884: 9001         	str	r0, [sp, #0x4]
;             return xReturn;
 8058886: 9801         	ldr	r0, [sp, #0x4]
 8058888: b00a         	add	sp, #0x28
 805888a: bd80         	pop	{r7, pc}

0805888c <uxTimerGetTimerNumber>:
;         {
 805888c: b081         	sub	sp, #0x4
 805888e: 9000         	str	r0, [sp]
;             return ( ( Timer_t * ) xTimer )->uxTimerNumber;
 8058890: 9800         	ldr	r0, [sp]
 8058892: 6a40         	ldr	r0, [r0, #0x24]
 8058894: b001         	add	sp, #0x4
 8058896: 4770         	bx	lr

08058898 <vTimerSetTimerNumber>:
;         {
 8058898: b082         	sub	sp, #0x8
 805889a: 9001         	str	r0, [sp, #0x4]
 805889c: 9100         	str	r1, [sp]
;             ( ( Timer_t * ) xTimer )->uxTimerNumber = uxTimerNumber;
 805889e: 9800         	ldr	r0, [sp]
 80588a0: 9901         	ldr	r1, [sp, #0x4]
 80588a2: 6248         	str	r0, [r1, #0x24]
;         }
 80588a4: b002         	add	sp, #0x8
 80588a6: 4770         	bx	lr

080588a8 <prvGetNextExpireTime>:
;     {
 80588a8: b082         	sub	sp, #0x8
 80588aa: 9001         	str	r0, [sp, #0x4]
;         *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80588ac: f240 0000    	movw	r0, #0x0
 80588b0: f2c0 0000    	movt	r0, #0x0
 80588b4: 6800         	ldr	r0, [r0]
 80588b6: 6800         	ldr	r0, [r0]
 80588b8: fab0 f080    	clz	r0, r0
 80588bc: 0940         	lsrs	r0, r0, #0x5
 80588be: 9901         	ldr	r1, [sp, #0x4]
 80588c0: 6008         	str	r0, [r1]
;         if( *pxListWasEmpty == pdFALSE )
 80588c2: 9801         	ldr	r0, [sp, #0x4]
 80588c4: 6800         	ldr	r0, [r0]
 80588c6: b948         	cbnz	r0, 0x80588dc <prvGetNextExpireTime+0x34> @ imm = #0x12
 80588c8: e7ff         	b	0x80588ca <prvGetNextExpireTime+0x22> @ imm = #-0x2
;             xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80588ca: f240 0000    	movw	r0, #0x0
 80588ce: f2c0 0000    	movt	r0, #0x0
 80588d2: 6800         	ldr	r0, [r0]
 80588d4: 68c0         	ldr	r0, [r0, #0xc]
 80588d6: 6800         	ldr	r0, [r0]
 80588d8: 9000         	str	r0, [sp]
;         }
 80588da: e002         	b	0x80588e2 <prvGetNextExpireTime+0x3a> @ imm = #0x4
 80588dc: 2000         	movs	r0, #0x0
;             xNextExpireTime = ( TickType_t ) 0U;
 80588de: 9000         	str	r0, [sp]
 80588e0: e7ff         	b	0x80588e2 <prvGetNextExpireTime+0x3a> @ imm = #-0x2
;         return xNextExpireTime;
 80588e2: 9800         	ldr	r0, [sp]
 80588e4: b002         	add	sp, #0x8
 80588e6: 4770         	bx	lr

080588e8 <prvProcessTimerOrBlockTask>:
;     {
 80588e8: b580         	push	{r7, lr}
 80588ea: 466f         	mov	r7, sp
 80588ec: b084         	sub	sp, #0x10
 80588ee: 9003         	str	r0, [sp, #0xc]
 80588f0: 9102         	str	r1, [sp, #0x8]
;         vTaskSuspendAll();
 80588f2: f7ff fffe    	bl	0x80588f2 <prvProcessTimerOrBlockTask+0xa> @ imm = #-0x4
 80588f6: 4668         	mov	r0, sp
;             xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80588f8: f000 f8ee    	bl	0x8058ad8 <prvSampleTimeNow> @ imm = #0x1dc
 80588fc: 9001         	str	r0, [sp, #0x4]
;             if( xTimerListsWereSwitched == pdFALSE )
 80588fe: 9800         	ldr	r0, [sp]
 8058900: bb90         	cbnz	r0, 0x8058968 <prvProcessTimerOrBlockTask+0x80> @ imm = #0x64
 8058902: e7ff         	b	0x8058904 <prvProcessTimerOrBlockTask+0x1c> @ imm = #-0x2
;                 if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8058904: 9802         	ldr	r0, [sp, #0x8]
 8058906: b960         	cbnz	r0, 0x8058922 <prvProcessTimerOrBlockTask+0x3a> @ imm = #0x18
 8058908: e7ff         	b	0x805890a <prvProcessTimerOrBlockTask+0x22> @ imm = #-0x2
 805890a: 9803         	ldr	r0, [sp, #0xc]
 805890c: 9901         	ldr	r1, [sp, #0x4]
 805890e: 4288         	cmp	r0, r1
 8058910: d807         	bhi	0x8058922 <prvProcessTimerOrBlockTask+0x3a> @ imm = #0xe
 8058912: e7ff         	b	0x8058914 <prvProcessTimerOrBlockTask+0x2c> @ imm = #-0x2
;                     ( void ) xTaskResumeAll();
 8058914: f7ff fffe    	bl	0x8058914 <prvProcessTimerOrBlockTask+0x2c> @ imm = #-0x4
;                     prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8058918: 9803         	ldr	r0, [sp, #0xc]
 805891a: 9901         	ldr	r1, [sp, #0x4]
 805891c: f000 f8ff    	bl	0x8058b1e <prvProcessExpiredTimer> @ imm = #0x1fe
;                 }
 8058920: e021         	b	0x8058966 <prvProcessTimerOrBlockTask+0x7e> @ imm = #0x42
;                     if( xListWasEmpty != pdFALSE )
 8058922: 9802         	ldr	r0, [sp, #0x8]
 8058924: b158         	cbz	r0, 0x805893e <prvProcessTimerOrBlockTask+0x56> @ imm = #0x16
 8058926: e7ff         	b	0x8058928 <prvProcessTimerOrBlockTask+0x40> @ imm = #-0x2
;                         xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8058928: f240 0000    	movw	r0, #0x0
 805892c: f2c0 0000    	movt	r0, #0x0
 8058930: 6800         	ldr	r0, [r0]
 8058932: 6800         	ldr	r0, [r0]
 8058934: fab0 f080    	clz	r0, r0
 8058938: 0940         	lsrs	r0, r0, #0x5
 805893a: 9002         	str	r0, [sp, #0x8]
;                     }
 805893c: e7ff         	b	0x805893e <prvProcessTimerOrBlockTask+0x56> @ imm = #-0x2
;                     vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 805893e: f240 0000    	movw	r0, #0x0
 8058942: f2c0 0000    	movt	r0, #0x0
 8058946: 6800         	ldr	r0, [r0]
 8058948: 9903         	ldr	r1, [sp, #0xc]
 805894a: 9a01         	ldr	r2, [sp, #0x4]
 805894c: 1a89         	subs	r1, r1, r2
 805894e: 9a02         	ldr	r2, [sp, #0x8]
 8058950: f7ff fffe    	bl	0x8058950 <prvProcessTimerOrBlockTask+0x68> @ imm = #-0x4
;                     if( xTaskResumeAll() == pdFALSE )
 8058954: f7ff fffe    	bl	0x8058954 <prvProcessTimerOrBlockTask+0x6c> @ imm = #-0x4
 8058958: b918         	cbnz	r0, 0x8058962 <prvProcessTimerOrBlockTask+0x7a> @ imm = #0x6
 805895a: e7ff         	b	0x805895c <prvProcessTimerOrBlockTask+0x74> @ imm = #-0x2
;                         taskYIELD_WITHIN_API();
 805895c: f7ff fffe    	bl	0x805895c <prvProcessTimerOrBlockTask+0x74> @ imm = #-0x4
;                     }
 8058960: e000         	b	0x8058964 <prvProcessTimerOrBlockTask+0x7c> @ imm = #0x0
 8058962: e7ff         	b	0x8058964 <prvProcessTimerOrBlockTask+0x7c> @ imm = #-0x2
 8058964: e7ff         	b	0x8058966 <prvProcessTimerOrBlockTask+0x7e> @ imm = #-0x2
;             }
 8058966: e002         	b	0x805896e <prvProcessTimerOrBlockTask+0x86> @ imm = #0x4
;                 ( void ) xTaskResumeAll();
 8058968: f7ff fffe    	bl	0x8058968 <prvProcessTimerOrBlockTask+0x80> @ imm = #-0x4
 805896c: e7ff         	b	0x805896e <prvProcessTimerOrBlockTask+0x86> @ imm = #-0x2
;     }
 805896e: b004         	add	sp, #0x10
 8058970: bd80         	pop	{r7, pc}
 8058972: bf00         	nop

08058974 <prvProcessReceivedCommands>:
;     {
 8058974: b580         	push	{r7, lr}
 8058976: 466f         	mov	r7, sp
 8058978: b08a         	sub	sp, #0x28
;         while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 805897a: e7ff         	b	0x805897c <prvProcessReceivedCommands+0x8> @ imm = #-0x2
 805897c: f240 0000    	movw	r0, #0x0
 8058980: f2c0 0000    	movt	r0, #0x0
 8058984: 6800         	ldr	r0, [r0]
 8058986: a906         	add	r1, sp, #0x18
 8058988: 2200         	movs	r2, #0x0
 805898a: f7ff fffe    	bl	0x805898a <prvProcessReceivedCommands+0x16> @ imm = #-0x4
 805898e: 2800         	cmp	r0, #0x0
 8058990: f000 80a0    	beq.w	0x8058ad4 <prvProcessReceivedCommands+0x160> @ imm = #0x140
 8058994: e7ff         	b	0x8058996 <prvProcessReceivedCommands+0x22> @ imm = #-0x2
;                 if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8058996: 9806         	ldr	r0, [sp, #0x18]
 8058998: f1b0 3fff    	cmp.w	r0, #0xffffffff
 805899c: dc10         	bgt	0x80589c0 <prvProcessReceivedCommands+0x4c> @ imm = #0x20
 805899e: e7ff         	b	0x80589a0 <prvProcessReceivedCommands+0x2c> @ imm = #-0x2
 80589a0: a806         	add	r0, sp, #0x18
;                     const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80589a2: 3004         	adds	r0, #0x4
 80589a4: 9002         	str	r0, [sp, #0x8]
;                     configASSERT( pxCallback );
 80589a6: 9802         	ldr	r0, [sp, #0x8]
 80589a8: b920         	cbnz	r0, 0x80589b4 <prvProcessReceivedCommands+0x40> @ imm = #0x8
 80589aa: e7ff         	b	0x80589ac <prvProcessReceivedCommands+0x38> @ imm = #-0x2
 80589ac: f7ff fffe    	bl	0x80589ac <prvProcessReceivedCommands+0x38> @ imm = #-0x4
 80589b0: e7ff         	b	0x80589b2 <prvProcessReceivedCommands+0x3e> @ imm = #-0x2
 80589b2: e7fe         	b	0x80589b2 <prvProcessReceivedCommands+0x3e> @ imm = #-0x4
;                     pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80589b4: 9902         	ldr	r1, [sp, #0x8]
 80589b6: 680a         	ldr	r2, [r1]
 80589b8: 6848         	ldr	r0, [r1, #0x4]
 80589ba: 6889         	ldr	r1, [r1, #0x8]
 80589bc: 4790         	blx	r2
;                 }
 80589be: e000         	b	0x80589c2 <prvProcessReceivedCommands+0x4e> @ imm = #0x0
 80589c0: e7ff         	b	0x80589c2 <prvProcessReceivedCommands+0x4e> @ imm = #-0x2
;             if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80589c2: 9806         	ldr	r0, [sp, #0x18]
 80589c4: 2800         	cmp	r0, #0x0
 80589c6: f100 8084    	bmi.w	0x8058ad2 <prvProcessReceivedCommands+0x15e> @ imm = #0x108
 80589ca: e7ff         	b	0x80589cc <prvProcessReceivedCommands+0x58> @ imm = #-0x2
;                 pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80589cc: 9808         	ldr	r0, [sp, #0x20]
 80589ce: 9005         	str	r0, [sp, #0x14]
;                 if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80589d0: 9805         	ldr	r0, [sp, #0x14]
 80589d2: 6940         	ldr	r0, [r0, #0x14]
 80589d4: b128         	cbz	r0, 0x80589e2 <prvProcessReceivedCommands+0x6e> @ imm = #0xa
 80589d6: e7ff         	b	0x80589d8 <prvProcessReceivedCommands+0x64> @ imm = #-0x2
;                     ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80589d8: 9805         	ldr	r0, [sp, #0x14]
 80589da: 3004         	adds	r0, #0x4
 80589dc: f7ff fffe    	bl	0x80589dc <prvProcessReceivedCommands+0x68> @ imm = #-0x4
;                 }
 80589e0: e000         	b	0x80589e4 <prvProcessReceivedCommands+0x70> @ imm = #0x0
 80589e2: e7ff         	b	0x80589e4 <prvProcessReceivedCommands+0x70> @ imm = #-0x2
 80589e4: a804         	add	r0, sp, #0x10
;                 xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80589e6: f000 f877    	bl	0x8058ad8 <prvSampleTimeNow> @ imm = #0xee
 80589ea: 9003         	str	r0, [sp, #0xc]
;                 switch( xMessage.xMessageID )
 80589ec: 9806         	ldr	r0, [sp, #0x18]
 80589ee: 3801         	subs	r0, #0x1
 80589f0: 4601         	mov	r1, r0
 80589f2: 9101         	str	r1, [sp, #0x4]
 80589f4: 2808         	cmp	r0, #0x8
 80589f6: d86a         	bhi	0x8058ace <prvProcessReceivedCommands+0x15a> @ imm = #0xd4
 80589f8: 9901         	ldr	r1, [sp, #0x4]
 80589fa: e8df f001    	tbb	[pc, r1]

080589fe <$d.1>:
 80589fe: 05 05 32 3a  	.word	0x3a320505
 8058a02: 54 05 05 32  	.word	0x32050554
 8058a06: 3a 00        	.short	0x003a

08058a08 <$t.2>:
;                         pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 8058a08: 9905         	ldr	r1, [sp, #0x14]
 8058a0a: f891 0028    	ldrb.w	r0, [r1, #0x28]
 8058a0e: f040 0001    	orr	r0, r0, #0x1
 8058a12: f881 0028    	strb.w	r0, [r1, #0x28]
;                         if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8058a16: 9805         	ldr	r0, [sp, #0x14]
 8058a18: 9b07         	ldr	r3, [sp, #0x1c]
 8058a1a: 6981         	ldr	r1, [r0, #0x18]
 8058a1c: 4419         	add	r1, r3
 8058a1e: 9a03         	ldr	r2, [sp, #0xc]
 8058a20: f000 f8ed    	bl	0x8058bfe <prvInsertTimerInActiveList> @ imm = #0x1da
 8058a24: b1d8         	cbz	r0, 0x8058a5e <prvProcessReceivedCommands+0xea> @ imm = #0x36
 8058a26: e7ff         	b	0x8058a28 <prvProcessReceivedCommands+0xb4> @ imm = #-0x2
;                             if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8058a28: 9805         	ldr	r0, [sp, #0x14]
 8058a2a: f890 0028    	ldrb.w	r0, [r0, #0x28]
 8058a2e: 0740         	lsls	r0, r0, #0x1d
 8058a30: 2800         	cmp	r0, #0x0
 8058a32: d508         	bpl	0x8058a46 <prvProcessReceivedCommands+0xd2> @ imm = #0x10
 8058a34: e7ff         	b	0x8058a36 <prvProcessReceivedCommands+0xc2> @ imm = #-0x2
;                                 prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8058a36: 9805         	ldr	r0, [sp, #0x14]
 8058a38: 9907         	ldr	r1, [sp, #0x1c]
 8058a3a: 6982         	ldr	r2, [r0, #0x18]
 8058a3c: 4411         	add	r1, r2
 8058a3e: 9a03         	ldr	r2, [sp, #0xc]
 8058a40: f000 f8c2    	bl	0x8058bc8 <prvReloadTimer> @ imm = #0x184
;                             }
 8058a44: e007         	b	0x8058a56 <prvProcessReceivedCommands+0xe2> @ imm = #0xe
;                                 pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8058a46: 9905         	ldr	r1, [sp, #0x14]
 8058a48: f891 0028    	ldrb.w	r0, [r1, #0x28]
 8058a4c: f000 00fe    	and	r0, r0, #0xfe
 8058a50: f881 0028    	strb.w	r0, [r1, #0x28]
 8058a54: e7ff         	b	0x8058a56 <prvProcessReceivedCommands+0xe2> @ imm = #-0x2
;                             pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8058a56: 9805         	ldr	r0, [sp, #0x14]
 8058a58: 6a01         	ldr	r1, [r0, #0x20]
 8058a5a: 4788         	blx	r1
;                         }
 8058a5c: e000         	b	0x8058a60 <prvProcessReceivedCommands+0xec> @ imm = #0x0
 8058a5e: e7ff         	b	0x8058a60 <prvProcessReceivedCommands+0xec> @ imm = #-0x2
;                         break;
 8058a60: e036         	b	0x8058ad0 <prvProcessReceivedCommands+0x15c> @ imm = #0x6c
;                         pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8058a62: 9905         	ldr	r1, [sp, #0x14]
 8058a64: f891 0028    	ldrb.w	r0, [r1, #0x28]
 8058a68: f000 00fe    	and	r0, r0, #0xfe
 8058a6c: f881 0028    	strb.w	r0, [r1, #0x28]
;                         break;
 8058a70: e02e         	b	0x8058ad0 <prvProcessReceivedCommands+0x15c> @ imm = #0x5c
;                         pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 8058a72: 9905         	ldr	r1, [sp, #0x14]
 8058a74: f891 0028    	ldrb.w	r0, [r1, #0x28]
 8058a78: f040 0001    	orr	r0, r0, #0x1
 8058a7c: f881 0028    	strb.w	r0, [r1, #0x28]
;                         pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8058a80: 9807         	ldr	r0, [sp, #0x1c]
 8058a82: 9905         	ldr	r1, [sp, #0x14]
 8058a84: 6188         	str	r0, [r1, #0x18]
;                         configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8058a86: 9805         	ldr	r0, [sp, #0x14]
 8058a88: 6980         	ldr	r0, [r0, #0x18]
 8058a8a: b920         	cbnz	r0, 0x8058a96 <prvProcessReceivedCommands+0x122> @ imm = #0x8
 8058a8c: e7ff         	b	0x8058a8e <prvProcessReceivedCommands+0x11a> @ imm = #-0x2
 8058a8e: f7ff fffe    	bl	0x8058a8e <prvProcessReceivedCommands+0x11a> @ imm = #-0x4
 8058a92: e7ff         	b	0x8058a94 <prvProcessReceivedCommands+0x120> @ imm = #-0x2
 8058a94: e7fe         	b	0x8058a94 <prvProcessReceivedCommands+0x120> @ imm = #-0x4
;                         ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8058a96: 9805         	ldr	r0, [sp, #0x14]
 8058a98: 9b03         	ldr	r3, [sp, #0xc]
 8058a9a: 6981         	ldr	r1, [r0, #0x18]
 8058a9c: 4419         	add	r1, r3
 8058a9e: 461a         	mov	r2, r3
 8058aa0: f000 f8ad    	bl	0x8058bfe <prvInsertTimerInActiveList> @ imm = #0x15a
;                         break;
 8058aa4: e014         	b	0x8058ad0 <prvProcessReceivedCommands+0x15c> @ imm = #0x28
;                             if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8058aa6: 9805         	ldr	r0, [sp, #0x14]
 8058aa8: f890 0028    	ldrb.w	r0, [r0, #0x28]
 8058aac: 0780         	lsls	r0, r0, #0x1e
 8058aae: 2800         	cmp	r0, #0x0
 8058ab0: d404         	bmi	0x8058abc <prvProcessReceivedCommands+0x148> @ imm = #0x8
 8058ab2: e7ff         	b	0x8058ab4 <prvProcessReceivedCommands+0x140> @ imm = #-0x2
;                                 vPortFree( pxTimer );
 8058ab4: 9805         	ldr	r0, [sp, #0x14]
 8058ab6: f7ff fffe    	bl	0x8058ab6 <prvProcessReceivedCommands+0x142> @ imm = #-0x4
;                             }
 8058aba: e007         	b	0x8058acc <prvProcessReceivedCommands+0x158> @ imm = #0xe
;                                 pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8058abc: 9905         	ldr	r1, [sp, #0x14]
 8058abe: f891 0028    	ldrb.w	r0, [r1, #0x28]
 8058ac2: f000 00fe    	and	r0, r0, #0xfe
 8058ac6: f881 0028    	strb.w	r0, [r1, #0x28]
 8058aca: e7ff         	b	0x8058acc <prvProcessReceivedCommands+0x158> @ imm = #-0x2
;                         break;
 8058acc: e000         	b	0x8058ad0 <prvProcessReceivedCommands+0x15c> @ imm = #0x0
;                         break;
 8058ace: e7ff         	b	0x8058ad0 <prvProcessReceivedCommands+0x15c> @ imm = #-0x2
;             }
 8058ad0: e7ff         	b	0x8058ad2 <prvProcessReceivedCommands+0x15e> @ imm = #-0x2
;         while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8058ad2: e753         	b	0x805897c <prvProcessReceivedCommands+0x8> @ imm = #-0x15a
;     }
 8058ad4: b00a         	add	sp, #0x28
 8058ad6: bd80         	pop	{r7, pc}

08058ad8 <prvSampleTimeNow>:
;     {
 8058ad8: b580         	push	{r7, lr}
 8058ada: 466f         	mov	r7, sp
 8058adc: b082         	sub	sp, #0x8
 8058ade: 9001         	str	r0, [sp, #0x4]
;         xTimeNow = xTaskGetTickCount();
 8058ae0: f7ff fffe    	bl	0x8058ae0 <prvSampleTimeNow+0x8> @ imm = #-0x4
 8058ae4: 9000         	str	r0, [sp]
;         if( xTimeNow < xLastTime )
 8058ae6: 9800         	ldr	r0, [sp]
 8058ae8: f240 0100    	movw	r1, #0x0
 8058aec: f2c0 0100    	movt	r1, #0x0
 8058af0: 6809         	ldr	r1, [r1]
 8058af2: 4288         	cmp	r0, r1
 8058af4: d206         	bhs	0x8058b04 <prvSampleTimeNow+0x2c> @ imm = #0xc
 8058af6: e7ff         	b	0x8058af8 <prvSampleTimeNow+0x20> @ imm = #-0x2
;             prvSwitchTimerLists();
 8058af8: f000 f83c    	bl	0x8058b74 <prvSwitchTimerLists> @ imm = #0x78
;             *pxTimerListsWereSwitched = pdTRUE;
 8058afc: 9901         	ldr	r1, [sp, #0x4]
 8058afe: 2001         	movs	r0, #0x1
 8058b00: 6008         	str	r0, [r1]
;         }
 8058b02: e003         	b	0x8058b0c <prvSampleTimeNow+0x34> @ imm = #0x6
;             *pxTimerListsWereSwitched = pdFALSE;
 8058b04: 9901         	ldr	r1, [sp, #0x4]
 8058b06: 2000         	movs	r0, #0x0
 8058b08: 6008         	str	r0, [r1]
 8058b0a: e7ff         	b	0x8058b0c <prvSampleTimeNow+0x34> @ imm = #-0x2
;         xLastTime = xTimeNow;
 8058b0c: 9800         	ldr	r0, [sp]
 8058b0e: f240 0100    	movw	r1, #0x0
 8058b12: f2c0 0100    	movt	r1, #0x0
 8058b16: 6008         	str	r0, [r1]
;         return xTimeNow;
 8058b18: 9800         	ldr	r0, [sp]
 8058b1a: b002         	add	sp, #0x8
 8058b1c: bd80         	pop	{r7, pc}

08058b1e <prvProcessExpiredTimer>:
;     {
 8058b1e: b580         	push	{r7, lr}
 8058b20: 466f         	mov	r7, sp
 8058b22: b084         	sub	sp, #0x10
 8058b24: 9003         	str	r0, [sp, #0xc]
 8058b26: 9102         	str	r1, [sp, #0x8]
;         Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8058b28: f240 0000    	movw	r0, #0x0
 8058b2c: f2c0 0000    	movt	r0, #0x0
 8058b30: 6800         	ldr	r0, [r0]
 8058b32: 68c0         	ldr	r0, [r0, #0xc]
 8058b34: 68c0         	ldr	r0, [r0, #0xc]
 8058b36: 9001         	str	r0, [sp, #0x4]
;         ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8058b38: 9801         	ldr	r0, [sp, #0x4]
 8058b3a: 3004         	adds	r0, #0x4
 8058b3c: f7ff fffe    	bl	0x8058b3c <prvProcessExpiredTimer+0x1e> @ imm = #-0x4
;         if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8058b40: 9801         	ldr	r0, [sp, #0x4]
 8058b42: f890 0028    	ldrb.w	r0, [r0, #0x28]
 8058b46: 0740         	lsls	r0, r0, #0x1d
 8058b48: 2800         	cmp	r0, #0x0
 8058b4a: d506         	bpl	0x8058b5a <prvProcessExpiredTimer+0x3c> @ imm = #0xc
 8058b4c: e7ff         	b	0x8058b4e <prvProcessExpiredTimer+0x30> @ imm = #-0x2
;             prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8058b4e: 9801         	ldr	r0, [sp, #0x4]
 8058b50: 9903         	ldr	r1, [sp, #0xc]
 8058b52: 9a02         	ldr	r2, [sp, #0x8]
 8058b54: f000 f838    	bl	0x8058bc8 <prvReloadTimer> @ imm = #0x70
;         }
 8058b58: e007         	b	0x8058b6a <prvProcessExpiredTimer+0x4c> @ imm = #0xe
;             pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8058b5a: 9901         	ldr	r1, [sp, #0x4]
 8058b5c: f891 0028    	ldrb.w	r0, [r1, #0x28]
 8058b60: f000 00fe    	and	r0, r0, #0xfe
 8058b64: f881 0028    	strb.w	r0, [r1, #0x28]
 8058b68: e7ff         	b	0x8058b6a <prvProcessExpiredTimer+0x4c> @ imm = #-0x2
;         pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8058b6a: 9801         	ldr	r0, [sp, #0x4]
 8058b6c: 6a01         	ldr	r1, [r0, #0x20]
 8058b6e: 4788         	blx	r1
;     }
 8058b70: b004         	add	sp, #0x10
 8058b72: bd80         	pop	{r7, pc}

08058b74 <prvSwitchTimerLists>:
;     {
 8058b74: b580         	push	{r7, lr}
 8058b76: 466f         	mov	r7, sp
 8058b78: b082         	sub	sp, #0x8
;         while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8058b7a: e7ff         	b	0x8058b7c <prvSwitchTimerLists+0x8> @ imm = #-0x2
 8058b7c: f240 0000    	movw	r0, #0x0
 8058b80: f2c0 0000    	movt	r0, #0x0
 8058b84: 6800         	ldr	r0, [r0]
 8058b86: 6800         	ldr	r0, [r0]
 8058b88: b170         	cbz	r0, 0x8058ba8 <prvSwitchTimerLists+0x34> @ imm = #0x1c
 8058b8a: e7ff         	b	0x8058b8c <prvSwitchTimerLists+0x18> @ imm = #-0x2
;             xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8058b8c: f240 0000    	movw	r0, #0x0
 8058b90: f2c0 0000    	movt	r0, #0x0
 8058b94: 6800         	ldr	r0, [r0]
 8058b96: 68c0         	ldr	r0, [r0, #0xc]
 8058b98: 6800         	ldr	r0, [r0]
 8058b9a: 9001         	str	r0, [sp, #0x4]
;             prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8058b9c: 9801         	ldr	r0, [sp, #0x4]
 8058b9e: f04f 31ff    	mov.w	r1, #0xffffffff
 8058ba2: f7ff ffbc    	bl	0x8058b1e <prvProcessExpiredTimer> @ imm = #-0x88
;         while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8058ba6: e7e9         	b	0x8058b7c <prvSwitchTimerLists+0x8> @ imm = #-0x2e
;         pxTemp = pxCurrentTimerList;
 8058ba8: f240 0200    	movw	r2, #0x0
 8058bac: f2c0 0200    	movt	r2, #0x0
 8058bb0: 6810         	ldr	r0, [r2]
 8058bb2: 9000         	str	r0, [sp]
;         pxCurrentTimerList = pxOverflowTimerList;
 8058bb4: f240 0100    	movw	r1, #0x0
 8058bb8: f2c0 0100    	movt	r1, #0x0
 8058bbc: 6808         	ldr	r0, [r1]
 8058bbe: 6010         	str	r0, [r2]
;         pxOverflowTimerList = pxTemp;
 8058bc0: 9800         	ldr	r0, [sp]
 8058bc2: 6008         	str	r0, [r1]
;     }
 8058bc4: b002         	add	sp, #0x8
 8058bc6: bd80         	pop	{r7, pc}

08058bc8 <prvReloadTimer>:
;     {
 8058bc8: b580         	push	{r7, lr}
 8058bca: 466f         	mov	r7, sp
 8058bcc: b084         	sub	sp, #0x10
 8058bce: 9003         	str	r0, [sp, #0xc]
 8058bd0: 9102         	str	r1, [sp, #0x8]
 8058bd2: 9201         	str	r2, [sp, #0x4]
;         while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8058bd4: e7ff         	b	0x8058bd6 <prvReloadTimer+0xe> @ imm = #-0x2
 8058bd6: 9803         	ldr	r0, [sp, #0xc]
 8058bd8: 9b02         	ldr	r3, [sp, #0x8]
 8058bda: 6981         	ldr	r1, [r0, #0x18]
 8058bdc: 4419         	add	r1, r3
 8058bde: 9a01         	ldr	r2, [sp, #0x4]
 8058be0: f000 f80d    	bl	0x8058bfe <prvInsertTimerInActiveList> @ imm = #0x1a
 8058be4: b148         	cbz	r0, 0x8058bfa <prvReloadTimer+0x32> @ imm = #0x12
 8058be6: e7ff         	b	0x8058be8 <prvReloadTimer+0x20> @ imm = #-0x2
;             xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8058be8: 9803         	ldr	r0, [sp, #0xc]
 8058bea: 6981         	ldr	r1, [r0, #0x18]
 8058bec: 9802         	ldr	r0, [sp, #0x8]
 8058bee: 4408         	add	r0, r1
 8058bf0: 9002         	str	r0, [sp, #0x8]
;             pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8058bf2: 9803         	ldr	r0, [sp, #0xc]
 8058bf4: 6a01         	ldr	r1, [r0, #0x20]
 8058bf6: 4788         	blx	r1
;         while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8058bf8: e7ed         	b	0x8058bd6 <prvReloadTimer+0xe> @ imm = #-0x26
;     }
 8058bfa: b004         	add	sp, #0x10
 8058bfc: bd80         	pop	{r7, pc}

08058bfe <prvInsertTimerInActiveList>:
;     {
 8058bfe: b580         	push	{r7, lr}
 8058c00: 466f         	mov	r7, sp
 8058c02: b086         	sub	sp, #0x18
 8058c04: 9005         	str	r0, [sp, #0x14]
 8058c06: 9104         	str	r1, [sp, #0x10]
 8058c08: 9203         	str	r2, [sp, #0xc]
 8058c0a: 9302         	str	r3, [sp, #0x8]
 8058c0c: 2000         	movs	r0, #0x0
;         BaseType_t xProcessTimerNow = pdFALSE;
 8058c0e: 9001         	str	r0, [sp, #0x4]
;         listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8058c10: 9804         	ldr	r0, [sp, #0x10]
 8058c12: 9905         	ldr	r1, [sp, #0x14]
 8058c14: 6048         	str	r0, [r1, #0x4]
;         listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8058c16: 9805         	ldr	r0, [sp, #0x14]
 8058c18: 6100         	str	r0, [r0, #0x10]
;         if( xNextExpiryTime <= xTimeNow )
 8058c1a: 9804         	ldr	r0, [sp, #0x10]
 8058c1c: 9903         	ldr	r1, [sp, #0xc]
 8058c1e: 4288         	cmp	r0, r1
 8058c20: d816         	bhi	0x8058c50 <prvInsertTimerInActiveList+0x52> @ imm = #0x2c
 8058c22: e7ff         	b	0x8058c24 <prvInsertTimerInActiveList+0x26> @ imm = #-0x2
;             if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8058c24: 9803         	ldr	r0, [sp, #0xc]
 8058c26: 9902         	ldr	r1, [sp, #0x8]
 8058c28: 1a40         	subs	r0, r0, r1
 8058c2a: 9905         	ldr	r1, [sp, #0x14]
 8058c2c: 6989         	ldr	r1, [r1, #0x18]
 8058c2e: 4288         	cmp	r0, r1
 8058c30: d303         	blo	0x8058c3a <prvInsertTimerInActiveList+0x3c> @ imm = #0x6
 8058c32: e7ff         	b	0x8058c34 <prvInsertTimerInActiveList+0x36> @ imm = #-0x2
 8058c34: 2001         	movs	r0, #0x1
;                 xProcessTimerNow = pdTRUE;
 8058c36: 9001         	str	r0, [sp, #0x4]
;             }
 8058c38: e009         	b	0x8058c4e <prvInsertTimerInActiveList+0x50> @ imm = #0x12
;                 vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8058c3a: f240 0000    	movw	r0, #0x0
 8058c3e: f2c0 0000    	movt	r0, #0x0
 8058c42: 6800         	ldr	r0, [r0]
 8058c44: 9905         	ldr	r1, [sp, #0x14]
 8058c46: 3104         	adds	r1, #0x4
 8058c48: f7ff fffe    	bl	0x8058c48 <prvInsertTimerInActiveList+0x4a> @ imm = #-0x4
 8058c4c: e7ff         	b	0x8058c4e <prvInsertTimerInActiveList+0x50> @ imm = #-0x2
;         }
 8058c4e: e017         	b	0x8058c80 <prvInsertTimerInActiveList+0x82> @ imm = #0x2e
;             if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8058c50: 9803         	ldr	r0, [sp, #0xc]
 8058c52: 9902         	ldr	r1, [sp, #0x8]
 8058c54: 4288         	cmp	r0, r1
 8058c56: d208         	bhs	0x8058c6a <prvInsertTimerInActiveList+0x6c> @ imm = #0x10
 8058c58: e7ff         	b	0x8058c5a <prvInsertTimerInActiveList+0x5c> @ imm = #-0x2
 8058c5a: 9804         	ldr	r0, [sp, #0x10]
 8058c5c: 9902         	ldr	r1, [sp, #0x8]
 8058c5e: 4288         	cmp	r0, r1
 8058c60: d303         	blo	0x8058c6a <prvInsertTimerInActiveList+0x6c> @ imm = #0x6
 8058c62: e7ff         	b	0x8058c64 <prvInsertTimerInActiveList+0x66> @ imm = #-0x2
 8058c64: 2001         	movs	r0, #0x1
;                 xProcessTimerNow = pdTRUE;
 8058c66: 9001         	str	r0, [sp, #0x4]
;             }
 8058c68: e009         	b	0x8058c7e <prvInsertTimerInActiveList+0x80> @ imm = #0x12
;                 vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8058c6a: f240 0000    	movw	r0, #0x0
 8058c6e: f2c0 0000    	movt	r0, #0x0
 8058c72: 6800         	ldr	r0, [r0]
 8058c74: 9905         	ldr	r1, [sp, #0x14]
 8058c76: 3104         	adds	r1, #0x4
 8058c78: f7ff fffe    	bl	0x8058c78 <prvInsertTimerInActiveList+0x7a> @ imm = #-0x4
 8058c7c: e7ff         	b	0x8058c7e <prvInsertTimerInActiveList+0x80> @ imm = #-0x2
 8058c7e: e7ff         	b	0x8058c80 <prvInsertTimerInActiveList+0x82> @ imm = #-0x2
;         return xProcessTimerNow;
 8058c80: 9801         	ldr	r0, [sp, #0x4]
 8058c82: b006         	add	sp, #0x18
 8058c84: bd80         	pop	{r7, pc}

08058c86 <pvPortMalloc>:
; {
 8058c86: b580         	push	{r7, lr}
 8058c88: 466f         	mov	r7, sp
 8058c8a: b08a         	sub	sp, #0x28
 8058c8c: 9009         	str	r0, [sp, #0x24]
 8058c8e: 2000         	movs	r0, #0x0
;     void * pvReturn = NULL;
 8058c90: 9005         	str	r0, [sp, #0x14]
;     if( xWantedSize > 0 )
 8058c92: 9809         	ldr	r0, [sp, #0x24]
 8058c94: b340         	cbz	r0, 0x8058ce8 <pvPortMalloc+0x62> @ imm = #0x50
 8058c96: e7ff         	b	0x8058c98 <pvPortMalloc+0x12> @ imm = #-0x2
;         if( heapADD_WILL_OVERFLOW( xWantedSize, xHeapStructSize ) == 0 )
 8058c98: 9809         	ldr	r0, [sp, #0x24]
 8058c9a: f110 0f09    	cmn.w	r0, #0x9
 8058c9e: d81f         	bhi	0x8058ce0 <pvPortMalloc+0x5a> @ imm = #0x3e
 8058ca0: e7ff         	b	0x8058ca2 <pvPortMalloc+0x1c> @ imm = #-0x2
;             xWantedSize += xHeapStructSize;
 8058ca2: 9809         	ldr	r0, [sp, #0x24]
 8058ca4: 3008         	adds	r0, #0x8
 8058ca6: 9009         	str	r0, [sp, #0x24]
;             if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8058ca8: f89d 0024    	ldrb.w	r0, [sp, #0x24]
 8058cac: 0740         	lsls	r0, r0, #0x1d
 8058cae: b1a8         	cbz	r0, 0x8058cdc <pvPortMalloc+0x56> @ imm = #0x2a
 8058cb0: e7ff         	b	0x8058cb2 <pvPortMalloc+0x2c> @ imm = #-0x2
;                 xAdditionalRequiredSize = portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8058cb2: 9809         	ldr	r0, [sp, #0x24]
 8058cb4: f000 0007    	and	r0, r0, #0x7
 8058cb8: f1c0 0008    	rsb.w	r0, r0, #0x8
 8058cbc: 9004         	str	r0, [sp, #0x10]
;                 if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8058cbe: 9809         	ldr	r0, [sp, #0x24]
 8058cc0: 9904         	ldr	r1, [sp, #0x10]
 8058cc2: 43c9         	mvns	r1, r1
 8058cc4: 4288         	cmp	r0, r1
 8058cc6: d805         	bhi	0x8058cd4 <pvPortMalloc+0x4e> @ imm = #0xa
 8058cc8: e7ff         	b	0x8058cca <pvPortMalloc+0x44> @ imm = #-0x2
;                     xWantedSize += xAdditionalRequiredSize;
 8058cca: 9904         	ldr	r1, [sp, #0x10]
 8058ccc: 9809         	ldr	r0, [sp, #0x24]
 8058cce: 4408         	add	r0, r1
 8058cd0: 9009         	str	r0, [sp, #0x24]
;                 }
 8058cd2: e002         	b	0x8058cda <pvPortMalloc+0x54> @ imm = #0x4
 8058cd4: 2000         	movs	r0, #0x0
;                     xWantedSize = 0;
 8058cd6: 9009         	str	r0, [sp, #0x24]
 8058cd8: e7ff         	b	0x8058cda <pvPortMalloc+0x54> @ imm = #-0x2
;             }
 8058cda: e000         	b	0x8058cde <pvPortMalloc+0x58> @ imm = #0x0
 8058cdc: e7ff         	b	0x8058cde <pvPortMalloc+0x58> @ imm = #-0x2
;         }
 8058cde: e002         	b	0x8058ce6 <pvPortMalloc+0x60> @ imm = #0x4
 8058ce0: 2000         	movs	r0, #0x0
;             xWantedSize = 0;
 8058ce2: 9009         	str	r0, [sp, #0x24]
 8058ce4: e7ff         	b	0x8058ce6 <pvPortMalloc+0x60> @ imm = #-0x2
;     }
 8058ce6: e000         	b	0x8058cea <pvPortMalloc+0x64> @ imm = #0x0
 8058ce8: e7ff         	b	0x8058cea <pvPortMalloc+0x64> @ imm = #-0x2
;     vTaskSuspendAll();
 8058cea: f7ff fffe    	bl	0x8058cea <pvPortMalloc+0x64> @ imm = #-0x4
;         if( pxEnd == NULL )
 8058cee: f240 0000    	movw	r0, #0x0
 8058cf2: f2c0 0000    	movt	r0, #0x0
 8058cf6: 6800         	ldr	r0, [r0]
 8058cf8: b918         	cbnz	r0, 0x8058d02 <pvPortMalloc+0x7c> @ imm = #0x6
 8058cfa: e7ff         	b	0x8058cfc <pvPortMalloc+0x76> @ imm = #-0x2
;             prvHeapInit();
 8058cfc: f000 f91c    	bl	0x8058f38 <prvHeapInit> @ imm = #0x238
;         }
 8058d00: e000         	b	0x8058d04 <pvPortMalloc+0x7e> @ imm = #0x0
 8058d02: e7ff         	b	0x8058d04 <pvPortMalloc+0x7e> @ imm = #-0x2
;         if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8058d04: f89d 0027    	ldrb.w	r0, [sp, #0x27]
 8058d08: 0600         	lsls	r0, r0, #0x18
 8058d0a: 2800         	cmp	r0, #0x0
 8058d0c: f100 8105    	bmi.w	0x8058f1a <pvPortMalloc+0x294> @ imm = #0x20a
 8058d10: e7ff         	b	0x8058d12 <pvPortMalloc+0x8c> @ imm = #-0x2
;             if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8058d12: 9809         	ldr	r0, [sp, #0x24]
 8058d14: 2800         	cmp	r0, #0x0
 8058d16: f000 80fe    	beq.w	0x8058f16 <pvPortMalloc+0x290> @ imm = #0x1fc
 8058d1a: e7ff         	b	0x8058d1c <pvPortMalloc+0x96> @ imm = #-0x2
 8058d1c: 9809         	ldr	r0, [sp, #0x24]
 8058d1e: f240 0100    	movw	r1, #0x0
 8058d22: f2c0 0100    	movt	r1, #0x0
 8058d26: 6809         	ldr	r1, [r1]
 8058d28: 4288         	cmp	r0, r1
 8058d2a: f200 80f4    	bhi.w	0x8058f16 <pvPortMalloc+0x290> @ imm = #0x1e8
 8058d2e: e7ff         	b	0x8058d30 <pvPortMalloc+0xaa> @ imm = #-0x2
;                 pxPreviousBlock = &xStart;
 8058d30: f240 0000    	movw	r0, #0x0
 8058d34: f2c0 0000    	movt	r0, #0x0
 8058d38: 9007         	str	r0, [sp, #0x1c]
;                 pxBlock = heapPROTECT_BLOCK_POINTER( xStart.pxNextFreeBlock );
 8058d3a: 6800         	ldr	r0, [r0]
 8058d3c: 9008         	str	r0, [sp, #0x20]
;                 heapVALIDATE_BLOCK_POINTER( pxBlock );
 8058d3e: 9908         	ldr	r1, [sp, #0x20]
 8058d40: 2000         	movs	r0, #0x0
 8058d42: f240 0200    	movw	r2, #0x0
 8058d46: f2c0 0200    	movt	r2, #0x0
 8058d4a: 4291         	cmp	r1, r2
 8058d4c: 9003         	str	r0, [sp, #0xc]
 8058d4e: d30e         	blo	0x8058d6e <pvPortMalloc+0xe8> @ imm = #0x1c
 8058d50: e7ff         	b	0x8058d52 <pvPortMalloc+0xcc> @ imm = #-0x2
 8058d52: 9908         	ldr	r1, [sp, #0x20]
 8058d54: f240 0000    	movw	r0, #0x0
 8058d58: f2c0 0000    	movt	r0, #0x0
 8058d5c: f641 72ff    	movw	r2, #0x1fff
 8058d60: 4402         	add	r2, r0
 8058d62: 2000         	movs	r0, #0x0
 8058d64: 4291         	cmp	r1, r2
 8058d66: bf98         	it	ls
 8058d68: 2001         	movls	r0, #0x1
 8058d6a: 9003         	str	r0, [sp, #0xc]
 8058d6c: e7ff         	b	0x8058d6e <pvPortMalloc+0xe8> @ imm = #-0x2
 8058d6e: 9803         	ldr	r0, [sp, #0xc]
;                 heapVALIDATE_BLOCK_POINTER( pxBlock );
 8058d70: 07c0         	lsls	r0, r0, #0x1f
 8058d72: b920         	cbnz	r0, 0x8058d7e <pvPortMalloc+0xf8> @ imm = #0x8
 8058d74: e7ff         	b	0x8058d76 <pvPortMalloc+0xf0> @ imm = #-0x2
 8058d76: f7ff fffe    	bl	0x8058d76 <pvPortMalloc+0xf0> @ imm = #-0x4
 8058d7a: e7ff         	b	0x8058d7c <pvPortMalloc+0xf6> @ imm = #-0x2
 8058d7c: e7fe         	b	0x8058d7c <pvPortMalloc+0xf6> @ imm = #-0x4
;                 while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
 8058d7e: e7ff         	b	0x8058d80 <pvPortMalloc+0xfa> @ imm = #-0x2
 8058d80: 9808         	ldr	r0, [sp, #0x20]
 8058d82: 6841         	ldr	r1, [r0, #0x4]
 8058d84: 9a09         	ldr	r2, [sp, #0x24]
 8058d86: 2000         	movs	r0, #0x0
 8058d88: 4291         	cmp	r1, r2
 8058d8a: 9002         	str	r0, [sp, #0x8]
 8058d8c: d207         	bhs	0x8058d9e <pvPortMalloc+0x118> @ imm = #0xe
 8058d8e: e7ff         	b	0x8058d90 <pvPortMalloc+0x10a> @ imm = #-0x2
 8058d90: 9808         	ldr	r0, [sp, #0x20]
 8058d92: 6800         	ldr	r0, [r0]
 8058d94: 2800         	cmp	r0, #0x0
 8058d96: bf18         	it	ne
 8058d98: 2001         	movne	r0, #0x1
 8058d9a: 9002         	str	r0, [sp, #0x8]
 8058d9c: e7ff         	b	0x8058d9e <pvPortMalloc+0x118> @ imm = #-0x2
 8058d9e: 9802         	ldr	r0, [sp, #0x8]
;                 while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
 8058da0: 07c0         	lsls	r0, r0, #0x1f
 8058da2: b330         	cbz	r0, 0x8058df2 <pvPortMalloc+0x16c> @ imm = #0x4c
 8058da4: e7ff         	b	0x8058da6 <pvPortMalloc+0x120> @ imm = #-0x2
;                     pxPreviousBlock = pxBlock;
 8058da6: 9808         	ldr	r0, [sp, #0x20]
 8058da8: 9007         	str	r0, [sp, #0x1c]
;                     pxBlock = heapPROTECT_BLOCK_POINTER( pxBlock->pxNextFreeBlock );
 8058daa: 9808         	ldr	r0, [sp, #0x20]
 8058dac: 6800         	ldr	r0, [r0]
 8058dae: 9008         	str	r0, [sp, #0x20]
;                     heapVALIDATE_BLOCK_POINTER( pxBlock );
 8058db0: 9908         	ldr	r1, [sp, #0x20]
 8058db2: 2000         	movs	r0, #0x0
 8058db4: f240 0200    	movw	r2, #0x0
 8058db8: f2c0 0200    	movt	r2, #0x0
 8058dbc: 4291         	cmp	r1, r2
 8058dbe: 9001         	str	r0, [sp, #0x4]
 8058dc0: d30e         	blo	0x8058de0 <pvPortMalloc+0x15a> @ imm = #0x1c
 8058dc2: e7ff         	b	0x8058dc4 <pvPortMalloc+0x13e> @ imm = #-0x2
 8058dc4: 9908         	ldr	r1, [sp, #0x20]
 8058dc6: f240 0000    	movw	r0, #0x0
 8058dca: f2c0 0000    	movt	r0, #0x0
 8058dce: f641 72ff    	movw	r2, #0x1fff
 8058dd2: 4402         	add	r2, r0
 8058dd4: 2000         	movs	r0, #0x0
 8058dd6: 4291         	cmp	r1, r2
 8058dd8: bf98         	it	ls
 8058dda: 2001         	movls	r0, #0x1
 8058ddc: 9001         	str	r0, [sp, #0x4]
 8058dde: e7ff         	b	0x8058de0 <pvPortMalloc+0x15a> @ imm = #-0x2
 8058de0: 9801         	ldr	r0, [sp, #0x4]
;                     heapVALIDATE_BLOCK_POINTER( pxBlock );
 8058de2: 07c0         	lsls	r0, r0, #0x1f
 8058de4: b920         	cbnz	r0, 0x8058df0 <pvPortMalloc+0x16a> @ imm = #0x8
 8058de6: e7ff         	b	0x8058de8 <pvPortMalloc+0x162> @ imm = #-0x2
 8058de8: f7ff fffe    	bl	0x8058de8 <pvPortMalloc+0x162> @ imm = #-0x4
 8058dec: e7ff         	b	0x8058dee <pvPortMalloc+0x168> @ imm = #-0x2
 8058dee: e7fe         	b	0x8058dee <pvPortMalloc+0x168> @ imm = #-0x4
;                 while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
 8058df0: e7c6         	b	0x8058d80 <pvPortMalloc+0xfa> @ imm = #-0x74
;                 if( pxBlock != pxEnd )
 8058df2: 9808         	ldr	r0, [sp, #0x20]
 8058df4: f240 0100    	movw	r1, #0x0
 8058df8: f2c0 0100    	movt	r1, #0x0
 8058dfc: 6809         	ldr	r1, [r1]
 8058dfe: 4288         	cmp	r0, r1
 8058e00: f000 8087    	beq.w	0x8058f12 <pvPortMalloc+0x28c> @ imm = #0x10e
 8058e04: e7ff         	b	0x8058e06 <pvPortMalloc+0x180> @ imm = #-0x2
;                     pvReturn = ( void * ) ( ( ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxPreviousBlock->pxNextFreeBlock ) ) + xHeapStructSize );
 8058e06: 9807         	ldr	r0, [sp, #0x1c]
 8058e08: 6800         	ldr	r0, [r0]
 8058e0a: 3008         	adds	r0, #0x8
 8058e0c: 9005         	str	r0, [sp, #0x14]
;                     heapVALIDATE_BLOCK_POINTER( pvReturn );
 8058e0e: 9905         	ldr	r1, [sp, #0x14]
 8058e10: 2000         	movs	r0, #0x0
 8058e12: f240 0200    	movw	r2, #0x0
 8058e16: f2c0 0200    	movt	r2, #0x0
 8058e1a: 4291         	cmp	r1, r2
 8058e1c: 9000         	str	r0, [sp]
 8058e1e: d30e         	blo	0x8058e3e <pvPortMalloc+0x1b8> @ imm = #0x1c
 8058e20: e7ff         	b	0x8058e22 <pvPortMalloc+0x19c> @ imm = #-0x2
 8058e22: 9905         	ldr	r1, [sp, #0x14]
 8058e24: f240 0000    	movw	r0, #0x0
 8058e28: f2c0 0000    	movt	r0, #0x0
 8058e2c: f641 72ff    	movw	r2, #0x1fff
 8058e30: 4402         	add	r2, r0
 8058e32: 2000         	movs	r0, #0x0
 8058e34: 4291         	cmp	r1, r2
 8058e36: bf98         	it	ls
 8058e38: 2001         	movls	r0, #0x1
 8058e3a: 9000         	str	r0, [sp]
 8058e3c: e7ff         	b	0x8058e3e <pvPortMalloc+0x1b8> @ imm = #-0x2
 8058e3e: 9800         	ldr	r0, [sp]
;                     heapVALIDATE_BLOCK_POINTER( pvReturn );
 8058e40: 07c0         	lsls	r0, r0, #0x1f
 8058e42: b920         	cbnz	r0, 0x8058e4e <pvPortMalloc+0x1c8> @ imm = #0x8
 8058e44: e7ff         	b	0x8058e46 <pvPortMalloc+0x1c0> @ imm = #-0x2
 8058e46: f7ff fffe    	bl	0x8058e46 <pvPortMalloc+0x1c0> @ imm = #-0x4
 8058e4a: e7ff         	b	0x8058e4c <pvPortMalloc+0x1c6> @ imm = #-0x2
 8058e4c: e7fe         	b	0x8058e4c <pvPortMalloc+0x1c6> @ imm = #-0x4
;                     pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8058e4e: 9808         	ldr	r0, [sp, #0x20]
 8058e50: 6800         	ldr	r0, [r0]
 8058e52: 9907         	ldr	r1, [sp, #0x1c]
 8058e54: 6008         	str	r0, [r1]
;                     configASSERT( heapSUBTRACT_WILL_UNDERFLOW( pxBlock->xBlockSize, xWantedSize ) == 0 );
 8058e56: 9808         	ldr	r0, [sp, #0x20]
 8058e58: 6840         	ldr	r0, [r0, #0x4]
 8058e5a: 9909         	ldr	r1, [sp, #0x24]
 8058e5c: 4288         	cmp	r0, r1
 8058e5e: d204         	bhs	0x8058e6a <pvPortMalloc+0x1e4> @ imm = #0x8
 8058e60: e7ff         	b	0x8058e62 <pvPortMalloc+0x1dc> @ imm = #-0x2
 8058e62: f7ff fffe    	bl	0x8058e62 <pvPortMalloc+0x1dc> @ imm = #-0x4
 8058e66: e7ff         	b	0x8058e68 <pvPortMalloc+0x1e2> @ imm = #-0x2
 8058e68: e7fe         	b	0x8058e68 <pvPortMalloc+0x1e2> @ imm = #-0x4
;                     if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8058e6a: 9808         	ldr	r0, [sp, #0x20]
 8058e6c: 6840         	ldr	r0, [r0, #0x4]
 8058e6e: 9909         	ldr	r1, [sp, #0x24]
 8058e70: 1a40         	subs	r0, r0, r1
 8058e72: 2811         	cmp	r0, #0x11
 8058e74: d31e         	blo	0x8058eb4 <pvPortMalloc+0x22e> @ imm = #0x3c
 8058e76: e7ff         	b	0x8058e78 <pvPortMalloc+0x1f2> @ imm = #-0x2
;                         pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8058e78: 9808         	ldr	r0, [sp, #0x20]
 8058e7a: 9909         	ldr	r1, [sp, #0x24]
 8058e7c: 4408         	add	r0, r1
 8058e7e: 9006         	str	r0, [sp, #0x18]
;                         configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8058e80: f89d 0018    	ldrb.w	r0, [sp, #0x18]
 8058e84: 0740         	lsls	r0, r0, #0x1d
 8058e86: b120         	cbz	r0, 0x8058e92 <pvPortMalloc+0x20c> @ imm = #0x8
 8058e88: e7ff         	b	0x8058e8a <pvPortMalloc+0x204> @ imm = #-0x2
 8058e8a: f7ff fffe    	bl	0x8058e8a <pvPortMalloc+0x204> @ imm = #-0x4
 8058e8e: e7ff         	b	0x8058e90 <pvPortMalloc+0x20a> @ imm = #-0x2
 8058e90: e7fe         	b	0x8058e90 <pvPortMalloc+0x20a> @ imm = #-0x4
;                         pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8058e92: 9808         	ldr	r0, [sp, #0x20]
 8058e94: 6840         	ldr	r0, [r0, #0x4]
 8058e96: 9909         	ldr	r1, [sp, #0x24]
 8058e98: 1a40         	subs	r0, r0, r1
 8058e9a: 9906         	ldr	r1, [sp, #0x18]
 8058e9c: 6048         	str	r0, [r1, #0x4]
;                         pxBlock->xBlockSize = xWantedSize;
 8058e9e: 9809         	ldr	r0, [sp, #0x24]
 8058ea0: 9908         	ldr	r1, [sp, #0x20]
 8058ea2: 6048         	str	r0, [r1, #0x4]
;                         pxNewBlockLink->pxNextFreeBlock = pxPreviousBlock->pxNextFreeBlock;
 8058ea4: 9807         	ldr	r0, [sp, #0x1c]
 8058ea6: 6800         	ldr	r0, [r0]
 8058ea8: 9906         	ldr	r1, [sp, #0x18]
 8058eaa: 6008         	str	r0, [r1]
;                         pxPreviousBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxNewBlockLink );
 8058eac: 9806         	ldr	r0, [sp, #0x18]
 8058eae: 9907         	ldr	r1, [sp, #0x1c]
 8058eb0: 6008         	str	r0, [r1]
;                     }
 8058eb2: e000         	b	0x8058eb6 <pvPortMalloc+0x230> @ imm = #0x0
 8058eb4: e7ff         	b	0x8058eb6 <pvPortMalloc+0x230> @ imm = #-0x2
;                     xFreeBytesRemaining -= pxBlock->xBlockSize;
 8058eb6: 9808         	ldr	r0, [sp, #0x20]
 8058eb8: 6842         	ldr	r2, [r0, #0x4]
 8058eba: f240 0000    	movw	r0, #0x0
 8058ebe: f2c0 0000    	movt	r0, #0x0
 8058ec2: 6801         	ldr	r1, [r0]
 8058ec4: 1a89         	subs	r1, r1, r2
 8058ec6: 6001         	str	r1, [r0]
;                     if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8058ec8: 6800         	ldr	r0, [r0]
 8058eca: f240 0100    	movw	r1, #0x0
 8058ece: f2c0 0100    	movt	r1, #0x0
 8058ed2: 6809         	ldr	r1, [r1]
 8058ed4: 4288         	cmp	r0, r1
 8058ed6: d20b         	bhs	0x8058ef0 <pvPortMalloc+0x26a> @ imm = #0x16
 8058ed8: e7ff         	b	0x8058eda <pvPortMalloc+0x254> @ imm = #-0x2
;                         xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8058eda: f240 0000    	movw	r0, #0x0
 8058ede: f2c0 0000    	movt	r0, #0x0
 8058ee2: 6800         	ldr	r0, [r0]
 8058ee4: f240 0100    	movw	r1, #0x0
 8058ee8: f2c0 0100    	movt	r1, #0x0
 8058eec: 6008         	str	r0, [r1]
;                     }
 8058eee: e000         	b	0x8058ef2 <pvPortMalloc+0x26c> @ imm = #0x0
 8058ef0: e7ff         	b	0x8058ef2 <pvPortMalloc+0x26c> @ imm = #-0x2
;                     heapALLOCATE_BLOCK( pxBlock );
 8058ef2: 9908         	ldr	r1, [sp, #0x20]
 8058ef4: 6848         	ldr	r0, [r1, #0x4]
 8058ef6: f040 4000    	orr	r0, r0, #0x80000000
 8058efa: 6048         	str	r0, [r1, #0x4]
;                     pxBlock->pxNextFreeBlock = NULL;
 8058efc: 9908         	ldr	r1, [sp, #0x20]
 8058efe: 2000         	movs	r0, #0x0
 8058f00: 6008         	str	r0, [r1]
;                     xNumberOfSuccessfulAllocations++;
 8058f02: f240 0100    	movw	r1, #0x0
 8058f06: f2c0 0100    	movt	r1, #0x0
 8058f0a: 6808         	ldr	r0, [r1]
 8058f0c: 3001         	adds	r0, #0x1
 8058f0e: 6008         	str	r0, [r1]
;                 }
 8058f10: e000         	b	0x8058f14 <pvPortMalloc+0x28e> @ imm = #0x0
 8058f12: e7ff         	b	0x8058f14 <pvPortMalloc+0x28e> @ imm = #-0x2
;             }
 8058f14: e000         	b	0x8058f18 <pvPortMalloc+0x292> @ imm = #0x0
 8058f16: e7ff         	b	0x8058f18 <pvPortMalloc+0x292> @ imm = #-0x2
;         }
 8058f18: e000         	b	0x8058f1c <pvPortMalloc+0x296> @ imm = #0x0
 8058f1a: e7ff         	b	0x8058f1c <pvPortMalloc+0x296> @ imm = #-0x2
;     ( void ) xTaskResumeAll();
 8058f1c: f7ff fffe    	bl	0x8058f1c <pvPortMalloc+0x296> @ imm = #-0x4
;     configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8058f20: f89d 0014    	ldrb.w	r0, [sp, #0x14]
 8058f24: 0740         	lsls	r0, r0, #0x1d
 8058f26: b120         	cbz	r0, 0x8058f32 <pvPortMalloc+0x2ac> @ imm = #0x8
 8058f28: e7ff         	b	0x8058f2a <pvPortMalloc+0x2a4> @ imm = #-0x2
 8058f2a: f7ff fffe    	bl	0x8058f2a <pvPortMalloc+0x2a4> @ imm = #-0x4
 8058f2e: e7ff         	b	0x8058f30 <pvPortMalloc+0x2aa> @ imm = #-0x2
 8058f30: e7fe         	b	0x8058f30 <pvPortMalloc+0x2aa> @ imm = #-0x4
;     return pvReturn;
 8058f32: 9805         	ldr	r0, [sp, #0x14]
 8058f34: b00a         	add	sp, #0x28
 8058f36: bd80         	pop	{r7, pc}

08058f38 <prvHeapInit>:
; {
 8058f38: b084         	sub	sp, #0x10
 8058f3a: f44f 5000    	mov.w	r0, #0x2000
;     size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8058f3e: 9000         	str	r0, [sp]
;     uxStartAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8058f40: f240 0000    	movw	r0, #0x0
 8058f44: f2c0 0000    	movt	r0, #0x0
 8058f48: 9002         	str	r0, [sp, #0x8]
;     if( ( uxStartAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8058f4a: f89d 0008    	ldrb.w	r0, [sp, #0x8]
 8058f4e: 0740         	lsls	r0, r0, #0x1d
 8058f50: b188         	cbz	r0, 0x8058f76 <prvHeapInit+0x3e> @ imm = #0x22
 8058f52: e7ff         	b	0x8058f54 <prvHeapInit+0x1c> @ imm = #-0x2
;         uxStartAddress += ( portBYTE_ALIGNMENT - 1 );
 8058f54: 9802         	ldr	r0, [sp, #0x8]
 8058f56: 3007         	adds	r0, #0x7
 8058f58: 9002         	str	r0, [sp, #0x8]
;         uxStartAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8058f5a: 9802         	ldr	r0, [sp, #0x8]
 8058f5c: f020 0007    	bic	r0, r0, #0x7
 8058f60: 9002         	str	r0, [sp, #0x8]
;         xTotalHeapSize -= ( size_t ) ( uxStartAddress - ( portPOINTER_SIZE_TYPE ) ucHeap );
 8058f62: 9a02         	ldr	r2, [sp, #0x8]
 8058f64: f240 0100    	movw	r1, #0x0
 8058f68: f2c0 0100    	movt	r1, #0x0
 8058f6c: 9800         	ldr	r0, [sp]
 8058f6e: 1a89         	subs	r1, r1, r2
 8058f70: 4408         	add	r0, r1
 8058f72: 9000         	str	r0, [sp]
;     }
 8058f74: e7ff         	b	0x8058f76 <prvHeapInit+0x3e> @ imm = #-0x2
;     xStart.pxNextFreeBlock = ( void * ) heapPROTECT_BLOCK_POINTER( uxStartAddress );
 8058f76: 9902         	ldr	r1, [sp, #0x8]
 8058f78: f240 0000    	movw	r0, #0x0
 8058f7c: f2c0 0000    	movt	r0, #0x0
 8058f80: 6001         	str	r1, [r0]
 8058f82: 2100         	movs	r1, #0x0
;     xStart.xBlockSize = ( size_t ) 0;
 8058f84: 6041         	str	r1, [r0, #0x4]
;     uxEndAddress = uxStartAddress + ( portPOINTER_SIZE_TYPE ) xTotalHeapSize;
 8058f86: 9802         	ldr	r0, [sp, #0x8]
 8058f88: 9a00         	ldr	r2, [sp]
 8058f8a: 4410         	add	r0, r2
 8058f8c: 9001         	str	r0, [sp, #0x4]
;     uxEndAddress -= ( portPOINTER_SIZE_TYPE ) xHeapStructSize;
 8058f8e: 9801         	ldr	r0, [sp, #0x4]
 8058f90: 3808         	subs	r0, #0x8
 8058f92: 9001         	str	r0, [sp, #0x4]
;     uxEndAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8058f94: 9801         	ldr	r0, [sp, #0x4]
 8058f96: f020 0007    	bic	r0, r0, #0x7
 8058f9a: 9001         	str	r0, [sp, #0x4]
;     pxEnd = ( BlockLink_t * ) uxEndAddress;
 8058f9c: 9a01         	ldr	r2, [sp, #0x4]
 8058f9e: f240 0000    	movw	r0, #0x0
 8058fa2: f2c0 0000    	movt	r0, #0x0
 8058fa6: 6002         	str	r2, [r0]
;     pxEnd->xBlockSize = 0;
 8058fa8: 6802         	ldr	r2, [r0]
 8058faa: 6051         	str	r1, [r2, #0x4]
;     pxEnd->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( NULL );
 8058fac: 6802         	ldr	r2, [r0]
 8058fae: 6011         	str	r1, [r2]
;     pxFirstFreeBlock = ( BlockLink_t * ) uxStartAddress;
 8058fb0: 9902         	ldr	r1, [sp, #0x8]
 8058fb2: 9103         	str	r1, [sp, #0xc]
;     pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxEndAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8058fb4: 9901         	ldr	r1, [sp, #0x4]
 8058fb6: 9a03         	ldr	r2, [sp, #0xc]
 8058fb8: 1a89         	subs	r1, r1, r2
 8058fba: 6051         	str	r1, [r2, #0x4]
;     pxFirstFreeBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8058fbc: 6800         	ldr	r0, [r0]
 8058fbe: 9903         	ldr	r1, [sp, #0xc]
 8058fc0: 6008         	str	r0, [r1]
;     xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8058fc2: 9803         	ldr	r0, [sp, #0xc]
 8058fc4: 6840         	ldr	r0, [r0, #0x4]
 8058fc6: f240 0100    	movw	r1, #0x0
 8058fca: f2c0 0100    	movt	r1, #0x0
 8058fce: 6008         	str	r0, [r1]
;     xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8058fd0: 9803         	ldr	r0, [sp, #0xc]
 8058fd2: 6840         	ldr	r0, [r0, #0x4]
 8058fd4: f240 0100    	movw	r1, #0x0
 8058fd8: f2c0 0100    	movt	r1, #0x0
 8058fdc: 6008         	str	r0, [r1]
; }
 8058fde: b004         	add	sp, #0x10
 8058fe0: 4770         	bx	lr

08058fe2 <vPortFree>:
; {
 8058fe2: b580         	push	{r7, lr}
 8058fe4: 466f         	mov	r7, sp
 8058fe6: b084         	sub	sp, #0x10
 8058fe8: 9003         	str	r0, [sp, #0xc]
;     uint8_t * puc = ( uint8_t * ) pv;
 8058fea: 9803         	ldr	r0, [sp, #0xc]
 8058fec: 9002         	str	r0, [sp, #0x8]
;     if( pv != NULL )
 8058fee: 9803         	ldr	r0, [sp, #0xc]
 8058ff0: 2800         	cmp	r0, #0x0
 8058ff2: d064         	beq	0x80590be <vPortFree+0xdc> @ imm = #0xc8
 8058ff4: e7ff         	b	0x8058ff6 <vPortFree+0x14> @ imm = #-0x2
;         puc -= xHeapStructSize;
 8058ff6: 9802         	ldr	r0, [sp, #0x8]
 8058ff8: 3808         	subs	r0, #0x8
 8058ffa: 9002         	str	r0, [sp, #0x8]
;         pxLink = ( void * ) puc;
 8058ffc: 9802         	ldr	r0, [sp, #0x8]
 8058ffe: 9001         	str	r0, [sp, #0x4]
;         heapVALIDATE_BLOCK_POINTER( pxLink );
 8059000: 9901         	ldr	r1, [sp, #0x4]
 8059002: 2000         	movs	r0, #0x0
 8059004: f240 0200    	movw	r2, #0x0
 8059008: f2c0 0200    	movt	r2, #0x0
 805900c: 4291         	cmp	r1, r2
 805900e: 9000         	str	r0, [sp]
 8059010: d30e         	blo	0x8059030 <vPortFree+0x4e> @ imm = #0x1c
 8059012: e7ff         	b	0x8059014 <vPortFree+0x32> @ imm = #-0x2
 8059014: 9901         	ldr	r1, [sp, #0x4]
 8059016: f240 0000    	movw	r0, #0x0
 805901a: f2c0 0000    	movt	r0, #0x0
 805901e: f641 72ff    	movw	r2, #0x1fff
 8059022: 4402         	add	r2, r0
 8059024: 2000         	movs	r0, #0x0
 8059026: 4291         	cmp	r1, r2
 8059028: bf98         	it	ls
 805902a: 2001         	movls	r0, #0x1
 805902c: 9000         	str	r0, [sp]
 805902e: e7ff         	b	0x8059030 <vPortFree+0x4e> @ imm = #-0x2
 8059030: 9800         	ldr	r0, [sp]
;         heapVALIDATE_BLOCK_POINTER( pxLink );
 8059032: 07c0         	lsls	r0, r0, #0x1f
 8059034: b920         	cbnz	r0, 0x8059040 <vPortFree+0x5e> @ imm = #0x8
 8059036: e7ff         	b	0x8059038 <vPortFree+0x56> @ imm = #-0x2
 8059038: f7ff fffe    	bl	0x8059038 <vPortFree+0x56> @ imm = #-0x4
 805903c: e7ff         	b	0x805903e <vPortFree+0x5c> @ imm = #-0x2
 805903e: e7fe         	b	0x805903e <vPortFree+0x5c> @ imm = #-0x4
;         configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8059040: 9801         	ldr	r0, [sp, #0x4]
 8059042: 79c1         	ldrb	r1, [r0, #0x7]
 8059044: 2000         	movs	r0, #0x0
 8059046: ebb0 1fd1    	cmp.w	r0, r1, lsr #7
 805904a: d104         	bne	0x8059056 <vPortFree+0x74> @ imm = #0x8
 805904c: e7ff         	b	0x805904e <vPortFree+0x6c> @ imm = #-0x2
 805904e: f7ff fffe    	bl	0x805904e <vPortFree+0x6c> @ imm = #-0x4
 8059052: e7ff         	b	0x8059054 <vPortFree+0x72> @ imm = #-0x2
 8059054: e7fe         	b	0x8059054 <vPortFree+0x72> @ imm = #-0x4
;         configASSERT( pxLink->pxNextFreeBlock == NULL );
 8059056: 9801         	ldr	r0, [sp, #0x4]
 8059058: 6800         	ldr	r0, [r0]
 805905a: b120         	cbz	r0, 0x8059066 <vPortFree+0x84> @ imm = #0x8
 805905c: e7ff         	b	0x805905e <vPortFree+0x7c> @ imm = #-0x2
 805905e: f7ff fffe    	bl	0x805905e <vPortFree+0x7c> @ imm = #-0x4
 8059062: e7ff         	b	0x8059064 <vPortFree+0x82> @ imm = #-0x2
 8059064: e7fe         	b	0x8059064 <vPortFree+0x82> @ imm = #-0x4
;         if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8059066: 9801         	ldr	r0, [sp, #0x4]
 8059068: 79c1         	ldrb	r1, [r0, #0x7]
 805906a: 2000         	movs	r0, #0x0
 805906c: ebb0 1fd1    	cmp.w	r0, r1, lsr #7
 8059070: d023         	beq	0x80590ba <vPortFree+0xd8> @ imm = #0x46
 8059072: e7ff         	b	0x8059074 <vPortFree+0x92> @ imm = #-0x2
;             if( pxLink->pxNextFreeBlock == NULL )
 8059074: 9801         	ldr	r0, [sp, #0x4]
 8059076: 6800         	ldr	r0, [r0]
 8059078: b9e8         	cbnz	r0, 0x80590b6 <vPortFree+0xd4> @ imm = #0x3a
 805907a: e7ff         	b	0x805907c <vPortFree+0x9a> @ imm = #-0x2
;                 heapFREE_BLOCK( pxLink );
 805907c: 9901         	ldr	r1, [sp, #0x4]
 805907e: 6848         	ldr	r0, [r1, #0x4]
 8059080: f020 4000    	bic	r0, r0, #0x80000000
 8059084: 6048         	str	r0, [r1, #0x4]
;                 vTaskSuspendAll();
 8059086: f7ff fffe    	bl	0x8059086 <vPortFree+0xa4> @ imm = #-0x4
;                     xFreeBytesRemaining += pxLink->xBlockSize;
 805908a: 9801         	ldr	r0, [sp, #0x4]
 805908c: 6842         	ldr	r2, [r0, #0x4]
 805908e: f240 0100    	movw	r1, #0x0
 8059092: f2c0 0100    	movt	r1, #0x0
 8059096: 6808         	ldr	r0, [r1]
 8059098: 4410         	add	r0, r2
 805909a: 6008         	str	r0, [r1]
;                     prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 805909c: 9801         	ldr	r0, [sp, #0x4]
 805909e: f000 f810    	bl	0x80590c2 <prvInsertBlockIntoFreeList> @ imm = #0x20
;                     xNumberOfSuccessfulFrees++;
 80590a2: f240 0100    	movw	r1, #0x0
 80590a6: f2c0 0100    	movt	r1, #0x0
 80590aa: 6808         	ldr	r0, [r1]
 80590ac: 3001         	adds	r0, #0x1
 80590ae: 6008         	str	r0, [r1]
;                 ( void ) xTaskResumeAll();
 80590b0: f7ff fffe    	bl	0x80590b0 <vPortFree+0xce> @ imm = #-0x4
;             }
 80590b4: e000         	b	0x80590b8 <vPortFree+0xd6> @ imm = #0x0
 80590b6: e7ff         	b	0x80590b8 <vPortFree+0xd6> @ imm = #-0x2
;         }
 80590b8: e000         	b	0x80590bc <vPortFree+0xda> @ imm = #0x0
 80590ba: e7ff         	b	0x80590bc <vPortFree+0xda> @ imm = #-0x2
;     }
 80590bc: e7ff         	b	0x80590be <vPortFree+0xdc> @ imm = #-0x2
; }
 80590be: b004         	add	sp, #0x10
 80590c0: bd80         	pop	{r7, pc}

080590c2 <prvInsertBlockIntoFreeList>:
; {
 80590c2: b580         	push	{r7, lr}
 80590c4: 466f         	mov	r7, sp
 80590c6: b084         	sub	sp, #0x10
 80590c8: 9003         	str	r0, [sp, #0xc]
;     for( pxIterator = &xStart; heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) < pxBlockToInsert; pxIterator = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 80590ca: f240 0000    	movw	r0, #0x0
 80590ce: f2c0 0000    	movt	r0, #0x0
 80590d2: 9002         	str	r0, [sp, #0x8]
 80590d4: e7ff         	b	0x80590d6 <prvInsertBlockIntoFreeList+0x14> @ imm = #-0x2
 80590d6: 9802         	ldr	r0, [sp, #0x8]
 80590d8: 6800         	ldr	r0, [r0]
 80590da: 9903         	ldr	r1, [sp, #0xc]
 80590dc: 4288         	cmp	r0, r1
 80590de: d205         	bhs	0x80590ec <prvInsertBlockIntoFreeList+0x2a> @ imm = #0xa
 80590e0: e7ff         	b	0x80590e2 <prvInsertBlockIntoFreeList+0x20> @ imm = #-0x2
;     }
 80590e2: e7ff         	b	0x80590e4 <prvInsertBlockIntoFreeList+0x22> @ imm = #-0x2
;     for( pxIterator = &xStart; heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) < pxBlockToInsert; pxIterator = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 80590e4: 9802         	ldr	r0, [sp, #0x8]
 80590e6: 6800         	ldr	r0, [r0]
 80590e8: 9002         	str	r0, [sp, #0x8]
 80590ea: e7f4         	b	0x80590d6 <prvInsertBlockIntoFreeList+0x14> @ imm = #-0x18
;     if( pxIterator != &xStart )
 80590ec: 9802         	ldr	r0, [sp, #0x8]
 80590ee: f240 0100    	movw	r1, #0x0
 80590f2: f2c0 0100    	movt	r1, #0x0
 80590f6: 4288         	cmp	r0, r1
 80590f8: d021         	beq	0x805913e <prvInsertBlockIntoFreeList+0x7c> @ imm = #0x42
 80590fa: e7ff         	b	0x80590fc <prvInsertBlockIntoFreeList+0x3a> @ imm = #-0x2
;         heapVALIDATE_BLOCK_POINTER( pxIterator );
 80590fc: 9902         	ldr	r1, [sp, #0x8]
 80590fe: 2000         	movs	r0, #0x0
 8059100: f240 0200    	movw	r2, #0x0
 8059104: f2c0 0200    	movt	r2, #0x0
 8059108: 4291         	cmp	r1, r2
 805910a: 9000         	str	r0, [sp]
 805910c: d30e         	blo	0x805912c <prvInsertBlockIntoFreeList+0x6a> @ imm = #0x1c
 805910e: e7ff         	b	0x8059110 <prvInsertBlockIntoFreeList+0x4e> @ imm = #-0x2
 8059110: 9902         	ldr	r1, [sp, #0x8]
 8059112: f240 0000    	movw	r0, #0x0
 8059116: f2c0 0000    	movt	r0, #0x0
 805911a: f641 72ff    	movw	r2, #0x1fff
 805911e: 4402         	add	r2, r0
 8059120: 2000         	movs	r0, #0x0
 8059122: 4291         	cmp	r1, r2
 8059124: bf98         	it	ls
 8059126: 2001         	movls	r0, #0x1
 8059128: 9000         	str	r0, [sp]
 805912a: e7ff         	b	0x805912c <prvInsertBlockIntoFreeList+0x6a> @ imm = #-0x2
 805912c: 9800         	ldr	r0, [sp]
;         heapVALIDATE_BLOCK_POINTER( pxIterator );
 805912e: 07c0         	lsls	r0, r0, #0x1f
 8059130: b920         	cbnz	r0, 0x805913c <prvInsertBlockIntoFreeList+0x7a> @ imm = #0x8
 8059132: e7ff         	b	0x8059134 <prvInsertBlockIntoFreeList+0x72> @ imm = #-0x2
 8059134: f7ff fffe    	bl	0x8059134 <prvInsertBlockIntoFreeList+0x72> @ imm = #-0x4
 8059138: e7ff         	b	0x805913a <prvInsertBlockIntoFreeList+0x78> @ imm = #-0x2
 805913a: e7fe         	b	0x805913a <prvInsertBlockIntoFreeList+0x78> @ imm = #-0x4
;     }
 805913c: e7ff         	b	0x805913e <prvInsertBlockIntoFreeList+0x7c> @ imm = #-0x2
;     puc = ( uint8_t * ) pxIterator;
 805913e: 9802         	ldr	r0, [sp, #0x8]
 8059140: 9001         	str	r0, [sp, #0x4]
;     if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8059142: 9801         	ldr	r0, [sp, #0x4]
 8059144: 9902         	ldr	r1, [sp, #0x8]
 8059146: 6849         	ldr	r1, [r1, #0x4]
 8059148: 4408         	add	r0, r1
 805914a: 9903         	ldr	r1, [sp, #0xc]
 805914c: 4288         	cmp	r0, r1
 805914e: d109         	bne	0x8059164 <prvInsertBlockIntoFreeList+0xa2> @ imm = #0x12
 8059150: e7ff         	b	0x8059152 <prvInsertBlockIntoFreeList+0x90> @ imm = #-0x2
;         pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8059152: 9803         	ldr	r0, [sp, #0xc]
 8059154: 6842         	ldr	r2, [r0, #0x4]
 8059156: 9902         	ldr	r1, [sp, #0x8]
 8059158: 6848         	ldr	r0, [r1, #0x4]
 805915a: 4410         	add	r0, r2
 805915c: 6048         	str	r0, [r1, #0x4]
;         pxBlockToInsert = pxIterator;
 805915e: 9802         	ldr	r0, [sp, #0x8]
 8059160: 9003         	str	r0, [sp, #0xc]
;     }
 8059162: e000         	b	0x8059166 <prvInsertBlockIntoFreeList+0xa4> @ imm = #0x0
 8059164: e7ff         	b	0x8059166 <prvInsertBlockIntoFreeList+0xa4> @ imm = #-0x2
;     puc = ( uint8_t * ) pxBlockToInsert;
 8059166: 9803         	ldr	r0, [sp, #0xc]
 8059168: 9001         	str	r0, [sp, #0x4]
;     if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 805916a: 9801         	ldr	r0, [sp, #0x4]
 805916c: 9903         	ldr	r1, [sp, #0xc]
 805916e: 6849         	ldr	r1, [r1, #0x4]
 8059170: 4408         	add	r0, r1
 8059172: 9902         	ldr	r1, [sp, #0x8]
 8059174: 6809         	ldr	r1, [r1]
 8059176: 4288         	cmp	r0, r1
 8059178: d120         	bne	0x80591bc <prvInsertBlockIntoFreeList+0xfa> @ imm = #0x40
 805917a: e7ff         	b	0x805917c <prvInsertBlockIntoFreeList+0xba> @ imm = #-0x2
;         if( heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) != pxEnd )
 805917c: 9802         	ldr	r0, [sp, #0x8]
 805917e: 6800         	ldr	r0, [r0]
 8059180: f240 0100    	movw	r1, #0x0
 8059184: f2c0 0100    	movt	r1, #0x0
 8059188: 6809         	ldr	r1, [r1]
 805918a: 4288         	cmp	r0, r1
 805918c: d00d         	beq	0x80591aa <prvInsertBlockIntoFreeList+0xe8> @ imm = #0x1a
 805918e: e7ff         	b	0x8059190 <prvInsertBlockIntoFreeList+0xce> @ imm = #-0x2
;             pxBlockToInsert->xBlockSize += heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->xBlockSize;
 8059190: 9802         	ldr	r0, [sp, #0x8]
 8059192: 6800         	ldr	r0, [r0]
 8059194: 6842         	ldr	r2, [r0, #0x4]
 8059196: 9903         	ldr	r1, [sp, #0xc]
 8059198: 6848         	ldr	r0, [r1, #0x4]
 805919a: 4410         	add	r0, r2
 805919c: 6048         	str	r0, [r1, #0x4]
;             pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->pxNextFreeBlock;
 805919e: 9802         	ldr	r0, [sp, #0x8]
 80591a0: 6800         	ldr	r0, [r0]
 80591a2: 6800         	ldr	r0, [r0]
 80591a4: 9903         	ldr	r1, [sp, #0xc]
 80591a6: 6008         	str	r0, [r1]
;         }
 80591a8: e007         	b	0x80591ba <prvInsertBlockIntoFreeList+0xf8> @ imm = #0xe
;             pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 80591aa: f240 0000    	movw	r0, #0x0
 80591ae: f2c0 0000    	movt	r0, #0x0
 80591b2: 6800         	ldr	r0, [r0]
 80591b4: 9903         	ldr	r1, [sp, #0xc]
 80591b6: 6008         	str	r0, [r1]
 80591b8: e7ff         	b	0x80591ba <prvInsertBlockIntoFreeList+0xf8> @ imm = #-0x2
;     }
 80591ba: e004         	b	0x80591c6 <prvInsertBlockIntoFreeList+0x104> @ imm = #0x8
;         pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80591bc: 9802         	ldr	r0, [sp, #0x8]
 80591be: 6800         	ldr	r0, [r0]
 80591c0: 9903         	ldr	r1, [sp, #0xc]
 80591c2: 6008         	str	r0, [r1]
 80591c4: e7ff         	b	0x80591c6 <prvInsertBlockIntoFreeList+0x104> @ imm = #-0x2
;     if( pxIterator != pxBlockToInsert )
 80591c6: 9802         	ldr	r0, [sp, #0x8]
 80591c8: 9903         	ldr	r1, [sp, #0xc]
 80591ca: 4288         	cmp	r0, r1
 80591cc: d004         	beq	0x80591d8 <prvInsertBlockIntoFreeList+0x116> @ imm = #0x8
 80591ce: e7ff         	b	0x80591d0 <prvInsertBlockIntoFreeList+0x10e> @ imm = #-0x2
;         pxIterator->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxBlockToInsert );
 80591d0: 9803         	ldr	r0, [sp, #0xc]
 80591d2: 9902         	ldr	r1, [sp, #0x8]
 80591d4: 6008         	str	r0, [r1]
;     }
 80591d6: e000         	b	0x80591da <prvInsertBlockIntoFreeList+0x118> @ imm = #0x0
 80591d8: e7ff         	b	0x80591da <prvInsertBlockIntoFreeList+0x118> @ imm = #-0x2
; }
 80591da: b004         	add	sp, #0x10
 80591dc: bd80         	pop	{r7, pc}

080591de <xPortGetFreeHeapSize>:
;     return xFreeBytesRemaining;
 80591de: f240 0000    	movw	r0, #0x0
 80591e2: f2c0 0000    	movt	r0, #0x0
 80591e6: 6800         	ldr	r0, [r0]
 80591e8: 4770         	bx	lr

080591ea <xPortGetMinimumEverFreeHeapSize>:
;     return xMinimumEverFreeBytesRemaining;
 80591ea: f240 0000    	movw	r0, #0x0
 80591ee: f2c0 0000    	movt	r0, #0x0
 80591f2: 6800         	ldr	r0, [r0]
 80591f4: 4770         	bx	lr

080591f6 <vPortInitialiseBlocks>:
; }
 80591f6: 4770         	bx	lr

080591f8 <pvPortCalloc>:
; {
 80591f8: b580         	push	{r7, lr}
 80591fa: 466f         	mov	r7, sp
 80591fc: b084         	sub	sp, #0x10
 80591fe: 9003         	str	r0, [sp, #0xc]
 8059200: 9102         	str	r1, [sp, #0x8]
 8059202: 2000         	movs	r0, #0x0
;     void * pv = NULL;
 8059204: 9001         	str	r0, [sp, #0x4]
;     if( heapMULTIPLY_WILL_OVERFLOW( xNum, xSize ) == 0 )
 8059206: 9903         	ldr	r1, [sp, #0xc]
 8059208: 9000         	str	r0, [sp]
 805920a: b161         	cbz	r1, 0x8059226 <pvPortCalloc+0x2e> @ imm = #0x18
 805920c: e7ff         	b	0x805920e <pvPortCalloc+0x16> @ imm = #-0x2
 805920e: 9902         	ldr	r1, [sp, #0x8]
 8059210: 9a03         	ldr	r2, [sp, #0xc]
 8059212: f04f 30ff    	mov.w	r0, #0xffffffff
 8059216: fbb0 f2f2    	udiv	r2, r0, r2
 805921a: 2000         	movs	r0, #0x0
 805921c: 4291         	cmp	r1, r2
 805921e: bf88         	it	hi
 8059220: 2001         	movhi	r0, #0x1
 8059222: 9000         	str	r0, [sp]
 8059224: e7ff         	b	0x8059226 <pvPortCalloc+0x2e> @ imm = #-0x2
 8059226: 9800         	ldr	r0, [sp]
;     if( heapMULTIPLY_WILL_OVERFLOW( xNum, xSize ) == 0 )
 8059228: 07c0         	lsls	r0, r0, #0x1f
 805922a: b990         	cbnz	r0, 0x8059252 <pvPortCalloc+0x5a> @ imm = #0x24
 805922c: e7ff         	b	0x805922e <pvPortCalloc+0x36> @ imm = #-0x2
;         pv = pvPortMalloc( xNum * xSize );
 805922e: 9803         	ldr	r0, [sp, #0xc]
 8059230: 9902         	ldr	r1, [sp, #0x8]
 8059232: 4348         	muls	r0, r1, r0
 8059234: f7ff fffe    	bl	0x8059234 <pvPortCalloc+0x3c> @ imm = #-0x4
 8059238: 9001         	str	r0, [sp, #0x4]
;         if( pv != NULL )
 805923a: 9801         	ldr	r0, [sp, #0x4]
 805923c: b140         	cbz	r0, 0x8059250 <pvPortCalloc+0x58> @ imm = #0x10
 805923e: e7ff         	b	0x8059240 <pvPortCalloc+0x48> @ imm = #-0x2
;             ( void ) memset( pv, 0, xNum * xSize );
 8059240: 9801         	ldr	r0, [sp, #0x4]
 8059242: 9903         	ldr	r1, [sp, #0xc]
 8059244: 9a02         	ldr	r2, [sp, #0x8]
 8059246: 434a         	muls	r2, r1, r2
 8059248: 2100         	movs	r1, #0x0
 805924a: f7ff fffe    	bl	0x805924a <pvPortCalloc+0x52> @ imm = #-0x4
;         }
 805924e: e7ff         	b	0x8059250 <pvPortCalloc+0x58> @ imm = #-0x2
;     }
 8059250: e7ff         	b	0x8059252 <pvPortCalloc+0x5a> @ imm = #-0x2
;     return pv;
 8059252: 9801         	ldr	r0, [sp, #0x4]
 8059254: b004         	add	sp, #0x10
 8059256: bd80         	pop	{r7, pc}

08059258 <xEventGroupCreate>:
;     {
 8059258: b580         	push	{r7, lr}
 805925a: 466f         	mov	r7, sp
 805925c: b082         	sub	sp, #0x8
 805925e: 201c         	movs	r0, #0x1c
;         pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8059260: f7ff fffe    	bl	0x8059260 <xEventGroupCreate+0x8> @ imm = #-0x4
 8059264: 9001         	str	r0, [sp, #0x4]
;         if( pxEventBits != NULL )
 8059266: 9801         	ldr	r0, [sp, #0x4]
 8059268: b140         	cbz	r0, 0x805927c <xEventGroupCreate+0x24> @ imm = #0x10
 805926a: e7ff         	b	0x805926c <xEventGroupCreate+0x14> @ imm = #-0x2
;             pxEventBits->uxEventBits = 0;
 805926c: 9901         	ldr	r1, [sp, #0x4]
 805926e: 2000         	movs	r0, #0x0
 8059270: 6008         	str	r0, [r1]
;             vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8059272: 9801         	ldr	r0, [sp, #0x4]
 8059274: 3004         	adds	r0, #0x4
 8059276: f7ff fffe    	bl	0x8059276 <xEventGroupCreate+0x1e> @ imm = #-0x4
;         }
 805927a: e000         	b	0x805927e <xEventGroupCreate+0x26> @ imm = #0x0
 805927c: e7ff         	b	0x805927e <xEventGroupCreate+0x26> @ imm = #-0x2
;         return pxEventBits;
 805927e: 9801         	ldr	r0, [sp, #0x4]
 8059280: b002         	add	sp, #0x8
 8059282: bd80         	pop	{r7, pc}

08059284 <xEventGroupSync>:
; {
 8059284: b580         	push	{r7, lr}
 8059286: 466f         	mov	r7, sp
 8059288: b08a         	sub	sp, #0x28
 805928a: 9009         	str	r0, [sp, #0x24]
 805928c: 9108         	str	r1, [sp, #0x20]
 805928e: 9207         	str	r2, [sp, #0x1c]
 8059290: 9306         	str	r3, [sp, #0x18]
;     EventGroup_t * pxEventBits = xEventGroup;
 8059292: 9809         	ldr	r0, [sp, #0x24]
 8059294: 9003         	str	r0, [sp, #0xc]
 8059296: 2000         	movs	r0, #0x0
;     BaseType_t xTimeoutOccurred = pdFALSE;
 8059298: 9001         	str	r0, [sp, #0x4]
;     configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 805929a: f89d 001f    	ldrb.w	r0, [sp, #0x1f]
 805929e: b120         	cbz	r0, 0x80592aa <xEventGroupSync+0x26> @ imm = #0x8
 80592a0: e7ff         	b	0x80592a2 <xEventGroupSync+0x1e> @ imm = #-0x2
 80592a2: f7ff fffe    	bl	0x80592a2 <xEventGroupSync+0x1e> @ imm = #-0x4
 80592a6: e7ff         	b	0x80592a8 <xEventGroupSync+0x24> @ imm = #-0x2
 80592a8: e7fe         	b	0x80592a8 <xEventGroupSync+0x24> @ imm = #-0x4
;     configASSERT( uxBitsToWaitFor != 0 );
 80592aa: 9807         	ldr	r0, [sp, #0x1c]
 80592ac: b920         	cbnz	r0, 0x80592b8 <xEventGroupSync+0x34> @ imm = #0x8
 80592ae: e7ff         	b	0x80592b0 <xEventGroupSync+0x2c> @ imm = #-0x2
 80592b0: f7ff fffe    	bl	0x80592b0 <xEventGroupSync+0x2c> @ imm = #-0x4
 80592b4: e7ff         	b	0x80592b6 <xEventGroupSync+0x32> @ imm = #-0x2
 80592b6: e7fe         	b	0x80592b6 <xEventGroupSync+0x32> @ imm = #-0x4
;         configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80592b8: f7ff fffe    	bl	0x80592b8 <xEventGroupSync+0x34> @ imm = #-0x4
 80592bc: 4601         	mov	r1, r0
 80592be: 2000         	movs	r0, #0x0
 80592c0: 9000         	str	r0, [sp]
 80592c2: b931         	cbnz	r1, 0x80592d2 <xEventGroupSync+0x4e> @ imm = #0xc
 80592c4: e7ff         	b	0x80592c6 <xEventGroupSync+0x42> @ imm = #-0x2
 80592c6: 9806         	ldr	r0, [sp, #0x18]
 80592c8: 2800         	cmp	r0, #0x0
 80592ca: bf18         	it	ne
 80592cc: 2001         	movne	r0, #0x1
 80592ce: 9000         	str	r0, [sp]
 80592d0: e7ff         	b	0x80592d2 <xEventGroupSync+0x4e> @ imm = #-0x2
 80592d2: 9800         	ldr	r0, [sp]
;         configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80592d4: 07c0         	lsls	r0, r0, #0x1f
 80592d6: b120         	cbz	r0, 0x80592e2 <xEventGroupSync+0x5e> @ imm = #0x8
 80592d8: e7ff         	b	0x80592da <xEventGroupSync+0x56> @ imm = #-0x2
 80592da: f7ff fffe    	bl	0x80592da <xEventGroupSync+0x56> @ imm = #-0x4
 80592de: e7ff         	b	0x80592e0 <xEventGroupSync+0x5c> @ imm = #-0x2
 80592e0: e7fe         	b	0x80592e0 <xEventGroupSync+0x5c> @ imm = #-0x4
;     vTaskSuspendAll();
 80592e2: f7ff fffe    	bl	0x80592e2 <xEventGroupSync+0x5e> @ imm = #-0x4
;         uxOriginalBitValue = pxEventBits->uxEventBits;
 80592e6: 9803         	ldr	r0, [sp, #0xc]
 80592e8: 6800         	ldr	r0, [r0]
 80592ea: 9005         	str	r0, [sp, #0x14]
;         ( void ) xEventGroupSetBits( xEventGroup, uxBitsToSet );
 80592ec: 9809         	ldr	r0, [sp, #0x24]
 80592ee: 9908         	ldr	r1, [sp, #0x20]
 80592f0: f7ff fffe    	bl	0x80592f0 <xEventGroupSync+0x6c> @ imm = #-0x4
;         if( ( ( uxOriginalBitValue | uxBitsToSet ) & uxBitsToWaitFor ) == uxBitsToWaitFor )
 80592f4: 9805         	ldr	r0, [sp, #0x14]
 80592f6: 9908         	ldr	r1, [sp, #0x20]
 80592f8: 4308         	orrs	r0, r1
 80592fa: 9907         	ldr	r1, [sp, #0x1c]
 80592fc: 4008         	ands	r0, r1
 80592fe: 4288         	cmp	r0, r1
 8059300: d10c         	bne	0x805931c <xEventGroupSync+0x98> @ imm = #0x18
 8059302: e7ff         	b	0x8059304 <xEventGroupSync+0x80> @ imm = #-0x2
;             uxReturn = ( uxOriginalBitValue | uxBitsToSet );
 8059304: 9805         	ldr	r0, [sp, #0x14]
 8059306: 9908         	ldr	r1, [sp, #0x20]
 8059308: 4308         	orrs	r0, r1
 805930a: 9004         	str	r0, [sp, #0x10]
;             pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 805930c: 9a07         	ldr	r2, [sp, #0x1c]
 805930e: 9903         	ldr	r1, [sp, #0xc]
 8059310: 6808         	ldr	r0, [r1]
 8059312: 4390         	bics	r0, r2
 8059314: 6008         	str	r0, [r1]
 8059316: 2000         	movs	r0, #0x0
;             xTicksToWait = 0;
 8059318: 9006         	str	r0, [sp, #0x18]
;         }
 805931a: e014         	b	0x8059346 <xEventGroupSync+0xc2> @ imm = #0x28
;             if( xTicksToWait != ( TickType_t ) 0 )
 805931c: 9806         	ldr	r0, [sp, #0x18]
 805931e: b158         	cbz	r0, 0x8059338 <xEventGroupSync+0xb4> @ imm = #0x16
 8059320: e7ff         	b	0x8059322 <xEventGroupSync+0x9e> @ imm = #-0x2
;                 vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | eventCLEAR_EVENTS_ON_EXIT_BIT | eventWAIT_FOR_ALL_BITS ), xTicksToWait );
 8059322: 9803         	ldr	r0, [sp, #0xc]
 8059324: 3004         	adds	r0, #0x4
 8059326: 9907         	ldr	r1, [sp, #0x1c]
 8059328: f041 61a0    	orr	r1, r1, #0x5000000
 805932c: 9a06         	ldr	r2, [sp, #0x18]
 805932e: f7ff fffe    	bl	0x805932e <xEventGroupSync+0xaa> @ imm = #-0x4
 8059332: 2000         	movs	r0, #0x0
;                 uxReturn = 0;
 8059334: 9004         	str	r0, [sp, #0x10]
;             }
 8059336: e005         	b	0x8059344 <xEventGroupSync+0xc0> @ imm = #0xa
;                 uxReturn = pxEventBits->uxEventBits;
 8059338: 9803         	ldr	r0, [sp, #0xc]
 805933a: 6800         	ldr	r0, [r0]
 805933c: 9004         	str	r0, [sp, #0x10]
 805933e: 2001         	movs	r0, #0x1
;                 xTimeoutOccurred = pdTRUE;
 8059340: 9001         	str	r0, [sp, #0x4]
 8059342: e7ff         	b	0x8059344 <xEventGroupSync+0xc0> @ imm = #-0x2
 8059344: e7ff         	b	0x8059346 <xEventGroupSync+0xc2> @ imm = #-0x2
;     xAlreadyYielded = xTaskResumeAll();
 8059346: f7ff fffe    	bl	0x8059346 <xEventGroupSync+0xc2> @ imm = #-0x4
 805934a: 9002         	str	r0, [sp, #0x8]
;     if( xTicksToWait != ( TickType_t ) 0 )
 805934c: 9806         	ldr	r0, [sp, #0x18]
 805934e: b368         	cbz	r0, 0x80593ac <xEventGroupSync+0x128> @ imm = #0x5a
 8059350: e7ff         	b	0x8059352 <xEventGroupSync+0xce> @ imm = #-0x2
;         if( xAlreadyYielded == pdFALSE )
 8059352: 9802         	ldr	r0, [sp, #0x8]
 8059354: b918         	cbnz	r0, 0x805935e <xEventGroupSync+0xda> @ imm = #0x6
 8059356: e7ff         	b	0x8059358 <xEventGroupSync+0xd4> @ imm = #-0x2
;             taskYIELD_WITHIN_API();
 8059358: f7ff fffe    	bl	0x8059358 <xEventGroupSync+0xd4> @ imm = #-0x4
;         }
 805935c: e000         	b	0x8059360 <xEventGroupSync+0xdc> @ imm = #0x0
 805935e: e7ff         	b	0x8059360 <xEventGroupSync+0xdc> @ imm = #-0x2
;         uxReturn = uxTaskResetEventItemValue();
 8059360: f7ff fffe    	bl	0x8059360 <xEventGroupSync+0xdc> @ imm = #-0x4
 8059364: 9004         	str	r0, [sp, #0x10]
;         if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8059366: f89d 0013    	ldrb.w	r0, [sp, #0x13]
 805936a: 0780         	lsls	r0, r0, #0x1e
 805936c: 2800         	cmp	r0, #0x0
 805936e: d417         	bmi	0x80593a0 <xEventGroupSync+0x11c> @ imm = #0x2e
 8059370: e7ff         	b	0x8059372 <xEventGroupSync+0xee> @ imm = #-0x2
;             taskENTER_CRITICAL();
 8059372: f7ff fffe    	bl	0x8059372 <xEventGroupSync+0xee> @ imm = #-0x4
;                 uxReturn = pxEventBits->uxEventBits;
 8059376: 9803         	ldr	r0, [sp, #0xc]
 8059378: 6800         	ldr	r0, [r0]
 805937a: 9004         	str	r0, [sp, #0x10]
;                 if( ( uxReturn & uxBitsToWaitFor ) == uxBitsToWaitFor )
 805937c: 9804         	ldr	r0, [sp, #0x10]
 805937e: 9907         	ldr	r1, [sp, #0x1c]
 8059380: 4008         	ands	r0, r1
 8059382: 4288         	cmp	r0, r1
 8059384: d106         	bne	0x8059394 <xEventGroupSync+0x110> @ imm = #0xc
 8059386: e7ff         	b	0x8059388 <xEventGroupSync+0x104> @ imm = #-0x2
;                     pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8059388: 9a07         	ldr	r2, [sp, #0x1c]
 805938a: 9903         	ldr	r1, [sp, #0xc]
 805938c: 6808         	ldr	r0, [r1]
 805938e: 4390         	bics	r0, r2
 8059390: 6008         	str	r0, [r1]
;                 }
 8059392: e000         	b	0x8059396 <xEventGroupSync+0x112> @ imm = #0x0
 8059394: e7ff         	b	0x8059396 <xEventGroupSync+0x112> @ imm = #-0x2
;             taskEXIT_CRITICAL();
 8059396: f7ff fffe    	bl	0x8059396 <xEventGroupSync+0x112> @ imm = #-0x4
 805939a: 2001         	movs	r0, #0x1
;             xTimeoutOccurred = pdTRUE;
 805939c: 9001         	str	r0, [sp, #0x4]
;         }
 805939e: e000         	b	0x80593a2 <xEventGroupSync+0x11e> @ imm = #0x0
 80593a0: e7ff         	b	0x80593a2 <xEventGroupSync+0x11e> @ imm = #-0x2
;         uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 80593a2: 9804         	ldr	r0, [sp, #0x10]
 80593a4: f020 407f    	bic	r0, r0, #0xff000000
 80593a8: 9004         	str	r0, [sp, #0x10]
;     }
 80593aa: e7ff         	b	0x80593ac <xEventGroupSync+0x128> @ imm = #-0x2
;     return uxReturn;
 80593ac: 9804         	ldr	r0, [sp, #0x10]
 80593ae: b00a         	add	sp, #0x28
 80593b0: bd80         	pop	{r7, pc}

080593b2 <xEventGroupSetBits>:
; {
 80593b2: b580         	push	{r7, lr}
 80593b4: 466f         	mov	r7, sp
 80593b6: b08c         	sub	sp, #0x30
 80593b8: 900b         	str	r0, [sp, #0x2c]
 80593ba: 910a         	str	r1, [sp, #0x28]
 80593bc: 2000         	movs	r0, #0x0
;     EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 80593be: 9005         	str	r0, [sp, #0x14]
;     EventGroup_t * pxEventBits = xEventGroup;
 80593c0: 990b         	ldr	r1, [sp, #0x2c]
 80593c2: 9102         	str	r1, [sp, #0x8]
;     BaseType_t xMatchFound = pdFALSE;
 80593c4: 9001         	str	r0, [sp, #0x4]
;     configASSERT( xEventGroup );
 80593c6: 980b         	ldr	r0, [sp, #0x2c]
 80593c8: b920         	cbnz	r0, 0x80593d4 <xEventGroupSetBits+0x22> @ imm = #0x8
 80593ca: e7ff         	b	0x80593cc <xEventGroupSetBits+0x1a> @ imm = #-0x2
 80593cc: f7ff fffe    	bl	0x80593cc <xEventGroupSetBits+0x1a> @ imm = #-0x4
 80593d0: e7ff         	b	0x80593d2 <xEventGroupSetBits+0x20> @ imm = #-0x2
 80593d2: e7fe         	b	0x80593d2 <xEventGroupSetBits+0x20> @ imm = #-0x4
;     configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80593d4: f89d 002b    	ldrb.w	r0, [sp, #0x2b]
 80593d8: b120         	cbz	r0, 0x80593e4 <xEventGroupSetBits+0x32> @ imm = #0x8
 80593da: e7ff         	b	0x80593dc <xEventGroupSetBits+0x2a> @ imm = #-0x2
 80593dc: f7ff fffe    	bl	0x80593dc <xEventGroupSetBits+0x2a> @ imm = #-0x4
 80593e0: e7ff         	b	0x80593e2 <xEventGroupSetBits+0x30> @ imm = #-0x2
 80593e2: e7fe         	b	0x80593e2 <xEventGroupSetBits+0x30> @ imm = #-0x4
;     pxList = &( pxEventBits->xTasksWaitingForBits );
 80593e4: 9802         	ldr	r0, [sp, #0x8]
 80593e6: 3004         	adds	r0, #0x4
 80593e8: 9006         	str	r0, [sp, #0x18]
;     pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80593ea: 9806         	ldr	r0, [sp, #0x18]
 80593ec: 3008         	adds	r0, #0x8
 80593ee: 9007         	str	r0, [sp, #0x1c]
;     vTaskSuspendAll();
 80593f0: f7ff fffe    	bl	0x80593f0 <xEventGroupSetBits+0x3e> @ imm = #-0x4
;         pxListItem = listGET_HEAD_ENTRY( pxList );
 80593f4: 9806         	ldr	r0, [sp, #0x18]
 80593f6: 68c0         	ldr	r0, [r0, #0xc]
 80593f8: 9009         	str	r0, [sp, #0x24]
;         pxEventBits->uxEventBits |= uxBitsToSet;
 80593fa: 9a0a         	ldr	r2, [sp, #0x28]
 80593fc: 9902         	ldr	r1, [sp, #0x8]
 80593fe: 6808         	ldr	r0, [r1]
 8059400: 4310         	orrs	r0, r2
 8059402: 6008         	str	r0, [r1]
;         while( pxListItem != pxListEnd )
 8059404: e7ff         	b	0x8059406 <xEventGroupSetBits+0x54> @ imm = #-0x2
 8059406: 9809         	ldr	r0, [sp, #0x24]
 8059408: 9907         	ldr	r1, [sp, #0x1c]
 805940a: 4288         	cmp	r0, r1
 805940c: d046         	beq	0x805949c <xEventGroupSetBits+0xea> @ imm = #0x8c
 805940e: e7ff         	b	0x8059410 <xEventGroupSetBits+0x5e> @ imm = #-0x2
;             pxNext = listGET_NEXT( pxListItem );
 8059410: 9809         	ldr	r0, [sp, #0x24]
 8059412: 6840         	ldr	r0, [r0, #0x4]
 8059414: 9008         	str	r0, [sp, #0x20]
;             uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8059416: 9809         	ldr	r0, [sp, #0x24]
 8059418: 6800         	ldr	r0, [r0]
 805941a: 9004         	str	r0, [sp, #0x10]
 805941c: 2000         	movs	r0, #0x0
;             xMatchFound = pdFALSE;
 805941e: 9001         	str	r0, [sp, #0x4]
;             uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8059420: f89d 0013    	ldrb.w	r0, [sp, #0x13]
 8059424: 0600         	lsls	r0, r0, #0x18
 8059426: 9003         	str	r0, [sp, #0xc]
;             uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8059428: 9804         	ldr	r0, [sp, #0x10]
 805942a: f020 407f    	bic	r0, r0, #0xff000000
 805942e: 9004         	str	r0, [sp, #0x10]
;             if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8059430: f89d 000f    	ldrb.w	r0, [sp, #0xf]
 8059434: 0740         	lsls	r0, r0, #0x1d
 8059436: 2800         	cmp	r0, #0x0
 8059438: d40b         	bmi	0x8059452 <xEventGroupSetBits+0xa0> @ imm = #0x16
 805943a: e7ff         	b	0x805943c <xEventGroupSetBits+0x8a> @ imm = #-0x2
;                 if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 805943c: 9804         	ldr	r0, [sp, #0x10]
 805943e: 9902         	ldr	r1, [sp, #0x8]
 8059440: 6809         	ldr	r1, [r1]
 8059442: 4208         	tst	r0, r1
 8059444: d003         	beq	0x805944e <xEventGroupSetBits+0x9c> @ imm = #0x6
 8059446: e7ff         	b	0x8059448 <xEventGroupSetBits+0x96> @ imm = #-0x2
 8059448: 2001         	movs	r0, #0x1
;                     xMatchFound = pdTRUE;
 805944a: 9001         	str	r0, [sp, #0x4]
;                 }
 805944c: e000         	b	0x8059450 <xEventGroupSetBits+0x9e> @ imm = #0x0
 805944e: e7ff         	b	0x8059450 <xEventGroupSetBits+0x9e> @ imm = #-0x2
;             }
 8059450: e00b         	b	0x805946a <xEventGroupSetBits+0xb8> @ imm = #0x16
;             else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8059452: 9904         	ldr	r1, [sp, #0x10]
 8059454: 9802         	ldr	r0, [sp, #0x8]
 8059456: 6800         	ldr	r0, [r0]
 8059458: 4008         	ands	r0, r1
 805945a: 4288         	cmp	r0, r1
 805945c: d103         	bne	0x8059466 <xEventGroupSetBits+0xb4> @ imm = #0x6
 805945e: e7ff         	b	0x8059460 <xEventGroupSetBits+0xae> @ imm = #-0x2
 8059460: 2001         	movs	r0, #0x1
;                 xMatchFound = pdTRUE;
 8059462: 9001         	str	r0, [sp, #0x4]
;             }
 8059464: e000         	b	0x8059468 <xEventGroupSetBits+0xb6> @ imm = #0x0
 8059466: e7ff         	b	0x8059468 <xEventGroupSetBits+0xb6> @ imm = #-0x2
 8059468: e7ff         	b	0x805946a <xEventGroupSetBits+0xb8> @ imm = #-0x2
;             if( xMatchFound != pdFALSE )
 805946a: 9801         	ldr	r0, [sp, #0x4]
 805946c: b198         	cbz	r0, 0x8059496 <xEventGroupSetBits+0xe4> @ imm = #0x26
 805946e: e7ff         	b	0x8059470 <xEventGroupSetBits+0xbe> @ imm = #-0x2
;                 if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8059470: f89d 000f    	ldrb.w	r0, [sp, #0xf]
 8059474: 07c0         	lsls	r0, r0, #0x1f
 8059476: b128         	cbz	r0, 0x8059484 <xEventGroupSetBits+0xd2> @ imm = #0xa
 8059478: e7ff         	b	0x805947a <xEventGroupSetBits+0xc8> @ imm = #-0x2
;                     uxBitsToClear |= uxBitsWaitedFor;
 805947a: 9904         	ldr	r1, [sp, #0x10]
 805947c: 9805         	ldr	r0, [sp, #0x14]
 805947e: 4308         	orrs	r0, r1
 8059480: 9005         	str	r0, [sp, #0x14]
;                 }
 8059482: e000         	b	0x8059486 <xEventGroupSetBits+0xd4> @ imm = #0x0
 8059484: e7ff         	b	0x8059486 <xEventGroupSetBits+0xd4> @ imm = #-0x2
;                 vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8059486: 9809         	ldr	r0, [sp, #0x24]
 8059488: 9902         	ldr	r1, [sp, #0x8]
 805948a: 6809         	ldr	r1, [r1]
 805948c: f041 7100    	orr	r1, r1, #0x2000000
 8059490: f7ff fffe    	bl	0x8059490 <xEventGroupSetBits+0xde> @ imm = #-0x4
;             }
 8059494: e7ff         	b	0x8059496 <xEventGroupSetBits+0xe4> @ imm = #-0x2
;             pxListItem = pxNext;
 8059496: 9808         	ldr	r0, [sp, #0x20]
 8059498: 9009         	str	r0, [sp, #0x24]
;         while( pxListItem != pxListEnd )
 805949a: e7b4         	b	0x8059406 <xEventGroupSetBits+0x54> @ imm = #-0x98
;         pxEventBits->uxEventBits &= ~uxBitsToClear;
 805949c: 9a05         	ldr	r2, [sp, #0x14]
 805949e: 9902         	ldr	r1, [sp, #0x8]
 80594a0: 6808         	ldr	r0, [r1]
 80594a2: 4390         	bics	r0, r2
 80594a4: 6008         	str	r0, [r1]
;     ( void ) xTaskResumeAll();
 80594a6: f7ff fffe    	bl	0x80594a6 <xEventGroupSetBits+0xf4> @ imm = #-0x4
;     return pxEventBits->uxEventBits;
 80594aa: 9802         	ldr	r0, [sp, #0x8]
 80594ac: 6800         	ldr	r0, [r0]
 80594ae: b00c         	add	sp, #0x30
 80594b0: bd80         	pop	{r7, pc}

080594b2 <xEventGroupWaitBits>:
; {
 80594b2: b580         	push	{r7, lr}
 80594b4: 466f         	mov	r7, sp
 80594b6: b08c         	sub	sp, #0x30
 80594b8: f8d7 c008    	ldr.w	r12, [r7, #0x8]
 80594bc: 900b         	str	r0, [sp, #0x2c]
 80594be: 910a         	str	r1, [sp, #0x28]
 80594c0: 9209         	str	r2, [sp, #0x24]
 80594c2: 9308         	str	r3, [sp, #0x20]
;     EventGroup_t * pxEventBits = xEventGroup;
 80594c4: 980b         	ldr	r0, [sp, #0x2c]
 80594c6: 9007         	str	r0, [sp, #0x1c]
 80594c8: 2000         	movs	r0, #0x0
;     EventBits_t uxReturn, uxControlBits = 0;
 80594ca: 9005         	str	r0, [sp, #0x14]
;     BaseType_t xTimeoutOccurred = pdFALSE;
 80594cc: 9002         	str	r0, [sp, #0x8]
;     configASSERT( xEventGroup );
 80594ce: 980b         	ldr	r0, [sp, #0x2c]
 80594d0: b920         	cbnz	r0, 0x80594dc <xEventGroupWaitBits+0x2a> @ imm = #0x8
 80594d2: e7ff         	b	0x80594d4 <xEventGroupWaitBits+0x22> @ imm = #-0x2
 80594d4: f7ff fffe    	bl	0x80594d4 <xEventGroupWaitBits+0x22> @ imm = #-0x4
 80594d8: e7ff         	b	0x80594da <xEventGroupWaitBits+0x28> @ imm = #-0x2
 80594da: e7fe         	b	0x80594da <xEventGroupWaitBits+0x28> @ imm = #-0x4
;     configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80594dc: f89d 002b    	ldrb.w	r0, [sp, #0x2b]
 80594e0: b120         	cbz	r0, 0x80594ec <xEventGroupWaitBits+0x3a> @ imm = #0x8
 80594e2: e7ff         	b	0x80594e4 <xEventGroupWaitBits+0x32> @ imm = #-0x2
 80594e4: f7ff fffe    	bl	0x80594e4 <xEventGroupWaitBits+0x32> @ imm = #-0x4
 80594e8: e7ff         	b	0x80594ea <xEventGroupWaitBits+0x38> @ imm = #-0x2
 80594ea: e7fe         	b	0x80594ea <xEventGroupWaitBits+0x38> @ imm = #-0x4
;     configASSERT( uxBitsToWaitFor != 0 );
 80594ec: 980a         	ldr	r0, [sp, #0x28]
 80594ee: b920         	cbnz	r0, 0x80594fa <xEventGroupWaitBits+0x48> @ imm = #0x8
 80594f0: e7ff         	b	0x80594f2 <xEventGroupWaitBits+0x40> @ imm = #-0x2
 80594f2: f7ff fffe    	bl	0x80594f2 <xEventGroupWaitBits+0x40> @ imm = #-0x4
 80594f6: e7ff         	b	0x80594f8 <xEventGroupWaitBits+0x46> @ imm = #-0x2
 80594f8: e7fe         	b	0x80594f8 <xEventGroupWaitBits+0x46> @ imm = #-0x4
;         configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80594fa: f7ff fffe    	bl	0x80594fa <xEventGroupWaitBits+0x48> @ imm = #-0x4
 80594fe: 4601         	mov	r1, r0
 8059500: 2000         	movs	r0, #0x0
 8059502: 9000         	str	r0, [sp]
 8059504: b931         	cbnz	r1, 0x8059514 <xEventGroupWaitBits+0x62> @ imm = #0xc
 8059506: e7ff         	b	0x8059508 <xEventGroupWaitBits+0x56> @ imm = #-0x2
 8059508: 68b8         	ldr	r0, [r7, #0x8]
 805950a: 2800         	cmp	r0, #0x0
 805950c: bf18         	it	ne
 805950e: 2001         	movne	r0, #0x1
 8059510: 9000         	str	r0, [sp]
 8059512: e7ff         	b	0x8059514 <xEventGroupWaitBits+0x62> @ imm = #-0x2
 8059514: 9800         	ldr	r0, [sp]
;         configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8059516: 07c0         	lsls	r0, r0, #0x1f
 8059518: b120         	cbz	r0, 0x8059524 <xEventGroupWaitBits+0x72> @ imm = #0x8
 805951a: e7ff         	b	0x805951c <xEventGroupWaitBits+0x6a> @ imm = #-0x2
 805951c: f7ff fffe    	bl	0x805951c <xEventGroupWaitBits+0x6a> @ imm = #-0x4
 8059520: e7ff         	b	0x8059522 <xEventGroupWaitBits+0x70> @ imm = #-0x2
 8059522: e7fe         	b	0x8059522 <xEventGroupWaitBits+0x70> @ imm = #-0x4
;     vTaskSuspendAll();
 8059524: f7ff fffe    	bl	0x8059524 <xEventGroupWaitBits+0x72> @ imm = #-0x4
;         const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8059528: 9807         	ldr	r0, [sp, #0x1c]
 805952a: 6800         	ldr	r0, [r0]
 805952c: 9001         	str	r0, [sp, #0x4]
;         xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 805952e: 9801         	ldr	r0, [sp, #0x4]
 8059530: 990a         	ldr	r1, [sp, #0x28]
 8059532: 9a08         	ldr	r2, [sp, #0x20]
 8059534: f000 f875    	bl	0x8059622 <prvTestWaitCondition> @ imm = #0xea
 8059538: 9004         	str	r0, [sp, #0x10]
;         if( xWaitConditionMet != pdFALSE )
 805953a: 9804         	ldr	r0, [sp, #0x10]
 805953c: b178         	cbz	r0, 0x805955e <xEventGroupWaitBits+0xac> @ imm = #0x1e
 805953e: e7ff         	b	0x8059540 <xEventGroupWaitBits+0x8e> @ imm = #-0x2
;             uxReturn = uxCurrentEventBits;
 8059540: 9801         	ldr	r0, [sp, #0x4]
 8059542: 9006         	str	r0, [sp, #0x18]
 8059544: 2000         	movs	r0, #0x0
;             xTicksToWait = ( TickType_t ) 0;
 8059546: 60b8         	str	r0, [r7, #0x8]
;             if( xClearOnExit != pdFALSE )
 8059548: 9809         	ldr	r0, [sp, #0x24]
 805954a: b130         	cbz	r0, 0x805955a <xEventGroupWaitBits+0xa8> @ imm = #0xc
 805954c: e7ff         	b	0x805954e <xEventGroupWaitBits+0x9c> @ imm = #-0x2
;                 pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 805954e: 9a0a         	ldr	r2, [sp, #0x28]
 8059550: 9907         	ldr	r1, [sp, #0x1c]
 8059552: 6808         	ldr	r0, [r1]
 8059554: 4390         	bics	r0, r2
 8059556: 6008         	str	r0, [r1]
;             }
 8059558: e000         	b	0x805955c <xEventGroupWaitBits+0xaa> @ imm = #0x0
 805955a: e7ff         	b	0x805955c <xEventGroupWaitBits+0xaa> @ imm = #-0x2
;         }
 805955c: e025         	b	0x80595aa <xEventGroupWaitBits+0xf8> @ imm = #0x4a
;         else if( xTicksToWait == ( TickType_t ) 0 )
 805955e: 68b8         	ldr	r0, [r7, #0x8]
 8059560: b928         	cbnz	r0, 0x805956e <xEventGroupWaitBits+0xbc> @ imm = #0xa
 8059562: e7ff         	b	0x8059564 <xEventGroupWaitBits+0xb2> @ imm = #-0x2
;             uxReturn = uxCurrentEventBits;
 8059564: 9801         	ldr	r0, [sp, #0x4]
 8059566: 9006         	str	r0, [sp, #0x18]
 8059568: 2001         	movs	r0, #0x1
;             xTimeoutOccurred = pdTRUE;
 805956a: 9002         	str	r0, [sp, #0x8]
;         }
 805956c: e01c         	b	0x80595a8 <xEventGroupWaitBits+0xf6> @ imm = #0x38
;             if( xClearOnExit != pdFALSE )
 805956e: 9809         	ldr	r0, [sp, #0x24]
 8059570: b128         	cbz	r0, 0x805957e <xEventGroupWaitBits+0xcc> @ imm = #0xa
 8059572: e7ff         	b	0x8059574 <xEventGroupWaitBits+0xc2> @ imm = #-0x2
;                 uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8059574: 9805         	ldr	r0, [sp, #0x14]
 8059576: f040 7080    	orr	r0, r0, #0x1000000
 805957a: 9005         	str	r0, [sp, #0x14]
;             }
 805957c: e000         	b	0x8059580 <xEventGroupWaitBits+0xce> @ imm = #0x0
 805957e: e7ff         	b	0x8059580 <xEventGroupWaitBits+0xce> @ imm = #-0x2
;             if( xWaitForAllBits != pdFALSE )
 8059580: 9808         	ldr	r0, [sp, #0x20]
 8059582: b128         	cbz	r0, 0x8059590 <xEventGroupWaitBits+0xde> @ imm = #0xa
 8059584: e7ff         	b	0x8059586 <xEventGroupWaitBits+0xd4> @ imm = #-0x2
;                 uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8059586: 9805         	ldr	r0, [sp, #0x14]
 8059588: f040 6080    	orr	r0, r0, #0x4000000
 805958c: 9005         	str	r0, [sp, #0x14]
;             }
 805958e: e000         	b	0x8059592 <xEventGroupWaitBits+0xe0> @ imm = #0x0
 8059590: e7ff         	b	0x8059592 <xEventGroupWaitBits+0xe0> @ imm = #-0x2
;             vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8059592: 9807         	ldr	r0, [sp, #0x1c]
 8059594: 3004         	adds	r0, #0x4
 8059596: 990a         	ldr	r1, [sp, #0x28]
 8059598: 9a05         	ldr	r2, [sp, #0x14]
 805959a: 4311         	orrs	r1, r2
 805959c: 68ba         	ldr	r2, [r7, #0x8]
 805959e: f7ff fffe    	bl	0x805959e <xEventGroupWaitBits+0xec> @ imm = #-0x4
 80595a2: 2000         	movs	r0, #0x0
;             uxReturn = 0;
 80595a4: 9006         	str	r0, [sp, #0x18]
 80595a6: e7ff         	b	0x80595a8 <xEventGroupWaitBits+0xf6> @ imm = #-0x2
 80595a8: e7ff         	b	0x80595aa <xEventGroupWaitBits+0xf8> @ imm = #-0x2
;     xAlreadyYielded = xTaskResumeAll();
 80595aa: f7ff fffe    	bl	0x80595aa <xEventGroupWaitBits+0xf8> @ imm = #-0x4
 80595ae: 9003         	str	r0, [sp, #0xc]
;     if( xTicksToWait != ( TickType_t ) 0 )
 80595b0: 68b8         	ldr	r0, [r7, #0x8]
 80595b2: b398         	cbz	r0, 0x805961c <xEventGroupWaitBits+0x16a> @ imm = #0x66
 80595b4: e7ff         	b	0x80595b6 <xEventGroupWaitBits+0x104> @ imm = #-0x2
;         if( xAlreadyYielded == pdFALSE )
 80595b6: 9803         	ldr	r0, [sp, #0xc]
 80595b8: b918         	cbnz	r0, 0x80595c2 <xEventGroupWaitBits+0x110> @ imm = #0x6
 80595ba: e7ff         	b	0x80595bc <xEventGroupWaitBits+0x10a> @ imm = #-0x2
;             taskYIELD_WITHIN_API();
 80595bc: f7ff fffe    	bl	0x80595bc <xEventGroupWaitBits+0x10a> @ imm = #-0x4
;         }
 80595c0: e000         	b	0x80595c4 <xEventGroupWaitBits+0x112> @ imm = #0x0
 80595c2: e7ff         	b	0x80595c4 <xEventGroupWaitBits+0x112> @ imm = #-0x2
;         uxReturn = uxTaskResetEventItemValue();
 80595c4: f7ff fffe    	bl	0x80595c4 <xEventGroupWaitBits+0x112> @ imm = #-0x4
 80595c8: 9006         	str	r0, [sp, #0x18]
;         if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 80595ca: f89d 001b    	ldrb.w	r0, [sp, #0x1b]
 80595ce: 0780         	lsls	r0, r0, #0x1e
 80595d0: 2800         	cmp	r0, #0x0
 80595d2: d41d         	bmi	0x8059610 <xEventGroupWaitBits+0x15e> @ imm = #0x3a
 80595d4: e7ff         	b	0x80595d6 <xEventGroupWaitBits+0x124> @ imm = #-0x2
;             taskENTER_CRITICAL();
 80595d6: f7ff fffe    	bl	0x80595d6 <xEventGroupWaitBits+0x124> @ imm = #-0x4
;                 uxReturn = pxEventBits->uxEventBits;
 80595da: 9807         	ldr	r0, [sp, #0x1c]
 80595dc: 6800         	ldr	r0, [r0]
 80595de: 9006         	str	r0, [sp, #0x18]
;                 if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 80595e0: 9806         	ldr	r0, [sp, #0x18]
 80595e2: 990a         	ldr	r1, [sp, #0x28]
 80595e4: 9a08         	ldr	r2, [sp, #0x20]
 80595e6: f000 f81c    	bl	0x8059622 <prvTestWaitCondition> @ imm = #0x38
 80595ea: b158         	cbz	r0, 0x8059604 <xEventGroupWaitBits+0x152> @ imm = #0x16
 80595ec: e7ff         	b	0x80595ee <xEventGroupWaitBits+0x13c> @ imm = #-0x2
;                     if( xClearOnExit != pdFALSE )
 80595ee: 9809         	ldr	r0, [sp, #0x24]
 80595f0: b130         	cbz	r0, 0x8059600 <xEventGroupWaitBits+0x14e> @ imm = #0xc
 80595f2: e7ff         	b	0x80595f4 <xEventGroupWaitBits+0x142> @ imm = #-0x2
;                         pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80595f4: 9a0a         	ldr	r2, [sp, #0x28]
 80595f6: 9907         	ldr	r1, [sp, #0x1c]
 80595f8: 6808         	ldr	r0, [r1]
 80595fa: 4390         	bics	r0, r2
 80595fc: 6008         	str	r0, [r1]
;                     }
 80595fe: e000         	b	0x8059602 <xEventGroupWaitBits+0x150> @ imm = #0x0
 8059600: e7ff         	b	0x8059602 <xEventGroupWaitBits+0x150> @ imm = #-0x2
;                 }
 8059602: e000         	b	0x8059606 <xEventGroupWaitBits+0x154> @ imm = #0x0
 8059604: e7ff         	b	0x8059606 <xEventGroupWaitBits+0x154> @ imm = #-0x2
 8059606: 2001         	movs	r0, #0x1
;                 xTimeoutOccurred = pdTRUE;
 8059608: 9002         	str	r0, [sp, #0x8]
;             taskEXIT_CRITICAL();
 805960a: f7ff fffe    	bl	0x805960a <xEventGroupWaitBits+0x158> @ imm = #-0x4
;         }
 805960e: e000         	b	0x8059612 <xEventGroupWaitBits+0x160> @ imm = #0x0
 8059610: e7ff         	b	0x8059612 <xEventGroupWaitBits+0x160> @ imm = #-0x2
;         uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8059612: 9806         	ldr	r0, [sp, #0x18]
 8059614: f020 407f    	bic	r0, r0, #0xff000000
 8059618: 9006         	str	r0, [sp, #0x18]
;     }
 805961a: e7ff         	b	0x805961c <xEventGroupWaitBits+0x16a> @ imm = #-0x2
;     return uxReturn;
 805961c: 9806         	ldr	r0, [sp, #0x18]
 805961e: b00c         	add	sp, #0x30
 8059620: bd80         	pop	{r7, pc}

08059622 <prvTestWaitCondition>:
; {
 8059622: b084         	sub	sp, #0x10
 8059624: 9003         	str	r0, [sp, #0xc]
 8059626: 9102         	str	r1, [sp, #0x8]
 8059628: 9201         	str	r2, [sp, #0x4]
 805962a: 2000         	movs	r0, #0x0
;     BaseType_t xWaitConditionMet = pdFALSE;
 805962c: 9000         	str	r0, [sp]
;     if( xWaitForAllBits == pdFALSE )
 805962e: 9801         	ldr	r0, [sp, #0x4]
 8059630: b950         	cbnz	r0, 0x8059648 <prvTestWaitCondition+0x26> @ imm = #0x14
 8059632: e7ff         	b	0x8059634 <prvTestWaitCondition+0x12> @ imm = #-0x2
;         if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8059634: 9803         	ldr	r0, [sp, #0xc]
 8059636: 9902         	ldr	r1, [sp, #0x8]
 8059638: 4208         	tst	r0, r1
 805963a: d003         	beq	0x8059644 <prvTestWaitCondition+0x22> @ imm = #0x6
 805963c: e7ff         	b	0x805963e <prvTestWaitCondition+0x1c> @ imm = #-0x2
 805963e: 2001         	movs	r0, #0x1
;             xWaitConditionMet = pdTRUE;
 8059640: 9000         	str	r0, [sp]
;         }
 8059642: e000         	b	0x8059646 <prvTestWaitCondition+0x24> @ imm = #0x0
 8059644: e7ff         	b	0x8059646 <prvTestWaitCondition+0x24> @ imm = #-0x2
;     }
 8059646: e00a         	b	0x805965e <prvTestWaitCondition+0x3c> @ imm = #0x14
;         if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8059648: 9803         	ldr	r0, [sp, #0xc]
 805964a: 9902         	ldr	r1, [sp, #0x8]
 805964c: 4008         	ands	r0, r1
 805964e: 4288         	cmp	r0, r1
 8059650: d103         	bne	0x805965a <prvTestWaitCondition+0x38> @ imm = #0x6
 8059652: e7ff         	b	0x8059654 <prvTestWaitCondition+0x32> @ imm = #-0x2
 8059654: 2001         	movs	r0, #0x1
;             xWaitConditionMet = pdTRUE;
 8059656: 9000         	str	r0, [sp]
;         }
 8059658: e000         	b	0x805965c <prvTestWaitCondition+0x3a> @ imm = #0x0
 805965a: e7ff         	b	0x805965c <prvTestWaitCondition+0x3a> @ imm = #-0x2
 805965c: e7ff         	b	0x805965e <prvTestWaitCondition+0x3c> @ imm = #-0x2
;     return xWaitConditionMet;
 805965e: 9800         	ldr	r0, [sp]
 8059660: b004         	add	sp, #0x10
 8059662: 4770         	bx	lr

08059664 <xEventGroupClearBits>:
; {
 8059664: b580         	push	{r7, lr}
 8059666: 466f         	mov	r7, sp
 8059668: b084         	sub	sp, #0x10
 805966a: 9003         	str	r0, [sp, #0xc]
 805966c: 9102         	str	r1, [sp, #0x8]
;     EventGroup_t * pxEventBits = xEventGroup;
 805966e: 9803         	ldr	r0, [sp, #0xc]
 8059670: 9001         	str	r0, [sp, #0x4]
;     configASSERT( xEventGroup );
 8059672: 9803         	ldr	r0, [sp, #0xc]
 8059674: b920         	cbnz	r0, 0x8059680 <xEventGroupClearBits+0x1c> @ imm = #0x8
 8059676: e7ff         	b	0x8059678 <xEventGroupClearBits+0x14> @ imm = #-0x2
 8059678: f7ff fffe    	bl	0x8059678 <xEventGroupClearBits+0x14> @ imm = #-0x4
 805967c: e7ff         	b	0x805967e <xEventGroupClearBits+0x1a> @ imm = #-0x2
 805967e: e7fe         	b	0x805967e <xEventGroupClearBits+0x1a> @ imm = #-0x4
;     configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8059680: f89d 000b    	ldrb.w	r0, [sp, #0xb]
 8059684: b120         	cbz	r0, 0x8059690 <xEventGroupClearBits+0x2c> @ imm = #0x8
 8059686: e7ff         	b	0x8059688 <xEventGroupClearBits+0x24> @ imm = #-0x2
 8059688: f7ff fffe    	bl	0x8059688 <xEventGroupClearBits+0x24> @ imm = #-0x4
 805968c: e7ff         	b	0x805968e <xEventGroupClearBits+0x2a> @ imm = #-0x2
 805968e: e7fe         	b	0x805968e <xEventGroupClearBits+0x2a> @ imm = #-0x4
;     taskENTER_CRITICAL();
 8059690: f7ff fffe    	bl	0x8059690 <xEventGroupClearBits+0x2c> @ imm = #-0x4
;         uxReturn = pxEventBits->uxEventBits;
 8059694: 9801         	ldr	r0, [sp, #0x4]
 8059696: 6800         	ldr	r0, [r0]
 8059698: 9000         	str	r0, [sp]
;         pxEventBits->uxEventBits &= ~uxBitsToClear;
 805969a: 9a02         	ldr	r2, [sp, #0x8]
 805969c: 9901         	ldr	r1, [sp, #0x4]
 805969e: 6808         	ldr	r0, [r1]
 80596a0: 4390         	bics	r0, r2
 80596a2: 6008         	str	r0, [r1]
;     taskEXIT_CRITICAL();
 80596a4: f7ff fffe    	bl	0x80596a4 <xEventGroupClearBits+0x40> @ imm = #-0x4
;     return uxReturn;
 80596a8: 9800         	ldr	r0, [sp]
 80596aa: b004         	add	sp, #0x10
 80596ac: bd80         	pop	{r7, pc}

080596ae <xEventGroupClearBitsFromISR>:
;     {
 80596ae: b580         	push	{r7, lr}
 80596b0: 466f         	mov	r7, sp
 80596b2: b084         	sub	sp, #0x10
 80596b4: 9003         	str	r0, [sp, #0xc]
 80596b6: 9102         	str	r1, [sp, #0x8]
;         xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToClear, NULL ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 80596b8: 9903         	ldr	r1, [sp, #0xc]
 80596ba: 9a02         	ldr	r2, [sp, #0x8]
 80596bc: f240 0000    	movw	r0, #0x0
 80596c0: f2c0 0000    	movt	r0, #0x0
 80596c4: 2300         	movs	r3, #0x0
 80596c6: f7ff fffe    	bl	0x80596c6 <xEventGroupClearBitsFromISR+0x18> @ imm = #-0x4
 80596ca: 9001         	str	r0, [sp, #0x4]
;         return xReturn;
 80596cc: 9801         	ldr	r0, [sp, #0x4]
 80596ce: b004         	add	sp, #0x10
 80596d0: bd80         	pop	{r7, pc}

080596d2 <vEventGroupClearBitsCallback>:
; {
 80596d2: b580         	push	{r7, lr}
 80596d4: 466f         	mov	r7, sp
 80596d6: b082         	sub	sp, #0x8
 80596d8: 9001         	str	r0, [sp, #0x4]
 80596da: 9100         	str	r1, [sp]
;     ( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 80596dc: 9801         	ldr	r0, [sp, #0x4]
 80596de: 9900         	ldr	r1, [sp]
 80596e0: f7ff fffe    	bl	0x80596e0 <vEventGroupClearBitsCallback+0xe> @ imm = #-0x4
; }
 80596e4: b002         	add	sp, #0x8
 80596e6: bd80         	pop	{r7, pc}

080596e8 <xEventGroupGetBitsFromISR>:
; {
 80596e8: b580         	push	{r7, lr}
 80596ea: 466f         	mov	r7, sp
 80596ec: b084         	sub	sp, #0x10
 80596ee: 9003         	str	r0, [sp, #0xc]
;     EventGroup_t const * const pxEventBits = xEventGroup;
 80596f0: 9803         	ldr	r0, [sp, #0xc]
 80596f2: 9001         	str	r0, [sp, #0x4]
;     uxSavedInterruptStatus = taskENTER_CRITICAL_FROM_ISR();
 80596f4: f7ff fffe    	bl	0x80596f4 <xEventGroupGetBitsFromISR+0xc> @ imm = #-0x4
 80596f8: 9002         	str	r0, [sp, #0x8]
;         uxReturn = pxEventBits->uxEventBits;
 80596fa: 9801         	ldr	r0, [sp, #0x4]
 80596fc: 6800         	ldr	r0, [r0]
 80596fe: 9000         	str	r0, [sp]
;     taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );
 8059700: 9802         	ldr	r0, [sp, #0x8]
 8059702: f7ff fffe    	bl	0x8059702 <xEventGroupGetBitsFromISR+0x1a> @ imm = #-0x4
;     return uxReturn;
 8059706: 9800         	ldr	r0, [sp]
 8059708: b004         	add	sp, #0x10
 805970a: bd80         	pop	{r7, pc}

0805970c <vEventGroupDelete>:
; {
 805970c: b580         	push	{r7, lr}
 805970e: 466f         	mov	r7, sp
 8059710: b084         	sub	sp, #0x10
 8059712: 9003         	str	r0, [sp, #0xc]
;     EventGroup_t * pxEventBits = xEventGroup;
 8059714: 9803         	ldr	r0, [sp, #0xc]
 8059716: 9002         	str	r0, [sp, #0x8]
;     configASSERT( pxEventBits );
 8059718: 9802         	ldr	r0, [sp, #0x8]
 805971a: b920         	cbnz	r0, 0x8059726 <vEventGroupDelete+0x1a> @ imm = #0x8
 805971c: e7ff         	b	0x805971e <vEventGroupDelete+0x12> @ imm = #-0x2
 805971e: f7ff fffe    	bl	0x805971e <vEventGroupDelete+0x12> @ imm = #-0x4
 8059722: e7ff         	b	0x8059724 <vEventGroupDelete+0x18> @ imm = #-0x2
 8059724: e7fe         	b	0x8059724 <vEventGroupDelete+0x18> @ imm = #-0x4
;     pxTasksWaitingForBits = &( pxEventBits->xTasksWaitingForBits );
 8059726: 9802         	ldr	r0, [sp, #0x8]
 8059728: 3004         	adds	r0, #0x4
 805972a: 9001         	str	r0, [sp, #0x4]
;     vTaskSuspendAll();
 805972c: f7ff fffe    	bl	0x805972c <vEventGroupDelete+0x20> @ imm = #-0x4
;         while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
 8059730: e7ff         	b	0x8059732 <vEventGroupDelete+0x26> @ imm = #-0x2
 8059732: 9801         	ldr	r0, [sp, #0x4]
 8059734: 6800         	ldr	r0, [r0]
 8059736: b190         	cbz	r0, 0x805975e <vEventGroupDelete+0x52> @ imm = #0x24
 8059738: e7ff         	b	0x805973a <vEventGroupDelete+0x2e> @ imm = #-0x2
;             configASSERT( pxTasksWaitingForBits->xListEnd.pxNext != ( const ListItem_t * ) &( pxTasksWaitingForBits->xListEnd ) );
 805973a: 9801         	ldr	r0, [sp, #0x4]
 805973c: f100 0108    	add.w	r1, r0, #0x8
 8059740: 68c0         	ldr	r0, [r0, #0xc]
 8059742: 4288         	cmp	r0, r1
 8059744: d104         	bne	0x8059750 <vEventGroupDelete+0x44> @ imm = #0x8
 8059746: e7ff         	b	0x8059748 <vEventGroupDelete+0x3c> @ imm = #-0x2
 8059748: f7ff fffe    	bl	0x8059748 <vEventGroupDelete+0x3c> @ imm = #-0x4
 805974c: e7ff         	b	0x805974e <vEventGroupDelete+0x42> @ imm = #-0x2
 805974e: e7fe         	b	0x805974e <vEventGroupDelete+0x42> @ imm = #-0x4
;             vTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCKED_DUE_TO_BIT_SET );
 8059750: 9801         	ldr	r0, [sp, #0x4]
 8059752: 68c0         	ldr	r0, [r0, #0xc]
 8059754: f04f 7100    	mov.w	r1, #0x2000000
 8059758: f7ff fffe    	bl	0x8059758 <vEventGroupDelete+0x4c> @ imm = #-0x4
;         while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
 805975c: e7e9         	b	0x8059732 <vEventGroupDelete+0x26> @ imm = #-0x2e
;     ( void ) xTaskResumeAll();
 805975e: f7ff fffe    	bl	0x805975e <vEventGroupDelete+0x52> @ imm = #-0x4
;         vPortFree( pxEventBits );
 8059762: 9802         	ldr	r0, [sp, #0x8]
 8059764: f7ff fffe    	bl	0x8059764 <vEventGroupDelete+0x58> @ imm = #-0x4
; }
 8059768: b004         	add	sp, #0x10
 805976a: bd80         	pop	{r7, pc}

0805976c <vEventGroupSetBitsCallback>:
; {
 805976c: b580         	push	{r7, lr}
 805976e: 466f         	mov	r7, sp
 8059770: b082         	sub	sp, #0x8
 8059772: 9001         	str	r0, [sp, #0x4]
 8059774: 9100         	str	r1, [sp]
;     ( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8059776: 9801         	ldr	r0, [sp, #0x4]
 8059778: 9900         	ldr	r1, [sp]
 805977a: f7ff fffe    	bl	0x805977a <vEventGroupSetBitsCallback+0xe> @ imm = #-0x4
; }
 805977e: b002         	add	sp, #0x8
 8059780: bd80         	pop	{r7, pc}

08059782 <xEventGroupSetBitsFromISR>:
;     {
 8059782: b580         	push	{r7, lr}
 8059784: 466f         	mov	r7, sp
 8059786: b084         	sub	sp, #0x10
 8059788: 9003         	str	r0, [sp, #0xc]
 805978a: 9102         	str	r1, [sp, #0x8]
 805978c: 9201         	str	r2, [sp, #0x4]
;         xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 805978e: 9903         	ldr	r1, [sp, #0xc]
 8059790: 9a02         	ldr	r2, [sp, #0x8]
 8059792: 9b01         	ldr	r3, [sp, #0x4]
 8059794: f240 0000    	movw	r0, #0x0
 8059798: f2c0 0000    	movt	r0, #0x0
 805979c: f7ff fffe    	bl	0x805979c <xEventGroupSetBitsFromISR+0x1a> @ imm = #-0x4
 80597a0: 9000         	str	r0, [sp]
;         return xReturn;
 80597a2: 9800         	ldr	r0, [sp]
 80597a4: b004         	add	sp, #0x10
 80597a6: bd80         	pop	{r7, pc}

080597a8 <uxEventGroupGetNumber>:
;     {
 80597a8: b083         	sub	sp, #0xc
 80597aa: 9002         	str	r0, [sp, #0x8]
;         EventGroup_t const * pxEventBits = ( EventGroup_t * ) xEventGroup; /*lint !e9087 !e9079 EventGroupHandle_t is a pointer to an EventGroup_t, but EventGroupHandle_t is kept opaque outside of this file for data hiding purposes. */
 80597ac: 9802         	ldr	r0, [sp, #0x8]
 80597ae: 9000         	str	r0, [sp]
;         if( xEventGroup == NULL )
 80597b0: 9802         	ldr	r0, [sp, #0x8]
 80597b2: b918         	cbnz	r0, 0x80597bc <uxEventGroupGetNumber+0x14> @ imm = #0x6
 80597b4: e7ff         	b	0x80597b6 <uxEventGroupGetNumber+0xe> @ imm = #-0x2
 80597b6: 2000         	movs	r0, #0x0
;             xReturn = 0;
 80597b8: 9001         	str	r0, [sp, #0x4]
;         }
 80597ba: e003         	b	0x80597c4 <uxEventGroupGetNumber+0x1c> @ imm = #0x6
;             xReturn = pxEventBits->uxEventGroupNumber;
 80597bc: 9800         	ldr	r0, [sp]
 80597be: 6980         	ldr	r0, [r0, #0x18]
 80597c0: 9001         	str	r0, [sp, #0x4]
 80597c2: e7ff         	b	0x80597c4 <uxEventGroupGetNumber+0x1c> @ imm = #-0x2
;         return xReturn;
 80597c4: 9801         	ldr	r0, [sp, #0x4]
 80597c6: b003         	add	sp, #0xc
 80597c8: 4770         	bx	lr

080597ca <vEventGroupSetNumber>:
;     {
 80597ca: b082         	sub	sp, #0x8
 80597cc: 9001         	str	r0, [sp, #0x4]
 80597ce: 9100         	str	r1, [sp]
;         ( ( EventGroup_t * ) xEventGroup )->uxEventGroupNumber = uxEventGroupNumber; /*lint !e9087 !e9079 EventGroupHandle_t is a pointer to an EventGroup_t, but EventGroupHandle_t is kept opaque outside of this file for data hiding purposes. */
 80597d0: 9800         	ldr	r0, [sp]
 80597d2: 9901         	ldr	r1, [sp, #0x4]
 80597d4: 6188         	str	r0, [r1, #0x18]
;     }
 80597d6: b002         	add	sp, #0x8
 80597d8: 4770         	bx	lr

080597da <vListInitialise>:
; {
 80597da: b081         	sub	sp, #0x4
 80597dc: 9000         	str	r0, [sp]
;     pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80597de: 9900         	ldr	r1, [sp]
 80597e0: f101 0008    	add.w	r0, r1, #0x8
 80597e4: 6048         	str	r0, [r1, #0x4]
;     pxList->xListEnd.xItemValue = portMAX_DELAY;
 80597e6: 9900         	ldr	r1, [sp]
 80597e8: f04f 30ff    	mov.w	r0, #0xffffffff
 80597ec: 6088         	str	r0, [r1, #0x8]
;     pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80597ee: 9900         	ldr	r1, [sp]
 80597f0: f101 0008    	add.w	r0, r1, #0x8
 80597f4: 60c8         	str	r0, [r1, #0xc]
;     pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80597f6: 9900         	ldr	r1, [sp]
 80597f8: f101 0008    	add.w	r0, r1, #0x8
 80597fc: 6108         	str	r0, [r1, #0x10]
;     pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80597fe: 9900         	ldr	r1, [sp]
 8059800: 2000         	movs	r0, #0x0
 8059802: 6008         	str	r0, [r1]
; }
 8059804: b001         	add	sp, #0x4
 8059806: 4770         	bx	lr

08059808 <vListInitialiseItem>:
; {
 8059808: b081         	sub	sp, #0x4
 805980a: 9000         	str	r0, [sp]
;     pxItem->pxContainer = NULL;
 805980c: 9900         	ldr	r1, [sp]
 805980e: 2000         	movs	r0, #0x0
 8059810: 6108         	str	r0, [r1, #0x10]
; }
 8059812: b001         	add	sp, #0x4
 8059814: 4770         	bx	lr

08059816 <vListInsertEnd>:
; {
 8059816: b083         	sub	sp, #0xc
 8059818: 9002         	str	r0, [sp, #0x8]
 805981a: 9101         	str	r1, [sp, #0x4]
;     ListItem_t * const pxIndex = pxList->pxIndex;
 805981c: 9802         	ldr	r0, [sp, #0x8]
 805981e: 6840         	ldr	r0, [r0, #0x4]
 8059820: 9000         	str	r0, [sp]
;     pxNewListItem->pxNext = pxIndex;
 8059822: 9800         	ldr	r0, [sp]
 8059824: 9901         	ldr	r1, [sp, #0x4]
 8059826: 6048         	str	r0, [r1, #0x4]
;     pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8059828: 9800         	ldr	r0, [sp]
 805982a: 6880         	ldr	r0, [r0, #0x8]
 805982c: 9901         	ldr	r1, [sp, #0x4]
 805982e: 6088         	str	r0, [r1, #0x8]
;     pxIndex->pxPrevious->pxNext = pxNewListItem;
 8059830: 9801         	ldr	r0, [sp, #0x4]
 8059832: 9900         	ldr	r1, [sp]
 8059834: 6889         	ldr	r1, [r1, #0x8]
 8059836: 6048         	str	r0, [r1, #0x4]
;     pxIndex->pxPrevious = pxNewListItem;
 8059838: 9801         	ldr	r0, [sp, #0x4]
 805983a: 9900         	ldr	r1, [sp]
 805983c: 6088         	str	r0, [r1, #0x8]
;     pxNewListItem->pxContainer = pxList;
 805983e: 9802         	ldr	r0, [sp, #0x8]
 8059840: 9901         	ldr	r1, [sp, #0x4]
 8059842: 6108         	str	r0, [r1, #0x10]
;     ( pxList->uxNumberOfItems )++;
 8059844: 9902         	ldr	r1, [sp, #0x8]
 8059846: 6808         	ldr	r0, [r1]
 8059848: 3001         	adds	r0, #0x1
 805984a: 6008         	str	r0, [r1]
; }
 805984c: b003         	add	sp, #0xc
 805984e: 4770         	bx	lr

08059850 <vListInsert>:
; {
 8059850: b084         	sub	sp, #0x10
 8059852: 9003         	str	r0, [sp, #0xc]
 8059854: 9102         	str	r1, [sp, #0x8]
;     const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8059856: 9802         	ldr	r0, [sp, #0x8]
 8059858: 6800         	ldr	r0, [r0]
 805985a: 9000         	str	r0, [sp]
;     if( xValueOfInsertion == portMAX_DELAY )
 805985c: 9800         	ldr	r0, [sp]
 805985e: 3001         	adds	r0, #0x1
 8059860: b920         	cbnz	r0, 0x805986c <vListInsert+0x1c> @ imm = #0x8
 8059862: e7ff         	b	0x8059864 <vListInsert+0x14> @ imm = #-0x2
;         pxIterator = pxList->xListEnd.pxPrevious;
 8059864: 9803         	ldr	r0, [sp, #0xc]
 8059866: 6900         	ldr	r0, [r0, #0x10]
 8059868: 9001         	str	r0, [sp, #0x4]
;     }
 805986a: e010         	b	0x805988e <vListInsert+0x3e> @ imm = #0x20
;         for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 805986c: 9803         	ldr	r0, [sp, #0xc]
 805986e: 3008         	adds	r0, #0x8
 8059870: 9001         	str	r0, [sp, #0x4]
 8059872: e7ff         	b	0x8059874 <vListInsert+0x24> @ imm = #-0x2
 8059874: 9801         	ldr	r0, [sp, #0x4]
 8059876: 6840         	ldr	r0, [r0, #0x4]
 8059878: 6800         	ldr	r0, [r0]
 805987a: 9900         	ldr	r1, [sp]
 805987c: 4288         	cmp	r0, r1
 805987e: d805         	bhi	0x805988c <vListInsert+0x3c> @ imm = #0xa
 8059880: e7ff         	b	0x8059882 <vListInsert+0x32> @ imm = #-0x2
;         }
 8059882: e7ff         	b	0x8059884 <vListInsert+0x34> @ imm = #-0x2
;         for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8059884: 9801         	ldr	r0, [sp, #0x4]
 8059886: 6840         	ldr	r0, [r0, #0x4]
 8059888: 9001         	str	r0, [sp, #0x4]
 805988a: e7f3         	b	0x8059874 <vListInsert+0x24> @ imm = #-0x1a
 805988c: e7ff         	b	0x805988e <vListInsert+0x3e> @ imm = #-0x2
;     pxNewListItem->pxNext = pxIterator->pxNext;
 805988e: 9801         	ldr	r0, [sp, #0x4]
 8059890: 6840         	ldr	r0, [r0, #0x4]
 8059892: 9902         	ldr	r1, [sp, #0x8]
 8059894: 6048         	str	r0, [r1, #0x4]
;     pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8059896: 9802         	ldr	r0, [sp, #0x8]
 8059898: 6841         	ldr	r1, [r0, #0x4]
 805989a: 6088         	str	r0, [r1, #0x8]
;     pxNewListItem->pxPrevious = pxIterator;
 805989c: 9801         	ldr	r0, [sp, #0x4]
 805989e: 9902         	ldr	r1, [sp, #0x8]
 80598a0: 6088         	str	r0, [r1, #0x8]
;     pxIterator->pxNext = pxNewListItem;
 80598a2: 9802         	ldr	r0, [sp, #0x8]
 80598a4: 9901         	ldr	r1, [sp, #0x4]
 80598a6: 6048         	str	r0, [r1, #0x4]
;     pxNewListItem->pxContainer = pxList;
 80598a8: 9803         	ldr	r0, [sp, #0xc]
 80598aa: 9902         	ldr	r1, [sp, #0x8]
 80598ac: 6108         	str	r0, [r1, #0x10]
;     ( pxList->uxNumberOfItems )++;
 80598ae: 9903         	ldr	r1, [sp, #0xc]
 80598b0: 6808         	ldr	r0, [r1]
 80598b2: 3001         	adds	r0, #0x1
 80598b4: 6008         	str	r0, [r1]
; }
 80598b6: b004         	add	sp, #0x10
 80598b8: 4770         	bx	lr

080598ba <uxListRemove>:
; {
 80598ba: b082         	sub	sp, #0x8
 80598bc: 9001         	str	r0, [sp, #0x4]
;     List_t * const pxList = pxItemToRemove->pxContainer;
 80598be: 9801         	ldr	r0, [sp, #0x4]
 80598c0: 6900         	ldr	r0, [r0, #0x10]
 80598c2: 9000         	str	r0, [sp]
;     pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80598c4: 9801         	ldr	r0, [sp, #0x4]
 80598c6: 6841         	ldr	r1, [r0, #0x4]
 80598c8: 6880         	ldr	r0, [r0, #0x8]
 80598ca: 6088         	str	r0, [r1, #0x8]
;     pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80598cc: 9901         	ldr	r1, [sp, #0x4]
 80598ce: 6848         	ldr	r0, [r1, #0x4]
 80598d0: 6889         	ldr	r1, [r1, #0x8]
 80598d2: 6048         	str	r0, [r1, #0x4]
;     if( pxList->pxIndex == pxItemToRemove )
 80598d4: 9800         	ldr	r0, [sp]
 80598d6: 6840         	ldr	r0, [r0, #0x4]
 80598d8: 9901         	ldr	r1, [sp, #0x4]
 80598da: 4288         	cmp	r0, r1
 80598dc: d105         	bne	0x80598ea <uxListRemove+0x30> @ imm = #0xa
 80598de: e7ff         	b	0x80598e0 <uxListRemove+0x26> @ imm = #-0x2
;         pxList->pxIndex = pxItemToRemove->pxPrevious;
 80598e0: 9801         	ldr	r0, [sp, #0x4]
 80598e2: 6880         	ldr	r0, [r0, #0x8]
 80598e4: 9900         	ldr	r1, [sp]
 80598e6: 6048         	str	r0, [r1, #0x4]
;     }
 80598e8: e000         	b	0x80598ec <uxListRemove+0x32> @ imm = #0x0
 80598ea: e7ff         	b	0x80598ec <uxListRemove+0x32> @ imm = #-0x2
;     pxItemToRemove->pxContainer = NULL;
 80598ec: 9901         	ldr	r1, [sp, #0x4]
 80598ee: 2000         	movs	r0, #0x0
 80598f0: 6108         	str	r0, [r1, #0x10]
;     ( pxList->uxNumberOfItems )--;
 80598f2: 9900         	ldr	r1, [sp]
 80598f4: 6808         	ldr	r0, [r1]
 80598f6: 3801         	subs	r0, #0x1
 80598f8: 6008         	str	r0, [r1]
;     return pxList->uxNumberOfItems;
 80598fa: 9800         	ldr	r0, [sp]
 80598fc: 6800         	ldr	r0, [r0]
 80598fe: b002         	add	sp, #0x8
 8059900: 4770         	bx	lr

08059902 <xQueueGenericReset>:
; {
 8059902: b580         	push	{r7, lr}
 8059904: 466f         	mov	r7, sp
 8059906: b084         	sub	sp, #0x10
 8059908: 9003         	str	r0, [sp, #0xc]
 805990a: 9102         	str	r1, [sp, #0x8]
 805990c: 2001         	movs	r0, #0x1
;     BaseType_t xReturn = pdPASS;
 805990e: 9001         	str	r0, [sp, #0x4]
;     Queue_t * const pxQueue = xQueue;
 8059910: 9803         	ldr	r0, [sp, #0xc]
 8059912: 9000         	str	r0, [sp]
;     configASSERT( pxQueue );
 8059914: 9800         	ldr	r0, [sp]
 8059916: b920         	cbnz	r0, 0x8059922 <xQueueGenericReset+0x20> @ imm = #0x8
 8059918: e7ff         	b	0x805991a <xQueueGenericReset+0x18> @ imm = #-0x2
 805991a: f7ff fffe    	bl	0x805991a <xQueueGenericReset+0x18> @ imm = #-0x4
 805991e: e7ff         	b	0x8059920 <xQueueGenericReset+0x1e> @ imm = #-0x2
 8059920: e7fe         	b	0x8059920 <xQueueGenericReset+0x1e> @ imm = #-0x4
;     if( ( pxQueue != NULL ) &&
 8059922: 9800         	ldr	r0, [sp]
 8059924: 2800         	cmp	r0, #0x0
 8059926: d04d         	beq	0x80599c4 <xQueueGenericReset+0xc2> @ imm = #0x9a
 8059928: e7ff         	b	0x805992a <xQueueGenericReset+0x28> @ imm = #-0x2
;         ( pxQueue->uxLength >= 1U ) &&
 805992a: 9800         	ldr	r0, [sp]
 805992c: 6bc0         	ldr	r0, [r0, #0x3c]
 805992e: 2800         	cmp	r0, #0x0
 8059930: d048         	beq	0x80599c4 <xQueueGenericReset+0xc2> @ imm = #0x90
 8059932: e7ff         	b	0x8059934 <xQueueGenericReset+0x32> @ imm = #-0x2
;         ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8059934: 9800         	ldr	r0, [sp]
 8059936: 6bc2         	ldr	r2, [r0, #0x3c]
 8059938: 6c01         	ldr	r1, [r0, #0x40]
 805993a: f04f 30ff    	mov.w	r0, #0xffffffff
 805993e: fbb0 f0f2    	udiv	r0, r0, r2
;     if( ( pxQueue != NULL ) &&
 8059942: 4288         	cmp	r0, r1
 8059944: d33e         	blo	0x80599c4 <xQueueGenericReset+0xc2> @ imm = #0x7c
 8059946: e7ff         	b	0x8059948 <xQueueGenericReset+0x46> @ imm = #-0x2
;         taskENTER_CRITICAL();
 8059948: f7ff fffe    	bl	0x8059948 <xQueueGenericReset+0x46> @ imm = #-0x4
;             pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 805994c: 9900         	ldr	r1, [sp]
 805994e: 680b         	ldr	r3, [r1]
 8059950: 6bc8         	ldr	r0, [r1, #0x3c]
 8059952: 6c0a         	ldr	r2, [r1, #0x40]
 8059954: fb00 3002    	mla	r0, r0, r2, r3
 8059958: 6088         	str	r0, [r1, #0x8]
;             pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 805995a: 9900         	ldr	r1, [sp]
 805995c: 2000         	movs	r0, #0x0
 805995e: 6388         	str	r0, [r1, #0x38]
;             pxQueue->pcWriteTo = pxQueue->pcHead;
 8059960: 9900         	ldr	r1, [sp]
 8059962: 6808         	ldr	r0, [r1]
 8059964: 6048         	str	r0, [r1, #0x4]
;             pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8059966: 9900         	ldr	r1, [sp]
 8059968: 680b         	ldr	r3, [r1]
 805996a: 6bc8         	ldr	r0, [r1, #0x3c]
 805996c: 6c0a         	ldr	r2, [r1, #0x40]
 805996e: 3801         	subs	r0, #0x1
 8059970: fb00 3002    	mla	r0, r0, r2, r3
 8059974: 60c8         	str	r0, [r1, #0xc]
;             pxQueue->cRxLock = queueUNLOCKED;
 8059976: 9900         	ldr	r1, [sp]
 8059978: 20ff         	movs	r0, #0xff
 805997a: f881 0044    	strb.w	r0, [r1, #0x44]
;             pxQueue->cTxLock = queueUNLOCKED;
 805997e: 9900         	ldr	r1, [sp]
 8059980: f881 0045    	strb.w	r0, [r1, #0x45]
;             if( xNewQueue == pdFALSE )
 8059984: 9802         	ldr	r0, [sp, #0x8]
 8059986: b988         	cbnz	r0, 0x80599ac <xQueueGenericReset+0xaa> @ imm = #0x22
 8059988: e7ff         	b	0x805998a <xQueueGenericReset+0x88> @ imm = #-0x2
;                 if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 805998a: 9800         	ldr	r0, [sp]
 805998c: 6900         	ldr	r0, [r0, #0x10]
 805998e: b158         	cbz	r0, 0x80599a8 <xQueueGenericReset+0xa6> @ imm = #0x16
 8059990: e7ff         	b	0x8059992 <xQueueGenericReset+0x90> @ imm = #-0x2
;                     if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8059992: 9800         	ldr	r0, [sp]
 8059994: 3010         	adds	r0, #0x10
 8059996: f7ff fffe    	bl	0x8059996 <xQueueGenericReset+0x94> @ imm = #-0x4
 805999a: b118         	cbz	r0, 0x80599a4 <xQueueGenericReset+0xa2> @ imm = #0x6
 805999c: e7ff         	b	0x805999e <xQueueGenericReset+0x9c> @ imm = #-0x2
;                         queueYIELD_IF_USING_PREEMPTION();
 805999e: f7ff fffe    	bl	0x805999e <xQueueGenericReset+0x9c> @ imm = #-0x4
;                     }
 80599a2: e000         	b	0x80599a6 <xQueueGenericReset+0xa4> @ imm = #0x0
 80599a4: e7ff         	b	0x80599a6 <xQueueGenericReset+0xa4> @ imm = #-0x2
;                 }
 80599a6: e000         	b	0x80599aa <xQueueGenericReset+0xa8> @ imm = #0x0
 80599a8: e7ff         	b	0x80599aa <xQueueGenericReset+0xa8> @ imm = #-0x2
;             }
 80599aa: e008         	b	0x80599be <xQueueGenericReset+0xbc> @ imm = #0x10
;                 vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80599ac: 9800         	ldr	r0, [sp]
 80599ae: 3010         	adds	r0, #0x10
 80599b0: f7ff fffe    	bl	0x80599b0 <xQueueGenericReset+0xae> @ imm = #-0x4
;                 vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80599b4: 9800         	ldr	r0, [sp]
 80599b6: 3024         	adds	r0, #0x24
 80599b8: f7ff fffe    	bl	0x80599b8 <xQueueGenericReset+0xb6> @ imm = #-0x4
 80599bc: e7ff         	b	0x80599be <xQueueGenericReset+0xbc> @ imm = #-0x2
;         taskEXIT_CRITICAL();
 80599be: f7ff fffe    	bl	0x80599be <xQueueGenericReset+0xbc> @ imm = #-0x4
;     }
 80599c2: e002         	b	0x80599ca <xQueueGenericReset+0xc8> @ imm = #0x4
 80599c4: 2000         	movs	r0, #0x0
;         xReturn = pdFAIL;
 80599c6: 9001         	str	r0, [sp, #0x4]
 80599c8: e7ff         	b	0x80599ca <xQueueGenericReset+0xc8> @ imm = #-0x2
;     configASSERT( xReturn != pdFAIL );
 80599ca: 9801         	ldr	r0, [sp, #0x4]
 80599cc: b920         	cbnz	r0, 0x80599d8 <xQueueGenericReset+0xd6> @ imm = #0x8
 80599ce: e7ff         	b	0x80599d0 <xQueueGenericReset+0xce> @ imm = #-0x2
 80599d0: f7ff fffe    	bl	0x80599d0 <xQueueGenericReset+0xce> @ imm = #-0x4
 80599d4: e7ff         	b	0x80599d6 <xQueueGenericReset+0xd4> @ imm = #-0x2
 80599d6: e7fe         	b	0x80599d6 <xQueueGenericReset+0xd4> @ imm = #-0x4
;     return xReturn;
 80599d8: 9801         	ldr	r0, [sp, #0x4]
 80599da: b004         	add	sp, #0x10
 80599dc: bd80         	pop	{r7, pc}

080599de <xQueueGenericCreate>:
;     {
 80599de: b580         	push	{r7, lr}
 80599e0: 466f         	mov	r7, sp
 80599e2: b088         	sub	sp, #0x20
 80599e4: 9007         	str	r0, [sp, #0x1c]
 80599e6: 9106         	str	r1, [sp, #0x18]
 80599e8: f807 2c09    	strb	r2, [r7, #-9]
 80599ec: 2000         	movs	r0, #0x0
;         Queue_t * pxNewQueue = NULL;
 80599ee: 9004         	str	r0, [sp, #0x10]
;         if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80599f0: 9807         	ldr	r0, [sp, #0x1c]
 80599f2: b380         	cbz	r0, 0x8059a56 <xQueueGenericCreate+0x78> @ imm = #0x60
 80599f4: e7ff         	b	0x80599f6 <xQueueGenericCreate+0x18> @ imm = #-0x2
;             ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80599f6: 9907         	ldr	r1, [sp, #0x1c]
 80599f8: f04f 30ff    	mov.w	r0, #0xffffffff
 80599fc: fbb0 f0f1    	udiv	r0, r0, r1
 8059a00: 9906         	ldr	r1, [sp, #0x18]
 8059a02: 4288         	cmp	r0, r1
 8059a04: d327         	blo	0x8059a56 <xQueueGenericCreate+0x78> @ imm = #0x4e
 8059a06: e7ff         	b	0x8059a08 <xQueueGenericCreate+0x2a> @ imm = #-0x2
;             ( ( UBaseType_t ) ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8059a08: 9807         	ldr	r0, [sp, #0x1c]
 8059a0a: 9906         	ldr	r1, [sp, #0x18]
 8059a0c: 4348         	muls	r0, r1, r0
;         if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8059a0e: f110 0f51    	cmn.w	r0, #0x51
 8059a12: d820         	bhi	0x8059a56 <xQueueGenericCreate+0x78> @ imm = #0x40
 8059a14: e7ff         	b	0x8059a16 <xQueueGenericCreate+0x38> @ imm = #-0x2
;             xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8059a16: 9807         	ldr	r0, [sp, #0x1c]
 8059a18: 9906         	ldr	r1, [sp, #0x18]
 8059a1a: 4348         	muls	r0, r1, r0
 8059a1c: 9003         	str	r0, [sp, #0xc]
;             pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8059a1e: 9803         	ldr	r0, [sp, #0xc]
 8059a20: 3050         	adds	r0, #0x50
 8059a22: f7ff fffe    	bl	0x8059a22 <xQueueGenericCreate+0x44> @ imm = #-0x4
 8059a26: 9004         	str	r0, [sp, #0x10]
;             if( pxNewQueue != NULL )
 8059a28: 9804         	ldr	r0, [sp, #0x10]
 8059a2a: b190         	cbz	r0, 0x8059a52 <xQueueGenericCreate+0x74> @ imm = #0x24
 8059a2c: e7ff         	b	0x8059a2e <xQueueGenericCreate+0x50> @ imm = #-0x2
;                 pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8059a2e: 9804         	ldr	r0, [sp, #0x10]
 8059a30: 9002         	str	r0, [sp, #0x8]
;                 pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8059a32: 9802         	ldr	r0, [sp, #0x8]
 8059a34: 3050         	adds	r0, #0x50
 8059a36: 9002         	str	r0, [sp, #0x8]
;                 prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8059a38: 9807         	ldr	r0, [sp, #0x1c]
 8059a3a: 9906         	ldr	r1, [sp, #0x18]
 8059a3c: 9a02         	ldr	r2, [sp, #0x8]
 8059a3e: f817 3c09    	ldrb	r3, [r7, #-9]
 8059a42: f8dd c010    	ldr.w	r12, [sp, #0x10]
 8059a46: 46ee         	mov	lr, sp
 8059a48: f8ce c000    	str.w	r12, [lr]
 8059a4c: f000 f80e    	bl	0x8059a6c <prvInitialiseNewQueue> @ imm = #0x1c
;             }
 8059a50: e000         	b	0x8059a54 <xQueueGenericCreate+0x76> @ imm = #0x0
 8059a52: e7ff         	b	0x8059a54 <xQueueGenericCreate+0x76> @ imm = #-0x2
;         }
 8059a54: e007         	b	0x8059a66 <xQueueGenericCreate+0x88> @ imm = #0xe
;             configASSERT( pxNewQueue );
 8059a56: 9804         	ldr	r0, [sp, #0x10]
 8059a58: b920         	cbnz	r0, 0x8059a64 <xQueueGenericCreate+0x86> @ imm = #0x8
 8059a5a: e7ff         	b	0x8059a5c <xQueueGenericCreate+0x7e> @ imm = #-0x2
 8059a5c: f7ff fffe    	bl	0x8059a5c <xQueueGenericCreate+0x7e> @ imm = #-0x4
 8059a60: e7ff         	b	0x8059a62 <xQueueGenericCreate+0x84> @ imm = #-0x2
 8059a62: e7fe         	b	0x8059a62 <xQueueGenericCreate+0x84> @ imm = #-0x4
 8059a64: e7ff         	b	0x8059a66 <xQueueGenericCreate+0x88> @ imm = #-0x2
;         return pxNewQueue;
 8059a66: 9804         	ldr	r0, [sp, #0x10]
 8059a68: b008         	add	sp, #0x20
 8059a6a: bd80         	pop	{r7, pc}

08059a6c <prvInitialiseNewQueue>:
; {
 8059a6c: b580         	push	{r7, lr}
 8059a6e: 466f         	mov	r7, sp
 8059a70: b084         	sub	sp, #0x10
 8059a72: f8d7 c008    	ldr.w	r12, [r7, #0x8]
 8059a76: 9003         	str	r0, [sp, #0xc]
 8059a78: 9102         	str	r1, [sp, #0x8]
 8059a7a: 9201         	str	r2, [sp, #0x4]
 8059a7c: f807 3c0d    	strb	r3, [r7, #-13]
;     if( uxItemSize == ( UBaseType_t ) 0 )
 8059a80: 9802         	ldr	r0, [sp, #0x8]
 8059a82: b918         	cbnz	r0, 0x8059a8c <prvInitialiseNewQueue+0x20> @ imm = #0x6
 8059a84: e7ff         	b	0x8059a86 <prvInitialiseNewQueue+0x1a> @ imm = #-0x2
;         pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8059a86: 68b8         	ldr	r0, [r7, #0x8]
 8059a88: 6000         	str	r0, [r0]
;     }
 8059a8a: e003         	b	0x8059a94 <prvInitialiseNewQueue+0x28> @ imm = #0x6
;         pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8059a8c: 9801         	ldr	r0, [sp, #0x4]
 8059a8e: 68b9         	ldr	r1, [r7, #0x8]
 8059a90: 6008         	str	r0, [r1]
 8059a92: e7ff         	b	0x8059a94 <prvInitialiseNewQueue+0x28> @ imm = #-0x2
;     pxNewQueue->uxLength = uxQueueLength;
 8059a94: 9803         	ldr	r0, [sp, #0xc]
 8059a96: 68b9         	ldr	r1, [r7, #0x8]
 8059a98: 63c8         	str	r0, [r1, #0x3c]
;     pxNewQueue->uxItemSize = uxItemSize;
 8059a9a: 9802         	ldr	r0, [sp, #0x8]
 8059a9c: 68b9         	ldr	r1, [r7, #0x8]
 8059a9e: 6408         	str	r0, [r1, #0x40]
;     ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8059aa0: 68b8         	ldr	r0, [r7, #0x8]
 8059aa2: 2101         	movs	r1, #0x1
 8059aa4: f7ff fffe    	bl	0x8059aa4 <prvInitialiseNewQueue+0x38> @ imm = #-0x4
;         pxNewQueue->ucQueueType = ucQueueType;
 8059aa8: f817 0c0d    	ldrb	r0, [r7, #-13]
 8059aac: 68b9         	ldr	r1, [r7, #0x8]
 8059aae: f881 004c    	strb.w	r0, [r1, #0x4c]
; }
 8059ab2: b004         	add	sp, #0x10
 8059ab4: bd80         	pop	{r7, pc}

08059ab6 <xQueueCreateMutex>:
;     {
 8059ab6: b580         	push	{r7, lr}
 8059ab8: 466f         	mov	r7, sp
 8059aba: b084         	sub	sp, #0x10
 8059abc: f807 0c01    	strb	r0, [r7, #-1]
 8059ac0: 2001         	movs	r0, #0x1
;         const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8059ac2: 9001         	str	r0, [sp, #0x4]
 8059ac4: 2100         	movs	r1, #0x0
 8059ac6: 9100         	str	r1, [sp]
;         xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8059ac8: f817 2c01    	ldrb	r2, [r7, #-1]
 8059acc: f7ff fffe    	bl	0x8059acc <xQueueCreateMutex+0x16> @ imm = #-0x4
 8059ad0: 9002         	str	r0, [sp, #0x8]
;         prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8059ad2: 9802         	ldr	r0, [sp, #0x8]
 8059ad4: f000 f803    	bl	0x8059ade <prvInitialiseMutex> @ imm = #0x6
;         return xNewQueue;
 8059ad8: 9802         	ldr	r0, [sp, #0x8]
 8059ada: b004         	add	sp, #0x10
 8059adc: bd80         	pop	{r7, pc}

08059ade <prvInitialiseMutex>:
;     {
 8059ade: b580         	push	{r7, lr}
 8059ae0: 466f         	mov	r7, sp
 8059ae2: b082         	sub	sp, #0x8
 8059ae4: 9001         	str	r0, [sp, #0x4]
;         if( pxNewQueue != NULL )
 8059ae6: 9801         	ldr	r0, [sp, #0x4]
 8059ae8: b168         	cbz	r0, 0x8059b06 <prvInitialiseMutex+0x28> @ imm = #0x1a
 8059aea: e7ff         	b	0x8059aec <prvInitialiseMutex+0xe> @ imm = #-0x2
;             pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8059aec: 9801         	ldr	r0, [sp, #0x4]
 8059aee: 2300         	movs	r3, #0x0
 8059af0: 6083         	str	r3, [r0, #0x8]
;             pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8059af2: 9801         	ldr	r0, [sp, #0x4]
 8059af4: 6003         	str	r3, [r0]
;             pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8059af6: 9801         	ldr	r0, [sp, #0x4]
 8059af8: 60c3         	str	r3, [r0, #0xc]
;             ( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8059afa: 9801         	ldr	r0, [sp, #0x4]
 8059afc: 4619         	mov	r1, r3
 8059afe: 461a         	mov	r2, r3
 8059b00: f7ff fffe    	bl	0x8059b00 <prvInitialiseMutex+0x22> @ imm = #-0x4
;         }
 8059b04: e000         	b	0x8059b08 <prvInitialiseMutex+0x2a> @ imm = #0x0
 8059b06: e7ff         	b	0x8059b08 <prvInitialiseMutex+0x2a> @ imm = #-0x2
;     }
 8059b08: b002         	add	sp, #0x8
 8059b0a: bd80         	pop	{r7, pc}

08059b0c <xQueueGetMutexHolder>:
;     {
 8059b0c: b580         	push	{r7, lr}
 8059b0e: 466f         	mov	r7, sp
 8059b10: b084         	sub	sp, #0x10
 8059b12: 9003         	str	r0, [sp, #0xc]
;         Queue_t * const pxSemaphore = ( Queue_t * ) xSemaphore;
 8059b14: 9803         	ldr	r0, [sp, #0xc]
 8059b16: 9001         	str	r0, [sp, #0x4]
;         configASSERT( xSemaphore );
 8059b18: 9803         	ldr	r0, [sp, #0xc]
 8059b1a: b920         	cbnz	r0, 0x8059b26 <xQueueGetMutexHolder+0x1a> @ imm = #0x8
 8059b1c: e7ff         	b	0x8059b1e <xQueueGetMutexHolder+0x12> @ imm = #-0x2
 8059b1e: f7ff fffe    	bl	0x8059b1e <xQueueGetMutexHolder+0x12> @ imm = #-0x4
 8059b22: e7ff         	b	0x8059b24 <xQueueGetMutexHolder+0x18> @ imm = #-0x2
 8059b24: e7fe         	b	0x8059b24 <xQueueGetMutexHolder+0x18> @ imm = #-0x4
;         taskENTER_CRITICAL();
 8059b26: f7ff fffe    	bl	0x8059b26 <xQueueGetMutexHolder+0x1a> @ imm = #-0x4
;             if( pxSemaphore->uxQueueType == queueQUEUE_IS_MUTEX )
 8059b2a: 9801         	ldr	r0, [sp, #0x4]
 8059b2c: 6800         	ldr	r0, [r0]
 8059b2e: b920         	cbnz	r0, 0x8059b3a <xQueueGetMutexHolder+0x2e> @ imm = #0x8
 8059b30: e7ff         	b	0x8059b32 <xQueueGetMutexHolder+0x26> @ imm = #-0x2
;                 pxReturn = pxSemaphore->u.xSemaphore.xMutexHolder;
 8059b32: 9801         	ldr	r0, [sp, #0x4]
 8059b34: 6880         	ldr	r0, [r0, #0x8]
 8059b36: 9002         	str	r0, [sp, #0x8]
;             }
 8059b38: e002         	b	0x8059b40 <xQueueGetMutexHolder+0x34> @ imm = #0x4
 8059b3a: 2000         	movs	r0, #0x0
;                 pxReturn = NULL;
 8059b3c: 9002         	str	r0, [sp, #0x8]
 8059b3e: e7ff         	b	0x8059b40 <xQueueGetMutexHolder+0x34> @ imm = #-0x2
;         taskEXIT_CRITICAL();
 8059b40: f7ff fffe    	bl	0x8059b40 <xQueueGetMutexHolder+0x34> @ imm = #-0x4
;         return pxReturn;
 8059b44: 9802         	ldr	r0, [sp, #0x8]
 8059b46: b004         	add	sp, #0x10
 8059b48: bd80         	pop	{r7, pc}

08059b4a <xQueueGetMutexHolderFromISR>:
;     {
 8059b4a: b580         	push	{r7, lr}
 8059b4c: 466f         	mov	r7, sp
 8059b4e: b082         	sub	sp, #0x8
 8059b50: 9001         	str	r0, [sp, #0x4]
;         configASSERT( xSemaphore );
 8059b52: 9801         	ldr	r0, [sp, #0x4]
 8059b54: b920         	cbnz	r0, 0x8059b60 <xQueueGetMutexHolderFromISR+0x16> @ imm = #0x8
 8059b56: e7ff         	b	0x8059b58 <xQueueGetMutexHolderFromISR+0xe> @ imm = #-0x2
 8059b58: f7ff fffe    	bl	0x8059b58 <xQueueGetMutexHolderFromISR+0xe> @ imm = #-0x4
 8059b5c: e7ff         	b	0x8059b5e <xQueueGetMutexHolderFromISR+0x14> @ imm = #-0x2
 8059b5e: e7fe         	b	0x8059b5e <xQueueGetMutexHolderFromISR+0x14> @ imm = #-0x4
;         if( ( ( Queue_t * ) xSemaphore )->uxQueueType == queueQUEUE_IS_MUTEX )
 8059b60: 9801         	ldr	r0, [sp, #0x4]
 8059b62: 6800         	ldr	r0, [r0]
 8059b64: b920         	cbnz	r0, 0x8059b70 <xQueueGetMutexHolderFromISR+0x26> @ imm = #0x8
 8059b66: e7ff         	b	0x8059b68 <xQueueGetMutexHolderFromISR+0x1e> @ imm = #-0x2
;             pxReturn = ( ( Queue_t * ) xSemaphore )->u.xSemaphore.xMutexHolder;
 8059b68: 9801         	ldr	r0, [sp, #0x4]
 8059b6a: 6880         	ldr	r0, [r0, #0x8]
 8059b6c: 9000         	str	r0, [sp]
;         }
 8059b6e: e002         	b	0x8059b76 <xQueueGetMutexHolderFromISR+0x2c> @ imm = #0x4
 8059b70: 2000         	movs	r0, #0x0
;             pxReturn = NULL;
 8059b72: 9000         	str	r0, [sp]
 8059b74: e7ff         	b	0x8059b76 <xQueueGetMutexHolderFromISR+0x2c> @ imm = #-0x2
;         return pxReturn;
 8059b76: 9800         	ldr	r0, [sp]
 8059b78: b002         	add	sp, #0x8
 8059b7a: bd80         	pop	{r7, pc}

08059b7c <xQueueGiveMutexRecursive>:
;     {
 8059b7c: b580         	push	{r7, lr}
 8059b7e: 466f         	mov	r7, sp
 8059b80: b084         	sub	sp, #0x10
 8059b82: 9003         	str	r0, [sp, #0xc]
;         Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8059b84: 9803         	ldr	r0, [sp, #0xc]
 8059b86: 9001         	str	r0, [sp, #0x4]
;         configASSERT( pxMutex );
 8059b88: 9801         	ldr	r0, [sp, #0x4]
 8059b8a: b920         	cbnz	r0, 0x8059b96 <xQueueGiveMutexRecursive+0x1a> @ imm = #0x8
 8059b8c: e7ff         	b	0x8059b8e <xQueueGiveMutexRecursive+0x12> @ imm = #-0x2
 8059b8e: f7ff fffe    	bl	0x8059b8e <xQueueGiveMutexRecursive+0x12> @ imm = #-0x4
 8059b92: e7ff         	b	0x8059b94 <xQueueGiveMutexRecursive+0x18> @ imm = #-0x2
 8059b94: e7fe         	b	0x8059b94 <xQueueGiveMutexRecursive+0x18> @ imm = #-0x4
;         if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8059b96: 9801         	ldr	r0, [sp, #0x4]
 8059b98: 6880         	ldr	r0, [r0, #0x8]
 8059b9a: 9000         	str	r0, [sp]
 8059b9c: f7ff fffe    	bl	0x8059b9c <xQueueGiveMutexRecursive+0x20> @ imm = #-0x4
 8059ba0: 4601         	mov	r1, r0
 8059ba2: 9800         	ldr	r0, [sp]
 8059ba4: 4288         	cmp	r0, r1
 8059ba6: d113         	bne	0x8059bd0 <xQueueGiveMutexRecursive+0x54> @ imm = #0x26
 8059ba8: e7ff         	b	0x8059baa <xQueueGiveMutexRecursive+0x2e> @ imm = #-0x2
;             ( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8059baa: 9901         	ldr	r1, [sp, #0x4]
 8059bac: 68c8         	ldr	r0, [r1, #0xc]
 8059bae: 3801         	subs	r0, #0x1
 8059bb0: 60c8         	str	r0, [r1, #0xc]
;             if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8059bb2: 9801         	ldr	r0, [sp, #0x4]
 8059bb4: 68c0         	ldr	r0, [r0, #0xc]
 8059bb6: b938         	cbnz	r0, 0x8059bc8 <xQueueGiveMutexRecursive+0x4c> @ imm = #0xe
 8059bb8: e7ff         	b	0x8059bba <xQueueGiveMutexRecursive+0x3e> @ imm = #-0x2
;                 ( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8059bba: 9801         	ldr	r0, [sp, #0x4]
 8059bbc: 2300         	movs	r3, #0x0
 8059bbe: 4619         	mov	r1, r3
 8059bc0: 461a         	mov	r2, r3
 8059bc2: f7ff fffe    	bl	0x8059bc2 <xQueueGiveMutexRecursive+0x46> @ imm = #-0x4
;             }
 8059bc6: e000         	b	0x8059bca <xQueueGiveMutexRecursive+0x4e> @ imm = #0x0
 8059bc8: e7ff         	b	0x8059bca <xQueueGiveMutexRecursive+0x4e> @ imm = #-0x2
 8059bca: 2001         	movs	r0, #0x1
;             xReturn = pdPASS;
 8059bcc: 9002         	str	r0, [sp, #0x8]
;         }
 8059bce: e002         	b	0x8059bd6 <xQueueGiveMutexRecursive+0x5a> @ imm = #0x4
 8059bd0: 2000         	movs	r0, #0x0
;             xReturn = pdFAIL;
 8059bd2: 9002         	str	r0, [sp, #0x8]
 8059bd4: e7ff         	b	0x8059bd6 <xQueueGiveMutexRecursive+0x5a> @ imm = #-0x2
;         return xReturn;
 8059bd6: 9802         	ldr	r0, [sp, #0x8]
 8059bd8: b004         	add	sp, #0x10
 8059bda: bd80         	pop	{r7, pc}

08059bdc <xQueueGenericSend>:
; {
 8059bdc: b580         	push	{r7, lr}
 8059bde: 466f         	mov	r7, sp
 8059be0: b08e         	sub	sp, #0x38
 8059be2: 900c         	str	r0, [sp, #0x30]
 8059be4: 910b         	str	r1, [sp, #0x2c]
 8059be6: 920a         	str	r2, [sp, #0x28]
 8059be8: 9309         	str	r3, [sp, #0x24]
 8059bea: 2000         	movs	r0, #0x0
;     BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8059bec: 9008         	str	r0, [sp, #0x20]
;     Queue_t * const pxQueue = xQueue;
 8059bee: 980c         	ldr	r0, [sp, #0x30]
 8059bf0: 9004         	str	r0, [sp, #0x10]
;     configASSERT( pxQueue );
 8059bf2: 9804         	ldr	r0, [sp, #0x10]
 8059bf4: b920         	cbnz	r0, 0x8059c00 <xQueueGenericSend+0x24> @ imm = #0x8
 8059bf6: e7ff         	b	0x8059bf8 <xQueueGenericSend+0x1c> @ imm = #-0x2
 8059bf8: f7ff fffe    	bl	0x8059bf8 <xQueueGenericSend+0x1c> @ imm = #-0x4
 8059bfc: e7ff         	b	0x8059bfe <xQueueGenericSend+0x22> @ imm = #-0x2
 8059bfe: e7fe         	b	0x8059bfe <xQueueGenericSend+0x22> @ imm = #-0x4
;     configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8059c00: 990b         	ldr	r1, [sp, #0x2c]
 8059c02: 2000         	movs	r0, #0x0
 8059c04: 9003         	str	r0, [sp, #0xc]
 8059c06: b939         	cbnz	r1, 0x8059c18 <xQueueGenericSend+0x3c> @ imm = #0xe
 8059c08: e7ff         	b	0x8059c0a <xQueueGenericSend+0x2e> @ imm = #-0x2
 8059c0a: 9804         	ldr	r0, [sp, #0x10]
 8059c0c: 6c00         	ldr	r0, [r0, #0x40]
 8059c0e: 2800         	cmp	r0, #0x0
 8059c10: bf18         	it	ne
 8059c12: 2001         	movne	r0, #0x1
 8059c14: 9003         	str	r0, [sp, #0xc]
 8059c16: e7ff         	b	0x8059c18 <xQueueGenericSend+0x3c> @ imm = #-0x2
 8059c18: 9803         	ldr	r0, [sp, #0xc]
;     configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8059c1a: 07c0         	lsls	r0, r0, #0x1f
 8059c1c: b120         	cbz	r0, 0x8059c28 <xQueueGenericSend+0x4c> @ imm = #0x8
 8059c1e: e7ff         	b	0x8059c20 <xQueueGenericSend+0x44> @ imm = #-0x2
 8059c20: f7ff fffe    	bl	0x8059c20 <xQueueGenericSend+0x44> @ imm = #-0x4
 8059c24: e7ff         	b	0x8059c26 <xQueueGenericSend+0x4a> @ imm = #-0x2
 8059c26: e7fe         	b	0x8059c26 <xQueueGenericSend+0x4a> @ imm = #-0x4
;     configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8059c28: 9909         	ldr	r1, [sp, #0x24]
 8059c2a: 2000         	movs	r0, #0x0
 8059c2c: 2902         	cmp	r1, #0x2
 8059c2e: 9002         	str	r0, [sp, #0x8]
 8059c30: d107         	bne	0x8059c42 <xQueueGenericSend+0x66> @ imm = #0xe
 8059c32: e7ff         	b	0x8059c34 <xQueueGenericSend+0x58> @ imm = #-0x2
 8059c34: 9804         	ldr	r0, [sp, #0x10]
 8059c36: 6bc0         	ldr	r0, [r0, #0x3c]
 8059c38: 3801         	subs	r0, #0x1
 8059c3a: bf18         	it	ne
 8059c3c: 2001         	movne	r0, #0x1
 8059c3e: 9002         	str	r0, [sp, #0x8]
 8059c40: e7ff         	b	0x8059c42 <xQueueGenericSend+0x66> @ imm = #-0x2
 8059c42: 9802         	ldr	r0, [sp, #0x8]
;     configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8059c44: 07c0         	lsls	r0, r0, #0x1f
 8059c46: b120         	cbz	r0, 0x8059c52 <xQueueGenericSend+0x76> @ imm = #0x8
 8059c48: e7ff         	b	0x8059c4a <xQueueGenericSend+0x6e> @ imm = #-0x2
 8059c4a: f7ff fffe    	bl	0x8059c4a <xQueueGenericSend+0x6e> @ imm = #-0x4
 8059c4e: e7ff         	b	0x8059c50 <xQueueGenericSend+0x74> @ imm = #-0x2
 8059c50: e7fe         	b	0x8059c50 <xQueueGenericSend+0x74> @ imm = #-0x4
;         configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8059c52: f7ff fffe    	bl	0x8059c52 <xQueueGenericSend+0x76> @ imm = #-0x4
 8059c56: 4601         	mov	r1, r0
 8059c58: 2000         	movs	r0, #0x0
 8059c5a: 9001         	str	r0, [sp, #0x4]
 8059c5c: b931         	cbnz	r1, 0x8059c6c <xQueueGenericSend+0x90> @ imm = #0xc
 8059c5e: e7ff         	b	0x8059c60 <xQueueGenericSend+0x84> @ imm = #-0x2
 8059c60: 980a         	ldr	r0, [sp, #0x28]
 8059c62: 2800         	cmp	r0, #0x0
 8059c64: bf18         	it	ne
 8059c66: 2001         	movne	r0, #0x1
 8059c68: 9001         	str	r0, [sp, #0x4]
 8059c6a: e7ff         	b	0x8059c6c <xQueueGenericSend+0x90> @ imm = #-0x2
 8059c6c: 9801         	ldr	r0, [sp, #0x4]
;         configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8059c6e: 07c0         	lsls	r0, r0, #0x1f
 8059c70: b120         	cbz	r0, 0x8059c7c <xQueueGenericSend+0xa0> @ imm = #0x8
 8059c72: e7ff         	b	0x8059c74 <xQueueGenericSend+0x98> @ imm = #-0x2
 8059c74: f7ff fffe    	bl	0x8059c74 <xQueueGenericSend+0x98> @ imm = #-0x4
 8059c78: e7ff         	b	0x8059c7a <xQueueGenericSend+0x9e> @ imm = #-0x2
 8059c7a: e7fe         	b	0x8059c7a <xQueueGenericSend+0x9e> @ imm = #-0x4
;     for( ; ; )
 8059c7c: e7ff         	b	0x8059c7e <xQueueGenericSend+0xa2> @ imm = #-0x2
;         taskENTER_CRITICAL();
 8059c7e: f7ff fffe    	bl	0x8059c7e <xQueueGenericSend+0xa2> @ imm = #-0x4
;             if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8059c82: 9804         	ldr	r0, [sp, #0x10]
 8059c84: 6b80         	ldr	r0, [r0, #0x38]
 8059c86: 9904         	ldr	r1, [sp, #0x10]
 8059c88: 6bc9         	ldr	r1, [r1, #0x3c]
 8059c8a: 4288         	cmp	r0, r1
 8059c8c: d304         	blo	0x8059c98 <xQueueGenericSend+0xbc> @ imm = #0x8
 8059c8e: e7ff         	b	0x8059c90 <xQueueGenericSend+0xb4> @ imm = #-0x2
 8059c90: 9809         	ldr	r0, [sp, #0x24]
 8059c92: 2802         	cmp	r0, #0x2
 8059c94: d122         	bne	0x8059cdc <xQueueGenericSend+0x100> @ imm = #0x44
 8059c96: e7ff         	b	0x8059c98 <xQueueGenericSend+0xbc> @ imm = #-0x2
;                     xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8059c98: 9804         	ldr	r0, [sp, #0x10]
 8059c9a: 990b         	ldr	r1, [sp, #0x2c]
 8059c9c: 9a09         	ldr	r2, [sp, #0x24]
 8059c9e: f000 f9b9    	bl	0x805a014 <prvCopyDataToQueue> @ imm = #0x372
 8059ca2: 9007         	str	r0, [sp, #0x1c]
;                     if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8059ca4: 9804         	ldr	r0, [sp, #0x10]
 8059ca6: 6a40         	ldr	r0, [r0, #0x24]
 8059ca8: b158         	cbz	r0, 0x8059cc2 <xQueueGenericSend+0xe6> @ imm = #0x16
 8059caa: e7ff         	b	0x8059cac <xQueueGenericSend+0xd0> @ imm = #-0x2
;                         if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8059cac: 9804         	ldr	r0, [sp, #0x10]
 8059cae: 3024         	adds	r0, #0x24
 8059cb0: f7ff fffe    	bl	0x8059cb0 <xQueueGenericSend+0xd4> @ imm = #-0x4
 8059cb4: b118         	cbz	r0, 0x8059cbe <xQueueGenericSend+0xe2> @ imm = #0x6
 8059cb6: e7ff         	b	0x8059cb8 <xQueueGenericSend+0xdc> @ imm = #-0x2
;                             queueYIELD_IF_USING_PREEMPTION();
 8059cb8: f7ff fffe    	bl	0x8059cb8 <xQueueGenericSend+0xdc> @ imm = #-0x4
;                         }
 8059cbc: e000         	b	0x8059cc0 <xQueueGenericSend+0xe4> @ imm = #0x0
 8059cbe: e7ff         	b	0x8059cc0 <xQueueGenericSend+0xe4> @ imm = #-0x2
;                     }
 8059cc0: e007         	b	0x8059cd2 <xQueueGenericSend+0xf6> @ imm = #0xe
;                     else if( xYieldRequired != pdFALSE )
 8059cc2: 9807         	ldr	r0, [sp, #0x1c]
 8059cc4: b118         	cbz	r0, 0x8059cce <xQueueGenericSend+0xf2> @ imm = #0x6
 8059cc6: e7ff         	b	0x8059cc8 <xQueueGenericSend+0xec> @ imm = #-0x2
;                         queueYIELD_IF_USING_PREEMPTION();
 8059cc8: f7ff fffe    	bl	0x8059cc8 <xQueueGenericSend+0xec> @ imm = #-0x4
;                     }
 8059ccc: e000         	b	0x8059cd0 <xQueueGenericSend+0xf4> @ imm = #0x0
 8059cce: e7ff         	b	0x8059cd0 <xQueueGenericSend+0xf4> @ imm = #-0x2
 8059cd0: e7ff         	b	0x8059cd2 <xQueueGenericSend+0xf6> @ imm = #-0x2
;                 taskEXIT_CRITICAL();
 8059cd2: f7ff fffe    	bl	0x8059cd2 <xQueueGenericSend+0xf6> @ imm = #-0x4
 8059cd6: 2001         	movs	r0, #0x1
;                 return pdPASS;
 8059cd8: 900d         	str	r0, [sp, #0x34]
 8059cda: e05c         	b	0x8059d96 <xQueueGenericSend+0x1ba> @ imm = #0xb8
;                 if( xTicksToWait == ( TickType_t ) 0 )
 8059cdc: 980a         	ldr	r0, [sp, #0x28]
 8059cde: b928         	cbnz	r0, 0x8059cec <xQueueGenericSend+0x110> @ imm = #0xa
 8059ce0: e7ff         	b	0x8059ce2 <xQueueGenericSend+0x106> @ imm = #-0x2
;                     taskEXIT_CRITICAL();
 8059ce2: f7ff fffe    	bl	0x8059ce2 <xQueueGenericSend+0x106> @ imm = #-0x4
 8059ce6: 2000         	movs	r0, #0x0
;                     return errQUEUE_FULL;
 8059ce8: 900d         	str	r0, [sp, #0x34]
 8059cea: e054         	b	0x8059d96 <xQueueGenericSend+0x1ba> @ imm = #0xa8
;                 else if( xEntryTimeSet == pdFALSE )
 8059cec: 9808         	ldr	r0, [sp, #0x20]
 8059cee: b930         	cbnz	r0, 0x8059cfe <xQueueGenericSend+0x122> @ imm = #0xc
 8059cf0: e7ff         	b	0x8059cf2 <xQueueGenericSend+0x116> @ imm = #-0x2
 8059cf2: a805         	add	r0, sp, #0x14
;                     vTaskInternalSetTimeOutState( &xTimeOut );
 8059cf4: f7ff fffe    	bl	0x8059cf4 <xQueueGenericSend+0x118> @ imm = #-0x4
 8059cf8: 2001         	movs	r0, #0x1
;                     xEntryTimeSet = pdTRUE;
 8059cfa: 9008         	str	r0, [sp, #0x20]
;                 }
 8059cfc: e000         	b	0x8059d00 <xQueueGenericSend+0x124> @ imm = #0x0
 8059cfe: e7ff         	b	0x8059d00 <xQueueGenericSend+0x124> @ imm = #-0x2
 8059d00: e7ff         	b	0x8059d02 <xQueueGenericSend+0x126> @ imm = #-0x2
 8059d02: e7ff         	b	0x8059d04 <xQueueGenericSend+0x128> @ imm = #-0x2
;         taskEXIT_CRITICAL();
 8059d04: f7ff fffe    	bl	0x8059d04 <xQueueGenericSend+0x128> @ imm = #-0x4
;         vTaskSuspendAll();
 8059d08: f7ff fffe    	bl	0x8059d08 <xQueueGenericSend+0x12c> @ imm = #-0x4
;         prvLockQueue( pxQueue );
 8059d0c: f7ff fffe    	bl	0x8059d0c <xQueueGenericSend+0x130> @ imm = #-0x4
 8059d10: 9804         	ldr	r0, [sp, #0x10]
 8059d12: f990 0044    	ldrsb.w	r0, [r0, #0x44]
 8059d16: 3001         	adds	r0, #0x1
 8059d18: b928         	cbnz	r0, 0x8059d26 <xQueueGenericSend+0x14a> @ imm = #0xa
 8059d1a: e7ff         	b	0x8059d1c <xQueueGenericSend+0x140> @ imm = #-0x2
 8059d1c: 9904         	ldr	r1, [sp, #0x10]
 8059d1e: 2000         	movs	r0, #0x0
 8059d20: f881 0044    	strb.w	r0, [r1, #0x44]
 8059d24: e7ff         	b	0x8059d26 <xQueueGenericSend+0x14a> @ imm = #-0x2
 8059d26: 9804         	ldr	r0, [sp, #0x10]
 8059d28: f990 0045    	ldrsb.w	r0, [r0, #0x45]
 8059d2c: 3001         	adds	r0, #0x1
 8059d2e: b928         	cbnz	r0, 0x8059d3c <xQueueGenericSend+0x160> @ imm = #0xa
 8059d30: e7ff         	b	0x8059d32 <xQueueGenericSend+0x156> @ imm = #-0x2
 8059d32: 9904         	ldr	r1, [sp, #0x10]
 8059d34: 2000         	movs	r0, #0x0
 8059d36: f881 0045    	strb.w	r0, [r1, #0x45]
 8059d3a: e7ff         	b	0x8059d3c <xQueueGenericSend+0x160> @ imm = #-0x2
 8059d3c: f7ff fffe    	bl	0x8059d3c <xQueueGenericSend+0x160> @ imm = #-0x4
 8059d40: a805         	add	r0, sp, #0x14
 8059d42: a90a         	add	r1, sp, #0x28
;         if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8059d44: f7ff fffe    	bl	0x8059d44 <xQueueGenericSend+0x168> @ imm = #-0x4
 8059d48: b9e0         	cbnz	r0, 0x8059d84 <xQueueGenericSend+0x1a8> @ imm = #0x38
 8059d4a: e7ff         	b	0x8059d4c <xQueueGenericSend+0x170> @ imm = #-0x2
;             if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8059d4c: 9804         	ldr	r0, [sp, #0x10]
 8059d4e: f000 f9c8    	bl	0x805a0e2 <prvIsQueueFull> @ imm = #0x390
 8059d52: b180         	cbz	r0, 0x8059d76 <xQueueGenericSend+0x19a> @ imm = #0x20
 8059d54: e7ff         	b	0x8059d56 <xQueueGenericSend+0x17a> @ imm = #-0x2
;                 vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8059d56: 9804         	ldr	r0, [sp, #0x10]
 8059d58: 3010         	adds	r0, #0x10
 8059d5a: 990a         	ldr	r1, [sp, #0x28]
 8059d5c: f7ff fffe    	bl	0x8059d5c <xQueueGenericSend+0x180> @ imm = #-0x4
;                 prvUnlockQueue( pxQueue );
 8059d60: 9804         	ldr	r0, [sp, #0x10]
 8059d62: f000 f9d6    	bl	0x805a112 <prvUnlockQueue> @ imm = #0x3ac
;                 if( xTaskResumeAll() == pdFALSE )
 8059d66: f7ff fffe    	bl	0x8059d66 <xQueueGenericSend+0x18a> @ imm = #-0x4
 8059d6a: b918         	cbnz	r0, 0x8059d74 <xQueueGenericSend+0x198> @ imm = #0x6
 8059d6c: e7ff         	b	0x8059d6e <xQueueGenericSend+0x192> @ imm = #-0x2
;                     taskYIELD_WITHIN_API();
 8059d6e: f7ff fffe    	bl	0x8059d6e <xQueueGenericSend+0x192> @ imm = #-0x4
;                 }
 8059d72: e7ff         	b	0x8059d74 <xQueueGenericSend+0x198> @ imm = #-0x2
;             }
 8059d74: e005         	b	0x8059d82 <xQueueGenericSend+0x1a6> @ imm = #0xa
;                 prvUnlockQueue( pxQueue );
 8059d76: 9804         	ldr	r0, [sp, #0x10]
 8059d78: f000 f9cb    	bl	0x805a112 <prvUnlockQueue> @ imm = #0x396
;                 ( void ) xTaskResumeAll();
 8059d7c: f7ff fffe    	bl	0x8059d7c <xQueueGenericSend+0x1a0> @ imm = #-0x4
 8059d80: e7ff         	b	0x8059d82 <xQueueGenericSend+0x1a6> @ imm = #-0x2
;         }
 8059d82: e007         	b	0x8059d94 <xQueueGenericSend+0x1b8> @ imm = #0xe
;             prvUnlockQueue( pxQueue );
 8059d84: 9804         	ldr	r0, [sp, #0x10]
 8059d86: f000 f9c4    	bl	0x805a112 <prvUnlockQueue> @ imm = #0x388
;             ( void ) xTaskResumeAll();
 8059d8a: f7ff fffe    	bl	0x8059d8a <xQueueGenericSend+0x1ae> @ imm = #-0x4
 8059d8e: 2000         	movs	r0, #0x0
;             return errQUEUE_FULL;
 8059d90: 900d         	str	r0, [sp, #0x34]
 8059d92: e000         	b	0x8059d96 <xQueueGenericSend+0x1ba> @ imm = #0x0
;     for( ; ; )
 8059d94: e773         	b	0x8059c7e <xQueueGenericSend+0xa2> @ imm = #-0x11a
; }
 8059d96: 980d         	ldr	r0, [sp, #0x34]
 8059d98: b00e         	add	sp, #0x38
 8059d9a: bd80         	pop	{r7, pc}

08059d9c <xQueueTakeMutexRecursive>:
;     {
 8059d9c: b580         	push	{r7, lr}
 8059d9e: 466f         	mov	r7, sp
 8059da0: b086         	sub	sp, #0x18
 8059da2: 9005         	str	r0, [sp, #0x14]
 8059da4: 9104         	str	r1, [sp, #0x10]
;         Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8059da6: 9805         	ldr	r0, [sp, #0x14]
 8059da8: 9002         	str	r0, [sp, #0x8]
;         configASSERT( pxMutex );
 8059daa: 9802         	ldr	r0, [sp, #0x8]
 8059dac: b920         	cbnz	r0, 0x8059db8 <xQueueTakeMutexRecursive+0x1c> @ imm = #0x8
 8059dae: e7ff         	b	0x8059db0 <xQueueTakeMutexRecursive+0x14> @ imm = #-0x2
 8059db0: f7ff fffe    	bl	0x8059db0 <xQueueTakeMutexRecursive+0x14> @ imm = #-0x4
 8059db4: e7ff         	b	0x8059db6 <xQueueTakeMutexRecursive+0x1a> @ imm = #-0x2
 8059db6: e7fe         	b	0x8059db6 <xQueueTakeMutexRecursive+0x1a> @ imm = #-0x4
;         if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8059db8: 9802         	ldr	r0, [sp, #0x8]
 8059dba: 6880         	ldr	r0, [r0, #0x8]
 8059dbc: 9001         	str	r0, [sp, #0x4]
 8059dbe: f7ff fffe    	bl	0x8059dbe <xQueueTakeMutexRecursive+0x22> @ imm = #-0x4
 8059dc2: 4601         	mov	r1, r0
 8059dc4: 9801         	ldr	r0, [sp, #0x4]
 8059dc6: 4288         	cmp	r0, r1
 8059dc8: d107         	bne	0x8059dda <xQueueTakeMutexRecursive+0x3e> @ imm = #0xe
 8059dca: e7ff         	b	0x8059dcc <xQueueTakeMutexRecursive+0x30> @ imm = #-0x2
;             ( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8059dcc: 9902         	ldr	r1, [sp, #0x8]
 8059dce: 68c8         	ldr	r0, [r1, #0xc]
 8059dd0: 3001         	adds	r0, #0x1
 8059dd2: 60c8         	str	r0, [r1, #0xc]
 8059dd4: 2001         	movs	r0, #0x1
;             xReturn = pdPASS;
 8059dd6: 9003         	str	r0, [sp, #0xc]
;         }
 8059dd8: e00e         	b	0x8059df8 <xQueueTakeMutexRecursive+0x5c> @ imm = #0x1c
;             xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8059dda: 9802         	ldr	r0, [sp, #0x8]
 8059ddc: 9904         	ldr	r1, [sp, #0x10]
 8059dde: f7ff fffe    	bl	0x8059dde <xQueueTakeMutexRecursive+0x42> @ imm = #-0x4
 8059de2: 9003         	str	r0, [sp, #0xc]
;             if( xReturn != pdFAIL )
 8059de4: 9803         	ldr	r0, [sp, #0xc]
 8059de6: b128         	cbz	r0, 0x8059df4 <xQueueTakeMutexRecursive+0x58> @ imm = #0xa
 8059de8: e7ff         	b	0x8059dea <xQueueTakeMutexRecursive+0x4e> @ imm = #-0x2
;                 ( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8059dea: 9902         	ldr	r1, [sp, #0x8]
 8059dec: 68c8         	ldr	r0, [r1, #0xc]
 8059dee: 3001         	adds	r0, #0x1
 8059df0: 60c8         	str	r0, [r1, #0xc]
;             }
 8059df2: e000         	b	0x8059df6 <xQueueTakeMutexRecursive+0x5a> @ imm = #0x0
 8059df4: e7ff         	b	0x8059df6 <xQueueTakeMutexRecursive+0x5a> @ imm = #-0x2
 8059df6: e7ff         	b	0x8059df8 <xQueueTakeMutexRecursive+0x5c> @ imm = #-0x2
;         return xReturn;
 8059df8: 9803         	ldr	r0, [sp, #0xc]
 8059dfa: b006         	add	sp, #0x18
 8059dfc: bd80         	pop	{r7, pc}

08059dfe <xQueueSemaphoreTake>:
; {
 8059dfe: b580         	push	{r7, lr}
 8059e00: 466f         	mov	r7, sp
 8059e02: b08c         	sub	sp, #0x30
 8059e04: 900a         	str	r0, [sp, #0x28]
 8059e06: 9109         	str	r1, [sp, #0x24]
 8059e08: 2000         	movs	r0, #0x0
;     BaseType_t xEntryTimeSet = pdFALSE;
 8059e0a: 9008         	str	r0, [sp, #0x20]
;     Queue_t * const pxQueue = xQueue;
 8059e0c: 990a         	ldr	r1, [sp, #0x28]
 8059e0e: 9105         	str	r1, [sp, #0x14]
;         BaseType_t xInheritanceOccurred = pdFALSE;
 8059e10: 9004         	str	r0, [sp, #0x10]
;     configASSERT( ( pxQueue ) );
 8059e12: 9805         	ldr	r0, [sp, #0x14]
 8059e14: b920         	cbnz	r0, 0x8059e20 <xQueueSemaphoreTake+0x22> @ imm = #0x8
 8059e16: e7ff         	b	0x8059e18 <xQueueSemaphoreTake+0x1a> @ imm = #-0x2
 8059e18: f7ff fffe    	bl	0x8059e18 <xQueueSemaphoreTake+0x1a> @ imm = #-0x4
 8059e1c: e7ff         	b	0x8059e1e <xQueueSemaphoreTake+0x20> @ imm = #-0x2
 8059e1e: e7fe         	b	0x8059e1e <xQueueSemaphoreTake+0x20> @ imm = #-0x4
;     configASSERT( pxQueue->uxItemSize == 0 );
 8059e20: 9805         	ldr	r0, [sp, #0x14]
 8059e22: 6c00         	ldr	r0, [r0, #0x40]
 8059e24: b120         	cbz	r0, 0x8059e30 <xQueueSemaphoreTake+0x32> @ imm = #0x8
 8059e26: e7ff         	b	0x8059e28 <xQueueSemaphoreTake+0x2a> @ imm = #-0x2
 8059e28: f7ff fffe    	bl	0x8059e28 <xQueueSemaphoreTake+0x2a> @ imm = #-0x4
 8059e2c: e7ff         	b	0x8059e2e <xQueueSemaphoreTake+0x30> @ imm = #-0x2
 8059e2e: e7fe         	b	0x8059e2e <xQueueSemaphoreTake+0x30> @ imm = #-0x4
;         configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8059e30: f7ff fffe    	bl	0x8059e30 <xQueueSemaphoreTake+0x32> @ imm = #-0x4
 8059e34: 4601         	mov	r1, r0
 8059e36: 2000         	movs	r0, #0x0
 8059e38: 9001         	str	r0, [sp, #0x4]
 8059e3a: b931         	cbnz	r1, 0x8059e4a <xQueueSemaphoreTake+0x4c> @ imm = #0xc
 8059e3c: e7ff         	b	0x8059e3e <xQueueSemaphoreTake+0x40> @ imm = #-0x2
 8059e3e: 9809         	ldr	r0, [sp, #0x24]
 8059e40: 2800         	cmp	r0, #0x0
 8059e42: bf18         	it	ne
 8059e44: 2001         	movne	r0, #0x1
 8059e46: 9001         	str	r0, [sp, #0x4]
 8059e48: e7ff         	b	0x8059e4a <xQueueSemaphoreTake+0x4c> @ imm = #-0x2
 8059e4a: 9801         	ldr	r0, [sp, #0x4]
;         configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8059e4c: 07c0         	lsls	r0, r0, #0x1f
 8059e4e: b120         	cbz	r0, 0x8059e5a <xQueueSemaphoreTake+0x5c> @ imm = #0x8
 8059e50: e7ff         	b	0x8059e52 <xQueueSemaphoreTake+0x54> @ imm = #-0x2
 8059e52: f7ff fffe    	bl	0x8059e52 <xQueueSemaphoreTake+0x54> @ imm = #-0x4
 8059e56: e7ff         	b	0x8059e58 <xQueueSemaphoreTake+0x5a> @ imm = #-0x2
 8059e58: e7fe         	b	0x8059e58 <xQueueSemaphoreTake+0x5a> @ imm = #-0x4
;     for( ; ; )
 8059e5a: e7ff         	b	0x8059e5c <xQueueSemaphoreTake+0x5e> @ imm = #-0x2
;         taskENTER_CRITICAL();
 8059e5c: f7ff fffe    	bl	0x8059e5c <xQueueSemaphoreTake+0x5e> @ imm = #-0x4
;             const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8059e60: 9805         	ldr	r0, [sp, #0x14]
 8059e62: 6b80         	ldr	r0, [r0, #0x38]
 8059e64: 9003         	str	r0, [sp, #0xc]
;             if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8059e66: 9803         	ldr	r0, [sp, #0xc]
 8059e68: b318         	cbz	r0, 0x8059eb2 <xQueueSemaphoreTake+0xb4> @ imm = #0x46
 8059e6a: e7ff         	b	0x8059e6c <xQueueSemaphoreTake+0x6e> @ imm = #-0x2
;                 pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxSemaphoreCount - ( UBaseType_t ) 1 );
 8059e6c: 9803         	ldr	r0, [sp, #0xc]
 8059e6e: 3801         	subs	r0, #0x1
 8059e70: 9905         	ldr	r1, [sp, #0x14]
 8059e72: 6388         	str	r0, [r1, #0x38]
;                     if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8059e74: 9805         	ldr	r0, [sp, #0x14]
 8059e76: 6800         	ldr	r0, [r0]
 8059e78: b928         	cbnz	r0, 0x8059e86 <xQueueSemaphoreTake+0x88> @ imm = #0xa
 8059e7a: e7ff         	b	0x8059e7c <xQueueSemaphoreTake+0x7e> @ imm = #-0x2
;                         pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8059e7c: f7ff fffe    	bl	0x8059e7c <xQueueSemaphoreTake+0x7e> @ imm = #-0x4
 8059e80: 9905         	ldr	r1, [sp, #0x14]
 8059e82: 6088         	str	r0, [r1, #0x8]
;                     }
 8059e84: e000         	b	0x8059e88 <xQueueSemaphoreTake+0x8a> @ imm = #0x0
 8059e86: e7ff         	b	0x8059e88 <xQueueSemaphoreTake+0x8a> @ imm = #-0x2
;                 if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8059e88: 9805         	ldr	r0, [sp, #0x14]
 8059e8a: 6900         	ldr	r0, [r0, #0x10]
 8059e8c: b158         	cbz	r0, 0x8059ea6 <xQueueSemaphoreTake+0xa8> @ imm = #0x16
 8059e8e: e7ff         	b	0x8059e90 <xQueueSemaphoreTake+0x92> @ imm = #-0x2
;                     if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8059e90: 9805         	ldr	r0, [sp, #0x14]
 8059e92: 3010         	adds	r0, #0x10
 8059e94: f7ff fffe    	bl	0x8059e94 <xQueueSemaphoreTake+0x96> @ imm = #-0x4
 8059e98: b118         	cbz	r0, 0x8059ea2 <xQueueSemaphoreTake+0xa4> @ imm = #0x6
 8059e9a: e7ff         	b	0x8059e9c <xQueueSemaphoreTake+0x9e> @ imm = #-0x2
;                         queueYIELD_IF_USING_PREEMPTION();
 8059e9c: f7ff fffe    	bl	0x8059e9c <xQueueSemaphoreTake+0x9e> @ imm = #-0x4
;                     }
 8059ea0: e000         	b	0x8059ea4 <xQueueSemaphoreTake+0xa6> @ imm = #0x0
 8059ea2: e7ff         	b	0x8059ea4 <xQueueSemaphoreTake+0xa6> @ imm = #-0x2
;                 }
 8059ea4: e000         	b	0x8059ea8 <xQueueSemaphoreTake+0xaa> @ imm = #0x0
 8059ea6: e7ff         	b	0x8059ea8 <xQueueSemaphoreTake+0xaa> @ imm = #-0x2
;                 taskEXIT_CRITICAL();
 8059ea8: f7ff fffe    	bl	0x8059ea8 <xQueueSemaphoreTake+0xaa> @ imm = #-0x4
 8059eac: 2001         	movs	r0, #0x1
;                 return pdPASS;
 8059eae: 900b         	str	r0, [sp, #0x2c]
 8059eb0: e084         	b	0x8059fbc <xQueueSemaphoreTake+0x1be> @ imm = #0x108
;                 if( xTicksToWait == ( TickType_t ) 0 )
 8059eb2: 9809         	ldr	r0, [sp, #0x24]
 8059eb4: b928         	cbnz	r0, 0x8059ec2 <xQueueSemaphoreTake+0xc4> @ imm = #0xa
 8059eb6: e7ff         	b	0x8059eb8 <xQueueSemaphoreTake+0xba> @ imm = #-0x2
;                     taskEXIT_CRITICAL();
 8059eb8: f7ff fffe    	bl	0x8059eb8 <xQueueSemaphoreTake+0xba> @ imm = #-0x4
 8059ebc: 2000         	movs	r0, #0x0
;                     return errQUEUE_EMPTY;
 8059ebe: 900b         	str	r0, [sp, #0x2c]
 8059ec0: e07c         	b	0x8059fbc <xQueueSemaphoreTake+0x1be> @ imm = #0xf8
;                 else if( xEntryTimeSet == pdFALSE )
 8059ec2: 9808         	ldr	r0, [sp, #0x20]
 8059ec4: b930         	cbnz	r0, 0x8059ed4 <xQueueSemaphoreTake+0xd6> @ imm = #0xc
 8059ec6: e7ff         	b	0x8059ec8 <xQueueSemaphoreTake+0xca> @ imm = #-0x2
 8059ec8: a806         	add	r0, sp, #0x18
;                     vTaskInternalSetTimeOutState( &xTimeOut );
 8059eca: f7ff fffe    	bl	0x8059eca <xQueueSemaphoreTake+0xcc> @ imm = #-0x4
 8059ece: 2001         	movs	r0, #0x1
;                     xEntryTimeSet = pdTRUE;
 8059ed0: 9008         	str	r0, [sp, #0x20]
;                 }
 8059ed2: e000         	b	0x8059ed6 <xQueueSemaphoreTake+0xd8> @ imm = #0x0
 8059ed4: e7ff         	b	0x8059ed6 <xQueueSemaphoreTake+0xd8> @ imm = #-0x2
 8059ed6: e7ff         	b	0x8059ed8 <xQueueSemaphoreTake+0xda> @ imm = #-0x2
 8059ed8: e7ff         	b	0x8059eda <xQueueSemaphoreTake+0xdc> @ imm = #-0x2
;         taskEXIT_CRITICAL();
 8059eda: f7ff fffe    	bl	0x8059eda <xQueueSemaphoreTake+0xdc> @ imm = #-0x4
;         vTaskSuspendAll();
 8059ede: f7ff fffe    	bl	0x8059ede <xQueueSemaphoreTake+0xe0> @ imm = #-0x4
;         prvLockQueue( pxQueue );
 8059ee2: f7ff fffe    	bl	0x8059ee2 <xQueueSemaphoreTake+0xe4> @ imm = #-0x4
 8059ee6: 9805         	ldr	r0, [sp, #0x14]
 8059ee8: f990 0044    	ldrsb.w	r0, [r0, #0x44]
 8059eec: 3001         	adds	r0, #0x1
 8059eee: b928         	cbnz	r0, 0x8059efc <xQueueSemaphoreTake+0xfe> @ imm = #0xa
 8059ef0: e7ff         	b	0x8059ef2 <xQueueSemaphoreTake+0xf4> @ imm = #-0x2
 8059ef2: 9905         	ldr	r1, [sp, #0x14]
 8059ef4: 2000         	movs	r0, #0x0
 8059ef6: f881 0044    	strb.w	r0, [r1, #0x44]
 8059efa: e7ff         	b	0x8059efc <xQueueSemaphoreTake+0xfe> @ imm = #-0x2
 8059efc: 9805         	ldr	r0, [sp, #0x14]
 8059efe: f990 0045    	ldrsb.w	r0, [r0, #0x45]
 8059f02: 3001         	adds	r0, #0x1
 8059f04: b928         	cbnz	r0, 0x8059f12 <xQueueSemaphoreTake+0x114> @ imm = #0xa
 8059f06: e7ff         	b	0x8059f08 <xQueueSemaphoreTake+0x10a> @ imm = #-0x2
 8059f08: 9905         	ldr	r1, [sp, #0x14]
 8059f0a: 2000         	movs	r0, #0x0
 8059f0c: f881 0045    	strb.w	r0, [r1, #0x45]
 8059f10: e7ff         	b	0x8059f12 <xQueueSemaphoreTake+0x114> @ imm = #-0x2
 8059f12: f7ff fffe    	bl	0x8059f12 <xQueueSemaphoreTake+0x114> @ imm = #-0x4
 8059f16: a806         	add	r0, sp, #0x18
 8059f18: a909         	add	r1, sp, #0x24
;         if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8059f1a: f7ff fffe    	bl	0x8059f1a <xQueueSemaphoreTake+0x11c> @ imm = #-0x4
 8059f1e: bb60         	cbnz	r0, 0x8059f7a <xQueueSemaphoreTake+0x17c> @ imm = #0x58
 8059f20: e7ff         	b	0x8059f22 <xQueueSemaphoreTake+0x124> @ imm = #-0x2
;             if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8059f22: 9805         	ldr	r0, [sp, #0x14]
 8059f24: f000 fb57    	bl	0x805a5d6 <prvIsQueueEmpty> @ imm = #0x6ae
 8059f28: b300         	cbz	r0, 0x8059f6c <xQueueSemaphoreTake+0x16e> @ imm = #0x40
 8059f2a: e7ff         	b	0x8059f2c <xQueueSemaphoreTake+0x12e> @ imm = #-0x2
;                     if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8059f2c: 9805         	ldr	r0, [sp, #0x14]
 8059f2e: 6800         	ldr	r0, [r0]
 8059f30: b950         	cbnz	r0, 0x8059f48 <xQueueSemaphoreTake+0x14a> @ imm = #0x14
 8059f32: e7ff         	b	0x8059f34 <xQueueSemaphoreTake+0x136> @ imm = #-0x2
;                         taskENTER_CRITICAL();
 8059f34: f7ff fffe    	bl	0x8059f34 <xQueueSemaphoreTake+0x136> @ imm = #-0x4
;                             xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8059f38: 9805         	ldr	r0, [sp, #0x14]
 8059f3a: 6880         	ldr	r0, [r0, #0x8]
 8059f3c: f7ff fffe    	bl	0x8059f3c <xQueueSemaphoreTake+0x13e> @ imm = #-0x4
 8059f40: 9004         	str	r0, [sp, #0x10]
;                         taskEXIT_CRITICAL();
 8059f42: f7ff fffe    	bl	0x8059f42 <xQueueSemaphoreTake+0x144> @ imm = #-0x4
;                     }
 8059f46: e000         	b	0x8059f4a <xQueueSemaphoreTake+0x14c> @ imm = #0x0
 8059f48: e7ff         	b	0x8059f4a <xQueueSemaphoreTake+0x14c> @ imm = #-0x2
;                 vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8059f4a: 9805         	ldr	r0, [sp, #0x14]
 8059f4c: 3024         	adds	r0, #0x24
 8059f4e: 9909         	ldr	r1, [sp, #0x24]
 8059f50: f7ff fffe    	bl	0x8059f50 <xQueueSemaphoreTake+0x152> @ imm = #-0x4
;                 prvUnlockQueue( pxQueue );
 8059f54: 9805         	ldr	r0, [sp, #0x14]
 8059f56: f000 f8dc    	bl	0x805a112 <prvUnlockQueue> @ imm = #0x1b8
;                 if( xTaskResumeAll() == pdFALSE )
 8059f5a: f7ff fffe    	bl	0x8059f5a <xQueueSemaphoreTake+0x15c> @ imm = #-0x4
 8059f5e: b918         	cbnz	r0, 0x8059f68 <xQueueSemaphoreTake+0x16a> @ imm = #0x6
 8059f60: e7ff         	b	0x8059f62 <xQueueSemaphoreTake+0x164> @ imm = #-0x2
;                     taskYIELD_WITHIN_API();
 8059f62: f7ff fffe    	bl	0x8059f62 <xQueueSemaphoreTake+0x164> @ imm = #-0x4
;                 }
 8059f66: e000         	b	0x8059f6a <xQueueSemaphoreTake+0x16c> @ imm = #0x0
 8059f68: e7ff         	b	0x8059f6a <xQueueSemaphoreTake+0x16c> @ imm = #-0x2
;             }
 8059f6a: e005         	b	0x8059f78 <xQueueSemaphoreTake+0x17a> @ imm = #0xa
;                 prvUnlockQueue( pxQueue );
 8059f6c: 9805         	ldr	r0, [sp, #0x14]
 8059f6e: f000 f8d0    	bl	0x805a112 <prvUnlockQueue> @ imm = #0x1a0
;                 ( void ) xTaskResumeAll();
 8059f72: f7ff fffe    	bl	0x8059f72 <xQueueSemaphoreTake+0x174> @ imm = #-0x4
 8059f76: e7ff         	b	0x8059f78 <xQueueSemaphoreTake+0x17a> @ imm = #-0x2
;         }
 8059f78: e01f         	b	0x8059fba <xQueueSemaphoreTake+0x1bc> @ imm = #0x3e
;             prvUnlockQueue( pxQueue );
 8059f7a: 9805         	ldr	r0, [sp, #0x14]
 8059f7c: f000 f8c9    	bl	0x805a112 <prvUnlockQueue> @ imm = #0x192
;             ( void ) xTaskResumeAll();
 8059f80: f7ff fffe    	bl	0x8059f80 <xQueueSemaphoreTake+0x182> @ imm = #-0x4
;             if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8059f84: 9805         	ldr	r0, [sp, #0x14]
 8059f86: f000 fb26    	bl	0x805a5d6 <prvIsQueueEmpty> @ imm = #0x64c
 8059f8a: b1a0         	cbz	r0, 0x8059fb6 <xQueueSemaphoreTake+0x1b8> @ imm = #0x28
 8059f8c: e7ff         	b	0x8059f8e <xQueueSemaphoreTake+0x190> @ imm = #-0x2
;                     if( xInheritanceOccurred != pdFALSE )
 8059f8e: 9804         	ldr	r0, [sp, #0x10]
 8059f90: b170         	cbz	r0, 0x8059fb0 <xQueueSemaphoreTake+0x1b2> @ imm = #0x1c
 8059f92: e7ff         	b	0x8059f94 <xQueueSemaphoreTake+0x196> @ imm = #-0x2
;                         taskENTER_CRITICAL();
 8059f94: f7ff fffe    	bl	0x8059f94 <xQueueSemaphoreTake+0x196> @ imm = #-0x4
;                             uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8059f98: 9805         	ldr	r0, [sp, #0x14]
 8059f9a: f000 fb31    	bl	0x805a600 <prvGetDisinheritPriorityAfterTimeout> @ imm = #0x662
 8059f9e: 9002         	str	r0, [sp, #0x8]
;                             vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8059fa0: 9805         	ldr	r0, [sp, #0x14]
 8059fa2: 6880         	ldr	r0, [r0, #0x8]
 8059fa4: 9902         	ldr	r1, [sp, #0x8]
 8059fa6: f7ff fffe    	bl	0x8059fa6 <xQueueSemaphoreTake+0x1a8> @ imm = #-0x4
;                         taskEXIT_CRITICAL();
 8059faa: f7ff fffe    	bl	0x8059faa <xQueueSemaphoreTake+0x1ac> @ imm = #-0x4
;                     }
 8059fae: e7ff         	b	0x8059fb0 <xQueueSemaphoreTake+0x1b2> @ imm = #-0x2
 8059fb0: 2000         	movs	r0, #0x0
;                 return errQUEUE_EMPTY;
 8059fb2: 900b         	str	r0, [sp, #0x2c]
 8059fb4: e002         	b	0x8059fbc <xQueueSemaphoreTake+0x1be> @ imm = #0x4
 8059fb6: e7ff         	b	0x8059fb8 <xQueueSemaphoreTake+0x1ba> @ imm = #-0x2
 8059fb8: e7ff         	b	0x8059fba <xQueueSemaphoreTake+0x1bc> @ imm = #-0x2
;     for( ; ; )
 8059fba: e74f         	b	0x8059e5c <xQueueSemaphoreTake+0x5e> @ imm = #-0x162
; }
 8059fbc: 980b         	ldr	r0, [sp, #0x2c]
 8059fbe: b00c         	add	sp, #0x30
 8059fc0: bd80         	pop	{r7, pc}

08059fc2 <xQueueCreateCountingSemaphore>:
;     {
 8059fc2: b580         	push	{r7, lr}
 8059fc4: 466f         	mov	r7, sp
 8059fc6: b084         	sub	sp, #0x10
 8059fc8: 9003         	str	r0, [sp, #0xc]
 8059fca: 9102         	str	r1, [sp, #0x8]
 8059fcc: 2000         	movs	r0, #0x0
;         QueueHandle_t xHandle = NULL;
 8059fce: 9001         	str	r0, [sp, #0x4]
;         if( ( uxMaxCount != 0 ) &&
 8059fd0: 9803         	ldr	r0, [sp, #0xc]
 8059fd2: b1a0         	cbz	r0, 0x8059ffe <xQueueCreateCountingSemaphore+0x3c> @ imm = #0x28
 8059fd4: e7ff         	b	0x8059fd6 <xQueueCreateCountingSemaphore+0x14> @ imm = #-0x2
;             ( uxInitialCount <= uxMaxCount ) )
 8059fd6: 9802         	ldr	r0, [sp, #0x8]
 8059fd8: 9903         	ldr	r1, [sp, #0xc]
;         if( ( uxMaxCount != 0 ) &&
 8059fda: 4288         	cmp	r0, r1
 8059fdc: d80f         	bhi	0x8059ffe <xQueueCreateCountingSemaphore+0x3c> @ imm = #0x1e
 8059fde: e7ff         	b	0x8059fe0 <xQueueCreateCountingSemaphore+0x1e> @ imm = #-0x2
;             xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8059fe0: 9803         	ldr	r0, [sp, #0xc]
 8059fe2: 2100         	movs	r1, #0x0
 8059fe4: 2202         	movs	r2, #0x2
 8059fe6: f7ff fffe    	bl	0x8059fe6 <xQueueCreateCountingSemaphore+0x24> @ imm = #-0x4
 8059fea: 9001         	str	r0, [sp, #0x4]
;             if( xHandle != NULL )
 8059fec: 9801         	ldr	r0, [sp, #0x4]
 8059fee: b120         	cbz	r0, 0x8059ffa <xQueueCreateCountingSemaphore+0x38> @ imm = #0x8
 8059ff0: e7ff         	b	0x8059ff2 <xQueueCreateCountingSemaphore+0x30> @ imm = #-0x2
;                 ( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8059ff2: 9802         	ldr	r0, [sp, #0x8]
 8059ff4: 9901         	ldr	r1, [sp, #0x4]
 8059ff6: 6388         	str	r0, [r1, #0x38]
;             }
 8059ff8: e000         	b	0x8059ffc <xQueueCreateCountingSemaphore+0x3a> @ imm = #0x0
 8059ffa: e7ff         	b	0x8059ffc <xQueueCreateCountingSemaphore+0x3a> @ imm = #-0x2
;         }
 8059ffc: e007         	b	0x805a00e <xQueueCreateCountingSemaphore+0x4c> @ imm = #0xe
;             configASSERT( xHandle );
 8059ffe: 9801         	ldr	r0, [sp, #0x4]
 805a000: b920         	cbnz	r0, 0x805a00c <xQueueCreateCountingSemaphore+0x4a> @ imm = #0x8
 805a002: e7ff         	b	0x805a004 <xQueueCreateCountingSemaphore+0x42> @ imm = #-0x2
 805a004: f7ff fffe    	bl	0x805a004 <xQueueCreateCountingSemaphore+0x42> @ imm = #-0x4
 805a008: e7ff         	b	0x805a00a <xQueueCreateCountingSemaphore+0x48> @ imm = #-0x2
 805a00a: e7fe         	b	0x805a00a <xQueueCreateCountingSemaphore+0x48> @ imm = #-0x4
 805a00c: e7ff         	b	0x805a00e <xQueueCreateCountingSemaphore+0x4c> @ imm = #-0x2
;         return xHandle;
 805a00e: 9801         	ldr	r0, [sp, #0x4]
 805a010: b004         	add	sp, #0x10
 805a012: bd80         	pop	{r7, pc}

0805a014 <prvCopyDataToQueue>:
; {
 805a014: b580         	push	{r7, lr}
 805a016: 466f         	mov	r7, sp
 805a018: b086         	sub	sp, #0x18
 805a01a: 9005         	str	r0, [sp, #0x14]
 805a01c: 9104         	str	r1, [sp, #0x10]
 805a01e: 9203         	str	r2, [sp, #0xc]
 805a020: 2000         	movs	r0, #0x0
;     BaseType_t xReturn = pdFALSE;
 805a022: 9002         	str	r0, [sp, #0x8]
;     uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 805a024: 9805         	ldr	r0, [sp, #0x14]
 805a026: 6b80         	ldr	r0, [r0, #0x38]
 805a028: 9001         	str	r0, [sp, #0x4]
;     if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 805a02a: 9805         	ldr	r0, [sp, #0x14]
 805a02c: 6c00         	ldr	r0, [r0, #0x40]
 805a02e: b978         	cbnz	r0, 0x805a050 <prvCopyDataToQueue+0x3c> @ imm = #0x1e
 805a030: e7ff         	b	0x805a032 <prvCopyDataToQueue+0x1e> @ imm = #-0x2
;             if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 805a032: 9805         	ldr	r0, [sp, #0x14]
 805a034: 6800         	ldr	r0, [r0]
 805a036: b948         	cbnz	r0, 0x805a04c <prvCopyDataToQueue+0x38> @ imm = #0x12
 805a038: e7ff         	b	0x805a03a <prvCopyDataToQueue+0x26> @ imm = #-0x2
;                 xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 805a03a: 9805         	ldr	r0, [sp, #0x14]
 805a03c: 6880         	ldr	r0, [r0, #0x8]
 805a03e: f7ff fffe    	bl	0x805a03e <prvCopyDataToQueue+0x2a> @ imm = #-0x4
 805a042: 9002         	str	r0, [sp, #0x8]
;                 pxQueue->u.xSemaphore.xMutexHolder = NULL;
 805a044: 9905         	ldr	r1, [sp, #0x14]
 805a046: 2000         	movs	r0, #0x0
 805a048: 6088         	str	r0, [r1, #0x8]
;             }
 805a04a: e000         	b	0x805a04e <prvCopyDataToQueue+0x3a> @ imm = #0x0
 805a04c: e7ff         	b	0x805a04e <prvCopyDataToQueue+0x3a> @ imm = #-0x2
;     }
 805a04e: e041         	b	0x805a0d4 <prvCopyDataToQueue+0xc0> @ imm = #0x82
;     else if( xPosition == queueSEND_TO_BACK )
 805a050: 9803         	ldr	r0, [sp, #0xc]
 805a052: b9b8         	cbnz	r0, 0x805a084 <prvCopyDataToQueue+0x70> @ imm = #0x2e
 805a054: e7ff         	b	0x805a056 <prvCopyDataToQueue+0x42> @ imm = #-0x2
;         ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 805a056: 9a05         	ldr	r2, [sp, #0x14]
 805a058: 9904         	ldr	r1, [sp, #0x10]
 805a05a: 6850         	ldr	r0, [r2, #0x4]
 805a05c: 6c12         	ldr	r2, [r2, #0x40]
 805a05e: f7ff fffe    	bl	0x805a05e <prvCopyDataToQueue+0x4a> @ imm = #-0x4
;         pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 805a062: 9905         	ldr	r1, [sp, #0x14]
 805a064: 6848         	ldr	r0, [r1, #0x4]
 805a066: 6c0a         	ldr	r2, [r1, #0x40]
 805a068: 4410         	add	r0, r2
 805a06a: 6048         	str	r0, [r1, #0x4]
;         if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 805a06c: 9905         	ldr	r1, [sp, #0x14]
 805a06e: 6848         	ldr	r0, [r1, #0x4]
 805a070: 6889         	ldr	r1, [r1, #0x8]
 805a072: 4288         	cmp	r0, r1
 805a074: d304         	blo	0x805a080 <prvCopyDataToQueue+0x6c> @ imm = #0x8
 805a076: e7ff         	b	0x805a078 <prvCopyDataToQueue+0x64> @ imm = #-0x2
;             pxQueue->pcWriteTo = pxQueue->pcHead;
 805a078: 9905         	ldr	r1, [sp, #0x14]
 805a07a: 6808         	ldr	r0, [r1]
 805a07c: 6048         	str	r0, [r1, #0x4]
;         }
 805a07e: e000         	b	0x805a082 <prvCopyDataToQueue+0x6e> @ imm = #0x0
 805a080: e7ff         	b	0x805a082 <prvCopyDataToQueue+0x6e> @ imm = #-0x2
;     }
 805a082: e026         	b	0x805a0d2 <prvCopyDataToQueue+0xbe> @ imm = #0x4c
;         ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 805a084: 9a05         	ldr	r2, [sp, #0x14]
 805a086: 9904         	ldr	r1, [sp, #0x10]
 805a088: 68d0         	ldr	r0, [r2, #0xc]
 805a08a: 6c12         	ldr	r2, [r2, #0x40]
 805a08c: f7ff fffe    	bl	0x805a08c <prvCopyDataToQueue+0x78> @ imm = #-0x4
;         pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 805a090: 9905         	ldr	r1, [sp, #0x14]
 805a092: 68c8         	ldr	r0, [r1, #0xc]
 805a094: 6c0a         	ldr	r2, [r1, #0x40]
 805a096: 1a80         	subs	r0, r0, r2
 805a098: 60c8         	str	r0, [r1, #0xc]
;         if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 805a09a: 9805         	ldr	r0, [sp, #0x14]
 805a09c: 6801         	ldr	r1, [r0]
 805a09e: 68c0         	ldr	r0, [r0, #0xc]
 805a0a0: 4288         	cmp	r0, r1
 805a0a2: d206         	bhs	0x805a0b2 <prvCopyDataToQueue+0x9e> @ imm = #0xc
 805a0a4: e7ff         	b	0x805a0a6 <prvCopyDataToQueue+0x92> @ imm = #-0x2
;             pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 805a0a6: 9905         	ldr	r1, [sp, #0x14]
 805a0a8: 6888         	ldr	r0, [r1, #0x8]
 805a0aa: 6c0a         	ldr	r2, [r1, #0x40]
 805a0ac: 1a80         	subs	r0, r0, r2
 805a0ae: 60c8         	str	r0, [r1, #0xc]
;         }
 805a0b0: e000         	b	0x805a0b4 <prvCopyDataToQueue+0xa0> @ imm = #0x0
 805a0b2: e7ff         	b	0x805a0b4 <prvCopyDataToQueue+0xa0> @ imm = #-0x2
;         if( xPosition == queueOVERWRITE )
 805a0b4: 9803         	ldr	r0, [sp, #0xc]
 805a0b6: 2802         	cmp	r0, #0x2
 805a0b8: d109         	bne	0x805a0ce <prvCopyDataToQueue+0xba> @ imm = #0x12
 805a0ba: e7ff         	b	0x805a0bc <prvCopyDataToQueue+0xa8> @ imm = #-0x2
;             if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 805a0bc: 9801         	ldr	r0, [sp, #0x4]
 805a0be: b120         	cbz	r0, 0x805a0ca <prvCopyDataToQueue+0xb6> @ imm = #0x8
 805a0c0: e7ff         	b	0x805a0c2 <prvCopyDataToQueue+0xae> @ imm = #-0x2
;                 --uxMessagesWaiting;
 805a0c2: 9801         	ldr	r0, [sp, #0x4]
 805a0c4: 3801         	subs	r0, #0x1
 805a0c6: 9001         	str	r0, [sp, #0x4]
;             }
 805a0c8: e000         	b	0x805a0cc <prvCopyDataToQueue+0xb8> @ imm = #0x0
 805a0ca: e7ff         	b	0x805a0cc <prvCopyDataToQueue+0xb8> @ imm = #-0x2
;         }
 805a0cc: e000         	b	0x805a0d0 <prvCopyDataToQueue+0xbc> @ imm = #0x0
 805a0ce: e7ff         	b	0x805a0d0 <prvCopyDataToQueue+0xbc> @ imm = #-0x2
 805a0d0: e7ff         	b	0x805a0d2 <prvCopyDataToQueue+0xbe> @ imm = #-0x2
 805a0d2: e7ff         	b	0x805a0d4 <prvCopyDataToQueue+0xc0> @ imm = #-0x2
;     pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting + ( UBaseType_t ) 1 );
 805a0d4: 9801         	ldr	r0, [sp, #0x4]
 805a0d6: 3001         	adds	r0, #0x1
 805a0d8: 9905         	ldr	r1, [sp, #0x14]
 805a0da: 6388         	str	r0, [r1, #0x38]
;     return xReturn;
 805a0dc: 9802         	ldr	r0, [sp, #0x8]
 805a0de: b006         	add	sp, #0x18
 805a0e0: bd80         	pop	{r7, pc}

0805a0e2 <prvIsQueueFull>:
; {
 805a0e2: b580         	push	{r7, lr}
 805a0e4: 466f         	mov	r7, sp
 805a0e6: b082         	sub	sp, #0x8
 805a0e8: 9001         	str	r0, [sp, #0x4]
;     taskENTER_CRITICAL();
 805a0ea: f7ff fffe    	bl	0x805a0ea <prvIsQueueFull+0x8> @ imm = #-0x4
;         if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 805a0ee: 9801         	ldr	r0, [sp, #0x4]
 805a0f0: 6b80         	ldr	r0, [r0, #0x38]
 805a0f2: 9901         	ldr	r1, [sp, #0x4]
 805a0f4: 6bc9         	ldr	r1, [r1, #0x3c]
 805a0f6: 4288         	cmp	r0, r1
 805a0f8: d103         	bne	0x805a102 <prvIsQueueFull+0x20> @ imm = #0x6
 805a0fa: e7ff         	b	0x805a0fc <prvIsQueueFull+0x1a> @ imm = #-0x2
 805a0fc: 2001         	movs	r0, #0x1
;             xReturn = pdTRUE;
 805a0fe: 9000         	str	r0, [sp]
;         }
 805a100: e002         	b	0x805a108 <prvIsQueueFull+0x26> @ imm = #0x4
 805a102: 2000         	movs	r0, #0x0
;             xReturn = pdFALSE;
 805a104: 9000         	str	r0, [sp]
 805a106: e7ff         	b	0x805a108 <prvIsQueueFull+0x26> @ imm = #-0x2
;     taskEXIT_CRITICAL();
 805a108: f7ff fffe    	bl	0x805a108 <prvIsQueueFull+0x26> @ imm = #-0x4
;     return xReturn;
 805a10c: 9800         	ldr	r0, [sp]
 805a10e: b002         	add	sp, #0x8
 805a110: bd80         	pop	{r7, pc}

0805a112 <prvUnlockQueue>:
; {
 805a112: b580         	push	{r7, lr}
 805a114: 466f         	mov	r7, sp
 805a116: b082         	sub	sp, #0x8
 805a118: 9001         	str	r0, [sp, #0x4]
;     taskENTER_CRITICAL();
 805a11a: f7ff fffe    	bl	0x805a11a <prvUnlockQueue+0x8> @ imm = #-0x4
;         int8_t cTxLock = pxQueue->cTxLock;
 805a11e: 9801         	ldr	r0, [sp, #0x4]
 805a120: f890 0045    	ldrb.w	r0, [r0, #0x45]
 805a124: f807 0c05    	strb	r0, [r7, #-5]
;         while( cTxLock > queueLOCKED_UNMODIFIED )
 805a128: e7ff         	b	0x805a12a <prvUnlockQueue+0x18> @ imm = #-0x2
 805a12a: f917 0c05    	ldrsb	r0, [r7, #-5]
 805a12e: 2801         	cmp	r0, #0x1
 805a130: db16         	blt	0x805a160 <prvUnlockQueue+0x4e> @ imm = #0x2c
 805a132: e7ff         	b	0x805a134 <prvUnlockQueue+0x22> @ imm = #-0x2
;                 if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 805a134: 9801         	ldr	r0, [sp, #0x4]
 805a136: 6a40         	ldr	r0, [r0, #0x24]
 805a138: b158         	cbz	r0, 0x805a152 <prvUnlockQueue+0x40> @ imm = #0x16
 805a13a: e7ff         	b	0x805a13c <prvUnlockQueue+0x2a> @ imm = #-0x2
;                     if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 805a13c: 9801         	ldr	r0, [sp, #0x4]
 805a13e: 3024         	adds	r0, #0x24
 805a140: f7ff fffe    	bl	0x805a140 <prvUnlockQueue+0x2e> @ imm = #-0x4
 805a144: b118         	cbz	r0, 0x805a14e <prvUnlockQueue+0x3c> @ imm = #0x6
 805a146: e7ff         	b	0x805a148 <prvUnlockQueue+0x36> @ imm = #-0x2
;                         vTaskMissedYield();
 805a148: f7ff fffe    	bl	0x805a148 <prvUnlockQueue+0x36> @ imm = #-0x4
;                     }
 805a14c: e000         	b	0x805a150 <prvUnlockQueue+0x3e> @ imm = #0x0
 805a14e: e7ff         	b	0x805a150 <prvUnlockQueue+0x3e> @ imm = #-0x2
;                 }
 805a150: e000         	b	0x805a154 <prvUnlockQueue+0x42> @ imm = #0x0
;                     break;
 805a152: e005         	b	0x805a160 <prvUnlockQueue+0x4e> @ imm = #0xa
;             --cTxLock;
 805a154: f817 0c05    	ldrb	r0, [r7, #-5]
 805a158: 3801         	subs	r0, #0x1
 805a15a: f807 0c05    	strb	r0, [r7, #-5]
;         while( cTxLock > queueLOCKED_UNMODIFIED )
 805a15e: e7e4         	b	0x805a12a <prvUnlockQueue+0x18> @ imm = #-0x38
;         pxQueue->cTxLock = queueUNLOCKED;
 805a160: 9901         	ldr	r1, [sp, #0x4]
 805a162: 20ff         	movs	r0, #0xff
 805a164: f881 0045    	strb.w	r0, [r1, #0x45]
;     taskEXIT_CRITICAL();
 805a168: f7ff fffe    	bl	0x805a168 <prvUnlockQueue+0x56> @ imm = #-0x4
;     taskENTER_CRITICAL();
 805a16c: f7ff fffe    	bl	0x805a16c <prvUnlockQueue+0x5a> @ imm = #-0x4
;         int8_t cRxLock = pxQueue->cRxLock;
 805a170: 9801         	ldr	r0, [sp, #0x4]
 805a172: f890 0044    	ldrb.w	r0, [r0, #0x44]
 805a176: f807 0c06    	strb	r0, [r7, #-6]
;         while( cRxLock > queueLOCKED_UNMODIFIED )
 805a17a: e7ff         	b	0x805a17c <prvUnlockQueue+0x6a> @ imm = #-0x2
 805a17c: f917 0c06    	ldrsb	r0, [r7, #-6]
 805a180: 2801         	cmp	r0, #0x1
 805a182: db16         	blt	0x805a1b2 <prvUnlockQueue+0xa0> @ imm = #0x2c
 805a184: e7ff         	b	0x805a186 <prvUnlockQueue+0x74> @ imm = #-0x2
;             if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 805a186: 9801         	ldr	r0, [sp, #0x4]
 805a188: 6900         	ldr	r0, [r0, #0x10]
 805a18a: b180         	cbz	r0, 0x805a1ae <prvUnlockQueue+0x9c> @ imm = #0x20
 805a18c: e7ff         	b	0x805a18e <prvUnlockQueue+0x7c> @ imm = #-0x2
;                 if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 805a18e: 9801         	ldr	r0, [sp, #0x4]
 805a190: 3010         	adds	r0, #0x10
 805a192: f7ff fffe    	bl	0x805a192 <prvUnlockQueue+0x80> @ imm = #-0x4
 805a196: b118         	cbz	r0, 0x805a1a0 <prvUnlockQueue+0x8e> @ imm = #0x6
 805a198: e7ff         	b	0x805a19a <prvUnlockQueue+0x88> @ imm = #-0x2
;                     vTaskMissedYield();
 805a19a: f7ff fffe    	bl	0x805a19a <prvUnlockQueue+0x88> @ imm = #-0x4
;                 }
 805a19e: e000         	b	0x805a1a2 <prvUnlockQueue+0x90> @ imm = #0x0
 805a1a0: e7ff         	b	0x805a1a2 <prvUnlockQueue+0x90> @ imm = #-0x2
;                 --cRxLock;
 805a1a2: f817 0c06    	ldrb	r0, [r7, #-6]
 805a1a6: 3801         	subs	r0, #0x1
 805a1a8: f807 0c06    	strb	r0, [r7, #-6]
;             }
 805a1ac: e000         	b	0x805a1b0 <prvUnlockQueue+0x9e> @ imm = #0x0
;                 break;
 805a1ae: e000         	b	0x805a1b2 <prvUnlockQueue+0xa0> @ imm = #0x0
;         while( cRxLock > queueLOCKED_UNMODIFIED )
 805a1b0: e7e4         	b	0x805a17c <prvUnlockQueue+0x6a> @ imm = #-0x38
;         pxQueue->cRxLock = queueUNLOCKED;
 805a1b2: 9901         	ldr	r1, [sp, #0x4]
 805a1b4: 20ff         	movs	r0, #0xff
 805a1b6: f881 0044    	strb.w	r0, [r1, #0x44]
;     taskEXIT_CRITICAL();
 805a1ba: f7ff fffe    	bl	0x805a1ba <prvUnlockQueue+0xa8> @ imm = #-0x4
; }
 805a1be: b002         	add	sp, #0x8
 805a1c0: bd80         	pop	{r7, pc}

0805a1c2 <xQueueGenericSendFromISR>:
; {
 805a1c2: b580         	push	{r7, lr}
 805a1c4: 466f         	mov	r7, sp
 805a1c6: b08c         	sub	sp, #0x30
 805a1c8: 900b         	str	r0, [sp, #0x2c]
 805a1ca: 910a         	str	r1, [sp, #0x28]
 805a1cc: 9209         	str	r2, [sp, #0x24]
 805a1ce: 9308         	str	r3, [sp, #0x20]
;     Queue_t * const pxQueue = xQueue;
 805a1d0: 980b         	ldr	r0, [sp, #0x2c]
 805a1d2: 9005         	str	r0, [sp, #0x14]
;     configASSERT( pxQueue );
 805a1d4: 9805         	ldr	r0, [sp, #0x14]
 805a1d6: b920         	cbnz	r0, 0x805a1e2 <xQueueGenericSendFromISR+0x20> @ imm = #0x8
 805a1d8: e7ff         	b	0x805a1da <xQueueGenericSendFromISR+0x18> @ imm = #-0x2
 805a1da: f7ff fffe    	bl	0x805a1da <xQueueGenericSendFromISR+0x18> @ imm = #-0x4
 805a1de: e7ff         	b	0x805a1e0 <xQueueGenericSendFromISR+0x1e> @ imm = #-0x2
 805a1e0: e7fe         	b	0x805a1e0 <xQueueGenericSendFromISR+0x1e> @ imm = #-0x4
;     configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 805a1e2: 990a         	ldr	r1, [sp, #0x28]
 805a1e4: 2000         	movs	r0, #0x0
 805a1e6: 9001         	str	r0, [sp, #0x4]
 805a1e8: b939         	cbnz	r1, 0x805a1fa <xQueueGenericSendFromISR+0x38> @ imm = #0xe
 805a1ea: e7ff         	b	0x805a1ec <xQueueGenericSendFromISR+0x2a> @ imm = #-0x2
 805a1ec: 9805         	ldr	r0, [sp, #0x14]
 805a1ee: 6c00         	ldr	r0, [r0, #0x40]
 805a1f0: 2800         	cmp	r0, #0x0
 805a1f2: bf18         	it	ne
 805a1f4: 2001         	movne	r0, #0x1
 805a1f6: 9001         	str	r0, [sp, #0x4]
 805a1f8: e7ff         	b	0x805a1fa <xQueueGenericSendFromISR+0x38> @ imm = #-0x2
 805a1fa: 9801         	ldr	r0, [sp, #0x4]
;     configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 805a1fc: 07c0         	lsls	r0, r0, #0x1f
 805a1fe: b120         	cbz	r0, 0x805a20a <xQueueGenericSendFromISR+0x48> @ imm = #0x8
 805a200: e7ff         	b	0x805a202 <xQueueGenericSendFromISR+0x40> @ imm = #-0x2
 805a202: f7ff fffe    	bl	0x805a202 <xQueueGenericSendFromISR+0x40> @ imm = #-0x4
 805a206: e7ff         	b	0x805a208 <xQueueGenericSendFromISR+0x46> @ imm = #-0x2
 805a208: e7fe         	b	0x805a208 <xQueueGenericSendFromISR+0x46> @ imm = #-0x4
;     configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 805a20a: 9908         	ldr	r1, [sp, #0x20]
 805a20c: 2000         	movs	r0, #0x0
 805a20e: 2902         	cmp	r1, #0x2
 805a210: 9000         	str	r0, [sp]
 805a212: d107         	bne	0x805a224 <xQueueGenericSendFromISR+0x62> @ imm = #0xe
 805a214: e7ff         	b	0x805a216 <xQueueGenericSendFromISR+0x54> @ imm = #-0x2
 805a216: 9805         	ldr	r0, [sp, #0x14]
 805a218: 6bc0         	ldr	r0, [r0, #0x3c]
 805a21a: 3801         	subs	r0, #0x1
 805a21c: bf18         	it	ne
 805a21e: 2001         	movne	r0, #0x1
 805a220: 9000         	str	r0, [sp]
 805a222: e7ff         	b	0x805a224 <xQueueGenericSendFromISR+0x62> @ imm = #-0x2
 805a224: 9800         	ldr	r0, [sp]
;     configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 805a226: 07c0         	lsls	r0, r0, #0x1f
 805a228: b120         	cbz	r0, 0x805a234 <xQueueGenericSendFromISR+0x72> @ imm = #0x8
 805a22a: e7ff         	b	0x805a22c <xQueueGenericSendFromISR+0x6a> @ imm = #-0x2
 805a22c: f7ff fffe    	bl	0x805a22c <xQueueGenericSendFromISR+0x6a> @ imm = #-0x4
 805a230: e7ff         	b	0x805a232 <xQueueGenericSendFromISR+0x70> @ imm = #-0x2
 805a232: e7fe         	b	0x805a232 <xQueueGenericSendFromISR+0x70> @ imm = #-0x4
;     portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 805a234: f7ff fffe    	bl	0x805a234 <xQueueGenericSendFromISR+0x72> @ imm = #-0x4
;     uxSavedInterruptStatus = taskENTER_CRITICAL_FROM_ISR();
 805a238: f7ff fffe    	bl	0x805a238 <xQueueGenericSendFromISR+0x76> @ imm = #-0x4
 805a23c: 9006         	str	r0, [sp, #0x18]
;         if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 805a23e: 9805         	ldr	r0, [sp, #0x14]
 805a240: 6b80         	ldr	r0, [r0, #0x38]
 805a242: 9905         	ldr	r1, [sp, #0x14]
 805a244: 6bc9         	ldr	r1, [r1, #0x3c]
 805a246: 4288         	cmp	r0, r1
 805a248: d304         	blo	0x805a254 <xQueueGenericSendFromISR+0x92> @ imm = #0x8
 805a24a: e7ff         	b	0x805a24c <xQueueGenericSendFromISR+0x8a> @ imm = #-0x2
 805a24c: 9808         	ldr	r0, [sp, #0x20]
 805a24e: 2802         	cmp	r0, #0x2
 805a250: d148         	bne	0x805a2e4 <xQueueGenericSendFromISR+0x122> @ imm = #0x90
 805a252: e7ff         	b	0x805a254 <xQueueGenericSendFromISR+0x92> @ imm = #-0x2
;             const int8_t cTxLock = pxQueue->cTxLock;
 805a254: 9805         	ldr	r0, [sp, #0x14]
 805a256: f890 0045    	ldrb.w	r0, [r0, #0x45]
 805a25a: f807 0c1d    	strb	r0, [r7, #-29]
;             const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 805a25e: 9805         	ldr	r0, [sp, #0x14]
 805a260: 6b80         	ldr	r0, [r0, #0x38]
 805a262: 9003         	str	r0, [sp, #0xc]
;             ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 805a264: 9805         	ldr	r0, [sp, #0x14]
 805a266: 990a         	ldr	r1, [sp, #0x28]
 805a268: 9a08         	ldr	r2, [sp, #0x20]
 805a26a: f7ff fed3    	bl	0x805a014 <prvCopyDataToQueue> @ imm = #-0x25a
;             if( cTxLock == queueUNLOCKED )
 805a26e: f917 0c1d    	ldrsb	r0, [r7, #-29]
 805a272: 3001         	adds	r0, #0x1
 805a274: b9b8         	cbnz	r0, 0x805a2a6 <xQueueGenericSendFromISR+0xe4> @ imm = #0x2e
 805a276: e7ff         	b	0x805a278 <xQueueGenericSendFromISR+0xb6> @ imm = #-0x2
;                     if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 805a278: 9805         	ldr	r0, [sp, #0x14]
 805a27a: 6a40         	ldr	r0, [r0, #0x24]
 805a27c: b188         	cbz	r0, 0x805a2a2 <xQueueGenericSendFromISR+0xe0> @ imm = #0x22
 805a27e: e7ff         	b	0x805a280 <xQueueGenericSendFromISR+0xbe> @ imm = #-0x2
;                         if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 805a280: 9805         	ldr	r0, [sp, #0x14]
 805a282: 3024         	adds	r0, #0x24
 805a284: f7ff fffe    	bl	0x805a284 <xQueueGenericSendFromISR+0xc2> @ imm = #-0x4
 805a288: b148         	cbz	r0, 0x805a29e <xQueueGenericSendFromISR+0xdc> @ imm = #0x12
 805a28a: e7ff         	b	0x805a28c <xQueueGenericSendFromISR+0xca> @ imm = #-0x2
;                             if( pxHigherPriorityTaskWoken != NULL )
 805a28c: 9809         	ldr	r0, [sp, #0x24]
 805a28e: b120         	cbz	r0, 0x805a29a <xQueueGenericSendFromISR+0xd8> @ imm = #0x8
 805a290: e7ff         	b	0x805a292 <xQueueGenericSendFromISR+0xd0> @ imm = #-0x2
;                                 *pxHigherPriorityTaskWoken = pdTRUE;
 805a292: 9909         	ldr	r1, [sp, #0x24]
 805a294: 2001         	movs	r0, #0x1
 805a296: 6008         	str	r0, [r1]
;                             }
 805a298: e000         	b	0x805a29c <xQueueGenericSendFromISR+0xda> @ imm = #0x0
 805a29a: e7ff         	b	0x805a29c <xQueueGenericSendFromISR+0xda> @ imm = #-0x2
;                         }
 805a29c: e000         	b	0x805a2a0 <xQueueGenericSendFromISR+0xde> @ imm = #0x0
 805a29e: e7ff         	b	0x805a2a0 <xQueueGenericSendFromISR+0xde> @ imm = #-0x2
;                     }
 805a2a0: e000         	b	0x805a2a4 <xQueueGenericSendFromISR+0xe2> @ imm = #0x0
 805a2a2: e7ff         	b	0x805a2a4 <xQueueGenericSendFromISR+0xe2> @ imm = #-0x2
;             }
 805a2a4: e01b         	b	0x805a2de <xQueueGenericSendFromISR+0x11c> @ imm = #0x36
;                 prvIncrementQueueTxLock( pxQueue, cTxLock );
 805a2a6: e7ff         	b	0x805a2a8 <xQueueGenericSendFromISR+0xe6> @ imm = #-0x2
 805a2a8: f7ff fffe    	bl	0x805a2a8 <xQueueGenericSendFromISR+0xe6> @ imm = #-0x4
 805a2ac: 9002         	str	r0, [sp, #0x8]
 805a2ae: f917 0c1d    	ldrsb	r0, [r7, #-29]
 805a2b2: 9902         	ldr	r1, [sp, #0x8]
 805a2b4: 4288         	cmp	r0, r1
 805a2b6: d210         	bhs	0x805a2da <xQueueGenericSendFromISR+0x118> @ imm = #0x20
 805a2b8: e7ff         	b	0x805a2ba <xQueueGenericSendFromISR+0xf8> @ imm = #-0x2
 805a2ba: f917 0c1d    	ldrsb	r0, [r7, #-29]
 805a2be: 287f         	cmp	r0, #0x7f
 805a2c0: d104         	bne	0x805a2cc <xQueueGenericSendFromISR+0x10a> @ imm = #0x8
 805a2c2: e7ff         	b	0x805a2c4 <xQueueGenericSendFromISR+0x102> @ imm = #-0x2
 805a2c4: f7ff fffe    	bl	0x805a2c4 <xQueueGenericSendFromISR+0x102> @ imm = #-0x4
 805a2c8: e7ff         	b	0x805a2ca <xQueueGenericSendFromISR+0x108> @ imm = #-0x2
 805a2ca: e7fe         	b	0x805a2ca <xQueueGenericSendFromISR+0x108> @ imm = #-0x4
 805a2cc: f817 0c1d    	ldrb	r0, [r7, #-29]
 805a2d0: 3001         	adds	r0, #0x1
 805a2d2: 9905         	ldr	r1, [sp, #0x14]
 805a2d4: f881 0045    	strb.w	r0, [r1, #0x45]
 805a2d8: e7ff         	b	0x805a2da <xQueueGenericSendFromISR+0x118> @ imm = #-0x2
 805a2da: e7ff         	b	0x805a2dc <xQueueGenericSendFromISR+0x11a> @ imm = #-0x2
 805a2dc: e7ff         	b	0x805a2de <xQueueGenericSendFromISR+0x11c> @ imm = #-0x2
 805a2de: 2001         	movs	r0, #0x1
;             xReturn = pdPASS;
 805a2e0: 9007         	str	r0, [sp, #0x1c]
;         }
 805a2e2: e002         	b	0x805a2ea <xQueueGenericSendFromISR+0x128> @ imm = #0x4
 805a2e4: 2000         	movs	r0, #0x0
;             xReturn = errQUEUE_FULL;
 805a2e6: 9007         	str	r0, [sp, #0x1c]
 805a2e8: e7ff         	b	0x805a2ea <xQueueGenericSendFromISR+0x128> @ imm = #-0x2
;     taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );
 805a2ea: 9806         	ldr	r0, [sp, #0x18]
 805a2ec: f7ff fffe    	bl	0x805a2ec <xQueueGenericSendFromISR+0x12a> @ imm = #-0x4
;     return xReturn;
 805a2f0: 9807         	ldr	r0, [sp, #0x1c]
 805a2f2: b00c         	add	sp, #0x30
 805a2f4: bd80         	pop	{r7, pc}

0805a2f6 <xQueueGiveFromISR>:
; {
 805a2f6: b580         	push	{r7, lr}
 805a2f8: 466f         	mov	r7, sp
 805a2fa: b08a         	sub	sp, #0x28
 805a2fc: 9009         	str	r0, [sp, #0x24]
 805a2fe: 9108         	str	r1, [sp, #0x20]
;     Queue_t * const pxQueue = xQueue;
 805a300: 9809         	ldr	r0, [sp, #0x24]
 805a302: 9005         	str	r0, [sp, #0x14]
;     configASSERT( pxQueue );
 805a304: 9805         	ldr	r0, [sp, #0x14]
 805a306: b920         	cbnz	r0, 0x805a312 <xQueueGiveFromISR+0x1c> @ imm = #0x8
 805a308: e7ff         	b	0x805a30a <xQueueGiveFromISR+0x14> @ imm = #-0x2
 805a30a: f7ff fffe    	bl	0x805a30a <xQueueGiveFromISR+0x14> @ imm = #-0x4
 805a30e: e7ff         	b	0x805a310 <xQueueGiveFromISR+0x1a> @ imm = #-0x2
 805a310: e7fe         	b	0x805a310 <xQueueGiveFromISR+0x1a> @ imm = #-0x4
;     configASSERT( pxQueue->uxItemSize == 0 );
 805a312: 9805         	ldr	r0, [sp, #0x14]
 805a314: 6c00         	ldr	r0, [r0, #0x40]
 805a316: b120         	cbz	r0, 0x805a322 <xQueueGiveFromISR+0x2c> @ imm = #0x8
 805a318: e7ff         	b	0x805a31a <xQueueGiveFromISR+0x24> @ imm = #-0x2
 805a31a: f7ff fffe    	bl	0x805a31a <xQueueGiveFromISR+0x24> @ imm = #-0x4
 805a31e: e7ff         	b	0x805a320 <xQueueGiveFromISR+0x2a> @ imm = #-0x2
 805a320: e7fe         	b	0x805a320 <xQueueGiveFromISR+0x2a> @ imm = #-0x4
;     configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 805a322: 9805         	ldr	r0, [sp, #0x14]
 805a324: 6801         	ldr	r1, [r0]
 805a326: 2000         	movs	r0, #0x0
 805a328: 9001         	str	r0, [sp, #0x4]
 805a32a: b939         	cbnz	r1, 0x805a33c <xQueueGiveFromISR+0x46> @ imm = #0xe
 805a32c: e7ff         	b	0x805a32e <xQueueGiveFromISR+0x38> @ imm = #-0x2
 805a32e: 9805         	ldr	r0, [sp, #0x14]
 805a330: 6880         	ldr	r0, [r0, #0x8]
 805a332: 2800         	cmp	r0, #0x0
 805a334: bf18         	it	ne
 805a336: 2001         	movne	r0, #0x1
 805a338: 9001         	str	r0, [sp, #0x4]
 805a33a: e7ff         	b	0x805a33c <xQueueGiveFromISR+0x46> @ imm = #-0x2
 805a33c: 9801         	ldr	r0, [sp, #0x4]
;     configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 805a33e: 07c0         	lsls	r0, r0, #0x1f
 805a340: b120         	cbz	r0, 0x805a34c <xQueueGiveFromISR+0x56> @ imm = #0x8
 805a342: e7ff         	b	0x805a344 <xQueueGiveFromISR+0x4e> @ imm = #-0x2
 805a344: f7ff fffe    	bl	0x805a344 <xQueueGiveFromISR+0x4e> @ imm = #-0x4
 805a348: e7ff         	b	0x805a34a <xQueueGiveFromISR+0x54> @ imm = #-0x2
 805a34a: e7fe         	b	0x805a34a <xQueueGiveFromISR+0x54> @ imm = #-0x4
;     portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 805a34c: f7ff fffe    	bl	0x805a34c <xQueueGiveFromISR+0x56> @ imm = #-0x4
;     uxSavedInterruptStatus = taskENTER_CRITICAL_FROM_ISR();
 805a350: f7ff fffe    	bl	0x805a350 <xQueueGiveFromISR+0x5a> @ imm = #-0x4
 805a354: 9006         	str	r0, [sp, #0x18]
;         const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 805a356: 9805         	ldr	r0, [sp, #0x14]
 805a358: 6b80         	ldr	r0, [r0, #0x38]
 805a35a: 9004         	str	r0, [sp, #0x10]
;         if( uxMessagesWaiting < pxQueue->uxLength )
 805a35c: 9804         	ldr	r0, [sp, #0x10]
 805a35e: 9905         	ldr	r1, [sp, #0x14]
 805a360: 6bc9         	ldr	r1, [r1, #0x3c]
 805a362: 4288         	cmp	r0, r1
 805a364: d244         	bhs	0x805a3f0 <xQueueGiveFromISR+0xfa> @ imm = #0x88
 805a366: e7ff         	b	0x805a368 <xQueueGiveFromISR+0x72> @ imm = #-0x2
;             const int8_t cTxLock = pxQueue->cTxLock;
 805a368: 9805         	ldr	r0, [sp, #0x14]
 805a36a: f890 0045    	ldrb.w	r0, [r0, #0x45]
 805a36e: f807 0c19    	strb	r0, [r7, #-25]
;             pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting + ( UBaseType_t ) 1 );
 805a372: 9804         	ldr	r0, [sp, #0x10]
 805a374: 3001         	adds	r0, #0x1
 805a376: 9905         	ldr	r1, [sp, #0x14]
 805a378: 6388         	str	r0, [r1, #0x38]
;             if( cTxLock == queueUNLOCKED )
 805a37a: f917 0c19    	ldrsb	r0, [r7, #-25]
 805a37e: 3001         	adds	r0, #0x1
 805a380: b9b8         	cbnz	r0, 0x805a3b2 <xQueueGiveFromISR+0xbc> @ imm = #0x2e
 805a382: e7ff         	b	0x805a384 <xQueueGiveFromISR+0x8e> @ imm = #-0x2
;                     if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 805a384: 9805         	ldr	r0, [sp, #0x14]
 805a386: 6a40         	ldr	r0, [r0, #0x24]
 805a388: b188         	cbz	r0, 0x805a3ae <xQueueGiveFromISR+0xb8> @ imm = #0x22
 805a38a: e7ff         	b	0x805a38c <xQueueGiveFromISR+0x96> @ imm = #-0x2
;                         if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 805a38c: 9805         	ldr	r0, [sp, #0x14]
 805a38e: 3024         	adds	r0, #0x24
 805a390: f7ff fffe    	bl	0x805a390 <xQueueGiveFromISR+0x9a> @ imm = #-0x4
 805a394: b148         	cbz	r0, 0x805a3aa <xQueueGiveFromISR+0xb4> @ imm = #0x12
 805a396: e7ff         	b	0x805a398 <xQueueGiveFromISR+0xa2> @ imm = #-0x2
;                             if( pxHigherPriorityTaskWoken != NULL )
 805a398: 9808         	ldr	r0, [sp, #0x20]
 805a39a: b120         	cbz	r0, 0x805a3a6 <xQueueGiveFromISR+0xb0> @ imm = #0x8
 805a39c: e7ff         	b	0x805a39e <xQueueGiveFromISR+0xa8> @ imm = #-0x2
;                                 *pxHigherPriorityTaskWoken = pdTRUE;
 805a39e: 9908         	ldr	r1, [sp, #0x20]
 805a3a0: 2001         	movs	r0, #0x1
 805a3a2: 6008         	str	r0, [r1]
;                             }
 805a3a4: e000         	b	0x805a3a8 <xQueueGiveFromISR+0xb2> @ imm = #0x0
 805a3a6: e7ff         	b	0x805a3a8 <xQueueGiveFromISR+0xb2> @ imm = #-0x2
;                         }
 805a3a8: e000         	b	0x805a3ac <xQueueGiveFromISR+0xb6> @ imm = #0x0
 805a3aa: e7ff         	b	0x805a3ac <xQueueGiveFromISR+0xb6> @ imm = #-0x2
;                     }
 805a3ac: e000         	b	0x805a3b0 <xQueueGiveFromISR+0xba> @ imm = #0x0
 805a3ae: e7ff         	b	0x805a3b0 <xQueueGiveFromISR+0xba> @ imm = #-0x2
;             }
 805a3b0: e01b         	b	0x805a3ea <xQueueGiveFromISR+0xf4> @ imm = #0x36
;                 prvIncrementQueueTxLock( pxQueue, cTxLock );
 805a3b2: e7ff         	b	0x805a3b4 <xQueueGiveFromISR+0xbe> @ imm = #-0x2
 805a3b4: f7ff fffe    	bl	0x805a3b4 <xQueueGiveFromISR+0xbe> @ imm = #-0x4
 805a3b8: 9002         	str	r0, [sp, #0x8]
 805a3ba: f917 0c19    	ldrsb	r0, [r7, #-25]
 805a3be: 9902         	ldr	r1, [sp, #0x8]
 805a3c0: 4288         	cmp	r0, r1
 805a3c2: d210         	bhs	0x805a3e6 <xQueueGiveFromISR+0xf0> @ imm = #0x20
 805a3c4: e7ff         	b	0x805a3c6 <xQueueGiveFromISR+0xd0> @ imm = #-0x2
 805a3c6: f917 0c19    	ldrsb	r0, [r7, #-25]
 805a3ca: 287f         	cmp	r0, #0x7f
 805a3cc: d104         	bne	0x805a3d8 <xQueueGiveFromISR+0xe2> @ imm = #0x8
 805a3ce: e7ff         	b	0x805a3d0 <xQueueGiveFromISR+0xda> @ imm = #-0x2
 805a3d0: f7ff fffe    	bl	0x805a3d0 <xQueueGiveFromISR+0xda> @ imm = #-0x4
 805a3d4: e7ff         	b	0x805a3d6 <xQueueGiveFromISR+0xe0> @ imm = #-0x2
 805a3d6: e7fe         	b	0x805a3d6 <xQueueGiveFromISR+0xe0> @ imm = #-0x4
 805a3d8: f817 0c19    	ldrb	r0, [r7, #-25]
 805a3dc: 3001         	adds	r0, #0x1
 805a3de: 9905         	ldr	r1, [sp, #0x14]
 805a3e0: f881 0045    	strb.w	r0, [r1, #0x45]
 805a3e4: e7ff         	b	0x805a3e6 <xQueueGiveFromISR+0xf0> @ imm = #-0x2
 805a3e6: e7ff         	b	0x805a3e8 <xQueueGiveFromISR+0xf2> @ imm = #-0x2
 805a3e8: e7ff         	b	0x805a3ea <xQueueGiveFromISR+0xf4> @ imm = #-0x2
 805a3ea: 2001         	movs	r0, #0x1
;             xReturn = pdPASS;
 805a3ec: 9007         	str	r0, [sp, #0x1c]
;         }
 805a3ee: e002         	b	0x805a3f6 <xQueueGiveFromISR+0x100> @ imm = #0x4
 805a3f0: 2000         	movs	r0, #0x0
;             xReturn = errQUEUE_FULL;
 805a3f2: 9007         	str	r0, [sp, #0x1c]
 805a3f4: e7ff         	b	0x805a3f6 <xQueueGiveFromISR+0x100> @ imm = #-0x2
;     taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );
 805a3f6: 9806         	ldr	r0, [sp, #0x18]
 805a3f8: f7ff fffe    	bl	0x805a3f8 <xQueueGiveFromISR+0x102> @ imm = #-0x4
;     return xReturn;
 805a3fc: 9807         	ldr	r0, [sp, #0x1c]
 805a3fe: b00a         	add	sp, #0x28
 805a400: bd80         	pop	{r7, pc}

0805a402 <xQueueReceive>:
; {
 805a402: b580         	push	{r7, lr}
 805a404: 466f         	mov	r7, sp
 805a406: b08c         	sub	sp, #0x30
 805a408: 900a         	str	r0, [sp, #0x28]
 805a40a: 9109         	str	r1, [sp, #0x24]
 805a40c: 9208         	str	r2, [sp, #0x20]
 805a40e: 2000         	movs	r0, #0x0
;     BaseType_t xEntryTimeSet = pdFALSE;
 805a410: 9007         	str	r0, [sp, #0x1c]
;     Queue_t * const pxQueue = xQueue;
 805a412: 980a         	ldr	r0, [sp, #0x28]
 805a414: 9004         	str	r0, [sp, #0x10]
;     configASSERT( ( pxQueue ) );
 805a416: 9804         	ldr	r0, [sp, #0x10]
 805a418: b920         	cbnz	r0, 0x805a424 <xQueueReceive+0x22> @ imm = #0x8
 805a41a: e7ff         	b	0x805a41c <xQueueReceive+0x1a> @ imm = #-0x2
 805a41c: f7ff fffe    	bl	0x805a41c <xQueueReceive+0x1a> @ imm = #-0x4
 805a420: e7ff         	b	0x805a422 <xQueueReceive+0x20> @ imm = #-0x2
 805a422: e7fe         	b	0x805a422 <xQueueReceive+0x20> @ imm = #-0x4
;     configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 805a424: 9909         	ldr	r1, [sp, #0x24]
 805a426: 2000         	movs	r0, #0x0
 805a428: 9002         	str	r0, [sp, #0x8]
 805a42a: b939         	cbnz	r1, 0x805a43c <xQueueReceive+0x3a> @ imm = #0xe
 805a42c: e7ff         	b	0x805a42e <xQueueReceive+0x2c> @ imm = #-0x2
 805a42e: 9804         	ldr	r0, [sp, #0x10]
 805a430: 6c00         	ldr	r0, [r0, #0x40]
 805a432: 2800         	cmp	r0, #0x0
 805a434: bf18         	it	ne
 805a436: 2001         	movne	r0, #0x1
 805a438: 9002         	str	r0, [sp, #0x8]
 805a43a: e7ff         	b	0x805a43c <xQueueReceive+0x3a> @ imm = #-0x2
 805a43c: 9802         	ldr	r0, [sp, #0x8]
;     configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 805a43e: 07c0         	lsls	r0, r0, #0x1f
 805a440: b120         	cbz	r0, 0x805a44c <xQueueReceive+0x4a> @ imm = #0x8
 805a442: e7ff         	b	0x805a444 <xQueueReceive+0x42> @ imm = #-0x2
 805a444: f7ff fffe    	bl	0x805a444 <xQueueReceive+0x42> @ imm = #-0x4
 805a448: e7ff         	b	0x805a44a <xQueueReceive+0x48> @ imm = #-0x2
 805a44a: e7fe         	b	0x805a44a <xQueueReceive+0x48> @ imm = #-0x4
;         configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 805a44c: f7ff fffe    	bl	0x805a44c <xQueueReceive+0x4a> @ imm = #-0x4
 805a450: 4601         	mov	r1, r0
 805a452: 2000         	movs	r0, #0x0
 805a454: 9001         	str	r0, [sp, #0x4]
 805a456: b931         	cbnz	r1, 0x805a466 <xQueueReceive+0x64> @ imm = #0xc
 805a458: e7ff         	b	0x805a45a <xQueueReceive+0x58> @ imm = #-0x2
 805a45a: 9808         	ldr	r0, [sp, #0x20]
 805a45c: 2800         	cmp	r0, #0x0
 805a45e: bf18         	it	ne
 805a460: 2001         	movne	r0, #0x1
 805a462: 9001         	str	r0, [sp, #0x4]
 805a464: e7ff         	b	0x805a466 <xQueueReceive+0x64> @ imm = #-0x2
 805a466: 9801         	ldr	r0, [sp, #0x4]
;         configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 805a468: 07c0         	lsls	r0, r0, #0x1f
 805a46a: b120         	cbz	r0, 0x805a476 <xQueueReceive+0x74> @ imm = #0x8
 805a46c: e7ff         	b	0x805a46e <xQueueReceive+0x6c> @ imm = #-0x2
 805a46e: f7ff fffe    	bl	0x805a46e <xQueueReceive+0x6c> @ imm = #-0x4
 805a472: e7ff         	b	0x805a474 <xQueueReceive+0x72> @ imm = #-0x2
 805a474: e7fe         	b	0x805a474 <xQueueReceive+0x72> @ imm = #-0x4
;     for( ; ; )
 805a476: e7ff         	b	0x805a478 <xQueueReceive+0x76> @ imm = #-0x2
;         taskENTER_CRITICAL();
 805a478: f7ff fffe    	bl	0x805a478 <xQueueReceive+0x76> @ imm = #-0x4
;             const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 805a47c: 9804         	ldr	r0, [sp, #0x10]
 805a47e: 6b80         	ldr	r0, [r0, #0x38]
 805a480: 9003         	str	r0, [sp, #0xc]
;             if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 805a482: 9803         	ldr	r0, [sp, #0xc]
 805a484: b1e8         	cbz	r0, 0x805a4c2 <xQueueReceive+0xc0> @ imm = #0x3a
 805a486: e7ff         	b	0x805a488 <xQueueReceive+0x86> @ imm = #-0x2
;                 prvCopyDataFromQueue( pxQueue, pvBuffer );
 805a488: 9804         	ldr	r0, [sp, #0x10]
 805a48a: 9909         	ldr	r1, [sp, #0x24]
 805a48c: f000 f881    	bl	0x805a592 <prvCopyDataFromQueue> @ imm = #0x102
;                 pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting - ( UBaseType_t ) 1 );
 805a490: 9803         	ldr	r0, [sp, #0xc]
 805a492: 3801         	subs	r0, #0x1
 805a494: 9904         	ldr	r1, [sp, #0x10]
 805a496: 6388         	str	r0, [r1, #0x38]
;                 if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 805a498: 9804         	ldr	r0, [sp, #0x10]
 805a49a: 6900         	ldr	r0, [r0, #0x10]
 805a49c: b158         	cbz	r0, 0x805a4b6 <xQueueReceive+0xb4> @ imm = #0x16
 805a49e: e7ff         	b	0x805a4a0 <xQueueReceive+0x9e> @ imm = #-0x2
;                     if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 805a4a0: 9804         	ldr	r0, [sp, #0x10]
 805a4a2: 3010         	adds	r0, #0x10
 805a4a4: f7ff fffe    	bl	0x805a4a4 <xQueueReceive+0xa2> @ imm = #-0x4
 805a4a8: b118         	cbz	r0, 0x805a4b2 <xQueueReceive+0xb0> @ imm = #0x6
 805a4aa: e7ff         	b	0x805a4ac <xQueueReceive+0xaa> @ imm = #-0x2
;                         queueYIELD_IF_USING_PREEMPTION();
 805a4ac: f7ff fffe    	bl	0x805a4ac <xQueueReceive+0xaa> @ imm = #-0x4
;                     }
 805a4b0: e000         	b	0x805a4b4 <xQueueReceive+0xb2> @ imm = #0x0
 805a4b2: e7ff         	b	0x805a4b4 <xQueueReceive+0xb2> @ imm = #-0x2
;                 }
 805a4b4: e000         	b	0x805a4b8 <xQueueReceive+0xb6> @ imm = #0x0
 805a4b6: e7ff         	b	0x805a4b8 <xQueueReceive+0xb6> @ imm = #-0x2
;                 taskEXIT_CRITICAL();
 805a4b8: f7ff fffe    	bl	0x805a4b8 <xQueueReceive+0xb6> @ imm = #-0x4
 805a4bc: 2001         	movs	r0, #0x1
;                 return pdPASS;
 805a4be: 900b         	str	r0, [sp, #0x2c]
 805a4c0: e064         	b	0x805a58c <xQueueReceive+0x18a> @ imm = #0xc8
;                 if( xTicksToWait == ( TickType_t ) 0 )
 805a4c2: 9808         	ldr	r0, [sp, #0x20]
 805a4c4: b928         	cbnz	r0, 0x805a4d2 <xQueueReceive+0xd0> @ imm = #0xa
 805a4c6: e7ff         	b	0x805a4c8 <xQueueReceive+0xc6> @ imm = #-0x2
;                     taskEXIT_CRITICAL();
 805a4c8: f7ff fffe    	bl	0x805a4c8 <xQueueReceive+0xc6> @ imm = #-0x4
 805a4cc: 2000         	movs	r0, #0x0
;                     return errQUEUE_EMPTY;
 805a4ce: 900b         	str	r0, [sp, #0x2c]
 805a4d0: e05c         	b	0x805a58c <xQueueReceive+0x18a> @ imm = #0xb8
;                 else if( xEntryTimeSet == pdFALSE )
 805a4d2: 9807         	ldr	r0, [sp, #0x1c]
 805a4d4: b930         	cbnz	r0, 0x805a4e4 <xQueueReceive+0xe2> @ imm = #0xc
 805a4d6: e7ff         	b	0x805a4d8 <xQueueReceive+0xd6> @ imm = #-0x2
 805a4d8: a805         	add	r0, sp, #0x14
;                     vTaskInternalSetTimeOutState( &xTimeOut );
 805a4da: f7ff fffe    	bl	0x805a4da <xQueueReceive+0xd8> @ imm = #-0x4
 805a4de: 2001         	movs	r0, #0x1
;                     xEntryTimeSet = pdTRUE;
 805a4e0: 9007         	str	r0, [sp, #0x1c]
;                 }
 805a4e2: e000         	b	0x805a4e6 <xQueueReceive+0xe4> @ imm = #0x0
 805a4e4: e7ff         	b	0x805a4e6 <xQueueReceive+0xe4> @ imm = #-0x2
 805a4e6: e7ff         	b	0x805a4e8 <xQueueReceive+0xe6> @ imm = #-0x2
 805a4e8: e7ff         	b	0x805a4ea <xQueueReceive+0xe8> @ imm = #-0x2
;         taskEXIT_CRITICAL();
 805a4ea: f7ff fffe    	bl	0x805a4ea <xQueueReceive+0xe8> @ imm = #-0x4
;         vTaskSuspendAll();
 805a4ee: f7ff fffe    	bl	0x805a4ee <xQueueReceive+0xec> @ imm = #-0x4
;         prvLockQueue( pxQueue );
 805a4f2: f7ff fffe    	bl	0x805a4f2 <xQueueReceive+0xf0> @ imm = #-0x4
 805a4f6: 9804         	ldr	r0, [sp, #0x10]
 805a4f8: f990 0044    	ldrsb.w	r0, [r0, #0x44]
 805a4fc: 3001         	adds	r0, #0x1
 805a4fe: b928         	cbnz	r0, 0x805a50c <xQueueReceive+0x10a> @ imm = #0xa
 805a500: e7ff         	b	0x805a502 <xQueueReceive+0x100> @ imm = #-0x2
 805a502: 9904         	ldr	r1, [sp, #0x10]
 805a504: 2000         	movs	r0, #0x0
 805a506: f881 0044    	strb.w	r0, [r1, #0x44]
 805a50a: e7ff         	b	0x805a50c <xQueueReceive+0x10a> @ imm = #-0x2
 805a50c: 9804         	ldr	r0, [sp, #0x10]
 805a50e: f990 0045    	ldrsb.w	r0, [r0, #0x45]
 805a512: 3001         	adds	r0, #0x1
 805a514: b928         	cbnz	r0, 0x805a522 <xQueueReceive+0x120> @ imm = #0xa
 805a516: e7ff         	b	0x805a518 <xQueueReceive+0x116> @ imm = #-0x2
 805a518: 9904         	ldr	r1, [sp, #0x10]
 805a51a: 2000         	movs	r0, #0x0
 805a51c: f881 0045    	strb.w	r0, [r1, #0x45]
 805a520: e7ff         	b	0x805a522 <xQueueReceive+0x120> @ imm = #-0x2
 805a522: f7ff fffe    	bl	0x805a522 <xQueueReceive+0x120> @ imm = #-0x4
 805a526: a805         	add	r0, sp, #0x14
 805a528: a908         	add	r1, sp, #0x20
;         if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 805a52a: f7ff fffe    	bl	0x805a52a <xQueueReceive+0x128> @ imm = #-0x4
 805a52e: b9e8         	cbnz	r0, 0x805a56c <xQueueReceive+0x16a> @ imm = #0x3a
 805a530: e7ff         	b	0x805a532 <xQueueReceive+0x130> @ imm = #-0x2
;             if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 805a532: 9804         	ldr	r0, [sp, #0x10]
 805a534: f000 f84f    	bl	0x805a5d6 <prvIsQueueEmpty> @ imm = #0x9e
 805a538: b188         	cbz	r0, 0x805a55e <xQueueReceive+0x15c> @ imm = #0x22
 805a53a: e7ff         	b	0x805a53c <xQueueReceive+0x13a> @ imm = #-0x2
;                 vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 805a53c: 9804         	ldr	r0, [sp, #0x10]
 805a53e: 3024         	adds	r0, #0x24
 805a540: 9908         	ldr	r1, [sp, #0x20]
 805a542: f7ff fffe    	bl	0x805a542 <xQueueReceive+0x140> @ imm = #-0x4
;                 prvUnlockQueue( pxQueue );
 805a546: 9804         	ldr	r0, [sp, #0x10]
 805a548: f7ff fde3    	bl	0x805a112 <prvUnlockQueue> @ imm = #-0x43a
;                 if( xTaskResumeAll() == pdFALSE )
 805a54c: f7ff fffe    	bl	0x805a54c <xQueueReceive+0x14a> @ imm = #-0x4
 805a550: b918         	cbnz	r0, 0x805a55a <xQueueReceive+0x158> @ imm = #0x6
 805a552: e7ff         	b	0x805a554 <xQueueReceive+0x152> @ imm = #-0x2
;                     taskYIELD_WITHIN_API();
 805a554: f7ff fffe    	bl	0x805a554 <xQueueReceive+0x152> @ imm = #-0x4
;                 }
 805a558: e000         	b	0x805a55c <xQueueReceive+0x15a> @ imm = #0x0
 805a55a: e7ff         	b	0x805a55c <xQueueReceive+0x15a> @ imm = #-0x2
;             }
 805a55c: e005         	b	0x805a56a <xQueueReceive+0x168> @ imm = #0xa
;                 prvUnlockQueue( pxQueue );
 805a55e: 9804         	ldr	r0, [sp, #0x10]
 805a560: f7ff fdd7    	bl	0x805a112 <prvUnlockQueue> @ imm = #-0x452
;                 ( void ) xTaskResumeAll();
 805a564: f7ff fffe    	bl	0x805a564 <xQueueReceive+0x162> @ imm = #-0x4
 805a568: e7ff         	b	0x805a56a <xQueueReceive+0x168> @ imm = #-0x2
;         }
 805a56a: e00e         	b	0x805a58a <xQueueReceive+0x188> @ imm = #0x1c
;             prvUnlockQueue( pxQueue );
 805a56c: 9804         	ldr	r0, [sp, #0x10]
 805a56e: f7ff fdd0    	bl	0x805a112 <prvUnlockQueue> @ imm = #-0x460
;             ( void ) xTaskResumeAll();
 805a572: f7ff fffe    	bl	0x805a572 <xQueueReceive+0x170> @ imm = #-0x4
;             if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 805a576: 9804         	ldr	r0, [sp, #0x10]
 805a578: f000 f82d    	bl	0x805a5d6 <prvIsQueueEmpty> @ imm = #0x5a
 805a57c: b118         	cbz	r0, 0x805a586 <xQueueReceive+0x184> @ imm = #0x6
 805a57e: e7ff         	b	0x805a580 <xQueueReceive+0x17e> @ imm = #-0x2
 805a580: 2000         	movs	r0, #0x0
;                 return errQUEUE_EMPTY;
 805a582: 900b         	str	r0, [sp, #0x2c]
 805a584: e002         	b	0x805a58c <xQueueReceive+0x18a> @ imm = #0x4
 805a586: e7ff         	b	0x805a588 <xQueueReceive+0x186> @ imm = #-0x2
 805a588: e7ff         	b	0x805a58a <xQueueReceive+0x188> @ imm = #-0x2
;     for( ; ; )
 805a58a: e775         	b	0x805a478 <xQueueReceive+0x76> @ imm = #-0x116
; }
 805a58c: 980b         	ldr	r0, [sp, #0x2c]
 805a58e: b00c         	add	sp, #0x30
 805a590: bd80         	pop	{r7, pc}

0805a592 <prvCopyDataFromQueue>:
; {
 805a592: b580         	push	{r7, lr}
 805a594: 466f         	mov	r7, sp
 805a596: b082         	sub	sp, #0x8
 805a598: 9001         	str	r0, [sp, #0x4]
 805a59a: 9100         	str	r1, [sp]
;     if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 805a59c: 9801         	ldr	r0, [sp, #0x4]
 805a59e: 6c00         	ldr	r0, [r0, #0x40]
 805a5a0: b1b8         	cbz	r0, 0x805a5d2 <prvCopyDataFromQueue+0x40> @ imm = #0x2e
 805a5a2: e7ff         	b	0x805a5a4 <prvCopyDataFromQueue+0x12> @ imm = #-0x2
;         pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 805a5a4: 9901         	ldr	r1, [sp, #0x4]
 805a5a6: 68c8         	ldr	r0, [r1, #0xc]
 805a5a8: 6c0a         	ldr	r2, [r1, #0x40]
 805a5aa: 4410         	add	r0, r2
 805a5ac: 60c8         	str	r0, [r1, #0xc]
;         if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 805a5ae: 9801         	ldr	r0, [sp, #0x4]
 805a5b0: 6881         	ldr	r1, [r0, #0x8]
 805a5b2: 68c0         	ldr	r0, [r0, #0xc]
 805a5b4: 4288         	cmp	r0, r1
 805a5b6: d304         	blo	0x805a5c2 <prvCopyDataFromQueue+0x30> @ imm = #0x8
 805a5b8: e7ff         	b	0x805a5ba <prvCopyDataFromQueue+0x28> @ imm = #-0x2
;             pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 805a5ba: 9901         	ldr	r1, [sp, #0x4]
 805a5bc: 6808         	ldr	r0, [r1]
 805a5be: 60c8         	str	r0, [r1, #0xc]
;         }
 805a5c0: e000         	b	0x805a5c4 <prvCopyDataFromQueue+0x32> @ imm = #0x0
 805a5c2: e7ff         	b	0x805a5c4 <prvCopyDataFromQueue+0x32> @ imm = #-0x2
;         ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 805a5c4: 9800         	ldr	r0, [sp]
 805a5c6: 9a01         	ldr	r2, [sp, #0x4]
 805a5c8: 68d1         	ldr	r1, [r2, #0xc]
 805a5ca: 6c12         	ldr	r2, [r2, #0x40]
 805a5cc: f7ff fffe    	bl	0x805a5cc <prvCopyDataFromQueue+0x3a> @ imm = #-0x4
;     }
 805a5d0: e7ff         	b	0x805a5d2 <prvCopyDataFromQueue+0x40> @ imm = #-0x2
; }
 805a5d2: b002         	add	sp, #0x8
 805a5d4: bd80         	pop	{r7, pc}

0805a5d6 <prvIsQueueEmpty>:
; {
 805a5d6: b580         	push	{r7, lr}
 805a5d8: 466f         	mov	r7, sp
 805a5da: b082         	sub	sp, #0x8
 805a5dc: 9001         	str	r0, [sp, #0x4]
;     taskENTER_CRITICAL();
 805a5de: f7ff fffe    	bl	0x805a5de <prvIsQueueEmpty+0x8> @ imm = #-0x4
;         if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 805a5e2: 9801         	ldr	r0, [sp, #0x4]
 805a5e4: 6b80         	ldr	r0, [r0, #0x38]
 805a5e6: b918         	cbnz	r0, 0x805a5f0 <prvIsQueueEmpty+0x1a> @ imm = #0x6
 805a5e8: e7ff         	b	0x805a5ea <prvIsQueueEmpty+0x14> @ imm = #-0x2
 805a5ea: 2001         	movs	r0, #0x1
;             xReturn = pdTRUE;
 805a5ec: 9000         	str	r0, [sp]
;         }
 805a5ee: e002         	b	0x805a5f6 <prvIsQueueEmpty+0x20> @ imm = #0x4
 805a5f0: 2000         	movs	r0, #0x0
;             xReturn = pdFALSE;
 805a5f2: 9000         	str	r0, [sp]
 805a5f4: e7ff         	b	0x805a5f6 <prvIsQueueEmpty+0x20> @ imm = #-0x2
;     taskEXIT_CRITICAL();
 805a5f6: f7ff fffe    	bl	0x805a5f6 <prvIsQueueEmpty+0x20> @ imm = #-0x4
;     return xReturn;
 805a5fa: 9800         	ldr	r0, [sp]
 805a5fc: b002         	add	sp, #0x8
 805a5fe: bd80         	pop	{r7, pc}

0805a600 <prvGetDisinheritPriorityAfterTimeout>:
;     {
 805a600: b082         	sub	sp, #0x8
 805a602: 9001         	str	r0, [sp, #0x4]
;         if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 805a604: 9801         	ldr	r0, [sp, #0x4]
 805a606: 6a40         	ldr	r0, [r0, #0x24]
 805a608: b138         	cbz	r0, 0x805a61a <prvGetDisinheritPriorityAfterTimeout+0x1a> @ imm = #0xe
 805a60a: e7ff         	b	0x805a60c <prvGetDisinheritPriorityAfterTimeout+0xc> @ imm = #-0x2
;             uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) ( ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) ) );
 805a60c: 9801         	ldr	r0, [sp, #0x4]
 805a60e: 6b00         	ldr	r0, [r0, #0x30]
 805a610: 6800         	ldr	r0, [r0]
 805a612: f1c0 0010    	rsb.w	r0, r0, #0x10
 805a616: 9000         	str	r0, [sp]
;         }
 805a618: e002         	b	0x805a620 <prvGetDisinheritPriorityAfterTimeout+0x20> @ imm = #0x4
 805a61a: 2000         	movs	r0, #0x0
;             uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 805a61c: 9000         	str	r0, [sp]
 805a61e: e7ff         	b	0x805a620 <prvGetDisinheritPriorityAfterTimeout+0x20> @ imm = #-0x2
;         return uxHighestPriorityOfWaitingTasks;
 805a620: 9800         	ldr	r0, [sp]
 805a622: b002         	add	sp, #0x8
 805a624: 4770         	bx	lr

0805a626 <xQueuePeek>:
; {
 805a626: b580         	push	{r7, lr}
 805a628: 466f         	mov	r7, sp
 805a62a: b08c         	sub	sp, #0x30
 805a62c: 900a         	str	r0, [sp, #0x28]
 805a62e: 9109         	str	r1, [sp, #0x24]
 805a630: 9208         	str	r2, [sp, #0x20]
 805a632: 2000         	movs	r0, #0x0
;     BaseType_t xEntryTimeSet = pdFALSE;
 805a634: 9007         	str	r0, [sp, #0x1c]
;     Queue_t * const pxQueue = xQueue;
 805a636: 980a         	ldr	r0, [sp, #0x28]
 805a638: 9003         	str	r0, [sp, #0xc]
;     configASSERT( ( pxQueue ) );
 805a63a: 9803         	ldr	r0, [sp, #0xc]
 805a63c: b920         	cbnz	r0, 0x805a648 <xQueuePeek+0x22> @ imm = #0x8
 805a63e: e7ff         	b	0x805a640 <xQueuePeek+0x1a> @ imm = #-0x2
 805a640: f7ff fffe    	bl	0x805a640 <xQueuePeek+0x1a> @ imm = #-0x4
 805a644: e7ff         	b	0x805a646 <xQueuePeek+0x20> @ imm = #-0x2
 805a646: e7fe         	b	0x805a646 <xQueuePeek+0x20> @ imm = #-0x4
;     configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 805a648: 9909         	ldr	r1, [sp, #0x24]
 805a64a: 2000         	movs	r0, #0x0
 805a64c: 9001         	str	r0, [sp, #0x4]
 805a64e: b939         	cbnz	r1, 0x805a660 <xQueuePeek+0x3a> @ imm = #0xe
 805a650: e7ff         	b	0x805a652 <xQueuePeek+0x2c> @ imm = #-0x2
 805a652: 9803         	ldr	r0, [sp, #0xc]
 805a654: 6c00         	ldr	r0, [r0, #0x40]
 805a656: 2800         	cmp	r0, #0x0
 805a658: bf18         	it	ne
 805a65a: 2001         	movne	r0, #0x1
 805a65c: 9001         	str	r0, [sp, #0x4]
 805a65e: e7ff         	b	0x805a660 <xQueuePeek+0x3a> @ imm = #-0x2
 805a660: 9801         	ldr	r0, [sp, #0x4]
;     configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 805a662: 07c0         	lsls	r0, r0, #0x1f
 805a664: b120         	cbz	r0, 0x805a670 <xQueuePeek+0x4a> @ imm = #0x8
 805a666: e7ff         	b	0x805a668 <xQueuePeek+0x42> @ imm = #-0x2
 805a668: f7ff fffe    	bl	0x805a668 <xQueuePeek+0x42> @ imm = #-0x4
 805a66c: e7ff         	b	0x805a66e <xQueuePeek+0x48> @ imm = #-0x2
 805a66e: e7fe         	b	0x805a66e <xQueuePeek+0x48> @ imm = #-0x4
;         configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 805a670: f7ff fffe    	bl	0x805a670 <xQueuePeek+0x4a> @ imm = #-0x4
 805a674: 4601         	mov	r1, r0
 805a676: 2000         	movs	r0, #0x0
 805a678: 9000         	str	r0, [sp]
 805a67a: b931         	cbnz	r1, 0x805a68a <xQueuePeek+0x64> @ imm = #0xc
 805a67c: e7ff         	b	0x805a67e <xQueuePeek+0x58> @ imm = #-0x2
 805a67e: 9808         	ldr	r0, [sp, #0x20]
 805a680: 2800         	cmp	r0, #0x0
 805a682: bf18         	it	ne
 805a684: 2001         	movne	r0, #0x1
 805a686: 9000         	str	r0, [sp]
 805a688: e7ff         	b	0x805a68a <xQueuePeek+0x64> @ imm = #-0x2
 805a68a: 9800         	ldr	r0, [sp]
;         configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 805a68c: 07c0         	lsls	r0, r0, #0x1f
 805a68e: b120         	cbz	r0, 0x805a69a <xQueuePeek+0x74> @ imm = #0x8
 805a690: e7ff         	b	0x805a692 <xQueuePeek+0x6c> @ imm = #-0x2
 805a692: f7ff fffe    	bl	0x805a692 <xQueuePeek+0x6c> @ imm = #-0x4
 805a696: e7ff         	b	0x805a698 <xQueuePeek+0x72> @ imm = #-0x2
 805a698: e7fe         	b	0x805a698 <xQueuePeek+0x72> @ imm = #-0x4
;     for( ; ; )
 805a69a: e7ff         	b	0x805a69c <xQueuePeek+0x76> @ imm = #-0x2
;         taskENTER_CRITICAL();
 805a69c: f7ff fffe    	bl	0x805a69c <xQueuePeek+0x76> @ imm = #-0x4
;             const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 805a6a0: 9803         	ldr	r0, [sp, #0xc]
 805a6a2: 6b80         	ldr	r0, [r0, #0x38]
 805a6a4: 9002         	str	r0, [sp, #0x8]
;             if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 805a6a6: 9802         	ldr	r0, [sp, #0x8]
 805a6a8: b1f8         	cbz	r0, 0x805a6ea <xQueuePeek+0xc4> @ imm = #0x3e
 805a6aa: e7ff         	b	0x805a6ac <xQueuePeek+0x86> @ imm = #-0x2
;                 pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
 805a6ac: 9803         	ldr	r0, [sp, #0xc]
 805a6ae: 68c0         	ldr	r0, [r0, #0xc]
 805a6b0: 9004         	str	r0, [sp, #0x10]
;                 prvCopyDataFromQueue( pxQueue, pvBuffer );
 805a6b2: 9803         	ldr	r0, [sp, #0xc]
 805a6b4: 9909         	ldr	r1, [sp, #0x24]
 805a6b6: f7ff ff6c    	bl	0x805a592 <prvCopyDataFromQueue> @ imm = #-0x128
;                 pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
 805a6ba: 9804         	ldr	r0, [sp, #0x10]
 805a6bc: 9903         	ldr	r1, [sp, #0xc]
 805a6be: 60c8         	str	r0, [r1, #0xc]
;                 if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 805a6c0: 9803         	ldr	r0, [sp, #0xc]
 805a6c2: 6a40         	ldr	r0, [r0, #0x24]
 805a6c4: b158         	cbz	r0, 0x805a6de <xQueuePeek+0xb8> @ imm = #0x16
 805a6c6: e7ff         	b	0x805a6c8 <xQueuePeek+0xa2> @ imm = #-0x2
;                     if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 805a6c8: 9803         	ldr	r0, [sp, #0xc]
 805a6ca: 3024         	adds	r0, #0x24
 805a6cc: f7ff fffe    	bl	0x805a6cc <xQueuePeek+0xa6> @ imm = #-0x4
 805a6d0: b118         	cbz	r0, 0x805a6da <xQueuePeek+0xb4> @ imm = #0x6
 805a6d2: e7ff         	b	0x805a6d4 <xQueuePeek+0xae> @ imm = #-0x2
;                         queueYIELD_IF_USING_PREEMPTION();
 805a6d4: f7ff fffe    	bl	0x805a6d4 <xQueuePeek+0xae> @ imm = #-0x4
;                     }
 805a6d8: e000         	b	0x805a6dc <xQueuePeek+0xb6> @ imm = #0x0
 805a6da: e7ff         	b	0x805a6dc <xQueuePeek+0xb6> @ imm = #-0x2
;                 }
 805a6dc: e000         	b	0x805a6e0 <xQueuePeek+0xba> @ imm = #0x0
 805a6de: e7ff         	b	0x805a6e0 <xQueuePeek+0xba> @ imm = #-0x2
;                 taskEXIT_CRITICAL();
 805a6e0: f7ff fffe    	bl	0x805a6e0 <xQueuePeek+0xba> @ imm = #-0x4
 805a6e4: 2001         	movs	r0, #0x1
;                 return pdPASS;
 805a6e6: 900b         	str	r0, [sp, #0x2c]
 805a6e8: e064         	b	0x805a7b4 <xQueuePeek+0x18e> @ imm = #0xc8
;                 if( xTicksToWait == ( TickType_t ) 0 )
 805a6ea: 9808         	ldr	r0, [sp, #0x20]
 805a6ec: b928         	cbnz	r0, 0x805a6fa <xQueuePeek+0xd4> @ imm = #0xa
 805a6ee: e7ff         	b	0x805a6f0 <xQueuePeek+0xca> @ imm = #-0x2
;                     taskEXIT_CRITICAL();
 805a6f0: f7ff fffe    	bl	0x805a6f0 <xQueuePeek+0xca> @ imm = #-0x4
 805a6f4: 2000         	movs	r0, #0x0
;                     return errQUEUE_EMPTY;
 805a6f6: 900b         	str	r0, [sp, #0x2c]
 805a6f8: e05c         	b	0x805a7b4 <xQueuePeek+0x18e> @ imm = #0xb8
;                 else if( xEntryTimeSet == pdFALSE )
 805a6fa: 9807         	ldr	r0, [sp, #0x1c]
 805a6fc: b930         	cbnz	r0, 0x805a70c <xQueuePeek+0xe6> @ imm = #0xc
 805a6fe: e7ff         	b	0x805a700 <xQueuePeek+0xda> @ imm = #-0x2
 805a700: a805         	add	r0, sp, #0x14
;                     vTaskInternalSetTimeOutState( &xTimeOut );
 805a702: f7ff fffe    	bl	0x805a702 <xQueuePeek+0xdc> @ imm = #-0x4
 805a706: 2001         	movs	r0, #0x1
;                     xEntryTimeSet = pdTRUE;
 805a708: 9007         	str	r0, [sp, #0x1c]
;                 }
 805a70a: e000         	b	0x805a70e <xQueuePeek+0xe8> @ imm = #0x0
 805a70c: e7ff         	b	0x805a70e <xQueuePeek+0xe8> @ imm = #-0x2
 805a70e: e7ff         	b	0x805a710 <xQueuePeek+0xea> @ imm = #-0x2
 805a710: e7ff         	b	0x805a712 <xQueuePeek+0xec> @ imm = #-0x2
;         taskEXIT_CRITICAL();
 805a712: f7ff fffe    	bl	0x805a712 <xQueuePeek+0xec> @ imm = #-0x4
;         vTaskSuspendAll();
 805a716: f7ff fffe    	bl	0x805a716 <xQueuePeek+0xf0> @ imm = #-0x4
;         prvLockQueue( pxQueue );
 805a71a: f7ff fffe    	bl	0x805a71a <xQueuePeek+0xf4> @ imm = #-0x4
 805a71e: 9803         	ldr	r0, [sp, #0xc]
 805a720: f990 0044    	ldrsb.w	r0, [r0, #0x44]
 805a724: 3001         	adds	r0, #0x1
 805a726: b928         	cbnz	r0, 0x805a734 <xQueuePeek+0x10e> @ imm = #0xa
 805a728: e7ff         	b	0x805a72a <xQueuePeek+0x104> @ imm = #-0x2
 805a72a: 9903         	ldr	r1, [sp, #0xc]
 805a72c: 2000         	movs	r0, #0x0
 805a72e: f881 0044    	strb.w	r0, [r1, #0x44]
 805a732: e7ff         	b	0x805a734 <xQueuePeek+0x10e> @ imm = #-0x2
 805a734: 9803         	ldr	r0, [sp, #0xc]
 805a736: f990 0045    	ldrsb.w	r0, [r0, #0x45]
 805a73a: 3001         	adds	r0, #0x1
 805a73c: b928         	cbnz	r0, 0x805a74a <xQueuePeek+0x124> @ imm = #0xa
 805a73e: e7ff         	b	0x805a740 <xQueuePeek+0x11a> @ imm = #-0x2
 805a740: 9903         	ldr	r1, [sp, #0xc]
 805a742: 2000         	movs	r0, #0x0
 805a744: f881 0045    	strb.w	r0, [r1, #0x45]
 805a748: e7ff         	b	0x805a74a <xQueuePeek+0x124> @ imm = #-0x2
 805a74a: f7ff fffe    	bl	0x805a74a <xQueuePeek+0x124> @ imm = #-0x4
 805a74e: a805         	add	r0, sp, #0x14
 805a750: a908         	add	r1, sp, #0x20
;         if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 805a752: f7ff fffe    	bl	0x805a752 <xQueuePeek+0x12c> @ imm = #-0x4
 805a756: b9e8         	cbnz	r0, 0x805a794 <xQueuePeek+0x16e> @ imm = #0x3a
 805a758: e7ff         	b	0x805a75a <xQueuePeek+0x134> @ imm = #-0x2
;             if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 805a75a: 9803         	ldr	r0, [sp, #0xc]
 805a75c: f7ff ff3b    	bl	0x805a5d6 <prvIsQueueEmpty> @ imm = #-0x18a
 805a760: b188         	cbz	r0, 0x805a786 <xQueuePeek+0x160> @ imm = #0x22
 805a762: e7ff         	b	0x805a764 <xQueuePeek+0x13e> @ imm = #-0x2
;                 vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 805a764: 9803         	ldr	r0, [sp, #0xc]
 805a766: 3024         	adds	r0, #0x24
 805a768: 9908         	ldr	r1, [sp, #0x20]
 805a76a: f7ff fffe    	bl	0x805a76a <xQueuePeek+0x144> @ imm = #-0x4
;                 prvUnlockQueue( pxQueue );
 805a76e: 9803         	ldr	r0, [sp, #0xc]
 805a770: f7ff fccf    	bl	0x805a112 <prvUnlockQueue> @ imm = #-0x662
;                 if( xTaskResumeAll() == pdFALSE )
 805a774: f7ff fffe    	bl	0x805a774 <xQueuePeek+0x14e> @ imm = #-0x4
 805a778: b918         	cbnz	r0, 0x805a782 <xQueuePeek+0x15c> @ imm = #0x6
 805a77a: e7ff         	b	0x805a77c <xQueuePeek+0x156> @ imm = #-0x2
;                     taskYIELD_WITHIN_API();
 805a77c: f7ff fffe    	bl	0x805a77c <xQueuePeek+0x156> @ imm = #-0x4
;                 }
 805a780: e000         	b	0x805a784 <xQueuePeek+0x15e> @ imm = #0x0
 805a782: e7ff         	b	0x805a784 <xQueuePeek+0x15e> @ imm = #-0x2
;             }
 805a784: e005         	b	0x805a792 <xQueuePeek+0x16c> @ imm = #0xa
;                 prvUnlockQueue( pxQueue );
 805a786: 9803         	ldr	r0, [sp, #0xc]
 805a788: f7ff fcc3    	bl	0x805a112 <prvUnlockQueue> @ imm = #-0x67a
;                 ( void ) xTaskResumeAll();
 805a78c: f7ff fffe    	bl	0x805a78c <xQueuePeek+0x166> @ imm = #-0x4
 805a790: e7ff         	b	0x805a792 <xQueuePeek+0x16c> @ imm = #-0x2
;         }
 805a792: e00e         	b	0x805a7b2 <xQueuePeek+0x18c> @ imm = #0x1c
;             prvUnlockQueue( pxQueue );
 805a794: 9803         	ldr	r0, [sp, #0xc]
 805a796: f7ff fcbc    	bl	0x805a112 <prvUnlockQueue> @ imm = #-0x688
;             ( void ) xTaskResumeAll();
 805a79a: f7ff fffe    	bl	0x805a79a <xQueuePeek+0x174> @ imm = #-0x4
;             if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 805a79e: 9803         	ldr	r0, [sp, #0xc]
 805a7a0: f7ff ff19    	bl	0x805a5d6 <prvIsQueueEmpty> @ imm = #-0x1ce
 805a7a4: b118         	cbz	r0, 0x805a7ae <xQueuePeek+0x188> @ imm = #0x6
 805a7a6: e7ff         	b	0x805a7a8 <xQueuePeek+0x182> @ imm = #-0x2
 805a7a8: 2000         	movs	r0, #0x0
;                 return errQUEUE_EMPTY;
 805a7aa: 900b         	str	r0, [sp, #0x2c]
 805a7ac: e002         	b	0x805a7b4 <xQueuePeek+0x18e> @ imm = #0x4
 805a7ae: e7ff         	b	0x805a7b0 <xQueuePeek+0x18a> @ imm = #-0x2
 805a7b0: e7ff         	b	0x805a7b2 <xQueuePeek+0x18c> @ imm = #-0x2
;     for( ; ; )
 805a7b2: e773         	b	0x805a69c <xQueuePeek+0x76> @ imm = #-0x11a
; }
 805a7b4: 980b         	ldr	r0, [sp, #0x2c]
 805a7b6: b00c         	add	sp, #0x30
 805a7b8: bd80         	pop	{r7, pc}

0805a7ba <xQueueReceiveFromISR>:
; {
 805a7ba: b580         	push	{r7, lr}
 805a7bc: 466f         	mov	r7, sp
 805a7be: b08a         	sub	sp, #0x28
 805a7c0: 9009         	str	r0, [sp, #0x24]
 805a7c2: 9108         	str	r1, [sp, #0x20]
 805a7c4: 9207         	str	r2, [sp, #0x1c]
;     Queue_t * const pxQueue = xQueue;
 805a7c6: 9809         	ldr	r0, [sp, #0x24]
 805a7c8: 9004         	str	r0, [sp, #0x10]
;     configASSERT( pxQueue );
 805a7ca: 9804         	ldr	r0, [sp, #0x10]
 805a7cc: b920         	cbnz	r0, 0x805a7d8 <xQueueReceiveFromISR+0x1e> @ imm = #0x8
 805a7ce: e7ff         	b	0x805a7d0 <xQueueReceiveFromISR+0x16> @ imm = #-0x2
 805a7d0: f7ff fffe    	bl	0x805a7d0 <xQueueReceiveFromISR+0x16> @ imm = #-0x4
 805a7d4: e7ff         	b	0x805a7d6 <xQueueReceiveFromISR+0x1c> @ imm = #-0x2
 805a7d6: e7fe         	b	0x805a7d6 <xQueueReceiveFromISR+0x1c> @ imm = #-0x4
;     configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 805a7d8: 9908         	ldr	r1, [sp, #0x20]
 805a7da: 2000         	movs	r0, #0x0
 805a7dc: 9000         	str	r0, [sp]
 805a7de: b939         	cbnz	r1, 0x805a7f0 <xQueueReceiveFromISR+0x36> @ imm = #0xe
 805a7e0: e7ff         	b	0x805a7e2 <xQueueReceiveFromISR+0x28> @ imm = #-0x2
 805a7e2: 9804         	ldr	r0, [sp, #0x10]
 805a7e4: 6c00         	ldr	r0, [r0, #0x40]
 805a7e6: 2800         	cmp	r0, #0x0
 805a7e8: bf18         	it	ne
 805a7ea: 2001         	movne	r0, #0x1
 805a7ec: 9000         	str	r0, [sp]
 805a7ee: e7ff         	b	0x805a7f0 <xQueueReceiveFromISR+0x36> @ imm = #-0x2
 805a7f0: 9800         	ldr	r0, [sp]
;     configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 805a7f2: 07c0         	lsls	r0, r0, #0x1f
 805a7f4: b120         	cbz	r0, 0x805a800 <xQueueReceiveFromISR+0x46> @ imm = #0x8
 805a7f6: e7ff         	b	0x805a7f8 <xQueueReceiveFromISR+0x3e> @ imm = #-0x2
 805a7f8: f7ff fffe    	bl	0x805a7f8 <xQueueReceiveFromISR+0x3e> @ imm = #-0x4
 805a7fc: e7ff         	b	0x805a7fe <xQueueReceiveFromISR+0x44> @ imm = #-0x2
 805a7fe: e7fe         	b	0x805a7fe <xQueueReceiveFromISR+0x44> @ imm = #-0x4
;     portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 805a800: f7ff fffe    	bl	0x805a800 <xQueueReceiveFromISR+0x46> @ imm = #-0x4
;     uxSavedInterruptStatus = taskENTER_CRITICAL_FROM_ISR();
 805a804: f7ff fffe    	bl	0x805a804 <xQueueReceiveFromISR+0x4a> @ imm = #-0x4
 805a808: 9005         	str	r0, [sp, #0x14]
;         const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 805a80a: 9804         	ldr	r0, [sp, #0x10]
 805a80c: 6b80         	ldr	r0, [r0, #0x38]
 805a80e: 9003         	str	r0, [sp, #0xc]
;         if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 805a810: 9803         	ldr	r0, [sp, #0xc]
 805a812: 2800         	cmp	r0, #0x0
 805a814: d048         	beq	0x805a8a8 <xQueueReceiveFromISR+0xee> @ imm = #0x90
 805a816: e7ff         	b	0x805a818 <xQueueReceiveFromISR+0x5e> @ imm = #-0x2
;             const int8_t cRxLock = pxQueue->cRxLock;
 805a818: 9804         	ldr	r0, [sp, #0x10]
 805a81a: f890 0044    	ldrb.w	r0, [r0, #0x44]
 805a81e: f807 0c1d    	strb	r0, [r7, #-29]
;             prvCopyDataFromQueue( pxQueue, pvBuffer );
 805a822: 9804         	ldr	r0, [sp, #0x10]
 805a824: 9908         	ldr	r1, [sp, #0x20]
 805a826: f7ff feb4    	bl	0x805a592 <prvCopyDataFromQueue> @ imm = #-0x298
;             pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting - ( UBaseType_t ) 1 );
 805a82a: 9803         	ldr	r0, [sp, #0xc]
 805a82c: 3801         	subs	r0, #0x1
 805a82e: 9904         	ldr	r1, [sp, #0x10]
 805a830: 6388         	str	r0, [r1, #0x38]
;             if( cRxLock == queueUNLOCKED )
 805a832: f917 0c1d    	ldrsb	r0, [r7, #-29]
 805a836: 3001         	adds	r0, #0x1
 805a838: b9b8         	cbnz	r0, 0x805a86a <xQueueReceiveFromISR+0xb0> @ imm = #0x2e
 805a83a: e7ff         	b	0x805a83c <xQueueReceiveFromISR+0x82> @ imm = #-0x2
;                 if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 805a83c: 9804         	ldr	r0, [sp, #0x10]
 805a83e: 6900         	ldr	r0, [r0, #0x10]
 805a840: b188         	cbz	r0, 0x805a866 <xQueueReceiveFromISR+0xac> @ imm = #0x22
 805a842: e7ff         	b	0x805a844 <xQueueReceiveFromISR+0x8a> @ imm = #-0x2
;                     if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 805a844: 9804         	ldr	r0, [sp, #0x10]
 805a846: 3010         	adds	r0, #0x10
 805a848: f7ff fffe    	bl	0x805a848 <xQueueReceiveFromISR+0x8e> @ imm = #-0x4
 805a84c: b148         	cbz	r0, 0x805a862 <xQueueReceiveFromISR+0xa8> @ imm = #0x12
 805a84e: e7ff         	b	0x805a850 <xQueueReceiveFromISR+0x96> @ imm = #-0x2
;                         if( pxHigherPriorityTaskWoken != NULL )
 805a850: 9807         	ldr	r0, [sp, #0x1c]
 805a852: b120         	cbz	r0, 0x805a85e <xQueueReceiveFromISR+0xa4> @ imm = #0x8
 805a854: e7ff         	b	0x805a856 <xQueueReceiveFromISR+0x9c> @ imm = #-0x2
;                             *pxHigherPriorityTaskWoken = pdTRUE;
 805a856: 9907         	ldr	r1, [sp, #0x1c]
 805a858: 2001         	movs	r0, #0x1
 805a85a: 6008         	str	r0, [r1]
;                         }
 805a85c: e000         	b	0x805a860 <xQueueReceiveFromISR+0xa6> @ imm = #0x0
 805a85e: e7ff         	b	0x805a860 <xQueueReceiveFromISR+0xa6> @ imm = #-0x2
;                     }
 805a860: e000         	b	0x805a864 <xQueueReceiveFromISR+0xaa> @ imm = #0x0
 805a862: e7ff         	b	0x805a864 <xQueueReceiveFromISR+0xaa> @ imm = #-0x2
;                 }
 805a864: e000         	b	0x805a868 <xQueueReceiveFromISR+0xae> @ imm = #0x0
 805a866: e7ff         	b	0x805a868 <xQueueReceiveFromISR+0xae> @ imm = #-0x2
;             }
 805a868: e01b         	b	0x805a8a2 <xQueueReceiveFromISR+0xe8> @ imm = #0x36
;                 prvIncrementQueueRxLock( pxQueue, cRxLock );
 805a86a: e7ff         	b	0x805a86c <xQueueReceiveFromISR+0xb2> @ imm = #-0x2
 805a86c: f7ff fffe    	bl	0x805a86c <xQueueReceiveFromISR+0xb2> @ imm = #-0x4
 805a870: 9001         	str	r0, [sp, #0x4]
 805a872: f917 0c1d    	ldrsb	r0, [r7, #-29]
 805a876: 9901         	ldr	r1, [sp, #0x4]
 805a878: 4288         	cmp	r0, r1
 805a87a: d210         	bhs	0x805a89e <xQueueReceiveFromISR+0xe4> @ imm = #0x20
 805a87c: e7ff         	b	0x805a87e <xQueueReceiveFromISR+0xc4> @ imm = #-0x2
 805a87e: f917 0c1d    	ldrsb	r0, [r7, #-29]
 805a882: 287f         	cmp	r0, #0x7f
 805a884: d104         	bne	0x805a890 <xQueueReceiveFromISR+0xd6> @ imm = #0x8
 805a886: e7ff         	b	0x805a888 <xQueueReceiveFromISR+0xce> @ imm = #-0x2
 805a888: f7ff fffe    	bl	0x805a888 <xQueueReceiveFromISR+0xce> @ imm = #-0x4
 805a88c: e7ff         	b	0x805a88e <xQueueReceiveFromISR+0xd4> @ imm = #-0x2
 805a88e: e7fe         	b	0x805a88e <xQueueReceiveFromISR+0xd4> @ imm = #-0x4
 805a890: f817 0c1d    	ldrb	r0, [r7, #-29]
 805a894: 3001         	adds	r0, #0x1
 805a896: 9904         	ldr	r1, [sp, #0x10]
 805a898: f881 0044    	strb.w	r0, [r1, #0x44]
 805a89c: e7ff         	b	0x805a89e <xQueueReceiveFromISR+0xe4> @ imm = #-0x2
 805a89e: e7ff         	b	0x805a8a0 <xQueueReceiveFromISR+0xe6> @ imm = #-0x2
 805a8a0: e7ff         	b	0x805a8a2 <xQueueReceiveFromISR+0xe8> @ imm = #-0x2
 805a8a2: 2001         	movs	r0, #0x1
;             xReturn = pdPASS;
 805a8a4: 9006         	str	r0, [sp, #0x18]
;         }
 805a8a6: e002         	b	0x805a8ae <xQueueReceiveFromISR+0xf4> @ imm = #0x4
 805a8a8: 2000         	movs	r0, #0x0
;             xReturn = pdFAIL;
 805a8aa: 9006         	str	r0, [sp, #0x18]
 805a8ac: e7ff         	b	0x805a8ae <xQueueReceiveFromISR+0xf4> @ imm = #-0x2
;     taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );
 805a8ae: 9805         	ldr	r0, [sp, #0x14]
 805a8b0: f7ff fffe    	bl	0x805a8b0 <xQueueReceiveFromISR+0xf6> @ imm = #-0x4
;     return xReturn;
 805a8b4: 9806         	ldr	r0, [sp, #0x18]
 805a8b6: b00a         	add	sp, #0x28
 805a8b8: bd80         	pop	{r7, pc}

0805a8ba <xQueuePeekFromISR>:
; {
 805a8ba: b580         	push	{r7, lr}
 805a8bc: 466f         	mov	r7, sp
 805a8be: b088         	sub	sp, #0x20
 805a8c0: 9007         	str	r0, [sp, #0x1c]
 805a8c2: 9106         	str	r1, [sp, #0x18]
;     Queue_t * const pxQueue = xQueue;
 805a8c4: 9807         	ldr	r0, [sp, #0x1c]
 805a8c6: 9002         	str	r0, [sp, #0x8]
;     configASSERT( pxQueue );
 805a8c8: 9802         	ldr	r0, [sp, #0x8]
 805a8ca: b920         	cbnz	r0, 0x805a8d6 <xQueuePeekFromISR+0x1c> @ imm = #0x8
 805a8cc: e7ff         	b	0x805a8ce <xQueuePeekFromISR+0x14> @ imm = #-0x2
 805a8ce: f7ff fffe    	bl	0x805a8ce <xQueuePeekFromISR+0x14> @ imm = #-0x4
 805a8d2: e7ff         	b	0x805a8d4 <xQueuePeekFromISR+0x1a> @ imm = #-0x2
 805a8d4: e7fe         	b	0x805a8d4 <xQueuePeekFromISR+0x1a> @ imm = #-0x4
;     configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 805a8d6: 9906         	ldr	r1, [sp, #0x18]
 805a8d8: 2000         	movs	r0, #0x0
 805a8da: 9001         	str	r0, [sp, #0x4]
 805a8dc: b939         	cbnz	r1, 0x805a8ee <xQueuePeekFromISR+0x34> @ imm = #0xe
 805a8de: e7ff         	b	0x805a8e0 <xQueuePeekFromISR+0x26> @ imm = #-0x2
 805a8e0: 9802         	ldr	r0, [sp, #0x8]
 805a8e2: 6c00         	ldr	r0, [r0, #0x40]
 805a8e4: 2800         	cmp	r0, #0x0
 805a8e6: bf18         	it	ne
 805a8e8: 2001         	movne	r0, #0x1
 805a8ea: 9001         	str	r0, [sp, #0x4]
 805a8ec: e7ff         	b	0x805a8ee <xQueuePeekFromISR+0x34> @ imm = #-0x2
 805a8ee: 9801         	ldr	r0, [sp, #0x4]
;     configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 805a8f0: 07c0         	lsls	r0, r0, #0x1f
 805a8f2: b120         	cbz	r0, 0x805a8fe <xQueuePeekFromISR+0x44> @ imm = #0x8
 805a8f4: e7ff         	b	0x805a8f6 <xQueuePeekFromISR+0x3c> @ imm = #-0x2
 805a8f6: f7ff fffe    	bl	0x805a8f6 <xQueuePeekFromISR+0x3c> @ imm = #-0x4
 805a8fa: e7ff         	b	0x805a8fc <xQueuePeekFromISR+0x42> @ imm = #-0x2
 805a8fc: e7fe         	b	0x805a8fc <xQueuePeekFromISR+0x42> @ imm = #-0x4
;     configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
 805a8fe: 9802         	ldr	r0, [sp, #0x8]
 805a900: 6c00         	ldr	r0, [r0, #0x40]
 805a902: b920         	cbnz	r0, 0x805a90e <xQueuePeekFromISR+0x54> @ imm = #0x8
 805a904: e7ff         	b	0x805a906 <xQueuePeekFromISR+0x4c> @ imm = #-0x2
 805a906: f7ff fffe    	bl	0x805a906 <xQueuePeekFromISR+0x4c> @ imm = #-0x4
 805a90a: e7ff         	b	0x805a90c <xQueuePeekFromISR+0x52> @ imm = #-0x2
 805a90c: e7fe         	b	0x805a90c <xQueuePeekFromISR+0x52> @ imm = #-0x4
;     portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 805a90e: f7ff fffe    	bl	0x805a90e <xQueuePeekFromISR+0x54> @ imm = #-0x4
;     uxSavedInterruptStatus = taskENTER_CRITICAL_FROM_ISR();
 805a912: f7ff fffe    	bl	0x805a912 <xQueuePeekFromISR+0x58> @ imm = #-0x4
 805a916: 9004         	str	r0, [sp, #0x10]
;         if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 805a918: 9802         	ldr	r0, [sp, #0x8]
 805a91a: 6b80         	ldr	r0, [r0, #0x38]
 805a91c: b168         	cbz	r0, 0x805a93a <xQueuePeekFromISR+0x80> @ imm = #0x1a
 805a91e: e7ff         	b	0x805a920 <xQueuePeekFromISR+0x66> @ imm = #-0x2
;             pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
 805a920: 9802         	ldr	r0, [sp, #0x8]
 805a922: 68c0         	ldr	r0, [r0, #0xc]
 805a924: 9003         	str	r0, [sp, #0xc]
;             prvCopyDataFromQueue( pxQueue, pvBuffer );
 805a926: 9802         	ldr	r0, [sp, #0x8]
 805a928: 9906         	ldr	r1, [sp, #0x18]
 805a92a: f7ff fe32    	bl	0x805a592 <prvCopyDataFromQueue> @ imm = #-0x39c
;             pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
 805a92e: 9803         	ldr	r0, [sp, #0xc]
 805a930: 9902         	ldr	r1, [sp, #0x8]
 805a932: 60c8         	str	r0, [r1, #0xc]
 805a934: 2001         	movs	r0, #0x1
;             xReturn = pdPASS;
 805a936: 9005         	str	r0, [sp, #0x14]
;         }
 805a938: e002         	b	0x805a940 <xQueuePeekFromISR+0x86> @ imm = #0x4
 805a93a: 2000         	movs	r0, #0x0
;             xReturn = pdFAIL;
 805a93c: 9005         	str	r0, [sp, #0x14]
 805a93e: e7ff         	b	0x805a940 <xQueuePeekFromISR+0x86> @ imm = #-0x2
;     taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );
 805a940: 9804         	ldr	r0, [sp, #0x10]
 805a942: f7ff fffe    	bl	0x805a942 <xQueuePeekFromISR+0x88> @ imm = #-0x4
;     return xReturn;
 805a946: 9805         	ldr	r0, [sp, #0x14]
 805a948: b008         	add	sp, #0x20
 805a94a: bd80         	pop	{r7, pc}

0805a94c <uxQueueMessagesWaiting>:
; {
 805a94c: b580         	push	{r7, lr}
 805a94e: 466f         	mov	r7, sp
 805a950: b082         	sub	sp, #0x8
 805a952: 9001         	str	r0, [sp, #0x4]
;     configASSERT( xQueue );
 805a954: 9801         	ldr	r0, [sp, #0x4]
 805a956: b920         	cbnz	r0, 0x805a962 <uxQueueMessagesWaiting+0x16> @ imm = #0x8
 805a958: e7ff         	b	0x805a95a <uxQueueMessagesWaiting+0xe> @ imm = #-0x2
 805a95a: f7ff fffe    	bl	0x805a95a <uxQueueMessagesWaiting+0xe> @ imm = #-0x4
 805a95e: e7ff         	b	0x805a960 <uxQueueMessagesWaiting+0x14> @ imm = #-0x2
 805a960: e7fe         	b	0x805a960 <uxQueueMessagesWaiting+0x14> @ imm = #-0x4
;     taskENTER_CRITICAL();
 805a962: f7ff fffe    	bl	0x805a962 <uxQueueMessagesWaiting+0x16> @ imm = #-0x4
;         uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 805a966: 9801         	ldr	r0, [sp, #0x4]
 805a968: 6b80         	ldr	r0, [r0, #0x38]
 805a96a: 9000         	str	r0, [sp]
;     taskEXIT_CRITICAL();
 805a96c: f7ff fffe    	bl	0x805a96c <uxQueueMessagesWaiting+0x20> @ imm = #-0x4
;     return uxReturn;
 805a970: 9800         	ldr	r0, [sp]
 805a972: b002         	add	sp, #0x8
 805a974: bd80         	pop	{r7, pc}

0805a976 <uxQueueSpacesAvailable>:
; {
 805a976: b580         	push	{r7, lr}
 805a978: 466f         	mov	r7, sp
 805a97a: b084         	sub	sp, #0x10
 805a97c: 9003         	str	r0, [sp, #0xc]
;     Queue_t * const pxQueue = xQueue;
 805a97e: 9803         	ldr	r0, [sp, #0xc]
 805a980: 9001         	str	r0, [sp, #0x4]
;     configASSERT( pxQueue );
 805a982: 9801         	ldr	r0, [sp, #0x4]
 805a984: b920         	cbnz	r0, 0x805a990 <uxQueueSpacesAvailable+0x1a> @ imm = #0x8
 805a986: e7ff         	b	0x805a988 <uxQueueSpacesAvailable+0x12> @ imm = #-0x2
 805a988: f7ff fffe    	bl	0x805a988 <uxQueueSpacesAvailable+0x12> @ imm = #-0x4
 805a98c: e7ff         	b	0x805a98e <uxQueueSpacesAvailable+0x18> @ imm = #-0x2
 805a98e: e7fe         	b	0x805a98e <uxQueueSpacesAvailable+0x18> @ imm = #-0x4
;     taskENTER_CRITICAL();
 805a990: f7ff fffe    	bl	0x805a990 <uxQueueSpacesAvailable+0x1a> @ imm = #-0x4
;         uxReturn = ( UBaseType_t ) ( pxQueue->uxLength - pxQueue->uxMessagesWaiting );
 805a994: 9901         	ldr	r1, [sp, #0x4]
 805a996: 6bc8         	ldr	r0, [r1, #0x3c]
 805a998: 6b89         	ldr	r1, [r1, #0x38]
 805a99a: 1a40         	subs	r0, r0, r1
 805a99c: 9002         	str	r0, [sp, #0x8]
;     taskEXIT_CRITICAL();
 805a99e: f7ff fffe    	bl	0x805a99e <uxQueueSpacesAvailable+0x28> @ imm = #-0x4
;     return uxReturn;
 805a9a2: 9802         	ldr	r0, [sp, #0x8]
 805a9a4: b004         	add	sp, #0x10
 805a9a6: bd80         	pop	{r7, pc}

0805a9a8 <uxQueueMessagesWaitingFromISR>:
; {
 805a9a8: b580         	push	{r7, lr}
 805a9aa: 466f         	mov	r7, sp
 805a9ac: b084         	sub	sp, #0x10
 805a9ae: 9003         	str	r0, [sp, #0xc]
;     Queue_t * const pxQueue = xQueue;
 805a9b0: 9803         	ldr	r0, [sp, #0xc]
 805a9b2: 9001         	str	r0, [sp, #0x4]
;     configASSERT( pxQueue );
 805a9b4: 9801         	ldr	r0, [sp, #0x4]
 805a9b6: b920         	cbnz	r0, 0x805a9c2 <uxQueueMessagesWaitingFromISR+0x1a> @ imm = #0x8
 805a9b8: e7ff         	b	0x805a9ba <uxQueueMessagesWaitingFromISR+0x12> @ imm = #-0x2
 805a9ba: f7ff fffe    	bl	0x805a9ba <uxQueueMessagesWaitingFromISR+0x12> @ imm = #-0x4
 805a9be: e7ff         	b	0x805a9c0 <uxQueueMessagesWaitingFromISR+0x18> @ imm = #-0x2
 805a9c0: e7fe         	b	0x805a9c0 <uxQueueMessagesWaitingFromISR+0x18> @ imm = #-0x4
;     uxReturn = pxQueue->uxMessagesWaiting;
 805a9c2: 9801         	ldr	r0, [sp, #0x4]
 805a9c4: 6b80         	ldr	r0, [r0, #0x38]
 805a9c6: 9002         	str	r0, [sp, #0x8]
;     return uxReturn;
 805a9c8: 9802         	ldr	r0, [sp, #0x8]
 805a9ca: b004         	add	sp, #0x10
 805a9cc: bd80         	pop	{r7, pc}

0805a9ce <vQueueDelete>:
; {
 805a9ce: b580         	push	{r7, lr}
 805a9d0: 466f         	mov	r7, sp
 805a9d2: b082         	sub	sp, #0x8
 805a9d4: 9001         	str	r0, [sp, #0x4]
;     Queue_t * const pxQueue = xQueue;
 805a9d6: 9801         	ldr	r0, [sp, #0x4]
 805a9d8: 9000         	str	r0, [sp]
;     configASSERT( pxQueue );
 805a9da: 9800         	ldr	r0, [sp]
 805a9dc: b920         	cbnz	r0, 0x805a9e8 <vQueueDelete+0x1a> @ imm = #0x8
 805a9de: e7ff         	b	0x805a9e0 <vQueueDelete+0x12> @ imm = #-0x2
 805a9e0: f7ff fffe    	bl	0x805a9e0 <vQueueDelete+0x12> @ imm = #-0x4
 805a9e4: e7ff         	b	0x805a9e6 <vQueueDelete+0x18> @ imm = #-0x2
 805a9e6: e7fe         	b	0x805a9e6 <vQueueDelete+0x18> @ imm = #-0x4
;         vQueueUnregisterQueue( pxQueue );
 805a9e8: 9800         	ldr	r0, [sp]
 805a9ea: f7ff fffe    	bl	0x805a9ea <vQueueDelete+0x1c> @ imm = #-0x4
;         vPortFree( pxQueue );
 805a9ee: 9800         	ldr	r0, [sp]
 805a9f0: f7ff fffe    	bl	0x805a9f0 <vQueueDelete+0x22> @ imm = #-0x4
; }
 805a9f4: b002         	add	sp, #0x8
 805a9f6: bd80         	pop	{r7, pc}

0805a9f8 <vQueueUnregisterQueue>:
;     {
 805a9f8: b580         	push	{r7, lr}
 805a9fa: 466f         	mov	r7, sp
 805a9fc: b082         	sub	sp, #0x8
 805a9fe: 9001         	str	r0, [sp, #0x4]
;         configASSERT( xQueue );
 805aa00: 9801         	ldr	r0, [sp, #0x4]
 805aa02: b920         	cbnz	r0, 0x805aa0e <vQueueUnregisterQueue+0x16> @ imm = #0x8
 805aa04: e7ff         	b	0x805aa06 <vQueueUnregisterQueue+0xe> @ imm = #-0x2
 805aa06: f7ff fffe    	bl	0x805aa06 <vQueueUnregisterQueue+0xe> @ imm = #-0x4
 805aa0a: e7ff         	b	0x805aa0c <vQueueUnregisterQueue+0x14> @ imm = #-0x2
 805aa0c: e7fe         	b	0x805aa0c <vQueueUnregisterQueue+0x14> @ imm = #-0x4
 805aa0e: 2000         	movs	r0, #0x0
;         for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 805aa10: 9000         	str	r0, [sp]
 805aa12: e7ff         	b	0x805aa14 <vQueueUnregisterQueue+0x1c> @ imm = #-0x2
 805aa14: 9800         	ldr	r0, [sp]
 805aa16: 2807         	cmp	r0, #0x7
 805aa18: d81f         	bhi	0x805aa5a <vQueueUnregisterQueue+0x62> @ imm = #0x3e
 805aa1a: e7ff         	b	0x805aa1c <vQueueUnregisterQueue+0x24> @ imm = #-0x2
;             if( xQueueRegistry[ ux ].xHandle == xQueue )
 805aa1c: 9900         	ldr	r1, [sp]
 805aa1e: f240 0000    	movw	r0, #0x0
 805aa22: f2c0 0000    	movt	r0, #0x0
 805aa26: eb00 00c1    	add.w	r0, r0, r1, lsl #3
 805aa2a: 6840         	ldr	r0, [r0, #0x4]
 805aa2c: 9901         	ldr	r1, [sp, #0x4]
 805aa2e: 4288         	cmp	r0, r1
 805aa30: d10d         	bne	0x805aa4e <vQueueUnregisterQueue+0x56> @ imm = #0x1a
 805aa32: e7ff         	b	0x805aa34 <vQueueUnregisterQueue+0x3c> @ imm = #-0x2
;                 xQueueRegistry[ ux ].pcQueueName = NULL;
 805aa34: 9a00         	ldr	r2, [sp]
 805aa36: f240 0100    	movw	r1, #0x0
 805aa3a: f2c0 0100    	movt	r1, #0x0
 805aa3e: 2000         	movs	r0, #0x0
 805aa40: f841 0032    	str.w	r0, [r1, r2, lsl #3]
;                 xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 805aa44: 9a00         	ldr	r2, [sp]
 805aa46: eb01 01c2    	add.w	r1, r1, r2, lsl #3
 805aa4a: 6048         	str	r0, [r1, #0x4]
;                 break;
 805aa4c: e005         	b	0x805aa5a <vQueueUnregisterQueue+0x62> @ imm = #0xa
 805aa4e: e7ff         	b	0x805aa50 <vQueueUnregisterQueue+0x58> @ imm = #-0x2
;         }
 805aa50: e7ff         	b	0x805aa52 <vQueueUnregisterQueue+0x5a> @ imm = #-0x2
;         for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 805aa52: 9800         	ldr	r0, [sp]
 805aa54: 3001         	adds	r0, #0x1
 805aa56: 9000         	str	r0, [sp]
 805aa58: e7dc         	b	0x805aa14 <vQueueUnregisterQueue+0x1c> @ imm = #-0x48
;     } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 805aa5a: b002         	add	sp, #0x8
 805aa5c: bd80         	pop	{r7, pc}

0805aa5e <uxQueueGetQueueNumber>:
;     {
 805aa5e: b081         	sub	sp, #0x4
 805aa60: 9000         	str	r0, [sp]
;         return ( ( Queue_t * ) xQueue )->uxQueueNumber;
 805aa62: 9800         	ldr	r0, [sp]
 805aa64: 6c80         	ldr	r0, [r0, #0x48]
 805aa66: b001         	add	sp, #0x4
 805aa68: 4770         	bx	lr

0805aa6a <vQueueSetQueueNumber>:
;     {
 805aa6a: b082         	sub	sp, #0x8
 805aa6c: 9001         	str	r0, [sp, #0x4]
 805aa6e: 9100         	str	r1, [sp]
;         ( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
 805aa70: 9800         	ldr	r0, [sp]
 805aa72: 9901         	ldr	r1, [sp, #0x4]
 805aa74: 6488         	str	r0, [r1, #0x48]
;     }
 805aa76: b002         	add	sp, #0x8
 805aa78: 4770         	bx	lr

0805aa7a <ucQueueGetQueueType>:
;     {
 805aa7a: b081         	sub	sp, #0x4
 805aa7c: 9000         	str	r0, [sp]
;         return ( ( Queue_t * ) xQueue )->ucQueueType;
 805aa7e: 9800         	ldr	r0, [sp]
 805aa80: f890 004c    	ldrb.w	r0, [r0, #0x4c]
 805aa84: b001         	add	sp, #0x4
 805aa86: 4770         	bx	lr

0805aa88 <uxQueueGetQueueItemSize>:
; {
 805aa88: b081         	sub	sp, #0x4
 805aa8a: 9000         	str	r0, [sp]
;     return ( ( Queue_t * ) xQueue )->uxItemSize;
 805aa8c: 9800         	ldr	r0, [sp]
 805aa8e: 6c00         	ldr	r0, [r0, #0x40]
 805aa90: b001         	add	sp, #0x4
 805aa92: 4770         	bx	lr

0805aa94 <uxQueueGetQueueLength>:
; {
 805aa94: b081         	sub	sp, #0x4
 805aa96: 9000         	str	r0, [sp]
;     return ( ( Queue_t * ) xQueue )->uxLength;
 805aa98: 9800         	ldr	r0, [sp]
 805aa9a: 6bc0         	ldr	r0, [r0, #0x3c]
 805aa9c: b001         	add	sp, #0x4
 805aa9e: 4770         	bx	lr

0805aaa0 <xQueueIsQueueEmptyFromISR>:
; {
 805aaa0: b580         	push	{r7, lr}
 805aaa2: 466f         	mov	r7, sp
 805aaa4: b084         	sub	sp, #0x10
 805aaa6: 9003         	str	r0, [sp, #0xc]
;     Queue_t * const pxQueue = xQueue;
 805aaa8: 9803         	ldr	r0, [sp, #0xc]
 805aaaa: 9001         	str	r0, [sp, #0x4]
;     configASSERT( pxQueue );
 805aaac: 9801         	ldr	r0, [sp, #0x4]
 805aaae: b920         	cbnz	r0, 0x805aaba <xQueueIsQueueEmptyFromISR+0x1a> @ imm = #0x8
 805aab0: e7ff         	b	0x805aab2 <xQueueIsQueueEmptyFromISR+0x12> @ imm = #-0x2
 805aab2: f7ff fffe    	bl	0x805aab2 <xQueueIsQueueEmptyFromISR+0x12> @ imm = #-0x4
 805aab6: e7ff         	b	0x805aab8 <xQueueIsQueueEmptyFromISR+0x18> @ imm = #-0x2
 805aab8: e7fe         	b	0x805aab8 <xQueueIsQueueEmptyFromISR+0x18> @ imm = #-0x4
;     if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 805aaba: 9801         	ldr	r0, [sp, #0x4]
 805aabc: 6b80         	ldr	r0, [r0, #0x38]
 805aabe: b918         	cbnz	r0, 0x805aac8 <xQueueIsQueueEmptyFromISR+0x28> @ imm = #0x6
 805aac0: e7ff         	b	0x805aac2 <xQueueIsQueueEmptyFromISR+0x22> @ imm = #-0x2
 805aac2: 2001         	movs	r0, #0x1
;         xReturn = pdTRUE;
 805aac4: 9002         	str	r0, [sp, #0x8]
;     }
 805aac6: e002         	b	0x805aace <xQueueIsQueueEmptyFromISR+0x2e> @ imm = #0x4
 805aac8: 2000         	movs	r0, #0x0
;         xReturn = pdFALSE;
 805aaca: 9002         	str	r0, [sp, #0x8]
 805aacc: e7ff         	b	0x805aace <xQueueIsQueueEmptyFromISR+0x2e> @ imm = #-0x2
;     return xReturn;
 805aace: 9802         	ldr	r0, [sp, #0x8]
 805aad0: b004         	add	sp, #0x10
 805aad2: bd80         	pop	{r7, pc}

0805aad4 <xQueueIsQueueFullFromISR>:
; {
 805aad4: b580         	push	{r7, lr}
 805aad6: 466f         	mov	r7, sp
 805aad8: b084         	sub	sp, #0x10
 805aada: 9003         	str	r0, [sp, #0xc]
;     Queue_t * const pxQueue = xQueue;
 805aadc: 9803         	ldr	r0, [sp, #0xc]
 805aade: 9001         	str	r0, [sp, #0x4]
;     configASSERT( pxQueue );
 805aae0: 9801         	ldr	r0, [sp, #0x4]
 805aae2: b920         	cbnz	r0, 0x805aaee <xQueueIsQueueFullFromISR+0x1a> @ imm = #0x8
 805aae4: e7ff         	b	0x805aae6 <xQueueIsQueueFullFromISR+0x12> @ imm = #-0x2
 805aae6: f7ff fffe    	bl	0x805aae6 <xQueueIsQueueFullFromISR+0x12> @ imm = #-0x4
 805aaea: e7ff         	b	0x805aaec <xQueueIsQueueFullFromISR+0x18> @ imm = #-0x2
 805aaec: e7fe         	b	0x805aaec <xQueueIsQueueFullFromISR+0x18> @ imm = #-0x4
;     if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 805aaee: 9801         	ldr	r0, [sp, #0x4]
 805aaf0: 6b80         	ldr	r0, [r0, #0x38]
 805aaf2: 9901         	ldr	r1, [sp, #0x4]
 805aaf4: 6bc9         	ldr	r1, [r1, #0x3c]
 805aaf6: 4288         	cmp	r0, r1
 805aaf8: d103         	bne	0x805ab02 <xQueueIsQueueFullFromISR+0x2e> @ imm = #0x6
 805aafa: e7ff         	b	0x805aafc <xQueueIsQueueFullFromISR+0x28> @ imm = #-0x2
 805aafc: 2001         	movs	r0, #0x1
;         xReturn = pdTRUE;
 805aafe: 9002         	str	r0, [sp, #0x8]
;     }
 805ab00: e002         	b	0x805ab08 <xQueueIsQueueFullFromISR+0x34> @ imm = #0x4
 805ab02: 2000         	movs	r0, #0x0
;         xReturn = pdFALSE;
 805ab04: 9002         	str	r0, [sp, #0x8]
 805ab06: e7ff         	b	0x805ab08 <xQueueIsQueueFullFromISR+0x34> @ imm = #-0x2
;     return xReturn;
 805ab08: 9802         	ldr	r0, [sp, #0x8]
 805ab0a: b004         	add	sp, #0x10
 805ab0c: bd80         	pop	{r7, pc}

0805ab0e <vQueueAddToRegistry>:
;     {
 805ab0e: b580         	push	{r7, lr}
 805ab10: 466f         	mov	r7, sp
 805ab12: b084         	sub	sp, #0x10
 805ab14: 9003         	str	r0, [sp, #0xc]
 805ab16: 9102         	str	r1, [sp, #0x8]
 805ab18: 2000         	movs	r0, #0x0
;         QueueRegistryItem_t * pxEntryToWrite = NULL;
 805ab1a: 9000         	str	r0, [sp]
;         configASSERT( xQueue );
 805ab1c: 9803         	ldr	r0, [sp, #0xc]
 805ab1e: b920         	cbnz	r0, 0x805ab2a <vQueueAddToRegistry+0x1c> @ imm = #0x8
 805ab20: e7ff         	b	0x805ab22 <vQueueAddToRegistry+0x14> @ imm = #-0x2
 805ab22: f7ff fffe    	bl	0x805ab22 <vQueueAddToRegistry+0x14> @ imm = #-0x4
 805ab26: e7ff         	b	0x805ab28 <vQueueAddToRegistry+0x1a> @ imm = #-0x2
 805ab28: e7fe         	b	0x805ab28 <vQueueAddToRegistry+0x1a> @ imm = #-0x4
;         if( pcQueueName != NULL )
 805ab2a: 9802         	ldr	r0, [sp, #0x8]
 805ab2c: b3c8         	cbz	r0, 0x805aba2 <vQueueAddToRegistry+0x94> @ imm = #0x72
 805ab2e: e7ff         	b	0x805ab30 <vQueueAddToRegistry+0x22> @ imm = #-0x2
 805ab30: 2000         	movs	r0, #0x0
;             for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 805ab32: 9001         	str	r0, [sp, #0x4]
 805ab34: e7ff         	b	0x805ab36 <vQueueAddToRegistry+0x28> @ imm = #-0x2
 805ab36: 9801         	ldr	r0, [sp, #0x4]
 805ab38: 2807         	cmp	r0, #0x7
 805ab3a: d831         	bhi	0x805aba0 <vQueueAddToRegistry+0x92> @ imm = #0x62
 805ab3c: e7ff         	b	0x805ab3e <vQueueAddToRegistry+0x30> @ imm = #-0x2
;                 if( xQueue == xQueueRegistry[ ux ].xHandle )
 805ab3e: 9803         	ldr	r0, [sp, #0xc]
 805ab40: 9a01         	ldr	r2, [sp, #0x4]
 805ab42: f240 0100    	movw	r1, #0x0
 805ab46: f2c0 0100    	movt	r1, #0x0
 805ab4a: eb01 01c2    	add.w	r1, r1, r2, lsl #3
 805ab4e: 6849         	ldr	r1, [r1, #0x4]
 805ab50: 4288         	cmp	r0, r1
 805ab52: d109         	bne	0x805ab68 <vQueueAddToRegistry+0x5a> @ imm = #0x12
 805ab54: e7ff         	b	0x805ab56 <vQueueAddToRegistry+0x48> @ imm = #-0x2
;                     pxEntryToWrite = &( xQueueRegistry[ ux ] );
 805ab56: 9901         	ldr	r1, [sp, #0x4]
 805ab58: f240 0000    	movw	r0, #0x0
 805ab5c: f2c0 0000    	movt	r0, #0x0
 805ab60: eb00 00c1    	add.w	r0, r0, r1, lsl #3
 805ab64: 9000         	str	r0, [sp]
;                     break;
 805ab66: e01b         	b	0x805aba0 <vQueueAddToRegistry+0x92> @ imm = #0x36
;                 else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 805ab68: 9800         	ldr	r0, [sp]
 805ab6a: b990         	cbnz	r0, 0x805ab92 <vQueueAddToRegistry+0x84> @ imm = #0x24
 805ab6c: e7ff         	b	0x805ab6e <vQueueAddToRegistry+0x60> @ imm = #-0x2
 805ab6e: 9901         	ldr	r1, [sp, #0x4]
 805ab70: f240 0000    	movw	r0, #0x0
 805ab74: f2c0 0000    	movt	r0, #0x0
 805ab78: f850 0031    	ldr.w	r0, [r0, r1, lsl #3]
 805ab7c: b948         	cbnz	r0, 0x805ab92 <vQueueAddToRegistry+0x84> @ imm = #0x12
 805ab7e: e7ff         	b	0x805ab80 <vQueueAddToRegistry+0x72> @ imm = #-0x2
;                     pxEntryToWrite = &( xQueueRegistry[ ux ] );
 805ab80: 9901         	ldr	r1, [sp, #0x4]
 805ab82: f240 0000    	movw	r0, #0x0
 805ab86: f2c0 0000    	movt	r0, #0x0
 805ab8a: eb00 00c1    	add.w	r0, r0, r1, lsl #3
 805ab8e: 9000         	str	r0, [sp]
;                 }
 805ab90: e000         	b	0x805ab94 <vQueueAddToRegistry+0x86> @ imm = #0x0
 805ab92: e7ff         	b	0x805ab94 <vQueueAddToRegistry+0x86> @ imm = #-0x2
 805ab94: e7ff         	b	0x805ab96 <vQueueAddToRegistry+0x88> @ imm = #-0x2
;             }
 805ab96: e7ff         	b	0x805ab98 <vQueueAddToRegistry+0x8a> @ imm = #-0x2
;             for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 805ab98: 9801         	ldr	r0, [sp, #0x4]
 805ab9a: 3001         	adds	r0, #0x1
 805ab9c: 9001         	str	r0, [sp, #0x4]
 805ab9e: e7ca         	b	0x805ab36 <vQueueAddToRegistry+0x28> @ imm = #-0x6c
;         }
 805aba0: e7ff         	b	0x805aba2 <vQueueAddToRegistry+0x94> @ imm = #-0x2
;         if( pxEntryToWrite != NULL )
 805aba2: 9800         	ldr	r0, [sp]
 805aba4: b138         	cbz	r0, 0x805abb6 <vQueueAddToRegistry+0xa8> @ imm = #0xe
 805aba6: e7ff         	b	0x805aba8 <vQueueAddToRegistry+0x9a> @ imm = #-0x2
;             pxEntryToWrite->pcQueueName = pcQueueName;
 805aba8: 9802         	ldr	r0, [sp, #0x8]
 805abaa: 9900         	ldr	r1, [sp]
 805abac: 6008         	str	r0, [r1]
;             pxEntryToWrite->xHandle = xQueue;
 805abae: 9803         	ldr	r0, [sp, #0xc]
 805abb0: 9900         	ldr	r1, [sp]
 805abb2: 6048         	str	r0, [r1, #0x4]
;         }
 805abb4: e7ff         	b	0x805abb6 <vQueueAddToRegistry+0xa8> @ imm = #-0x2
;     }
 805abb6: b004         	add	sp, #0x10
 805abb8: bd80         	pop	{r7, pc}

0805abba <pcQueueGetName>:
;     {
 805abba: b580         	push	{r7, lr}
 805abbc: 466f         	mov	r7, sp
 805abbe: b084         	sub	sp, #0x10
 805abc0: 9003         	str	r0, [sp, #0xc]
 805abc2: 2000         	movs	r0, #0x0
;         const char * pcReturn = NULL; /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
 805abc4: 9001         	str	r0, [sp, #0x4]
;         configASSERT( xQueue );
 805abc6: 9803         	ldr	r0, [sp, #0xc]
 805abc8: b920         	cbnz	r0, 0x805abd4 <pcQueueGetName+0x1a> @ imm = #0x8
 805abca: e7ff         	b	0x805abcc <pcQueueGetName+0x12> @ imm = #-0x2
 805abcc: f7ff fffe    	bl	0x805abcc <pcQueueGetName+0x12> @ imm = #-0x4
 805abd0: e7ff         	b	0x805abd2 <pcQueueGetName+0x18> @ imm = #-0x2
 805abd2: e7fe         	b	0x805abd2 <pcQueueGetName+0x18> @ imm = #-0x4
 805abd4: 2000         	movs	r0, #0x0
;         for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 805abd6: 9002         	str	r0, [sp, #0x8]
 805abd8: e7ff         	b	0x805abda <pcQueueGetName+0x20> @ imm = #-0x2
 805abda: 9802         	ldr	r0, [sp, #0x8]
 805abdc: 2807         	cmp	r0, #0x7
 805abde: d81b         	bhi	0x805ac18 <pcQueueGetName+0x5e> @ imm = #0x36
 805abe0: e7ff         	b	0x805abe2 <pcQueueGetName+0x28> @ imm = #-0x2
;             if( xQueueRegistry[ ux ].xHandle == xQueue )
 805abe2: 9902         	ldr	r1, [sp, #0x8]
 805abe4: f240 0000    	movw	r0, #0x0
 805abe8: f2c0 0000    	movt	r0, #0x0
 805abec: eb00 00c1    	add.w	r0, r0, r1, lsl #3
 805abf0: 6840         	ldr	r0, [r0, #0x4]
 805abf2: 9903         	ldr	r1, [sp, #0xc]
 805abf4: 4288         	cmp	r0, r1
 805abf6: d109         	bne	0x805ac0c <pcQueueGetName+0x52> @ imm = #0x12
 805abf8: e7ff         	b	0x805abfa <pcQueueGetName+0x40> @ imm = #-0x2
;                 pcReturn = xQueueRegistry[ ux ].pcQueueName;
 805abfa: 9902         	ldr	r1, [sp, #0x8]
 805abfc: f240 0000    	movw	r0, #0x0
 805ac00: f2c0 0000    	movt	r0, #0x0
 805ac04: f850 0031    	ldr.w	r0, [r0, r1, lsl #3]
 805ac08: 9001         	str	r0, [sp, #0x4]
;                 break;
 805ac0a: e005         	b	0x805ac18 <pcQueueGetName+0x5e> @ imm = #0xa
 805ac0c: e7ff         	b	0x805ac0e <pcQueueGetName+0x54> @ imm = #-0x2
;         }
 805ac0e: e7ff         	b	0x805ac10 <pcQueueGetName+0x56> @ imm = #-0x2
;         for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 805ac10: 9802         	ldr	r0, [sp, #0x8]
 805ac12: 3001         	adds	r0, #0x1
 805ac14: 9002         	str	r0, [sp, #0x8]
 805ac16: e7e0         	b	0x805abda <pcQueueGetName+0x20> @ imm = #-0x40
;         return pcReturn;
 805ac18: 9801         	ldr	r0, [sp, #0x4]
 805ac1a: b004         	add	sp, #0x10
 805ac1c: bd80         	pop	{r7, pc}

0805ac1e <vQueueWaitForMessageRestricted>:
;     {
 805ac1e: b580         	push	{r7, lr}
 805ac20: 466f         	mov	r7, sp
 805ac22: b084         	sub	sp, #0x10
 805ac24: 9003         	str	r0, [sp, #0xc]
 805ac26: 9102         	str	r1, [sp, #0x8]
 805ac28: 9201         	str	r2, [sp, #0x4]
;         Queue_t * const pxQueue = xQueue;
 805ac2a: 9803         	ldr	r0, [sp, #0xc]
 805ac2c: 9000         	str	r0, [sp]
;         prvLockQueue( pxQueue );
 805ac2e: f7ff fffe    	bl	0x805ac2e <vQueueWaitForMessageRestricted+0x10> @ imm = #-0x4
 805ac32: 9800         	ldr	r0, [sp]
 805ac34: f990 0044    	ldrsb.w	r0, [r0, #0x44]
 805ac38: 3001         	adds	r0, #0x1
 805ac3a: b928         	cbnz	r0, 0x805ac48 <vQueueWaitForMessageRestricted+0x2a> @ imm = #0xa
 805ac3c: e7ff         	b	0x805ac3e <vQueueWaitForMessageRestricted+0x20> @ imm = #-0x2
 805ac3e: 9900         	ldr	r1, [sp]
 805ac40: 2000         	movs	r0, #0x0
 805ac42: f881 0044    	strb.w	r0, [r1, #0x44]
 805ac46: e7ff         	b	0x805ac48 <vQueueWaitForMessageRestricted+0x2a> @ imm = #-0x2
 805ac48: 9800         	ldr	r0, [sp]
 805ac4a: f990 0045    	ldrsb.w	r0, [r0, #0x45]
 805ac4e: 3001         	adds	r0, #0x1
 805ac50: b928         	cbnz	r0, 0x805ac5e <vQueueWaitForMessageRestricted+0x40> @ imm = #0xa
 805ac52: e7ff         	b	0x805ac54 <vQueueWaitForMessageRestricted+0x36> @ imm = #-0x2
 805ac54: 9900         	ldr	r1, [sp]
 805ac56: 2000         	movs	r0, #0x0
 805ac58: f881 0045    	strb.w	r0, [r1, #0x45]
 805ac5c: e7ff         	b	0x805ac5e <vQueueWaitForMessageRestricted+0x40> @ imm = #-0x2
 805ac5e: f7ff fffe    	bl	0x805ac5e <vQueueWaitForMessageRestricted+0x40> @ imm = #-0x4
;         if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 805ac62: 9800         	ldr	r0, [sp]
 805ac64: 6b80         	ldr	r0, [r0, #0x38]
 805ac66: b938         	cbnz	r0, 0x805ac78 <vQueueWaitForMessageRestricted+0x5a> @ imm = #0xe
 805ac68: e7ff         	b	0x805ac6a <vQueueWaitForMessageRestricted+0x4c> @ imm = #-0x2
;             vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 805ac6a: 9800         	ldr	r0, [sp]
 805ac6c: 3024         	adds	r0, #0x24
 805ac6e: 9902         	ldr	r1, [sp, #0x8]
 805ac70: 9a01         	ldr	r2, [sp, #0x4]
 805ac72: f7ff fffe    	bl	0x805ac72 <vQueueWaitForMessageRestricted+0x54> @ imm = #-0x4
;         }
 805ac76: e000         	b	0x805ac7a <vQueueWaitForMessageRestricted+0x5c> @ imm = #0x0
 805ac78: e7ff         	b	0x805ac7a <vQueueWaitForMessageRestricted+0x5c> @ imm = #-0x2
;         prvUnlockQueue( pxQueue );
 805ac7a: 9800         	ldr	r0, [sp]
 805ac7c: f7ff fa49    	bl	0x805a112 <prvUnlockQueue> @ imm = #-0xb6e
;     }
 805ac80: b004         	add	sp, #0x10
 805ac82: bd80         	pop	{r7, pc}

0805ac84 <xStreamBufferGenericCreate>:
;     {
 805ac84: b5b0         	push	{r4, r5, r7, lr}
 805ac86: af02         	add	r7, sp, #0x8
 805ac88: b08a         	sub	sp, #0x28
 805ac8a: f8d7 c008    	ldr.w	r12, [r7, #0x8]
 805ac8e: 9009         	str	r0, [sp, #0x24]
 805ac90: 9108         	str	r1, [sp, #0x20]
 805ac92: 9207         	str	r2, [sp, #0x1c]
 805ac94: 9306         	str	r3, [sp, #0x18]
;         if( xIsMessageBuffer == pdTRUE )
 805ac96: 9807         	ldr	r0, [sp, #0x1c]
 805ac98: 2801         	cmp	r0, #0x1
 805ac9a: d10c         	bne	0x805acb6 <xStreamBufferGenericCreate+0x32> @ imm = #0x18
 805ac9c: e7ff         	b	0x805ac9e <xStreamBufferGenericCreate+0x1a> @ imm = #-0x2
 805ac9e: 2001         	movs	r0, #0x1
;             ucFlags = sbFLAGS_IS_MESSAGE_BUFFER;
 805aca0: f807 0c1d    	strb	r0, [r7, #-29]
;             configASSERT( xBufferSizeBytes > sbBYTES_TO_STORE_MESSAGE_LENGTH );
 805aca4: 9809         	ldr	r0, [sp, #0x24]
 805aca6: 2804         	cmp	r0, #0x4
 805aca8: d804         	bhi	0x805acb4 <xStreamBufferGenericCreate+0x30> @ imm = #0x8
 805acaa: e7ff         	b	0x805acac <xStreamBufferGenericCreate+0x28> @ imm = #-0x2
 805acac: f7ff fffe    	bl	0x805acac <xStreamBufferGenericCreate+0x28> @ imm = #-0x4
 805acb0: e7ff         	b	0x805acb2 <xStreamBufferGenericCreate+0x2e> @ imm = #-0x2
 805acb2: e7fe         	b	0x805acb2 <xStreamBufferGenericCreate+0x2e> @ imm = #-0x4
;         }
 805acb4: e00a         	b	0x805accc <xStreamBufferGenericCreate+0x48> @ imm = #0x14
 805acb6: 2000         	movs	r0, #0x0
;             ucFlags = 0;
 805acb8: f807 0c1d    	strb	r0, [r7, #-29]
;             configASSERT( xBufferSizeBytes > 0 );
 805acbc: 9809         	ldr	r0, [sp, #0x24]
 805acbe: b920         	cbnz	r0, 0x805acca <xStreamBufferGenericCreate+0x46> @ imm = #0x8
 805acc0: e7ff         	b	0x805acc2 <xStreamBufferGenericCreate+0x3e> @ imm = #-0x2
 805acc2: f7ff fffe    	bl	0x805acc2 <xStreamBufferGenericCreate+0x3e> @ imm = #-0x4
 805acc6: e7ff         	b	0x805acc8 <xStreamBufferGenericCreate+0x44> @ imm = #-0x2
 805acc8: e7fe         	b	0x805acc8 <xStreamBufferGenericCreate+0x44> @ imm = #-0x4
 805acca: e7ff         	b	0x805accc <xStreamBufferGenericCreate+0x48> @ imm = #-0x2
;         configASSERT( xTriggerLevelBytes <= xBufferSizeBytes );
 805accc: 9808         	ldr	r0, [sp, #0x20]
 805acce: 9909         	ldr	r1, [sp, #0x24]
 805acd0: 4288         	cmp	r0, r1
 805acd2: d904         	bls	0x805acde <xStreamBufferGenericCreate+0x5a> @ imm = #0x8
 805acd4: e7ff         	b	0x805acd6 <xStreamBufferGenericCreate+0x52> @ imm = #-0x2
 805acd6: f7ff fffe    	bl	0x805acd6 <xStreamBufferGenericCreate+0x52> @ imm = #-0x4
 805acda: e7ff         	b	0x805acdc <xStreamBufferGenericCreate+0x58> @ imm = #-0x2
 805acdc: e7fe         	b	0x805acdc <xStreamBufferGenericCreate+0x58> @ imm = #-0x4
;         if( xTriggerLevelBytes == ( size_t ) 0 )
 805acde: 9808         	ldr	r0, [sp, #0x20]
 805ace0: b918         	cbnz	r0, 0x805acea <xStreamBufferGenericCreate+0x66> @ imm = #0x6
 805ace2: e7ff         	b	0x805ace4 <xStreamBufferGenericCreate+0x60> @ imm = #-0x2
 805ace4: 2001         	movs	r0, #0x1
;             xTriggerLevelBytes = ( size_t ) 1;
 805ace6: 9008         	str	r0, [sp, #0x20]
;         }
 805ace8: e7ff         	b	0x805acea <xStreamBufferGenericCreate+0x66> @ imm = #-0x2
;         if( xBufferSizeBytes < ( xBufferSizeBytes + 1 + sizeof( StreamBuffer_t ) ) )
 805acea: 9809         	ldr	r0, [sp, #0x24]
 805acec: f100 0125    	add.w	r1, r0, #0x25
 805acf0: 4288         	cmp	r0, r1
 805acf2: d209         	bhs	0x805ad08 <xStreamBufferGenericCreate+0x84> @ imm = #0x12
 805acf4: e7ff         	b	0x805acf6 <xStreamBufferGenericCreate+0x72> @ imm = #-0x2
;             xBufferSizeBytes++;
 805acf6: 9809         	ldr	r0, [sp, #0x24]
 805acf8: 3001         	adds	r0, #0x1
 805acfa: 9009         	str	r0, [sp, #0x24]
;             pvAllocatedMemory = pvPortMalloc( xBufferSizeBytes + sizeof( StreamBuffer_t ) );
 805acfc: 9809         	ldr	r0, [sp, #0x24]
 805acfe: 3024         	adds	r0, #0x24
 805ad00: f7ff fffe    	bl	0x805ad00 <xStreamBufferGenericCreate+0x7c> @ imm = #-0x4
 805ad04: 9005         	str	r0, [sp, #0x14]
;         }
 805ad06: e002         	b	0x805ad0e <xStreamBufferGenericCreate+0x8a> @ imm = #0x4
 805ad08: 2000         	movs	r0, #0x0
;             pvAllocatedMemory = NULL;
 805ad0a: 9005         	str	r0, [sp, #0x14]
 805ad0c: e7ff         	b	0x805ad0e <xStreamBufferGenericCreate+0x8a> @ imm = #-0x2
;         if( pvAllocatedMemory != NULL )
 805ad0e: 9805         	ldr	r0, [sp, #0x14]
 805ad10: b198         	cbz	r0, 0x805ad3a <xStreamBufferGenericCreate+0xb6> @ imm = #0x26
 805ad12: e7ff         	b	0x805ad14 <xStreamBufferGenericCreate+0x90> @ imm = #-0x2
;             prvInitialiseNewStreamBuffer( ( StreamBuffer_t * ) pvAllocatedMemory,                         /* Structure at the start of the allocated memory. */ /*lint !e9087 Safe cast as allocated memory is aligned. */ /*lint !e826 Area is not too small and alignment is guaranteed provided malloc() behaves as expected and returns aligned buffer. */
 805ad14: 9805         	ldr	r0, [sp, #0x14]
;                                           ( ( uint8_t * ) pvAllocatedMemory ) + sizeof( StreamBuffer_t ), /* Storage area follows. */ /*lint !e9016 Indexing past structure valid for uint8_t pointer, also storage area has no alignment requirement. */
 805ad16: f100 0124    	add.w	r1, r0, #0x24
;                                           xBufferSizeBytes,
 805ad1a: 9a09         	ldr	r2, [sp, #0x24]
;                                           xTriggerLevelBytes,
 805ad1c: 9b08         	ldr	r3, [sp, #0x20]
;                                           ucFlags,
 805ad1e: f817 cc1d    	ldrb	r12, [r7, #-29]
;                                           pxSendCompletedCallback,
 805ad22: 9c06         	ldr	r4, [sp, #0x18]
;                                           pxReceiveCompletedCallback );
 805ad24: 68bd         	ldr	r5, [r7, #0x8]
;             prvInitialiseNewStreamBuffer( ( StreamBuffer_t * ) pvAllocatedMemory,                         /* Structure at the start of the allocated memory. */ /*lint !e9087 Safe cast as allocated memory is aligned. */ /*lint !e826 Area is not too small and alignment is guaranteed provided malloc() behaves as expected and returns aligned buffer. */
 805ad26: 46ee         	mov	lr, sp
 805ad28: f8ce 5008    	str.w	r5, [lr, #0x8]
 805ad2c: f8ce 4004    	str.w	r4, [lr, #0x4]
 805ad30: f8ce c000    	str.w	r12, [lr]
 805ad34: f000 f805    	bl	0x805ad42 <prvInitialiseNewStreamBuffer> @ imm = #0xa
;         }
 805ad38: e000         	b	0x805ad3c <xStreamBufferGenericCreate+0xb8> @ imm = #0x0
 805ad3a: e7ff         	b	0x805ad3c <xStreamBufferGenericCreate+0xb8> @ imm = #-0x2
;         return ( StreamBufferHandle_t ) pvAllocatedMemory; /*lint !e9087 !e826 Safe cast as allocated memory is aligned. */
 805ad3c: 9805         	ldr	r0, [sp, #0x14]
 805ad3e: b00a         	add	sp, #0x28
 805ad40: bdb0         	pop	{r4, r5, r7, pc}

0805ad42 <prvInitialiseNewStreamBuffer>:
; {
 805ad42: b580         	push	{r7, lr}
 805ad44: 466f         	mov	r7, sp
 805ad46: b086         	sub	sp, #0x18
 805ad48: 4684         	mov	r12, r0
 805ad4a: 6938         	ldr	r0, [r7, #0x10]
 805ad4c: 68f8         	ldr	r0, [r7, #0xc]
 805ad4e: 68b8         	ldr	r0, [r7, #0x8]
 805ad50: f8cd c014    	str.w	r12, [sp, #0x14]
 805ad54: 9104         	str	r1, [sp, #0x10]
 805ad56: 9203         	str	r2, [sp, #0xc]
 805ad58: 9302         	str	r3, [sp, #0x8]
 805ad5a: f807 0c11    	strb	r0, [r7, #-17]
;         configASSERT( memset( pucBuffer, ( int ) STREAM_BUFFER_BUFFER_WRITE_VALUE, xBufferSizeBytes ) == pucBuffer );
 805ad5e: 9804         	ldr	r0, [sp, #0x10]
 805ad60: 9a03         	ldr	r2, [sp, #0xc]
 805ad62: 2155         	movs	r1, #0x55
 805ad64: f7ff fffe    	bl	0x805ad64 <prvInitialiseNewStreamBuffer+0x22> @ imm = #-0x4
 805ad68: 9904         	ldr	r1, [sp, #0x10]
 805ad6a: 4288         	cmp	r0, r1
 805ad6c: d004         	beq	0x805ad78 <prvInitialiseNewStreamBuffer+0x36> @ imm = #0x8
 805ad6e: e7ff         	b	0x805ad70 <prvInitialiseNewStreamBuffer+0x2e> @ imm = #-0x2
 805ad70: f7ff fffe    	bl	0x805ad70 <prvInitialiseNewStreamBuffer+0x2e> @ imm = #-0x4
 805ad74: e7ff         	b	0x805ad76 <prvInitialiseNewStreamBuffer+0x34> @ imm = #-0x2
 805ad76: e7fe         	b	0x805ad76 <prvInitialiseNewStreamBuffer+0x34> @ imm = #-0x4
;     ( void ) memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) ); /*lint !e9087 memset() requires void *. */
 805ad78: 9805         	ldr	r0, [sp, #0x14]
 805ad7a: 2100         	movs	r1, #0x0
 805ad7c: 2224         	movs	r2, #0x24
 805ad7e: f7ff fffe    	bl	0x805ad7e <prvInitialiseNewStreamBuffer+0x3c> @ imm = #-0x4
;     pxStreamBuffer->pucBuffer = pucBuffer;
 805ad82: 9804         	ldr	r0, [sp, #0x10]
 805ad84: 9905         	ldr	r1, [sp, #0x14]
 805ad86: 6188         	str	r0, [r1, #0x18]
;     pxStreamBuffer->xLength = xBufferSizeBytes;
 805ad88: 9803         	ldr	r0, [sp, #0xc]
 805ad8a: 9905         	ldr	r1, [sp, #0x14]
 805ad8c: 6088         	str	r0, [r1, #0x8]
;     pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
 805ad8e: 9802         	ldr	r0, [sp, #0x8]
 805ad90: 9905         	ldr	r1, [sp, #0x14]
 805ad92: 60c8         	str	r0, [r1, #0xc]
;     pxStreamBuffer->ucFlags = ucFlags;
 805ad94: f817 0c11    	ldrb	r0, [r7, #-17]
 805ad98: 9905         	ldr	r1, [sp, #0x14]
 805ad9a: 7708         	strb	r0, [r1, #0x1c]
; }
 805ad9c: b006         	add	sp, #0x18
 805ad9e: bd80         	pop	{r7, pc}

0805ada0 <vStreamBufferDelete>:
; {
 805ada0: b580         	push	{r7, lr}
 805ada2: 466f         	mov	r7, sp
 805ada4: b082         	sub	sp, #0x8
 805ada6: 9001         	str	r0, [sp, #0x4]
;     StreamBuffer_t * pxStreamBuffer = xStreamBuffer;
 805ada8: 9801         	ldr	r0, [sp, #0x4]
 805adaa: 9000         	str	r0, [sp]
;     configASSERT( pxStreamBuffer );
 805adac: 9800         	ldr	r0, [sp]
 805adae: b920         	cbnz	r0, 0x805adba <vStreamBufferDelete+0x1a> @ imm = #0x8
 805adb0: e7ff         	b	0x805adb2 <vStreamBufferDelete+0x12> @ imm = #-0x2
 805adb2: f7ff fffe    	bl	0x805adb2 <vStreamBufferDelete+0x12> @ imm = #-0x4
 805adb6: e7ff         	b	0x805adb8 <vStreamBufferDelete+0x18> @ imm = #-0x2
 805adb8: e7fe         	b	0x805adb8 <vStreamBufferDelete+0x18> @ imm = #-0x4
;     if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) pdFALSE )
 805adba: 9800         	ldr	r0, [sp]
 805adbc: 7f00         	ldrb	r0, [r0, #0x1c]
 805adbe: 0780         	lsls	r0, r0, #0x1e
 805adc0: 2800         	cmp	r0, #0x0
 805adc2: d404         	bmi	0x805adce <vStreamBufferDelete+0x2e> @ imm = #0x8
 805adc4: e7ff         	b	0x805adc6 <vStreamBufferDelete+0x26> @ imm = #-0x2
;             vPortFree( ( void * ) pxStreamBuffer ); /*lint !e9087 Standard free() semantics require void *, plus pxStreamBuffer was allocated by pvPortMalloc(). */
 805adc6: 9800         	ldr	r0, [sp]
 805adc8: f7ff fffe    	bl	0x805adc8 <vStreamBufferDelete+0x28> @ imm = #-0x4
;     }
 805adcc: e005         	b	0x805adda <vStreamBufferDelete+0x3a> @ imm = #0xa
;         ( void ) memset( pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) );
 805adce: 9800         	ldr	r0, [sp]
 805add0: 2100         	movs	r1, #0x0
 805add2: 2224         	movs	r2, #0x24
 805add4: f7ff fffe    	bl	0x805add4 <vStreamBufferDelete+0x34> @ imm = #-0x4
 805add8: e7ff         	b	0x805adda <vStreamBufferDelete+0x3a> @ imm = #-0x2
; }
 805adda: b002         	add	sp, #0x8
 805addc: bd80         	pop	{r7, pc}

0805adde <xStreamBufferReset>:
; {
 805adde: b5b0         	push	{r4, r5, r7, lr}
 805ade0: af02         	add	r7, sp, #0x8
 805ade2: b08a         	sub	sp, #0x28
 805ade4: 9009         	str	r0, [sp, #0x24]
;     StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 805ade6: 9809         	ldr	r0, [sp, #0x24]
 805ade8: 9008         	str	r0, [sp, #0x20]
 805adea: 2000         	movs	r0, #0x0
;     BaseType_t xReturn = pdFAIL;
 805adec: 9007         	str	r0, [sp, #0x1c]
;     StreamBufferCallbackFunction_t pxSendCallback = NULL, pxReceiveCallback = NULL;
 805adee: 9006         	str	r0, [sp, #0x18]
 805adf0: 9005         	str	r0, [sp, #0x14]
;     configASSERT( pxStreamBuffer );
 805adf2: 9808         	ldr	r0, [sp, #0x20]
 805adf4: b920         	cbnz	r0, 0x805ae00 <xStreamBufferReset+0x22> @ imm = #0x8
 805adf6: e7ff         	b	0x805adf8 <xStreamBufferReset+0x1a> @ imm = #-0x2
 805adf8: f7ff fffe    	bl	0x805adf8 <xStreamBufferReset+0x1a> @ imm = #-0x4
 805adfc: e7ff         	b	0x805adfe <xStreamBufferReset+0x20> @ imm = #-0x2
 805adfe: e7fe         	b	0x805adfe <xStreamBufferReset+0x20> @ imm = #-0x4
;         uxStreamBufferNumber = pxStreamBuffer->uxStreamBufferNumber;
 805ae00: 9808         	ldr	r0, [sp, #0x20]
 805ae02: 6a00         	ldr	r0, [r0, #0x20]
 805ae04: 9004         	str	r0, [sp, #0x10]
;     taskENTER_CRITICAL();
 805ae06: f7ff fffe    	bl	0x805ae06 <xStreamBufferReset+0x28> @ imm = #-0x4
;         if( ( pxStreamBuffer->xTaskWaitingToReceive == NULL ) && ( pxStreamBuffer->xTaskWaitingToSend == NULL ) )
 805ae0a: 9808         	ldr	r0, [sp, #0x20]
 805ae0c: 6900         	ldr	r0, [r0, #0x10]
 805ae0e: b9d8         	cbnz	r0, 0x805ae48 <xStreamBufferReset+0x6a> @ imm = #0x36
 805ae10: e7ff         	b	0x805ae12 <xStreamBufferReset+0x34> @ imm = #-0x2
 805ae12: 9808         	ldr	r0, [sp, #0x20]
 805ae14: 6940         	ldr	r0, [r0, #0x14]
 805ae16: b9b8         	cbnz	r0, 0x805ae48 <xStreamBufferReset+0x6a> @ imm = #0x2e
 805ae18: e7ff         	b	0x805ae1a <xStreamBufferReset+0x3c> @ imm = #-0x2
;             prvInitialiseNewStreamBuffer( pxStreamBuffer,
 805ae1a: 9808         	ldr	r0, [sp, #0x20]
;                                           pxStreamBuffer->xLength,
 805ae1c: 6882         	ldr	r2, [r0, #0x8]
;                                           pxStreamBuffer->xTriggerLevelBytes,
 805ae1e: 68c3         	ldr	r3, [r0, #0xc]
;                                           pxStreamBuffer->pucBuffer,
 805ae20: 6981         	ldr	r1, [r0, #0x18]
;                                           pxStreamBuffer->ucFlags,
 805ae22: f890 c01c    	ldrb.w	r12, [r0, #0x1c]
;                                           pxSendCallback,
 805ae26: 9c06         	ldr	r4, [sp, #0x18]
;                                           pxReceiveCallback );
 805ae28: 9d05         	ldr	r5, [sp, #0x14]
;             prvInitialiseNewStreamBuffer( pxStreamBuffer,
 805ae2a: 46ee         	mov	lr, sp
 805ae2c: f8ce 5008    	str.w	r5, [lr, #0x8]
 805ae30: f8ce 4004    	str.w	r4, [lr, #0x4]
 805ae34: f8ce c000    	str.w	r12, [lr]
 805ae38: f7ff ff83    	bl	0x805ad42 <prvInitialiseNewStreamBuffer> @ imm = #-0xfa
;                 pxStreamBuffer->uxStreamBufferNumber = uxStreamBufferNumber;
 805ae3c: 9804         	ldr	r0, [sp, #0x10]
 805ae3e: 9908         	ldr	r1, [sp, #0x20]
 805ae40: 6208         	str	r0, [r1, #0x20]
 805ae42: 2001         	movs	r0, #0x1
;             xReturn = pdPASS;
 805ae44: 9007         	str	r0, [sp, #0x1c]
;         }
 805ae46: e7ff         	b	0x805ae48 <xStreamBufferReset+0x6a> @ imm = #-0x2
;     taskEXIT_CRITICAL();
 805ae48: f7ff fffe    	bl	0x805ae48 <xStreamBufferReset+0x6a> @ imm = #-0x4
;     return xReturn;
 805ae4c: 9807         	ldr	r0, [sp, #0x1c]
 805ae4e: b00a         	add	sp, #0x28
 805ae50: bdb0         	pop	{r4, r5, r7, pc}

0805ae52 <xStreamBufferSetTriggerLevel>:
; {
 805ae52: b580         	push	{r7, lr}
 805ae54: 466f         	mov	r7, sp
 805ae56: b084         	sub	sp, #0x10
 805ae58: 9003         	str	r0, [sp, #0xc]
 805ae5a: 9102         	str	r1, [sp, #0x8]
;     StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 805ae5c: 9803         	ldr	r0, [sp, #0xc]
 805ae5e: 9001         	str	r0, [sp, #0x4]
;     configASSERT( pxStreamBuffer );
 805ae60: 9801         	ldr	r0, [sp, #0x4]
 805ae62: b920         	cbnz	r0, 0x805ae6e <xStreamBufferSetTriggerLevel+0x1c> @ imm = #0x8
 805ae64: e7ff         	b	0x805ae66 <xStreamBufferSetTriggerLevel+0x14> @ imm = #-0x2
 805ae66: f7ff fffe    	bl	0x805ae66 <xStreamBufferSetTriggerLevel+0x14> @ imm = #-0x4
 805ae6a: e7ff         	b	0x805ae6c <xStreamBufferSetTriggerLevel+0x1a> @ imm = #-0x2
 805ae6c: e7fe         	b	0x805ae6c <xStreamBufferSetTriggerLevel+0x1a> @ imm = #-0x4
;     if( xTriggerLevel == ( size_t ) 0 )
 805ae6e: 9802         	ldr	r0, [sp, #0x8]
 805ae70: b918         	cbnz	r0, 0x805ae7a <xStreamBufferSetTriggerLevel+0x28> @ imm = #0x6
 805ae72: e7ff         	b	0x805ae74 <xStreamBufferSetTriggerLevel+0x22> @ imm = #-0x2
 805ae74: 2001         	movs	r0, #0x1
;         xTriggerLevel = ( size_t ) 1;
 805ae76: 9002         	str	r0, [sp, #0x8]
;     }
 805ae78: e7ff         	b	0x805ae7a <xStreamBufferSetTriggerLevel+0x28> @ imm = #-0x2
;     if( xTriggerLevel < pxStreamBuffer->xLength )
 805ae7a: 9802         	ldr	r0, [sp, #0x8]
 805ae7c: 9901         	ldr	r1, [sp, #0x4]
 805ae7e: 6889         	ldr	r1, [r1, #0x8]
 805ae80: 4288         	cmp	r0, r1
 805ae82: d206         	bhs	0x805ae92 <xStreamBufferSetTriggerLevel+0x40> @ imm = #0xc
 805ae84: e7ff         	b	0x805ae86 <xStreamBufferSetTriggerLevel+0x34> @ imm = #-0x2
;         pxStreamBuffer->xTriggerLevelBytes = xTriggerLevel;
 805ae86: 9802         	ldr	r0, [sp, #0x8]
 805ae88: 9901         	ldr	r1, [sp, #0x4]
 805ae8a: 60c8         	str	r0, [r1, #0xc]
 805ae8c: 2001         	movs	r0, #0x1
;         xReturn = pdPASS;
 805ae8e: 9000         	str	r0, [sp]
;     }
 805ae90: e002         	b	0x805ae98 <xStreamBufferSetTriggerLevel+0x46> @ imm = #0x4
 805ae92: 2000         	movs	r0, #0x0
;         xReturn = pdFALSE;
 805ae94: 9000         	str	r0, [sp]
 805ae96: e7ff         	b	0x805ae98 <xStreamBufferSetTriggerLevel+0x46> @ imm = #-0x2
;     return xReturn;
 805ae98: 9800         	ldr	r0, [sp]
 805ae9a: b004         	add	sp, #0x10
 805ae9c: bd80         	pop	{r7, pc}

0805ae9e <xStreamBufferSpacesAvailable>:
; {
 805ae9e: b580         	push	{r7, lr}
 805aea0: 466f         	mov	r7, sp
 805aea2: b084         	sub	sp, #0x10
 805aea4: 9003         	str	r0, [sp, #0xc]
;     const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 805aea6: 9803         	ldr	r0, [sp, #0xc]
 805aea8: 9002         	str	r0, [sp, #0x8]
;     configASSERT( pxStreamBuffer );
 805aeaa: 9802         	ldr	r0, [sp, #0x8]
 805aeac: b920         	cbnz	r0, 0x805aeb8 <xStreamBufferSpacesAvailable+0x1a> @ imm = #0x8
 805aeae: e7ff         	b	0x805aeb0 <xStreamBufferSpacesAvailable+0x12> @ imm = #-0x2
 805aeb0: f7ff fffe    	bl	0x805aeb0 <xStreamBufferSpacesAvailable+0x12> @ imm = #-0x4
 805aeb4: e7ff         	b	0x805aeb6 <xStreamBufferSpacesAvailable+0x18> @ imm = #-0x2
 805aeb6: e7fe         	b	0x805aeb6 <xStreamBufferSpacesAvailable+0x18> @ imm = #-0x4
;     do
 805aeb8: e7ff         	b	0x805aeba <xStreamBufferSpacesAvailable+0x1c> @ imm = #-0x2
;         xOriginalTail = pxStreamBuffer->xTail;
 805aeba: 9802         	ldr	r0, [sp, #0x8]
 805aebc: 6800         	ldr	r0, [r0]
 805aebe: 9000         	str	r0, [sp]
;         xSpace = pxStreamBuffer->xLength + pxStreamBuffer->xTail;
 805aec0: 9902         	ldr	r1, [sp, #0x8]
 805aec2: 6888         	ldr	r0, [r1, #0x8]
 805aec4: 6809         	ldr	r1, [r1]
 805aec6: 4408         	add	r0, r1
 805aec8: 9001         	str	r0, [sp, #0x4]
;         xSpace -= pxStreamBuffer->xHead;
 805aeca: 9802         	ldr	r0, [sp, #0x8]
 805aecc: 6841         	ldr	r1, [r0, #0x4]
 805aece: 9801         	ldr	r0, [sp, #0x4]
 805aed0: 1a40         	subs	r0, r0, r1
 805aed2: 9001         	str	r0, [sp, #0x4]
;     } while( xOriginalTail != pxStreamBuffer->xTail );
 805aed4: e7ff         	b	0x805aed6 <xStreamBufferSpacesAvailable+0x38> @ imm = #-0x2
 805aed6: 9800         	ldr	r0, [sp]
 805aed8: 9902         	ldr	r1, [sp, #0x8]
 805aeda: 6809         	ldr	r1, [r1]
 805aedc: 4288         	cmp	r0, r1
 805aede: d1ec         	bne	0x805aeba <xStreamBufferSpacesAvailable+0x1c> @ imm = #-0x28
 805aee0: e7ff         	b	0x805aee2 <xStreamBufferSpacesAvailable+0x44> @ imm = #-0x2
;     xSpace -= ( size_t ) 1;
 805aee2: 9801         	ldr	r0, [sp, #0x4]
 805aee4: 3801         	subs	r0, #0x1
 805aee6: 9001         	str	r0, [sp, #0x4]
;     if( xSpace >= pxStreamBuffer->xLength )
 805aee8: 9801         	ldr	r0, [sp, #0x4]
 805aeea: 9902         	ldr	r1, [sp, #0x8]
 805aeec: 6889         	ldr	r1, [r1, #0x8]
 805aeee: 4288         	cmp	r0, r1
 805aef0: d306         	blo	0x805af00 <xStreamBufferSpacesAvailable+0x62> @ imm = #0xc
 805aef2: e7ff         	b	0x805aef4 <xStreamBufferSpacesAvailable+0x56> @ imm = #-0x2
;         xSpace -= pxStreamBuffer->xLength;
 805aef4: 9802         	ldr	r0, [sp, #0x8]
 805aef6: 6881         	ldr	r1, [r0, #0x8]
 805aef8: 9801         	ldr	r0, [sp, #0x4]
 805aefa: 1a40         	subs	r0, r0, r1
 805aefc: 9001         	str	r0, [sp, #0x4]
;     }
 805aefe: e000         	b	0x805af02 <xStreamBufferSpacesAvailable+0x64> @ imm = #0x0
 805af00: e7ff         	b	0x805af02 <xStreamBufferSpacesAvailable+0x64> @ imm = #-0x2
;     return xSpace;
 805af02: 9801         	ldr	r0, [sp, #0x4]
 805af04: b004         	add	sp, #0x10
 805af06: bd80         	pop	{r7, pc}

0805af08 <xStreamBufferBytesAvailable>:
; {
 805af08: b580         	push	{r7, lr}
 805af0a: 466f         	mov	r7, sp
 805af0c: b084         	sub	sp, #0x10
 805af0e: 9003         	str	r0, [sp, #0xc]
;     const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 805af10: 9803         	ldr	r0, [sp, #0xc]
 805af12: 9002         	str	r0, [sp, #0x8]
;     configASSERT( pxStreamBuffer );
 805af14: 9802         	ldr	r0, [sp, #0x8]
 805af16: b920         	cbnz	r0, 0x805af22 <xStreamBufferBytesAvailable+0x1a> @ imm = #0x8
 805af18: e7ff         	b	0x805af1a <xStreamBufferBytesAvailable+0x12> @ imm = #-0x2
 805af1a: f7ff fffe    	bl	0x805af1a <xStreamBufferBytesAvailable+0x12> @ imm = #-0x4
 805af1e: e7ff         	b	0x805af20 <xStreamBufferBytesAvailable+0x18> @ imm = #-0x2
 805af20: e7fe         	b	0x805af20 <xStreamBufferBytesAvailable+0x18> @ imm = #-0x4
;     xReturn = prvBytesInBuffer( pxStreamBuffer );
 805af22: 9802         	ldr	r0, [sp, #0x8]
 805af24: f000 f804    	bl	0x805af30 <prvBytesInBuffer> @ imm = #0x8
 805af28: 9001         	str	r0, [sp, #0x4]
;     return xReturn;
 805af2a: 9801         	ldr	r0, [sp, #0x4]
 805af2c: b004         	add	sp, #0x10
 805af2e: bd80         	pop	{r7, pc}

0805af30 <prvBytesInBuffer>:
; {
 805af30: b082         	sub	sp, #0x8
 805af32: 9001         	str	r0, [sp, #0x4]
;     xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
 805af34: 9901         	ldr	r1, [sp, #0x4]
 805af36: 6888         	ldr	r0, [r1, #0x8]
 805af38: 6849         	ldr	r1, [r1, #0x4]
 805af3a: 4408         	add	r0, r1
 805af3c: 9000         	str	r0, [sp]
;     xCount -= pxStreamBuffer->xTail;
 805af3e: 9801         	ldr	r0, [sp, #0x4]
 805af40: 6801         	ldr	r1, [r0]
 805af42: 9800         	ldr	r0, [sp]
 805af44: 1a40         	subs	r0, r0, r1
 805af46: 9000         	str	r0, [sp]
;     if( xCount >= pxStreamBuffer->xLength )
 805af48: 9800         	ldr	r0, [sp]
 805af4a: 9901         	ldr	r1, [sp, #0x4]
 805af4c: 6889         	ldr	r1, [r1, #0x8]
 805af4e: 4288         	cmp	r0, r1
 805af50: d306         	blo	0x805af60 <prvBytesInBuffer+0x30> @ imm = #0xc
 805af52: e7ff         	b	0x805af54 <prvBytesInBuffer+0x24> @ imm = #-0x2
;         xCount -= pxStreamBuffer->xLength;
 805af54: 9801         	ldr	r0, [sp, #0x4]
 805af56: 6881         	ldr	r1, [r0, #0x8]
 805af58: 9800         	ldr	r0, [sp]
 805af5a: 1a40         	subs	r0, r0, r1
 805af5c: 9000         	str	r0, [sp]
;     }
 805af5e: e000         	b	0x805af62 <prvBytesInBuffer+0x32> @ imm = #0x0
 805af60: e7ff         	b	0x805af62 <prvBytesInBuffer+0x32> @ imm = #-0x2
;     return xCount;
 805af62: 9800         	ldr	r0, [sp]
 805af64: b002         	add	sp, #0x8
 805af66: 4770         	bx	lr

0805af68 <xStreamBufferSend>:
; {
 805af68: b580         	push	{r7, lr}
 805af6a: 466f         	mov	r7, sp
 805af6c: b08e         	sub	sp, #0x38
 805af6e: 900d         	str	r0, [sp, #0x34]
 805af70: 910c         	str	r1, [sp, #0x30]
 805af72: 920b         	str	r2, [sp, #0x2c]
 805af74: 930a         	str	r3, [sp, #0x28]
;     StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 805af76: 980d         	ldr	r0, [sp, #0x34]
 805af78: 9009         	str	r0, [sp, #0x24]
 805af7a: 2000         	movs	r0, #0x0
;     size_t xReturn, xSpace = 0;
 805af7c: 9007         	str	r0, [sp, #0x1c]
;     size_t xRequiredSpace = xDataLengthBytes;
 805af7e: 990b         	ldr	r1, [sp, #0x2c]
 805af80: 9106         	str	r1, [sp, #0x18]
;     size_t xMaxReportedSpace = 0;
 805af82: 9003         	str	r0, [sp, #0xc]
;     configASSERT( pvTxData );
 805af84: 980c         	ldr	r0, [sp, #0x30]
 805af86: b920         	cbnz	r0, 0x805af92 <xStreamBufferSend+0x2a> @ imm = #0x8
 805af88: e7ff         	b	0x805af8a <xStreamBufferSend+0x22> @ imm = #-0x2
 805af8a: f7ff fffe    	bl	0x805af8a <xStreamBufferSend+0x22> @ imm = #-0x4
 805af8e: e7ff         	b	0x805af90 <xStreamBufferSend+0x28> @ imm = #-0x2
 805af90: e7fe         	b	0x805af90 <xStreamBufferSend+0x28> @ imm = #-0x4
;     configASSERT( pxStreamBuffer );
 805af92: 9809         	ldr	r0, [sp, #0x24]
 805af94: b920         	cbnz	r0, 0x805afa0 <xStreamBufferSend+0x38> @ imm = #0x8
 805af96: e7ff         	b	0x805af98 <xStreamBufferSend+0x30> @ imm = #-0x2
 805af98: f7ff fffe    	bl	0x805af98 <xStreamBufferSend+0x30> @ imm = #-0x4
 805af9c: e7ff         	b	0x805af9e <xStreamBufferSend+0x36> @ imm = #-0x2
 805af9e: e7fe         	b	0x805af9e <xStreamBufferSend+0x36> @ imm = #-0x4
;     xMaxReportedSpace = pxStreamBuffer->xLength - ( size_t ) 1;
 805afa0: 9809         	ldr	r0, [sp, #0x24]
 805afa2: 6880         	ldr	r0, [r0, #0x8]
 805afa4: 3801         	subs	r0, #0x1
 805afa6: 9003         	str	r0, [sp, #0xc]
;     if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 805afa8: 9809         	ldr	r0, [sp, #0x24]
 805afaa: 7f00         	ldrb	r0, [r0, #0x1c]
 805afac: 07c0         	lsls	r0, r0, #0x1f
 805afae: b1b0         	cbz	r0, 0x805afde <xStreamBufferSend+0x76> @ imm = #0x2c
 805afb0: e7ff         	b	0x805afb2 <xStreamBufferSend+0x4a> @ imm = #-0x2
;         xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
 805afb2: 9806         	ldr	r0, [sp, #0x18]
 805afb4: 3004         	adds	r0, #0x4
 805afb6: 9006         	str	r0, [sp, #0x18]
;         configASSERT( xRequiredSpace > xDataLengthBytes );
 805afb8: 9806         	ldr	r0, [sp, #0x18]
 805afba: 990b         	ldr	r1, [sp, #0x2c]
 805afbc: 4288         	cmp	r0, r1
 805afbe: d804         	bhi	0x805afca <xStreamBufferSend+0x62> @ imm = #0x8
 805afc0: e7ff         	b	0x805afc2 <xStreamBufferSend+0x5a> @ imm = #-0x2
 805afc2: f7ff fffe    	bl	0x805afc2 <xStreamBufferSend+0x5a> @ imm = #-0x4
 805afc6: e7ff         	b	0x805afc8 <xStreamBufferSend+0x60> @ imm = #-0x2
 805afc8: e7fe         	b	0x805afc8 <xStreamBufferSend+0x60> @ imm = #-0x4
;         if( xRequiredSpace > xMaxReportedSpace )
 805afca: 9806         	ldr	r0, [sp, #0x18]
 805afcc: 9903         	ldr	r1, [sp, #0xc]
 805afce: 4288         	cmp	r0, r1
 805afd0: d903         	bls	0x805afda <xStreamBufferSend+0x72> @ imm = #0x6
 805afd2: e7ff         	b	0x805afd4 <xStreamBufferSend+0x6c> @ imm = #-0x2
 805afd4: 2000         	movs	r0, #0x0
;             xTicksToWait = ( TickType_t ) 0;
 805afd6: 900a         	str	r0, [sp, #0x28]
;         }
 805afd8: e000         	b	0x805afdc <xStreamBufferSend+0x74> @ imm = #0x0
 805afda: e7ff         	b	0x805afdc <xStreamBufferSend+0x74> @ imm = #-0x2
;     }
 805afdc: e009         	b	0x805aff2 <xStreamBufferSend+0x8a> @ imm = #0x12
;         if( xRequiredSpace > xMaxReportedSpace )
 805afde: 9806         	ldr	r0, [sp, #0x18]
 805afe0: 9903         	ldr	r1, [sp, #0xc]
 805afe2: 4288         	cmp	r0, r1
 805afe4: d903         	bls	0x805afee <xStreamBufferSend+0x86> @ imm = #0x6
 805afe6: e7ff         	b	0x805afe8 <xStreamBufferSend+0x80> @ imm = #-0x2
;             xRequiredSpace = xMaxReportedSpace;
 805afe8: 9803         	ldr	r0, [sp, #0xc]
 805afea: 9006         	str	r0, [sp, #0x18]
;         }
 805afec: e000         	b	0x805aff0 <xStreamBufferSend+0x88> @ imm = #0x0
 805afee: e7ff         	b	0x805aff0 <xStreamBufferSend+0x88> @ imm = #-0x2
 805aff0: e7ff         	b	0x805aff2 <xStreamBufferSend+0x8a> @ imm = #-0x2
;     if( xTicksToWait != ( TickType_t ) 0 )
 805aff2: 980a         	ldr	r0, [sp, #0x28]
 805aff4: b3d8         	cbz	r0, 0x805b06e <xStreamBufferSend+0x106> @ imm = #0x76
 805aff6: e7ff         	b	0x805aff8 <xStreamBufferSend+0x90> @ imm = #-0x2
 805aff8: a804         	add	r0, sp, #0x10
;         vTaskSetTimeOutState( &xTimeOut );
 805affa: f7ff fffe    	bl	0x805affa <xStreamBufferSend+0x92> @ imm = #-0x4
;         do
 805affe: e7ff         	b	0x805b000 <xStreamBufferSend+0x98> @ imm = #-0x2
;             taskENTER_CRITICAL();
 805b000: f7ff fffe    	bl	0x805b000 <xStreamBufferSend+0x98> @ imm = #-0x4
;                 xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 805b004: 9809         	ldr	r0, [sp, #0x24]
 805b006: f7ff fffe    	bl	0x805b006 <xStreamBufferSend+0x9e> @ imm = #-0x4
 805b00a: 9007         	str	r0, [sp, #0x1c]
;                 if( xSpace < xRequiredSpace )
 805b00c: 9807         	ldr	r0, [sp, #0x1c]
 805b00e: 9906         	ldr	r1, [sp, #0x18]
 805b010: 4288         	cmp	r0, r1
 805b012: d211         	bhs	0x805b038 <xStreamBufferSend+0xd0> @ imm = #0x22
 805b014: e7ff         	b	0x805b016 <xStreamBufferSend+0xae> @ imm = #-0x2
 805b016: 2100         	movs	r1, #0x0
;                     ( void ) xTaskNotifyStateClear( NULL );
 805b018: 4608         	mov	r0, r1
 805b01a: f7ff fffe    	bl	0x805b01a <xStreamBufferSend+0xb2> @ imm = #-0x4
;                     configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
 805b01e: 9809         	ldr	r0, [sp, #0x24]
 805b020: 6940         	ldr	r0, [r0, #0x14]
 805b022: b120         	cbz	r0, 0x805b02e <xStreamBufferSend+0xc6> @ imm = #0x8
 805b024: e7ff         	b	0x805b026 <xStreamBufferSend+0xbe> @ imm = #-0x2
 805b026: f7ff fffe    	bl	0x805b026 <xStreamBufferSend+0xbe> @ imm = #-0x4
 805b02a: e7ff         	b	0x805b02c <xStreamBufferSend+0xc4> @ imm = #-0x2
 805b02c: e7fe         	b	0x805b02c <xStreamBufferSend+0xc4> @ imm = #-0x4
;                     pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
 805b02e: f7ff fffe    	bl	0x805b02e <xStreamBufferSend+0xc6> @ imm = #-0x4
 805b032: 9909         	ldr	r1, [sp, #0x24]
 805b034: 6148         	str	r0, [r1, #0x14]
;                 }
 805b036: e002         	b	0x805b03e <xStreamBufferSend+0xd6> @ imm = #0x4
;                     taskEXIT_CRITICAL();
 805b038: f7ff fffe    	bl	0x805b038 <xStreamBufferSend+0xd0> @ imm = #-0x4
;                     break;
 805b03c: e016         	b	0x805b06c <xStreamBufferSend+0x104> @ imm = #0x2c
;             taskEXIT_CRITICAL();
 805b03e: f7ff fffe    	bl	0x805b03e <xStreamBufferSend+0xd6> @ imm = #-0x4
;             ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 805b042: 980a         	ldr	r0, [sp, #0x28]
 805b044: 4669         	mov	r1, sp
 805b046: 6008         	str	r0, [r1]
 805b048: 2300         	movs	r3, #0x0
 805b04a: 9302         	str	r3, [sp, #0x8]
 805b04c: 4618         	mov	r0, r3
 805b04e: 4619         	mov	r1, r3
 805b050: 461a         	mov	r2, r3
 805b052: f7ff fffe    	bl	0x805b052 <xStreamBufferSend+0xea> @ imm = #-0x4
;             pxStreamBuffer->xTaskWaitingToSend = NULL;
 805b056: 9802         	ldr	r0, [sp, #0x8]
 805b058: 9909         	ldr	r1, [sp, #0x24]
 805b05a: 6148         	str	r0, [r1, #0x14]
;         } while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
 805b05c: e7ff         	b	0x805b05e <xStreamBufferSend+0xf6> @ imm = #-0x2
 805b05e: a804         	add	r0, sp, #0x10
 805b060: a90a         	add	r1, sp, #0x28
;         } while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
 805b062: f7ff fffe    	bl	0x805b062 <xStreamBufferSend+0xfa> @ imm = #-0x4
 805b066: 2800         	cmp	r0, #0x0
 805b068: d0ca         	beq	0x805b000 <xStreamBufferSend+0x98> @ imm = #-0x6c
 805b06a: e7ff         	b	0x805b06c <xStreamBufferSend+0x104> @ imm = #-0x2
;     }
 805b06c: e000         	b	0x805b070 <xStreamBufferSend+0x108> @ imm = #0x0
 805b06e: e7ff         	b	0x805b070 <xStreamBufferSend+0x108> @ imm = #-0x2
;     if( xSpace == ( size_t ) 0 )
 805b070: 9807         	ldr	r0, [sp, #0x1c]
 805b072: b928         	cbnz	r0, 0x805b080 <xStreamBufferSend+0x118> @ imm = #0xa
 805b074: e7ff         	b	0x805b076 <xStreamBufferSend+0x10e> @ imm = #-0x2
;         xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 805b076: 9809         	ldr	r0, [sp, #0x24]
 805b078: f7ff fffe    	bl	0x805b078 <xStreamBufferSend+0x110> @ imm = #-0x4
 805b07c: 9007         	str	r0, [sp, #0x1c]
;     }
 805b07e: e000         	b	0x805b082 <xStreamBufferSend+0x11a> @ imm = #0x0
 805b080: e7ff         	b	0x805b082 <xStreamBufferSend+0x11a> @ imm = #-0x2
;     xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
 805b082: 9809         	ldr	r0, [sp, #0x24]
 805b084: 990c         	ldr	r1, [sp, #0x30]
 805b086: 9a0b         	ldr	r2, [sp, #0x2c]
 805b088: 9b07         	ldr	r3, [sp, #0x1c]
 805b08a: f8dd c018    	ldr.w	r12, [sp, #0x18]
 805b08e: 46ee         	mov	lr, sp
 805b090: f8ce c000    	str.w	r12, [lr]
 805b094: f000 f829    	bl	0x805b0ea <prvWriteMessageToBuffer> @ imm = #0x52
 805b098: 9008         	str	r0, [sp, #0x20]
;     if( xReturn > ( size_t ) 0 )
 805b09a: 9808         	ldr	r0, [sp, #0x20]
 805b09c: b308         	cbz	r0, 0x805b0e2 <xStreamBufferSend+0x17a> @ imm = #0x42
 805b09e: e7ff         	b	0x805b0a0 <xStreamBufferSend+0x138> @ imm = #-0x2
;         if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
 805b0a0: 9809         	ldr	r0, [sp, #0x24]
 805b0a2: f7ff ff45    	bl	0x805af30 <prvBytesInBuffer> @ imm = #-0x176
 805b0a6: 9909         	ldr	r1, [sp, #0x24]
 805b0a8: 68c9         	ldr	r1, [r1, #0xc]
 805b0aa: 4288         	cmp	r0, r1
 805b0ac: d317         	blo	0x805b0de <xStreamBufferSend+0x176> @ imm = #0x2e
 805b0ae: e7ff         	b	0x805b0b0 <xStreamBufferSend+0x148> @ imm = #-0x2
;             prvSEND_COMPLETED( pxStreamBuffer );
 805b0b0: f7ff fffe    	bl	0x805b0b0 <xStreamBufferSend+0x148> @ imm = #-0x4
 805b0b4: 9809         	ldr	r0, [sp, #0x24]
 805b0b6: 6900         	ldr	r0, [r0, #0x10]
 805b0b8: b170         	cbz	r0, 0x805b0d8 <xStreamBufferSend+0x170> @ imm = #0x1c
 805b0ba: e7ff         	b	0x805b0bc <xStreamBufferSend+0x154> @ imm = #-0x2
 805b0bc: 9809         	ldr	r0, [sp, #0x24]
 805b0be: 6900         	ldr	r0, [r0, #0x10]
 805b0c0: 4669         	mov	r1, sp
 805b0c2: 2300         	movs	r3, #0x0
 805b0c4: 9301         	str	r3, [sp, #0x4]
 805b0c6: 600b         	str	r3, [r1]
 805b0c8: 4619         	mov	r1, r3
 805b0ca: 461a         	mov	r2, r3
 805b0cc: f7ff fffe    	bl	0x805b0cc <xStreamBufferSend+0x164> @ imm = #-0x4
 805b0d0: 9801         	ldr	r0, [sp, #0x4]
 805b0d2: 9909         	ldr	r1, [sp, #0x24]
 805b0d4: 6108         	str	r0, [r1, #0x10]
 805b0d6: e7ff         	b	0x805b0d8 <xStreamBufferSend+0x170> @ imm = #-0x2
 805b0d8: f7ff fffe    	bl	0x805b0d8 <xStreamBufferSend+0x170> @ imm = #-0x4
;         }
 805b0dc: e000         	b	0x805b0e0 <xStreamBufferSend+0x178> @ imm = #0x0
 805b0de: e7ff         	b	0x805b0e0 <xStreamBufferSend+0x178> @ imm = #-0x2
;     }
 805b0e0: e000         	b	0x805b0e4 <xStreamBufferSend+0x17c> @ imm = #0x0
 805b0e2: e7ff         	b	0x805b0e4 <xStreamBufferSend+0x17c> @ imm = #-0x2
;     return xReturn;
 805b0e4: 9808         	ldr	r0, [sp, #0x20]
 805b0e6: b00e         	add	sp, #0x38
 805b0e8: bd80         	pop	{r7, pc}

0805b0ea <prvWriteMessageToBuffer>:
; {
 805b0ea: b580         	push	{r7, lr}
 805b0ec: 466f         	mov	r7, sp
 805b0ee: b088         	sub	sp, #0x20
 805b0f0: f8d7 c008    	ldr.w	r12, [r7, #0x8]
 805b0f4: 9007         	str	r0, [sp, #0x1c]
 805b0f6: 9106         	str	r1, [sp, #0x18]
 805b0f8: 9205         	str	r2, [sp, #0x14]
 805b0fa: 9304         	str	r3, [sp, #0x10]
;     size_t xNextHead = pxStreamBuffer->xHead;
 805b0fc: 9807         	ldr	r0, [sp, #0x1c]
 805b0fe: 6840         	ldr	r0, [r0, #0x4]
 805b100: 9003         	str	r0, [sp, #0xc]
;     if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 805b102: 9807         	ldr	r0, [sp, #0x1c]
 805b104: 7f00         	ldrb	r0, [r0, #0x1c]
 805b106: 07c0         	lsls	r0, r0, #0x1f
 805b108: b1e0         	cbz	r0, 0x805b144 <prvWriteMessageToBuffer+0x5a> @ imm = #0x38
 805b10a: e7ff         	b	0x805b10c <prvWriteMessageToBuffer+0x22> @ imm = #-0x2
;         xMessageLength = ( configMESSAGE_BUFFER_LENGTH_TYPE ) xDataLengthBytes;
 805b10c: 9805         	ldr	r0, [sp, #0x14]
 805b10e: 9002         	str	r0, [sp, #0x8]
;         configASSERT( ( size_t ) xMessageLength == xDataLengthBytes );
 805b110: 9802         	ldr	r0, [sp, #0x8]
 805b112: 9905         	ldr	r1, [sp, #0x14]
 805b114: 4288         	cmp	r0, r1
 805b116: d004         	beq	0x805b122 <prvWriteMessageToBuffer+0x38> @ imm = #0x8
 805b118: e7ff         	b	0x805b11a <prvWriteMessageToBuffer+0x30> @ imm = #-0x2
 805b11a: f7ff fffe    	bl	0x805b11a <prvWriteMessageToBuffer+0x30> @ imm = #-0x4
 805b11e: e7ff         	b	0x805b120 <prvWriteMessageToBuffer+0x36> @ imm = #-0x2
 805b120: e7fe         	b	0x805b120 <prvWriteMessageToBuffer+0x36> @ imm = #-0x4
;         if( xSpace >= xRequiredSpace )
 805b122: 9804         	ldr	r0, [sp, #0x10]
 805b124: 68b9         	ldr	r1, [r7, #0x8]
 805b126: 4288         	cmp	r0, r1
 805b128: d308         	blo	0x805b13c <prvWriteMessageToBuffer+0x52> @ imm = #0x10
 805b12a: e7ff         	b	0x805b12c <prvWriteMessageToBuffer+0x42> @ imm = #-0x2
;             xNextHead = prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) &( xMessageLength ), sbBYTES_TO_STORE_MESSAGE_LENGTH, xNextHead );
 805b12c: 9807         	ldr	r0, [sp, #0x1c]
 805b12e: 9b03         	ldr	r3, [sp, #0xc]
 805b130: a902         	add	r1, sp, #0x8
 805b132: 2204         	movs	r2, #0x4
 805b134: f000 fb04    	bl	0x805b740 <prvWriteBytesToBuffer> @ imm = #0x608
 805b138: 9003         	str	r0, [sp, #0xc]
;         }
 805b13a: e002         	b	0x805b142 <prvWriteMessageToBuffer+0x58> @ imm = #0x4
 805b13c: 2000         	movs	r0, #0x0
;             xDataLengthBytes = 0;
 805b13e: 9005         	str	r0, [sp, #0x14]
 805b140: e7ff         	b	0x805b142 <prvWriteMessageToBuffer+0x58> @ imm = #-0x2
;     }
 805b142: e00d         	b	0x805b160 <prvWriteMessageToBuffer+0x76> @ imm = #0x1a
;         xDataLengthBytes = configMIN( xDataLengthBytes, xSpace );
 805b144: 9805         	ldr	r0, [sp, #0x14]
 805b146: 9904         	ldr	r1, [sp, #0x10]
 805b148: 4288         	cmp	r0, r1
 805b14a: d203         	bhs	0x805b154 <prvWriteMessageToBuffer+0x6a> @ imm = #0x6
 805b14c: e7ff         	b	0x805b14e <prvWriteMessageToBuffer+0x64> @ imm = #-0x2
 805b14e: 9805         	ldr	r0, [sp, #0x14]
 805b150: 9001         	str	r0, [sp, #0x4]
 805b152: e002         	b	0x805b15a <prvWriteMessageToBuffer+0x70> @ imm = #0x4
 805b154: 9804         	ldr	r0, [sp, #0x10]
 805b156: 9001         	str	r0, [sp, #0x4]
 805b158: e7ff         	b	0x805b15a <prvWriteMessageToBuffer+0x70> @ imm = #-0x2
 805b15a: 9801         	ldr	r0, [sp, #0x4]
 805b15c: 9005         	str	r0, [sp, #0x14]
 805b15e: e7ff         	b	0x805b160 <prvWriteMessageToBuffer+0x76> @ imm = #-0x2
;     if( xDataLengthBytes != ( size_t ) 0 )
 805b160: 9805         	ldr	r0, [sp, #0x14]
 805b162: b148         	cbz	r0, 0x805b178 <prvWriteMessageToBuffer+0x8e> @ imm = #0x12
 805b164: e7ff         	b	0x805b166 <prvWriteMessageToBuffer+0x7c> @ imm = #-0x2
;         pxStreamBuffer->xHead = prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) pvTxData, xDataLengthBytes, xNextHead ); /*lint !e9079 Storage buffer is implemented as uint8_t for ease of sizing, alignment and access. */
 805b166: 9807         	ldr	r0, [sp, #0x1c]
 805b168: 9906         	ldr	r1, [sp, #0x18]
 805b16a: 9a05         	ldr	r2, [sp, #0x14]
 805b16c: 9b03         	ldr	r3, [sp, #0xc]
 805b16e: f000 fae7    	bl	0x805b740 <prvWriteBytesToBuffer> @ imm = #0x5ce
 805b172: 9907         	ldr	r1, [sp, #0x1c]
 805b174: 6048         	str	r0, [r1, #0x4]
;     }
 805b176: e7ff         	b	0x805b178 <prvWriteMessageToBuffer+0x8e> @ imm = #-0x2
;     return xDataLengthBytes;
 805b178: 9805         	ldr	r0, [sp, #0x14]
 805b17a: b008         	add	sp, #0x20
 805b17c: bd80         	pop	{r7, pc}

0805b17e <xStreamBufferSendFromISR>:
; {
 805b17e: b580         	push	{r7, lr}
 805b180: 466f         	mov	r7, sp
 805b182: b08c         	sub	sp, #0x30
 805b184: 900b         	str	r0, [sp, #0x2c]
 805b186: 910a         	str	r1, [sp, #0x28]
 805b188: 9209         	str	r2, [sp, #0x24]
 805b18a: 9308         	str	r3, [sp, #0x20]
;     StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 805b18c: 980b         	ldr	r0, [sp, #0x2c]
 805b18e: 9007         	str	r0, [sp, #0x1c]
;     size_t xRequiredSpace = xDataLengthBytes;
 805b190: 9809         	ldr	r0, [sp, #0x24]
 805b192: 9004         	str	r0, [sp, #0x10]
;     configASSERT( pvTxData );
 805b194: 980a         	ldr	r0, [sp, #0x28]
 805b196: b920         	cbnz	r0, 0x805b1a2 <xStreamBufferSendFromISR+0x24> @ imm = #0x8
 805b198: e7ff         	b	0x805b19a <xStreamBufferSendFromISR+0x1c> @ imm = #-0x2
 805b19a: f7ff fffe    	bl	0x805b19a <xStreamBufferSendFromISR+0x1c> @ imm = #-0x4
 805b19e: e7ff         	b	0x805b1a0 <xStreamBufferSendFromISR+0x22> @ imm = #-0x2
 805b1a0: e7fe         	b	0x805b1a0 <xStreamBufferSendFromISR+0x22> @ imm = #-0x4
;     configASSERT( pxStreamBuffer );
 805b1a2: 9807         	ldr	r0, [sp, #0x1c]
 805b1a4: b920         	cbnz	r0, 0x805b1b0 <xStreamBufferSendFromISR+0x32> @ imm = #0x8
 805b1a6: e7ff         	b	0x805b1a8 <xStreamBufferSendFromISR+0x2a> @ imm = #-0x2
 805b1a8: f7ff fffe    	bl	0x805b1a8 <xStreamBufferSendFromISR+0x2a> @ imm = #-0x4
 805b1ac: e7ff         	b	0x805b1ae <xStreamBufferSendFromISR+0x30> @ imm = #-0x2
 805b1ae: e7fe         	b	0x805b1ae <xStreamBufferSendFromISR+0x30> @ imm = #-0x4
;     if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 805b1b0: 9807         	ldr	r0, [sp, #0x1c]
 805b1b2: 7f00         	ldrb	r0, [r0, #0x1c]
 805b1b4: 07c0         	lsls	r0, r0, #0x1f
 805b1b6: b120         	cbz	r0, 0x805b1c2 <xStreamBufferSendFromISR+0x44> @ imm = #0x8
 805b1b8: e7ff         	b	0x805b1ba <xStreamBufferSendFromISR+0x3c> @ imm = #-0x2
;         xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
 805b1ba: 9804         	ldr	r0, [sp, #0x10]
 805b1bc: 3004         	adds	r0, #0x4
 805b1be: 9004         	str	r0, [sp, #0x10]
;     }
 805b1c0: e000         	b	0x805b1c4 <xStreamBufferSendFromISR+0x46> @ imm = #0x0
 805b1c2: e7ff         	b	0x805b1c4 <xStreamBufferSendFromISR+0x46> @ imm = #-0x2
;     xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 805b1c4: 9807         	ldr	r0, [sp, #0x1c]
 805b1c6: f7ff fffe    	bl	0x805b1c6 <xStreamBufferSendFromISR+0x48> @ imm = #-0x4
 805b1ca: 9005         	str	r0, [sp, #0x14]
;     xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
 805b1cc: 9807         	ldr	r0, [sp, #0x1c]
 805b1ce: 990a         	ldr	r1, [sp, #0x28]
 805b1d0: 9a09         	ldr	r2, [sp, #0x24]
 805b1d2: 9b05         	ldr	r3, [sp, #0x14]
 805b1d4: f8dd c010    	ldr.w	r12, [sp, #0x10]
 805b1d8: 46ee         	mov	lr, sp
 805b1da: f8ce c000    	str.w	r12, [lr]
 805b1de: f7ff ff84    	bl	0x805b0ea <prvWriteMessageToBuffer> @ imm = #-0xf8
 805b1e2: 9006         	str	r0, [sp, #0x18]
;     if( xReturn > ( size_t ) 0 )
 805b1e4: 9806         	ldr	r0, [sp, #0x18]
 805b1e6: b338         	cbz	r0, 0x805b238 <xStreamBufferSendFromISR+0xba> @ imm = #0x4e
 805b1e8: e7ff         	b	0x805b1ea <xStreamBufferSendFromISR+0x6c> @ imm = #-0x2
;         if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
 805b1ea: 9807         	ldr	r0, [sp, #0x1c]
 805b1ec: f7ff fea0    	bl	0x805af30 <prvBytesInBuffer> @ imm = #-0x2c0
 805b1f0: 9907         	ldr	r1, [sp, #0x1c]
 805b1f2: 68c9         	ldr	r1, [r1, #0xc]
 805b1f4: 4288         	cmp	r0, r1
 805b1f6: d31d         	blo	0x805b234 <xStreamBufferSendFromISR+0xb6> @ imm = #0x3a
 805b1f8: e7ff         	b	0x805b1fa <xStreamBufferSendFromISR+0x7c> @ imm = #-0x2
;             prvSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
 805b1fa: e7ff         	b	0x805b1fc <xStreamBufferSendFromISR+0x7e> @ imm = #-0x2
 805b1fc: f7ff fffe    	bl	0x805b1fc <xStreamBufferSendFromISR+0x7e> @ imm = #-0x4
 805b200: 9003         	str	r0, [sp, #0xc]
 805b202: 9807         	ldr	r0, [sp, #0x1c]
 805b204: 6900         	ldr	r0, [r0, #0x10]
 805b206: b180         	cbz	r0, 0x805b22a <xStreamBufferSendFromISR+0xac> @ imm = #0x20
 805b208: e7ff         	b	0x805b20a <xStreamBufferSendFromISR+0x8c> @ imm = #-0x2
 805b20a: 9807         	ldr	r0, [sp, #0x1c]
 805b20c: 6900         	ldr	r0, [r0, #0x10]
 805b20e: 9a08         	ldr	r2, [sp, #0x20]
 805b210: 4669         	mov	r1, sp
 805b212: 604a         	str	r2, [r1, #0x4]
 805b214: 2300         	movs	r3, #0x0
 805b216: 9302         	str	r3, [sp, #0x8]
 805b218: 600b         	str	r3, [r1]
 805b21a: 4619         	mov	r1, r3
 805b21c: 461a         	mov	r2, r3
 805b21e: f7ff fffe    	bl	0x805b21e <xStreamBufferSendFromISR+0xa0> @ imm = #-0x4
 805b222: 9802         	ldr	r0, [sp, #0x8]
 805b224: 9907         	ldr	r1, [sp, #0x1c]
 805b226: 6108         	str	r0, [r1, #0x10]
 805b228: e7ff         	b	0x805b22a <xStreamBufferSendFromISR+0xac> @ imm = #-0x2
 805b22a: 9803         	ldr	r0, [sp, #0xc]
 805b22c: f7ff fffe    	bl	0x805b22c <xStreamBufferSendFromISR+0xae> @ imm = #-0x4
 805b230: e7ff         	b	0x805b232 <xStreamBufferSendFromISR+0xb4> @ imm = #-0x2
;         }
 805b232: e000         	b	0x805b236 <xStreamBufferSendFromISR+0xb8> @ imm = #0x0
 805b234: e7ff         	b	0x805b236 <xStreamBufferSendFromISR+0xb8> @ imm = #-0x2
;     }
 805b236: e000         	b	0x805b23a <xStreamBufferSendFromISR+0xbc> @ imm = #0x0
 805b238: e7ff         	b	0x805b23a <xStreamBufferSendFromISR+0xbc> @ imm = #-0x2
;     return xReturn;
 805b23a: 9806         	ldr	r0, [sp, #0x18]
 805b23c: b00c         	add	sp, #0x30
 805b23e: bd80         	pop	{r7, pc}

0805b240 <xStreamBufferReceive>:
; {
 805b240: b580         	push	{r7, lr}
 805b242: 466f         	mov	r7, sp
 805b244: b08c         	sub	sp, #0x30
 805b246: 900b         	str	r0, [sp, #0x2c]
 805b248: 910a         	str	r1, [sp, #0x28]
 805b24a: 9209         	str	r2, [sp, #0x24]
 805b24c: 9308         	str	r3, [sp, #0x20]
;     StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 805b24e: 980b         	ldr	r0, [sp, #0x2c]
 805b250: 9007         	str	r0, [sp, #0x1c]
 805b252: 2000         	movs	r0, #0x0
;     size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
 805b254: 9006         	str	r0, [sp, #0x18]
;     configASSERT( pvRxData );
 805b256: 980a         	ldr	r0, [sp, #0x28]
 805b258: b920         	cbnz	r0, 0x805b264 <xStreamBufferReceive+0x24> @ imm = #0x8
 805b25a: e7ff         	b	0x805b25c <xStreamBufferReceive+0x1c> @ imm = #-0x2
 805b25c: f7ff fffe    	bl	0x805b25c <xStreamBufferReceive+0x1c> @ imm = #-0x4
 805b260: e7ff         	b	0x805b262 <xStreamBufferReceive+0x22> @ imm = #-0x2
 805b262: e7fe         	b	0x805b262 <xStreamBufferReceive+0x22> @ imm = #-0x4
;     configASSERT( pxStreamBuffer );
 805b264: 9807         	ldr	r0, [sp, #0x1c]
 805b266: b920         	cbnz	r0, 0x805b272 <xStreamBufferReceive+0x32> @ imm = #0x8
 805b268: e7ff         	b	0x805b26a <xStreamBufferReceive+0x2a> @ imm = #-0x2
 805b26a: f7ff fffe    	bl	0x805b26a <xStreamBufferReceive+0x2a> @ imm = #-0x4
 805b26e: e7ff         	b	0x805b270 <xStreamBufferReceive+0x30> @ imm = #-0x2
 805b270: e7fe         	b	0x805b270 <xStreamBufferReceive+0x30> @ imm = #-0x4
;     if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 805b272: 9807         	ldr	r0, [sp, #0x1c]
 805b274: 7f00         	ldrb	r0, [r0, #0x1c]
 805b276: 07c0         	lsls	r0, r0, #0x1f
 805b278: b118         	cbz	r0, 0x805b282 <xStreamBufferReceive+0x42> @ imm = #0x6
 805b27a: e7ff         	b	0x805b27c <xStreamBufferReceive+0x3c> @ imm = #-0x2
 805b27c: 2004         	movs	r0, #0x4
;         xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
 805b27e: 9004         	str	r0, [sp, #0x10]
;     }
 805b280: e002         	b	0x805b288 <xStreamBufferReceive+0x48> @ imm = #0x4
 805b282: 2000         	movs	r0, #0x0
;         xBytesToStoreMessageLength = 0;
 805b284: 9004         	str	r0, [sp, #0x10]
 805b286: e7ff         	b	0x805b288 <xStreamBufferReceive+0x48> @ imm = #-0x2
;     if( xTicksToWait != ( TickType_t ) 0 )
 805b288: 9808         	ldr	r0, [sp, #0x20]
 805b28a: b3c0         	cbz	r0, 0x805b2fe <xStreamBufferReceive+0xbe> @ imm = #0x70
 805b28c: e7ff         	b	0x805b28e <xStreamBufferReceive+0x4e> @ imm = #-0x2
;         taskENTER_CRITICAL();
 805b28e: f7ff fffe    	bl	0x805b28e <xStreamBufferReceive+0x4e> @ imm = #-0x4
;             xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 805b292: 9807         	ldr	r0, [sp, #0x1c]
 805b294: f7ff fe4c    	bl	0x805af30 <prvBytesInBuffer> @ imm = #-0x368
 805b298: 9005         	str	r0, [sp, #0x14]
;             if( xBytesAvailable <= xBytesToStoreMessageLength )
 805b29a: 9805         	ldr	r0, [sp, #0x14]
 805b29c: 9904         	ldr	r1, [sp, #0x10]
 805b29e: 4288         	cmp	r0, r1
 805b2a0: d811         	bhi	0x805b2c6 <xStreamBufferReceive+0x86> @ imm = #0x22
 805b2a2: e7ff         	b	0x805b2a4 <xStreamBufferReceive+0x64> @ imm = #-0x2
 805b2a4: 2100         	movs	r1, #0x0
;                 ( void ) xTaskNotifyStateClear( NULL );
 805b2a6: 4608         	mov	r0, r1
 805b2a8: f7ff fffe    	bl	0x805b2a8 <xStreamBufferReceive+0x68> @ imm = #-0x4
;                 configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
 805b2ac: 9807         	ldr	r0, [sp, #0x1c]
 805b2ae: 6900         	ldr	r0, [r0, #0x10]
 805b2b0: b120         	cbz	r0, 0x805b2bc <xStreamBufferReceive+0x7c> @ imm = #0x8
 805b2b2: e7ff         	b	0x805b2b4 <xStreamBufferReceive+0x74> @ imm = #-0x2
 805b2b4: f7ff fffe    	bl	0x805b2b4 <xStreamBufferReceive+0x74> @ imm = #-0x4
 805b2b8: e7ff         	b	0x805b2ba <xStreamBufferReceive+0x7a> @ imm = #-0x2
 805b2ba: e7fe         	b	0x805b2ba <xStreamBufferReceive+0x7a> @ imm = #-0x4
;                 pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
 805b2bc: f7ff fffe    	bl	0x805b2bc <xStreamBufferReceive+0x7c> @ imm = #-0x4
 805b2c0: 9907         	ldr	r1, [sp, #0x1c]
 805b2c2: 6108         	str	r0, [r1, #0x10]
;             }
 805b2c4: e000         	b	0x805b2c8 <xStreamBufferReceive+0x88> @ imm = #0x0
 805b2c6: e7ff         	b	0x805b2c8 <xStreamBufferReceive+0x88> @ imm = #-0x2
;         taskEXIT_CRITICAL();
 805b2c8: f7ff fffe    	bl	0x805b2c8 <xStreamBufferReceive+0x88> @ imm = #-0x4
;         if( xBytesAvailable <= xBytesToStoreMessageLength )
 805b2cc: 9805         	ldr	r0, [sp, #0x14]
 805b2ce: 9904         	ldr	r1, [sp, #0x10]
 805b2d0: 4288         	cmp	r0, r1
 805b2d2: d812         	bhi	0x805b2fa <xStreamBufferReceive+0xba> @ imm = #0x24
 805b2d4: e7ff         	b	0x805b2d6 <xStreamBufferReceive+0x96> @ imm = #-0x2
;             ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 805b2d6: 9808         	ldr	r0, [sp, #0x20]
 805b2d8: 4669         	mov	r1, sp
 805b2da: 6008         	str	r0, [r1]
 805b2dc: 2300         	movs	r3, #0x0
 805b2de: 9303         	str	r3, [sp, #0xc]
 805b2e0: 4618         	mov	r0, r3
 805b2e2: 4619         	mov	r1, r3
 805b2e4: 461a         	mov	r2, r3
 805b2e6: f7ff fffe    	bl	0x805b2e6 <xStreamBufferReceive+0xa6> @ imm = #-0x4
;             pxStreamBuffer->xTaskWaitingToReceive = NULL;
 805b2ea: 9803         	ldr	r0, [sp, #0xc]
 805b2ec: 9907         	ldr	r1, [sp, #0x1c]
 805b2ee: 6108         	str	r0, [r1, #0x10]
;             xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 805b2f0: 9807         	ldr	r0, [sp, #0x1c]
 805b2f2: f7ff fe1d    	bl	0x805af30 <prvBytesInBuffer> @ imm = #-0x3c6
 805b2f6: 9005         	str	r0, [sp, #0x14]
;         }
 805b2f8: e000         	b	0x805b2fc <xStreamBufferReceive+0xbc> @ imm = #0x0
 805b2fa: e7ff         	b	0x805b2fc <xStreamBufferReceive+0xbc> @ imm = #-0x2
;     }
 805b2fc: e004         	b	0x805b308 <xStreamBufferReceive+0xc8> @ imm = #0x8
;         xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 805b2fe: 9807         	ldr	r0, [sp, #0x1c]
 805b300: f7ff fe16    	bl	0x805af30 <prvBytesInBuffer> @ imm = #-0x3d4
 805b304: 9005         	str	r0, [sp, #0x14]
 805b306: e7ff         	b	0x805b308 <xStreamBufferReceive+0xc8> @ imm = #-0x2
;     if( xBytesAvailable > xBytesToStoreMessageLength )
 805b308: 9805         	ldr	r0, [sp, #0x14]
 805b30a: 9904         	ldr	r1, [sp, #0x10]
 805b30c: 4288         	cmp	r0, r1
 805b30e: d923         	bls	0x805b358 <xStreamBufferReceive+0x118> @ imm = #0x46
 805b310: e7ff         	b	0x805b312 <xStreamBufferReceive+0xd2> @ imm = #-0x2
;         xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable );
 805b312: 9807         	ldr	r0, [sp, #0x1c]
 805b314: 990a         	ldr	r1, [sp, #0x28]
 805b316: 9a09         	ldr	r2, [sp, #0x24]
 805b318: 9b05         	ldr	r3, [sp, #0x14]
 805b31a: f000 f821    	bl	0x805b360 <prvReadMessageFromBuffer> @ imm = #0x42
 805b31e: 9006         	str	r0, [sp, #0x18]
;         if( xReceivedLength != ( size_t ) 0 )
 805b320: 9806         	ldr	r0, [sp, #0x18]
 805b322: b1b8         	cbz	r0, 0x805b354 <xStreamBufferReceive+0x114> @ imm = #0x2e
 805b324: e7ff         	b	0x805b326 <xStreamBufferReceive+0xe6> @ imm = #-0x2
;             prvRECEIVE_COMPLETED( xStreamBuffer );
 805b326: f7ff fffe    	bl	0x805b326 <xStreamBufferReceive+0xe6> @ imm = #-0x4
 805b32a: 980b         	ldr	r0, [sp, #0x2c]
 805b32c: 6940         	ldr	r0, [r0, #0x14]
 805b32e: b170         	cbz	r0, 0x805b34e <xStreamBufferReceive+0x10e> @ imm = #0x1c
 805b330: e7ff         	b	0x805b332 <xStreamBufferReceive+0xf2> @ imm = #-0x2
 805b332: 980b         	ldr	r0, [sp, #0x2c]
 805b334: 6940         	ldr	r0, [r0, #0x14]
 805b336: 4669         	mov	r1, sp
 805b338: 2300         	movs	r3, #0x0
 805b33a: 9302         	str	r3, [sp, #0x8]
 805b33c: 600b         	str	r3, [r1]
 805b33e: 4619         	mov	r1, r3
 805b340: 461a         	mov	r2, r3
 805b342: f7ff fffe    	bl	0x805b342 <xStreamBufferReceive+0x102> @ imm = #-0x4
 805b346: 9802         	ldr	r0, [sp, #0x8]
 805b348: 990b         	ldr	r1, [sp, #0x2c]
 805b34a: 6148         	str	r0, [r1, #0x14]
 805b34c: e7ff         	b	0x805b34e <xStreamBufferReceive+0x10e> @ imm = #-0x2
 805b34e: f7ff fffe    	bl	0x805b34e <xStreamBufferReceive+0x10e> @ imm = #-0x4
;         }
 805b352: e000         	b	0x805b356 <xStreamBufferReceive+0x116> @ imm = #0x0
 805b354: e7ff         	b	0x805b356 <xStreamBufferReceive+0x116> @ imm = #-0x2
;     }
 805b356: e000         	b	0x805b35a <xStreamBufferReceive+0x11a> @ imm = #0x0
 805b358: e7ff         	b	0x805b35a <xStreamBufferReceive+0x11a> @ imm = #-0x2
;     return xReceivedLength;
 805b35a: 9806         	ldr	r0, [sp, #0x18]
 805b35c: b00c         	add	sp, #0x30
 805b35e: bd80         	pop	{r7, pc}

0805b360 <prvReadMessageFromBuffer>:
; {
 805b360: b580         	push	{r7, lr}
 805b362: 466f         	mov	r7, sp
 805b364: b08a         	sub	sp, #0x28
 805b366: 9009         	str	r0, [sp, #0x24]
 805b368: 9108         	str	r1, [sp, #0x20]
 805b36a: 9207         	str	r2, [sp, #0x1c]
 805b36c: 9306         	str	r3, [sp, #0x18]
;     size_t xNextTail = pxStreamBuffer->xTail;
 805b36e: 9809         	ldr	r0, [sp, #0x24]
 805b370: 6800         	ldr	r0, [r0]
 805b372: 9002         	str	r0, [sp, #0x8]
;     if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 805b374: 9809         	ldr	r0, [sp, #0x24]
 805b376: 7f00         	ldrb	r0, [r0, #0x1c]
 805b378: 07c0         	lsls	r0, r0, #0x1f
 805b37a: b1b0         	cbz	r0, 0x805b3aa <prvReadMessageFromBuffer+0x4a> @ imm = #0x2c
 805b37c: e7ff         	b	0x805b37e <prvReadMessageFromBuffer+0x1e> @ imm = #-0x2
;         xNextTail = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, sbBYTES_TO_STORE_MESSAGE_LENGTH, xNextTail );
 805b37e: 9809         	ldr	r0, [sp, #0x24]
 805b380: 9b02         	ldr	r3, [sp, #0x8]
 805b382: a903         	add	r1, sp, #0xc
 805b384: 2204         	movs	r2, #0x4
 805b386: f000 f863    	bl	0x805b450 <prvReadBytesFromBuffer> @ imm = #0xc6
 805b38a: 9002         	str	r0, [sp, #0x8]
;         xNextMessageLength = ( size_t ) xTempNextMessageLength;
 805b38c: 9803         	ldr	r0, [sp, #0xc]
 805b38e: 9004         	str	r0, [sp, #0x10]
;         xBytesAvailable -= sbBYTES_TO_STORE_MESSAGE_LENGTH;
 805b390: 9806         	ldr	r0, [sp, #0x18]
 805b392: 3804         	subs	r0, #0x4
 805b394: 9006         	str	r0, [sp, #0x18]
;         if( xNextMessageLength > xBufferLengthBytes )
 805b396: 9804         	ldr	r0, [sp, #0x10]
 805b398: 9907         	ldr	r1, [sp, #0x1c]
 805b39a: 4288         	cmp	r0, r1
 805b39c: d903         	bls	0x805b3a6 <prvReadMessageFromBuffer+0x46> @ imm = #0x6
 805b39e: e7ff         	b	0x805b3a0 <prvReadMessageFromBuffer+0x40> @ imm = #-0x2
 805b3a0: 2000         	movs	r0, #0x0
;             xNextMessageLength = 0;
 805b3a2: 9004         	str	r0, [sp, #0x10]
;         }
 805b3a4: e000         	b	0x805b3a8 <prvReadMessageFromBuffer+0x48> @ imm = #0x0
 805b3a6: e7ff         	b	0x805b3a8 <prvReadMessageFromBuffer+0x48> @ imm = #-0x2
;     }
 805b3a8: e002         	b	0x805b3b0 <prvReadMessageFromBuffer+0x50> @ imm = #0x4
;         xNextMessageLength = xBufferLengthBytes;
 805b3aa: 9807         	ldr	r0, [sp, #0x1c]
 805b3ac: 9004         	str	r0, [sp, #0x10]
 805b3ae: e7ff         	b	0x805b3b0 <prvReadMessageFromBuffer+0x50> @ imm = #-0x2
;     xCount = configMIN( xNextMessageLength, xBytesAvailable );
 805b3b0: 9804         	ldr	r0, [sp, #0x10]
 805b3b2: 9906         	ldr	r1, [sp, #0x18]
 805b3b4: 4288         	cmp	r0, r1
 805b3b6: d203         	bhs	0x805b3c0 <prvReadMessageFromBuffer+0x60> @ imm = #0x6
 805b3b8: e7ff         	b	0x805b3ba <prvReadMessageFromBuffer+0x5a> @ imm = #-0x2
 805b3ba: 9804         	ldr	r0, [sp, #0x10]
 805b3bc: 9001         	str	r0, [sp, #0x4]
 805b3be: e002         	b	0x805b3c6 <prvReadMessageFromBuffer+0x66> @ imm = #0x4
 805b3c0: 9806         	ldr	r0, [sp, #0x18]
 805b3c2: 9001         	str	r0, [sp, #0x4]
 805b3c4: e7ff         	b	0x805b3c6 <prvReadMessageFromBuffer+0x66> @ imm = #-0x2
 805b3c6: 9801         	ldr	r0, [sp, #0x4]
 805b3c8: 9005         	str	r0, [sp, #0x14]
;     if( xCount != ( size_t ) 0 )
 805b3ca: 9805         	ldr	r0, [sp, #0x14]
 805b3cc: b148         	cbz	r0, 0x805b3e2 <prvReadMessageFromBuffer+0x82> @ imm = #0x12
 805b3ce: e7ff         	b	0x805b3d0 <prvReadMessageFromBuffer+0x70> @ imm = #-0x2
;         pxStreamBuffer->xTail = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xCount, xNextTail ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
 805b3d0: 9809         	ldr	r0, [sp, #0x24]
 805b3d2: 9908         	ldr	r1, [sp, #0x20]
 805b3d4: 9a05         	ldr	r2, [sp, #0x14]
 805b3d6: 9b02         	ldr	r3, [sp, #0x8]
 805b3d8: f000 f83a    	bl	0x805b450 <prvReadBytesFromBuffer> @ imm = #0x74
 805b3dc: 9909         	ldr	r1, [sp, #0x24]
 805b3de: 6008         	str	r0, [r1]
;     }
 805b3e0: e7ff         	b	0x805b3e2 <prvReadMessageFromBuffer+0x82> @ imm = #-0x2
;     return xCount;
 805b3e2: 9805         	ldr	r0, [sp, #0x14]
 805b3e4: b00a         	add	sp, #0x28
 805b3e6: bd80         	pop	{r7, pc}

0805b3e8 <xStreamBufferNextMessageLengthBytes>:
; {
 805b3e8: b580         	push	{r7, lr}
 805b3ea: 466f         	mov	r7, sp
 805b3ec: b086         	sub	sp, #0x18
 805b3ee: 9005         	str	r0, [sp, #0x14]
;     StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 805b3f0: 9805         	ldr	r0, [sp, #0x14]
 805b3f2: 9004         	str	r0, [sp, #0x10]
;     configASSERT( pxStreamBuffer );
 805b3f4: 9804         	ldr	r0, [sp, #0x10]
 805b3f6: b920         	cbnz	r0, 0x805b402 <xStreamBufferNextMessageLengthBytes+0x1a> @ imm = #0x8
 805b3f8: e7ff         	b	0x805b3fa <xStreamBufferNextMessageLengthBytes+0x12> @ imm = #-0x2
 805b3fa: f7ff fffe    	bl	0x805b3fa <xStreamBufferNextMessageLengthBytes+0x12> @ imm = #-0x4
 805b3fe: e7ff         	b	0x805b400 <xStreamBufferNextMessageLengthBytes+0x18> @ imm = #-0x2
 805b400: e7fe         	b	0x805b400 <xStreamBufferNextMessageLengthBytes+0x18> @ imm = #-0x4
;     if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 805b402: 9804         	ldr	r0, [sp, #0x10]
 805b404: 7f00         	ldrb	r0, [r0, #0x1c]
 805b406: 07c0         	lsls	r0, r0, #0x1f
 805b408: b1e0         	cbz	r0, 0x805b444 <xStreamBufferNextMessageLengthBytes+0x5c> @ imm = #0x38
 805b40a: e7ff         	b	0x805b40c <xStreamBufferNextMessageLengthBytes+0x24> @ imm = #-0x2
;         xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 805b40c: 9804         	ldr	r0, [sp, #0x10]
 805b40e: f7ff fd8f    	bl	0x805af30 <prvBytesInBuffer> @ imm = #-0x4e2
 805b412: 9002         	str	r0, [sp, #0x8]
;         if( xBytesAvailable > sbBYTES_TO_STORE_MESSAGE_LENGTH )
 805b414: 9802         	ldr	r0, [sp, #0x8]
 805b416: 2805         	cmp	r0, #0x5
 805b418: d309         	blo	0x805b42e <xStreamBufferNextMessageLengthBytes+0x46> @ imm = #0x12
 805b41a: e7ff         	b	0x805b41c <xStreamBufferNextMessageLengthBytes+0x34> @ imm = #-0x2
;             ( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempReturn, sbBYTES_TO_STORE_MESSAGE_LENGTH, pxStreamBuffer->xTail );
 805b41c: 9804         	ldr	r0, [sp, #0x10]
 805b41e: 6803         	ldr	r3, [r0]
 805b420: a901         	add	r1, sp, #0x4
 805b422: 2204         	movs	r2, #0x4
 805b424: f000 f814    	bl	0x805b450 <prvReadBytesFromBuffer> @ imm = #0x28
;             xReturn = ( size_t ) xTempReturn;
 805b428: 9801         	ldr	r0, [sp, #0x4]
 805b42a: 9003         	str	r0, [sp, #0xc]
;         }
 805b42c: e009         	b	0x805b442 <xStreamBufferNextMessageLengthBytes+0x5a> @ imm = #0x12
;             configASSERT( xBytesAvailable == 0 );
 805b42e: 9802         	ldr	r0, [sp, #0x8]
 805b430: b120         	cbz	r0, 0x805b43c <xStreamBufferNextMessageLengthBytes+0x54> @ imm = #0x8
 805b432: e7ff         	b	0x805b434 <xStreamBufferNextMessageLengthBytes+0x4c> @ imm = #-0x2
 805b434: f7ff fffe    	bl	0x805b434 <xStreamBufferNextMessageLengthBytes+0x4c> @ imm = #-0x4
 805b438: e7ff         	b	0x805b43a <xStreamBufferNextMessageLengthBytes+0x52> @ imm = #-0x2
 805b43a: e7fe         	b	0x805b43a <xStreamBufferNextMessageLengthBytes+0x52> @ imm = #-0x4
 805b43c: 2000         	movs	r0, #0x0
;             xReturn = 0;
 805b43e: 9003         	str	r0, [sp, #0xc]
 805b440: e7ff         	b	0x805b442 <xStreamBufferNextMessageLengthBytes+0x5a> @ imm = #-0x2
;     }
 805b442: e002         	b	0x805b44a <xStreamBufferNextMessageLengthBytes+0x62> @ imm = #0x4
 805b444: 2000         	movs	r0, #0x0
;         xReturn = 0;
 805b446: 9003         	str	r0, [sp, #0xc]
 805b448: e7ff         	b	0x805b44a <xStreamBufferNextMessageLengthBytes+0x62> @ imm = #-0x2
;     return xReturn;
 805b44a: 9803         	ldr	r0, [sp, #0xc]
 805b44c: b006         	add	sp, #0x18
 805b44e: bd80         	pop	{r7, pc}

0805b450 <prvReadBytesFromBuffer>:
; {
 805b450: b580         	push	{r7, lr}
 805b452: 466f         	mov	r7, sp
 805b454: b086         	sub	sp, #0x18
 805b456: 9005         	str	r0, [sp, #0x14]
 805b458: 9104         	str	r1, [sp, #0x10]
 805b45a: 9203         	str	r2, [sp, #0xc]
 805b45c: 9302         	str	r3, [sp, #0x8]
;     configASSERT( xCount != ( size_t ) 0 );
 805b45e: 9803         	ldr	r0, [sp, #0xc]
 805b460: b920         	cbnz	r0, 0x805b46c <prvReadBytesFromBuffer+0x1c> @ imm = #0x8
 805b462: e7ff         	b	0x805b464 <prvReadBytesFromBuffer+0x14> @ imm = #-0x2
 805b464: f7ff fffe    	bl	0x805b464 <prvReadBytesFromBuffer+0x14> @ imm = #-0x4
 805b468: e7ff         	b	0x805b46a <prvReadBytesFromBuffer+0x1a> @ imm = #-0x2
 805b46a: e7fe         	b	0x805b46a <prvReadBytesFromBuffer+0x1a> @ imm = #-0x4
;     xFirstLength = configMIN( pxStreamBuffer->xLength - xTail, xCount );
 805b46c: 9805         	ldr	r0, [sp, #0x14]
 805b46e: 6880         	ldr	r0, [r0, #0x8]
 805b470: 9902         	ldr	r1, [sp, #0x8]
 805b472: 1a40         	subs	r0, r0, r1
 805b474: 9903         	ldr	r1, [sp, #0xc]
 805b476: 4288         	cmp	r0, r1
 805b478: d206         	bhs	0x805b488 <prvReadBytesFromBuffer+0x38> @ imm = #0xc
 805b47a: e7ff         	b	0x805b47c <prvReadBytesFromBuffer+0x2c> @ imm = #-0x2
 805b47c: 9805         	ldr	r0, [sp, #0x14]
 805b47e: 6880         	ldr	r0, [r0, #0x8]
 805b480: 9902         	ldr	r1, [sp, #0x8]
 805b482: 1a40         	subs	r0, r0, r1
 805b484: 9000         	str	r0, [sp]
 805b486: e002         	b	0x805b48e <prvReadBytesFromBuffer+0x3e> @ imm = #0x4
 805b488: 9803         	ldr	r0, [sp, #0xc]
 805b48a: 9000         	str	r0, [sp]
 805b48c: e7ff         	b	0x805b48e <prvReadBytesFromBuffer+0x3e> @ imm = #-0x2
 805b48e: 9800         	ldr	r0, [sp]
 805b490: 9001         	str	r0, [sp, #0x4]
;     configASSERT( xFirstLength <= xCount );
 805b492: 9801         	ldr	r0, [sp, #0x4]
 805b494: 9903         	ldr	r1, [sp, #0xc]
 805b496: 4288         	cmp	r0, r1
 805b498: d904         	bls	0x805b4a4 <prvReadBytesFromBuffer+0x54> @ imm = #0x8
 805b49a: e7ff         	b	0x805b49c <prvReadBytesFromBuffer+0x4c> @ imm = #-0x2
 805b49c: f7ff fffe    	bl	0x805b49c <prvReadBytesFromBuffer+0x4c> @ imm = #-0x4
 805b4a0: e7ff         	b	0x805b4a2 <prvReadBytesFromBuffer+0x52> @ imm = #-0x2
 805b4a2: e7fe         	b	0x805b4a2 <prvReadBytesFromBuffer+0x52> @ imm = #-0x4
;     configASSERT( ( xTail + xFirstLength ) <= pxStreamBuffer->xLength );
 805b4a4: 9802         	ldr	r0, [sp, #0x8]
 805b4a6: 9901         	ldr	r1, [sp, #0x4]
 805b4a8: 4408         	add	r0, r1
 805b4aa: 9905         	ldr	r1, [sp, #0x14]
 805b4ac: 6889         	ldr	r1, [r1, #0x8]
 805b4ae: 4288         	cmp	r0, r1
 805b4b0: d904         	bls	0x805b4bc <prvReadBytesFromBuffer+0x6c> @ imm = #0x8
 805b4b2: e7ff         	b	0x805b4b4 <prvReadBytesFromBuffer+0x64> @ imm = #-0x2
 805b4b4: f7ff fffe    	bl	0x805b4b4 <prvReadBytesFromBuffer+0x64> @ imm = #-0x4
 805b4b8: e7ff         	b	0x805b4ba <prvReadBytesFromBuffer+0x6a> @ imm = #-0x2
 805b4ba: e7fe         	b	0x805b4ba <prvReadBytesFromBuffer+0x6a> @ imm = #-0x4
;     ( void ) memcpy( ( void * ) pucData, ( const void * ) &( pxStreamBuffer->pucBuffer[ xTail ] ), xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 805b4bc: 9804         	ldr	r0, [sp, #0x10]
 805b4be: 9905         	ldr	r1, [sp, #0x14]
 805b4c0: 6989         	ldr	r1, [r1, #0x18]
 805b4c2: 9a02         	ldr	r2, [sp, #0x8]
 805b4c4: 4411         	add	r1, r2
 805b4c6: 9a01         	ldr	r2, [sp, #0x4]
 805b4c8: f7ff fffe    	bl	0x805b4c8 <prvReadBytesFromBuffer+0x78> @ imm = #-0x4
;     if( xCount > xFirstLength )
 805b4cc: 9803         	ldr	r0, [sp, #0xc]
 805b4ce: 9901         	ldr	r1, [sp, #0x4]
 805b4d0: 4288         	cmp	r0, r1
 805b4d2: d90a         	bls	0x805b4ea <prvReadBytesFromBuffer+0x9a> @ imm = #0x14
 805b4d4: e7ff         	b	0x805b4d6 <prvReadBytesFromBuffer+0x86> @ imm = #-0x2
;         ( void ) memcpy( ( void * ) &( pucData[ xFirstLength ] ), ( void * ) ( pxStreamBuffer->pucBuffer ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 805b4d6: 9804         	ldr	r0, [sp, #0x10]
 805b4d8: 9b01         	ldr	r3, [sp, #0x4]
 805b4da: 4418         	add	r0, r3
 805b4dc: 9905         	ldr	r1, [sp, #0x14]
 805b4de: 6989         	ldr	r1, [r1, #0x18]
 805b4e0: 9a03         	ldr	r2, [sp, #0xc]
 805b4e2: 1ad2         	subs	r2, r2, r3
 805b4e4: f7ff fffe    	bl	0x805b4e4 <prvReadBytesFromBuffer+0x94> @ imm = #-0x4
;     }
 805b4e8: e000         	b	0x805b4ec <prvReadBytesFromBuffer+0x9c> @ imm = #0x0
 805b4ea: e7ff         	b	0x805b4ec <prvReadBytesFromBuffer+0x9c> @ imm = #-0x2
;     xTail += xCount;
 805b4ec: 9903         	ldr	r1, [sp, #0xc]
 805b4ee: 9802         	ldr	r0, [sp, #0x8]
 805b4f0: 4408         	add	r0, r1
 805b4f2: 9002         	str	r0, [sp, #0x8]
;     if( xTail >= pxStreamBuffer->xLength )
 805b4f4: 9802         	ldr	r0, [sp, #0x8]
 805b4f6: 9905         	ldr	r1, [sp, #0x14]
 805b4f8: 6889         	ldr	r1, [r1, #0x8]
 805b4fa: 4288         	cmp	r0, r1
 805b4fc: d306         	blo	0x805b50c <prvReadBytesFromBuffer+0xbc> @ imm = #0xc
 805b4fe: e7ff         	b	0x805b500 <prvReadBytesFromBuffer+0xb0> @ imm = #-0x2
;         xTail -= pxStreamBuffer->xLength;
 805b500: 9805         	ldr	r0, [sp, #0x14]
 805b502: 6881         	ldr	r1, [r0, #0x8]
 805b504: 9802         	ldr	r0, [sp, #0x8]
 805b506: 1a40         	subs	r0, r0, r1
 805b508: 9002         	str	r0, [sp, #0x8]
;     }
 805b50a: e7ff         	b	0x805b50c <prvReadBytesFromBuffer+0xbc> @ imm = #-0x2
;     return xTail;
 805b50c: 9802         	ldr	r0, [sp, #0x8]
 805b50e: b006         	add	sp, #0x18
 805b510: bd80         	pop	{r7, pc}

0805b512 <xStreamBufferReceiveFromISR>:
; {
 805b512: b580         	push	{r7, lr}
 805b514: 466f         	mov	r7, sp
 805b516: b08c         	sub	sp, #0x30
 805b518: 900b         	str	r0, [sp, #0x2c]
 805b51a: 910a         	str	r1, [sp, #0x28]
 805b51c: 9209         	str	r2, [sp, #0x24]
 805b51e: 9308         	str	r3, [sp, #0x20]
;     StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 805b520: 980b         	ldr	r0, [sp, #0x2c]
 805b522: 9007         	str	r0, [sp, #0x1c]
 805b524: 2000         	movs	r0, #0x0
;     size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
 805b526: 9006         	str	r0, [sp, #0x18]
;     configASSERT( pvRxData );
 805b528: 980a         	ldr	r0, [sp, #0x28]
 805b52a: b920         	cbnz	r0, 0x805b536 <xStreamBufferReceiveFromISR+0x24> @ imm = #0x8
 805b52c: e7ff         	b	0x805b52e <xStreamBufferReceiveFromISR+0x1c> @ imm = #-0x2
 805b52e: f7ff fffe    	bl	0x805b52e <xStreamBufferReceiveFromISR+0x1c> @ imm = #-0x4
 805b532: e7ff         	b	0x805b534 <xStreamBufferReceiveFromISR+0x22> @ imm = #-0x2
 805b534: e7fe         	b	0x805b534 <xStreamBufferReceiveFromISR+0x22> @ imm = #-0x4
;     configASSERT( pxStreamBuffer );
 805b536: 9807         	ldr	r0, [sp, #0x1c]
 805b538: b920         	cbnz	r0, 0x805b544 <xStreamBufferReceiveFromISR+0x32> @ imm = #0x8
 805b53a: e7ff         	b	0x805b53c <xStreamBufferReceiveFromISR+0x2a> @ imm = #-0x2
 805b53c: f7ff fffe    	bl	0x805b53c <xStreamBufferReceiveFromISR+0x2a> @ imm = #-0x4
 805b540: e7ff         	b	0x805b542 <xStreamBufferReceiveFromISR+0x30> @ imm = #-0x2
 805b542: e7fe         	b	0x805b542 <xStreamBufferReceiveFromISR+0x30> @ imm = #-0x4
;     if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 805b544: 9807         	ldr	r0, [sp, #0x1c]
 805b546: 7f00         	ldrb	r0, [r0, #0x1c]
 805b548: 07c0         	lsls	r0, r0, #0x1f
 805b54a: b118         	cbz	r0, 0x805b554 <xStreamBufferReceiveFromISR+0x42> @ imm = #0x6
 805b54c: e7ff         	b	0x805b54e <xStreamBufferReceiveFromISR+0x3c> @ imm = #-0x2
 805b54e: 2004         	movs	r0, #0x4
;         xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
 805b550: 9004         	str	r0, [sp, #0x10]
;     }
 805b552: e002         	b	0x805b55a <xStreamBufferReceiveFromISR+0x48> @ imm = #0x4
 805b554: 2000         	movs	r0, #0x0
;         xBytesToStoreMessageLength = 0;
 805b556: 9004         	str	r0, [sp, #0x10]
 805b558: e7ff         	b	0x805b55a <xStreamBufferReceiveFromISR+0x48> @ imm = #-0x2
;     xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 805b55a: 9807         	ldr	r0, [sp, #0x1c]
 805b55c: f7ff fce8    	bl	0x805af30 <prvBytesInBuffer> @ imm = #-0x630
 805b560: 9005         	str	r0, [sp, #0x14]
;     if( xBytesAvailable > xBytesToStoreMessageLength )
 805b562: 9805         	ldr	r0, [sp, #0x14]
 805b564: 9904         	ldr	r1, [sp, #0x10]
 805b566: 4288         	cmp	r0, r1
 805b568: d929         	bls	0x805b5be <xStreamBufferReceiveFromISR+0xac> @ imm = #0x52
 805b56a: e7ff         	b	0x805b56c <xStreamBufferReceiveFromISR+0x5a> @ imm = #-0x2
;         xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable );
 805b56c: 9807         	ldr	r0, [sp, #0x1c]
 805b56e: 990a         	ldr	r1, [sp, #0x28]
 805b570: 9a09         	ldr	r2, [sp, #0x24]
 805b572: 9b05         	ldr	r3, [sp, #0x14]
 805b574: f7ff fef4    	bl	0x805b360 <prvReadMessageFromBuffer> @ imm = #-0x218
 805b578: 9006         	str	r0, [sp, #0x18]
;         if( xReceivedLength != ( size_t ) 0 )
 805b57a: 9806         	ldr	r0, [sp, #0x18]
 805b57c: b1e8         	cbz	r0, 0x805b5ba <xStreamBufferReceiveFromISR+0xa8> @ imm = #0x3a
 805b57e: e7ff         	b	0x805b580 <xStreamBufferReceiveFromISR+0x6e> @ imm = #-0x2
;             prvRECEIVE_COMPLETED_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
 805b580: e7ff         	b	0x805b582 <xStreamBufferReceiveFromISR+0x70> @ imm = #-0x2
 805b582: f7ff fffe    	bl	0x805b582 <xStreamBufferReceiveFromISR+0x70> @ imm = #-0x4
 805b586: 9003         	str	r0, [sp, #0xc]
 805b588: 9807         	ldr	r0, [sp, #0x1c]
 805b58a: 6940         	ldr	r0, [r0, #0x14]
 805b58c: b180         	cbz	r0, 0x805b5b0 <xStreamBufferReceiveFromISR+0x9e> @ imm = #0x20
 805b58e: e7ff         	b	0x805b590 <xStreamBufferReceiveFromISR+0x7e> @ imm = #-0x2
 805b590: 9807         	ldr	r0, [sp, #0x1c]
 805b592: 6940         	ldr	r0, [r0, #0x14]
 805b594: 9a08         	ldr	r2, [sp, #0x20]
 805b596: 4669         	mov	r1, sp
 805b598: 604a         	str	r2, [r1, #0x4]
 805b59a: 2300         	movs	r3, #0x0
 805b59c: 9302         	str	r3, [sp, #0x8]
 805b59e: 600b         	str	r3, [r1]
 805b5a0: 4619         	mov	r1, r3
 805b5a2: 461a         	mov	r2, r3
 805b5a4: f7ff fffe    	bl	0x805b5a4 <xStreamBufferReceiveFromISR+0x92> @ imm = #-0x4
 805b5a8: 9802         	ldr	r0, [sp, #0x8]
 805b5aa: 9907         	ldr	r1, [sp, #0x1c]
 805b5ac: 6148         	str	r0, [r1, #0x14]
 805b5ae: e7ff         	b	0x805b5b0 <xStreamBufferReceiveFromISR+0x9e> @ imm = #-0x2
 805b5b0: 9803         	ldr	r0, [sp, #0xc]
 805b5b2: f7ff fffe    	bl	0x805b5b2 <xStreamBufferReceiveFromISR+0xa0> @ imm = #-0x4
 805b5b6: e7ff         	b	0x805b5b8 <xStreamBufferReceiveFromISR+0xa6> @ imm = #-0x2
;         }
 805b5b8: e000         	b	0x805b5bc <xStreamBufferReceiveFromISR+0xaa> @ imm = #0x0
 805b5ba: e7ff         	b	0x805b5bc <xStreamBufferReceiveFromISR+0xaa> @ imm = #-0x2
;     }
 805b5bc: e000         	b	0x805b5c0 <xStreamBufferReceiveFromISR+0xae> @ imm = #0x0
 805b5be: e7ff         	b	0x805b5c0 <xStreamBufferReceiveFromISR+0xae> @ imm = #-0x2
;     return xReceivedLength;
 805b5c0: 9806         	ldr	r0, [sp, #0x18]
 805b5c2: b00c         	add	sp, #0x30
 805b5c4: bd80         	pop	{r7, pc}

0805b5c6 <xStreamBufferIsEmpty>:
; {
 805b5c6: b580         	push	{r7, lr}
 805b5c8: 466f         	mov	r7, sp
 805b5ca: b084         	sub	sp, #0x10
 805b5cc: 9003         	str	r0, [sp, #0xc]
;     const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 805b5ce: 9803         	ldr	r0, [sp, #0xc]
 805b5d0: 9002         	str	r0, [sp, #0x8]
;     configASSERT( pxStreamBuffer );
 805b5d2: 9802         	ldr	r0, [sp, #0x8]
 805b5d4: b920         	cbnz	r0, 0x805b5e0 <xStreamBufferIsEmpty+0x1a> @ imm = #0x8
 805b5d6: e7ff         	b	0x805b5d8 <xStreamBufferIsEmpty+0x12> @ imm = #-0x2
 805b5d8: f7ff fffe    	bl	0x805b5d8 <xStreamBufferIsEmpty+0x12> @ imm = #-0x4
 805b5dc: e7ff         	b	0x805b5de <xStreamBufferIsEmpty+0x18> @ imm = #-0x2
 805b5de: e7fe         	b	0x805b5de <xStreamBufferIsEmpty+0x18> @ imm = #-0x4
;     xTail = pxStreamBuffer->xTail;
 805b5e0: 9802         	ldr	r0, [sp, #0x8]
 805b5e2: 6800         	ldr	r0, [r0]
 805b5e4: 9000         	str	r0, [sp]
;     if( pxStreamBuffer->xHead == xTail )
 805b5e6: 9802         	ldr	r0, [sp, #0x8]
 805b5e8: 6840         	ldr	r0, [r0, #0x4]
 805b5ea: 9900         	ldr	r1, [sp]
 805b5ec: 4288         	cmp	r0, r1
 805b5ee: d103         	bne	0x805b5f8 <xStreamBufferIsEmpty+0x32> @ imm = #0x6
 805b5f0: e7ff         	b	0x805b5f2 <xStreamBufferIsEmpty+0x2c> @ imm = #-0x2
 805b5f2: 2001         	movs	r0, #0x1
;         xReturn = pdTRUE;
 805b5f4: 9001         	str	r0, [sp, #0x4]
;     }
 805b5f6: e002         	b	0x805b5fe <xStreamBufferIsEmpty+0x38> @ imm = #0x4
 805b5f8: 2000         	movs	r0, #0x0
;         xReturn = pdFALSE;
 805b5fa: 9001         	str	r0, [sp, #0x4]
 805b5fc: e7ff         	b	0x805b5fe <xStreamBufferIsEmpty+0x38> @ imm = #-0x2
;     return xReturn;
 805b5fe: 9801         	ldr	r0, [sp, #0x4]
 805b600: b004         	add	sp, #0x10
 805b602: bd80         	pop	{r7, pc}

0805b604 <xStreamBufferIsFull>:
; {
 805b604: b580         	push	{r7, lr}
 805b606: 466f         	mov	r7, sp
 805b608: b084         	sub	sp, #0x10
 805b60a: 9003         	str	r0, [sp, #0xc]
;     const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 805b60c: 9803         	ldr	r0, [sp, #0xc]
 805b60e: 9000         	str	r0, [sp]
;     configASSERT( pxStreamBuffer );
 805b610: 9800         	ldr	r0, [sp]
 805b612: b920         	cbnz	r0, 0x805b61e <xStreamBufferIsFull+0x1a> @ imm = #0x8
 805b614: e7ff         	b	0x805b616 <xStreamBufferIsFull+0x12> @ imm = #-0x2
 805b616: f7ff fffe    	bl	0x805b616 <xStreamBufferIsFull+0x12> @ imm = #-0x4
 805b61a: e7ff         	b	0x805b61c <xStreamBufferIsFull+0x18> @ imm = #-0x2
 805b61c: e7fe         	b	0x805b61c <xStreamBufferIsFull+0x18> @ imm = #-0x4
;     if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 805b61e: 9800         	ldr	r0, [sp]
 805b620: 7f00         	ldrb	r0, [r0, #0x1c]
 805b622: 07c0         	lsls	r0, r0, #0x1f
 805b624: b118         	cbz	r0, 0x805b62e <xStreamBufferIsFull+0x2a> @ imm = #0x6
 805b626: e7ff         	b	0x805b628 <xStreamBufferIsFull+0x24> @ imm = #-0x2
 805b628: 2004         	movs	r0, #0x4
;         xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
 805b62a: 9001         	str	r0, [sp, #0x4]
;     }
 805b62c: e002         	b	0x805b634 <xStreamBufferIsFull+0x30> @ imm = #0x4
 805b62e: 2000         	movs	r0, #0x0
;         xBytesToStoreMessageLength = 0;
 805b630: 9001         	str	r0, [sp, #0x4]
 805b632: e7ff         	b	0x805b634 <xStreamBufferIsFull+0x30> @ imm = #-0x2
;     if( xStreamBufferSpacesAvailable( xStreamBuffer ) <= xBytesToStoreMessageLength )
 805b634: 9803         	ldr	r0, [sp, #0xc]
 805b636: f7ff fffe    	bl	0x805b636 <xStreamBufferIsFull+0x32> @ imm = #-0x4
 805b63a: 9901         	ldr	r1, [sp, #0x4]
 805b63c: 4288         	cmp	r0, r1
 805b63e: d803         	bhi	0x805b648 <xStreamBufferIsFull+0x44> @ imm = #0x6
 805b640: e7ff         	b	0x805b642 <xStreamBufferIsFull+0x3e> @ imm = #-0x2
 805b642: 2001         	movs	r0, #0x1
;         xReturn = pdTRUE;
 805b644: 9002         	str	r0, [sp, #0x8]
;     }
 805b646: e002         	b	0x805b64e <xStreamBufferIsFull+0x4a> @ imm = #0x4
 805b648: 2000         	movs	r0, #0x0
;         xReturn = pdFALSE;
 805b64a: 9002         	str	r0, [sp, #0x8]
 805b64c: e7ff         	b	0x805b64e <xStreamBufferIsFull+0x4a> @ imm = #-0x2
;     return xReturn;
 805b64e: 9802         	ldr	r0, [sp, #0x8]
 805b650: b004         	add	sp, #0x10
 805b652: bd80         	pop	{r7, pc}

0805b654 <xStreamBufferSendCompletedFromISR>:
; {
 805b654: b580         	push	{r7, lr}
 805b656: 466f         	mov	r7, sp
 805b658: b088         	sub	sp, #0x20
 805b65a: 9007         	str	r0, [sp, #0x1c]
 805b65c: 9106         	str	r1, [sp, #0x18]
;     StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 805b65e: 9807         	ldr	r0, [sp, #0x1c]
 805b660: 9005         	str	r0, [sp, #0x14]
;     configASSERT( pxStreamBuffer );
 805b662: 9805         	ldr	r0, [sp, #0x14]
 805b664: b920         	cbnz	r0, 0x805b670 <xStreamBufferSendCompletedFromISR+0x1c> @ imm = #0x8
 805b666: e7ff         	b	0x805b668 <xStreamBufferSendCompletedFromISR+0x14> @ imm = #-0x2
 805b668: f7ff fffe    	bl	0x805b668 <xStreamBufferSendCompletedFromISR+0x14> @ imm = #-0x4
 805b66c: e7ff         	b	0x805b66e <xStreamBufferSendCompletedFromISR+0x1a> @ imm = #-0x2
 805b66e: e7fe         	b	0x805b66e <xStreamBufferSendCompletedFromISR+0x1a> @ imm = #-0x4
;     uxSavedInterruptStatus = taskENTER_CRITICAL_FROM_ISR();
 805b670: f7ff fffe    	bl	0x805b670 <xStreamBufferSendCompletedFromISR+0x1c> @ imm = #-0x4
 805b674: 9003         	str	r0, [sp, #0xc]
;         if( ( pxStreamBuffer )->xTaskWaitingToReceive != NULL )
 805b676: 9805         	ldr	r0, [sp, #0x14]
 805b678: 6900         	ldr	r0, [r0, #0x10]
 805b67a: b190         	cbz	r0, 0x805b6a2 <xStreamBufferSendCompletedFromISR+0x4e> @ imm = #0x24
 805b67c: e7ff         	b	0x805b67e <xStreamBufferSendCompletedFromISR+0x2a> @ imm = #-0x2
;             ( void ) xTaskNotifyFromISR( ( pxStreamBuffer )->xTaskWaitingToReceive,
 805b67e: 9805         	ldr	r0, [sp, #0x14]
 805b680: 6900         	ldr	r0, [r0, #0x10]
 805b682: 9a06         	ldr	r2, [sp, #0x18]
 805b684: 4669         	mov	r1, sp
 805b686: 604a         	str	r2, [r1, #0x4]
 805b688: 2300         	movs	r3, #0x0
 805b68a: 9302         	str	r3, [sp, #0x8]
 805b68c: 600b         	str	r3, [r1]
 805b68e: 4619         	mov	r1, r3
 805b690: 461a         	mov	r2, r3
 805b692: f7ff fffe    	bl	0x805b692 <xStreamBufferSendCompletedFromISR+0x3e> @ imm = #-0x4
;             ( pxStreamBuffer )->xTaskWaitingToReceive = NULL;
 805b696: 9802         	ldr	r0, [sp, #0x8]
 805b698: 9905         	ldr	r1, [sp, #0x14]
 805b69a: 6108         	str	r0, [r1, #0x10]
 805b69c: 2001         	movs	r0, #0x1
;             xReturn = pdTRUE;
 805b69e: 9004         	str	r0, [sp, #0x10]
;         }
 805b6a0: e002         	b	0x805b6a8 <xStreamBufferSendCompletedFromISR+0x54> @ imm = #0x4
 805b6a2: 2000         	movs	r0, #0x0
;             xReturn = pdFALSE;
 805b6a4: 9004         	str	r0, [sp, #0x10]
 805b6a6: e7ff         	b	0x805b6a8 <xStreamBufferSendCompletedFromISR+0x54> @ imm = #-0x2
;     taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );
 805b6a8: 9803         	ldr	r0, [sp, #0xc]
 805b6aa: f7ff fffe    	bl	0x805b6aa <xStreamBufferSendCompletedFromISR+0x56> @ imm = #-0x4
;     return xReturn;
 805b6ae: 9804         	ldr	r0, [sp, #0x10]
 805b6b0: b008         	add	sp, #0x20
 805b6b2: bd80         	pop	{r7, pc}

0805b6b4 <xStreamBufferReceiveCompletedFromISR>:
; {
 805b6b4: b580         	push	{r7, lr}
 805b6b6: 466f         	mov	r7, sp
 805b6b8: b088         	sub	sp, #0x20
 805b6ba: 9007         	str	r0, [sp, #0x1c]
 805b6bc: 9106         	str	r1, [sp, #0x18]
;     StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 805b6be: 9807         	ldr	r0, [sp, #0x1c]
 805b6c0: 9005         	str	r0, [sp, #0x14]
;     configASSERT( pxStreamBuffer );
 805b6c2: 9805         	ldr	r0, [sp, #0x14]
 805b6c4: b920         	cbnz	r0, 0x805b6d0 <xStreamBufferReceiveCompletedFromISR+0x1c> @ imm = #0x8
 805b6c6: e7ff         	b	0x805b6c8 <xStreamBufferReceiveCompletedFromISR+0x14> @ imm = #-0x2
 805b6c8: f7ff fffe    	bl	0x805b6c8 <xStreamBufferReceiveCompletedFromISR+0x14> @ imm = #-0x4
 805b6cc: e7ff         	b	0x805b6ce <xStreamBufferReceiveCompletedFromISR+0x1a> @ imm = #-0x2
 805b6ce: e7fe         	b	0x805b6ce <xStreamBufferReceiveCompletedFromISR+0x1a> @ imm = #-0x4
;     uxSavedInterruptStatus = taskENTER_CRITICAL_FROM_ISR();
 805b6d0: f7ff fffe    	bl	0x805b6d0 <xStreamBufferReceiveCompletedFromISR+0x1c> @ imm = #-0x4
 805b6d4: 9003         	str	r0, [sp, #0xc]
;         if( ( pxStreamBuffer )->xTaskWaitingToSend != NULL )
 805b6d6: 9805         	ldr	r0, [sp, #0x14]
 805b6d8: 6940         	ldr	r0, [r0, #0x14]
 805b6da: b190         	cbz	r0, 0x805b702 <xStreamBufferReceiveCompletedFromISR+0x4e> @ imm = #0x24
 805b6dc: e7ff         	b	0x805b6de <xStreamBufferReceiveCompletedFromISR+0x2a> @ imm = #-0x2
;             ( void ) xTaskNotifyFromISR( ( pxStreamBuffer )->xTaskWaitingToSend,
 805b6de: 9805         	ldr	r0, [sp, #0x14]
 805b6e0: 6940         	ldr	r0, [r0, #0x14]
 805b6e2: 9a06         	ldr	r2, [sp, #0x18]
 805b6e4: 4669         	mov	r1, sp
 805b6e6: 604a         	str	r2, [r1, #0x4]
 805b6e8: 2300         	movs	r3, #0x0
 805b6ea: 9302         	str	r3, [sp, #0x8]
 805b6ec: 600b         	str	r3, [r1]
 805b6ee: 4619         	mov	r1, r3
 805b6f0: 461a         	mov	r2, r3
 805b6f2: f7ff fffe    	bl	0x805b6f2 <xStreamBufferReceiveCompletedFromISR+0x3e> @ imm = #-0x4
;             ( pxStreamBuffer )->xTaskWaitingToSend = NULL;
 805b6f6: 9802         	ldr	r0, [sp, #0x8]
 805b6f8: 9905         	ldr	r1, [sp, #0x14]
 805b6fa: 6148         	str	r0, [r1, #0x14]
 805b6fc: 2001         	movs	r0, #0x1
;             xReturn = pdTRUE;
 805b6fe: 9004         	str	r0, [sp, #0x10]
;         }
 805b700: e002         	b	0x805b708 <xStreamBufferReceiveCompletedFromISR+0x54> @ imm = #0x4
 805b702: 2000         	movs	r0, #0x0
;             xReturn = pdFALSE;
 805b704: 9004         	str	r0, [sp, #0x10]
 805b706: e7ff         	b	0x805b708 <xStreamBufferReceiveCompletedFromISR+0x54> @ imm = #-0x2
;     taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );
 805b708: 9803         	ldr	r0, [sp, #0xc]
 805b70a: f7ff fffe    	bl	0x805b70a <xStreamBufferReceiveCompletedFromISR+0x56> @ imm = #-0x4
;     return xReturn;
 805b70e: 9804         	ldr	r0, [sp, #0x10]
 805b710: b008         	add	sp, #0x20
 805b712: bd80         	pop	{r7, pc}

0805b714 <uxStreamBufferGetStreamBufferNumber>:
;     {
 805b714: b081         	sub	sp, #0x4
 805b716: 9000         	str	r0, [sp]
;         return xStreamBuffer->uxStreamBufferNumber;
 805b718: 9800         	ldr	r0, [sp]
 805b71a: 6a00         	ldr	r0, [r0, #0x20]
 805b71c: b001         	add	sp, #0x4
 805b71e: 4770         	bx	lr

0805b720 <vStreamBufferSetStreamBufferNumber>:
;     {
 805b720: b082         	sub	sp, #0x8
 805b722: 9001         	str	r0, [sp, #0x4]
 805b724: 9100         	str	r1, [sp]
;         xStreamBuffer->uxStreamBufferNumber = uxStreamBufferNumber;
 805b726: 9800         	ldr	r0, [sp]
 805b728: 9901         	ldr	r1, [sp, #0x4]
 805b72a: 6208         	str	r0, [r1, #0x20]
;     }
 805b72c: b002         	add	sp, #0x8
 805b72e: 4770         	bx	lr

0805b730 <ucStreamBufferGetStreamBufferType>:
;     {
 805b730: b081         	sub	sp, #0x4
 805b732: 9000         	str	r0, [sp]
;         return( ( uint8_t ) ( xStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) );
 805b734: 9800         	ldr	r0, [sp]
 805b736: 7f00         	ldrb	r0, [r0, #0x1c]
 805b738: f000 0001    	and	r0, r0, #0x1
 805b73c: b001         	add	sp, #0x4
 805b73e: 4770         	bx	lr

0805b740 <prvWriteBytesToBuffer>:
; {
 805b740: b580         	push	{r7, lr}
 805b742: 466f         	mov	r7, sp
 805b744: b086         	sub	sp, #0x18
 805b746: 9005         	str	r0, [sp, #0x14]
 805b748: 9104         	str	r1, [sp, #0x10]
 805b74a: 9203         	str	r2, [sp, #0xc]
 805b74c: 9302         	str	r3, [sp, #0x8]
;     configASSERT( xCount > ( size_t ) 0 );
 805b74e: 9803         	ldr	r0, [sp, #0xc]
 805b750: b920         	cbnz	r0, 0x805b75c <prvWriteBytesToBuffer+0x1c> @ imm = #0x8
 805b752: e7ff         	b	0x805b754 <prvWriteBytesToBuffer+0x14> @ imm = #-0x2
 805b754: f7ff fffe    	bl	0x805b754 <prvWriteBytesToBuffer+0x14> @ imm = #-0x4
 805b758: e7ff         	b	0x805b75a <prvWriteBytesToBuffer+0x1a> @ imm = #-0x2
 805b75a: e7fe         	b	0x805b75a <prvWriteBytesToBuffer+0x1a> @ imm = #-0x4
;     xFirstLength = configMIN( pxStreamBuffer->xLength - xHead, xCount );
 805b75c: 9805         	ldr	r0, [sp, #0x14]
 805b75e: 6880         	ldr	r0, [r0, #0x8]
 805b760: 9902         	ldr	r1, [sp, #0x8]
 805b762: 1a40         	subs	r0, r0, r1
 805b764: 9903         	ldr	r1, [sp, #0xc]
 805b766: 4288         	cmp	r0, r1
 805b768: d206         	bhs	0x805b778 <prvWriteBytesToBuffer+0x38> @ imm = #0xc
 805b76a: e7ff         	b	0x805b76c <prvWriteBytesToBuffer+0x2c> @ imm = #-0x2
 805b76c: 9805         	ldr	r0, [sp, #0x14]
 805b76e: 6880         	ldr	r0, [r0, #0x8]
 805b770: 9902         	ldr	r1, [sp, #0x8]
 805b772: 1a40         	subs	r0, r0, r1
 805b774: 9000         	str	r0, [sp]
 805b776: e002         	b	0x805b77e <prvWriteBytesToBuffer+0x3e> @ imm = #0x4
 805b778: 9803         	ldr	r0, [sp, #0xc]
 805b77a: 9000         	str	r0, [sp]
 805b77c: e7ff         	b	0x805b77e <prvWriteBytesToBuffer+0x3e> @ imm = #-0x2
 805b77e: 9800         	ldr	r0, [sp]
 805b780: 9001         	str	r0, [sp, #0x4]
;     configASSERT( ( xHead + xFirstLength ) <= pxStreamBuffer->xLength );
 805b782: 9802         	ldr	r0, [sp, #0x8]
 805b784: 9901         	ldr	r1, [sp, #0x4]
 805b786: 4408         	add	r0, r1
 805b788: 9905         	ldr	r1, [sp, #0x14]
 805b78a: 6889         	ldr	r1, [r1, #0x8]
 805b78c: 4288         	cmp	r0, r1
 805b78e: d904         	bls	0x805b79a <prvWriteBytesToBuffer+0x5a> @ imm = #0x8
 805b790: e7ff         	b	0x805b792 <prvWriteBytesToBuffer+0x52> @ imm = #-0x2
 805b792: f7ff fffe    	bl	0x805b792 <prvWriteBytesToBuffer+0x52> @ imm = #-0x4
 805b796: e7ff         	b	0x805b798 <prvWriteBytesToBuffer+0x58> @ imm = #-0x2
 805b798: e7fe         	b	0x805b798 <prvWriteBytesToBuffer+0x58> @ imm = #-0x4
;     ( void ) memcpy( ( void * ) ( &( pxStreamBuffer->pucBuffer[ xHead ] ) ), ( const void * ) pucData, xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 805b79a: 9805         	ldr	r0, [sp, #0x14]
 805b79c: 6980         	ldr	r0, [r0, #0x18]
 805b79e: 9902         	ldr	r1, [sp, #0x8]
 805b7a0: 4408         	add	r0, r1
 805b7a2: 9904         	ldr	r1, [sp, #0x10]
 805b7a4: 9a01         	ldr	r2, [sp, #0x4]
 805b7a6: f7ff fffe    	bl	0x805b7a6 <prvWriteBytesToBuffer+0x66> @ imm = #-0x4
;     if( xCount > xFirstLength )
 805b7aa: 9803         	ldr	r0, [sp, #0xc]
 805b7ac: 9901         	ldr	r1, [sp, #0x4]
 805b7ae: 4288         	cmp	r0, r1
 805b7b0: d916         	bls	0x805b7e0 <prvWriteBytesToBuffer+0xa0> @ imm = #0x2c
 805b7b2: e7ff         	b	0x805b7b4 <prvWriteBytesToBuffer+0x74> @ imm = #-0x2
;         configASSERT( ( xCount - xFirstLength ) <= pxStreamBuffer->xLength );
 805b7b4: 9803         	ldr	r0, [sp, #0xc]
 805b7b6: 9901         	ldr	r1, [sp, #0x4]
 805b7b8: 1a40         	subs	r0, r0, r1
 805b7ba: 9905         	ldr	r1, [sp, #0x14]
 805b7bc: 6889         	ldr	r1, [r1, #0x8]
 805b7be: 4288         	cmp	r0, r1
 805b7c0: d904         	bls	0x805b7cc <prvWriteBytesToBuffer+0x8c> @ imm = #0x8
 805b7c2: e7ff         	b	0x805b7c4 <prvWriteBytesToBuffer+0x84> @ imm = #-0x2
 805b7c4: f7ff fffe    	bl	0x805b7c4 <prvWriteBytesToBuffer+0x84> @ imm = #-0x4
 805b7c8: e7ff         	b	0x805b7ca <prvWriteBytesToBuffer+0x8a> @ imm = #-0x2
 805b7ca: e7fe         	b	0x805b7ca <prvWriteBytesToBuffer+0x8a> @ imm = #-0x4
;         ( void ) memcpy( ( void * ) pxStreamBuffer->pucBuffer, ( const void * ) &( pucData[ xFirstLength ] ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 805b7cc: 9805         	ldr	r0, [sp, #0x14]
 805b7ce: 6980         	ldr	r0, [r0, #0x18]
 805b7d0: 9904         	ldr	r1, [sp, #0x10]
 805b7d2: 9b01         	ldr	r3, [sp, #0x4]
 805b7d4: 4419         	add	r1, r3
 805b7d6: 9a03         	ldr	r2, [sp, #0xc]
 805b7d8: 1ad2         	subs	r2, r2, r3
 805b7da: f7ff fffe    	bl	0x805b7da <prvWriteBytesToBuffer+0x9a> @ imm = #-0x4
;     }
 805b7de: e000         	b	0x805b7e2 <prvWriteBytesToBuffer+0xa2> @ imm = #0x0
 805b7e0: e7ff         	b	0x805b7e2 <prvWriteBytesToBuffer+0xa2> @ imm = #-0x2
;     xHead += xCount;
 805b7e2: 9903         	ldr	r1, [sp, #0xc]
 805b7e4: 9802         	ldr	r0, [sp, #0x8]
 805b7e6: 4408         	add	r0, r1
 805b7e8: 9002         	str	r0, [sp, #0x8]
;     if( xHead >= pxStreamBuffer->xLength )
 805b7ea: 9802         	ldr	r0, [sp, #0x8]
 805b7ec: 9905         	ldr	r1, [sp, #0x14]
 805b7ee: 6889         	ldr	r1, [r1, #0x8]
 805b7f0: 4288         	cmp	r0, r1
 805b7f2: d306         	blo	0x805b802 <prvWriteBytesToBuffer+0xc2> @ imm = #0xc
 805b7f4: e7ff         	b	0x805b7f6 <prvWriteBytesToBuffer+0xb6> @ imm = #-0x2
;         xHead -= pxStreamBuffer->xLength;
 805b7f6: 9805         	ldr	r0, [sp, #0x14]
 805b7f8: 6881         	ldr	r1, [r0, #0x8]
 805b7fa: 9802         	ldr	r0, [sp, #0x8]
 805b7fc: 1a40         	subs	r0, r0, r1
 805b7fe: 9002         	str	r0, [sp, #0x8]
;     }
 805b800: e000         	b	0x805b804 <prvWriteBytesToBuffer+0xc4> @ imm = #0x0
 805b802: e7ff         	b	0x805b804 <prvWriteBytesToBuffer+0xc4> @ imm = #-0x2
;     return xHead;
 805b804: 9802         	ldr	r0, [sp, #0x8]
 805b806: b006         	add	sp, #0x18
 805b808: bd80         	pop	{r7, pc}

0805b80a <vPortSetupTimerInterrupt>:
; {
 805b80a: f24e 0110    	movw	r1, #0xe010
 805b80e: f2ce 0100    	movt	r1, #0xe000
 805b812: 2004         	movs	r0, #0x4
;     portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT_CONFIG;
 805b814: 6008         	str	r0, [r1]
 805b816: f24e 0218    	movw	r2, #0xe018
 805b81a: f2ce 0200    	movt	r2, #0xe000
 805b81e: 2000         	movs	r0, #0x0
;     portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 805b820: 6010         	str	r0, [r2]
;     portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 805b822: f240 0000    	movw	r0, #0x0
 805b826: f2c0 0000    	movt	r0, #0x0
 805b82a: 6800         	ldr	r0, [r0]
 805b82c: f644 52d3    	movw	r2, #0x4dd3
 805b830: f2c1 0262    	movt	r2, #0x1062
 805b834: fba0 0202    	umull	r0, r2, r0, r2
 805b838: f04f 30ff    	mov.w	r0, #0xffffffff
 805b83c: eb00 1092    	add.w	r0, r0, r2, lsr #6
 805b840: f24e 0214    	movw	r2, #0xe014
 805b844: f2ce 0200    	movt	r2, #0xe000
 805b848: 6010         	str	r0, [r2]
 805b84a: 2007         	movs	r0, #0x7
;     portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 805b84c: 6008         	str	r0, [r1]
; }
 805b84e: 4770         	bx	lr

0805b850 <vPortYield>:
; {
 805b850: f64e 5104    	movw	r1, #0xed04
 805b854: f2ce 0100    	movt	r1, #0xe000
 805b858: f04f 5080    	mov.w	r0, #0x10000000
;     portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 805b85c: 6008         	str	r0, [r1]
;     __asm volatile ( "dsb" ::: "memory" );
 805b85e: f3bf 8f4f    	dsb	sy
;     __asm volatile ( "isb" );
 805b862: f3bf 8f6f    	isb	sy
; }
 805b866: 4770         	bx	lr

0805b868 <vPortEnterCritical>:
; {
 805b868: b580         	push	{r7, lr}
 805b86a: 466f         	mov	r7, sp
;     portDISABLE_INTERRUPTS();
 805b86c: f7ff fffe    	bl	0x805b86c <vPortEnterCritical+0x4> @ imm = #-0x4
;     ulCriticalNesting++;
 805b870: f240 0100    	movw	r1, #0x0
 805b874: f2c0 0100    	movt	r1, #0x0
 805b878: 6808         	ldr	r0, [r1]
 805b87a: 3001         	adds	r0, #0x1
 805b87c: 6008         	str	r0, [r1]
;     __asm volatile ( "dsb" ::: "memory" );
 805b87e: f3bf 8f4f    	dsb	sy
;     __asm volatile ( "isb" );
 805b882: f3bf 8f6f    	isb	sy
; }
 805b886: bd80         	pop	{r7, pc}

0805b888 <vPortExitCritical>:
; {
 805b888: b580         	push	{r7, lr}
 805b88a: 466f         	mov	r7, sp
;     configASSERT( ulCriticalNesting );
 805b88c: f240 0000    	movw	r0, #0x0
 805b890: f2c0 0000    	movt	r0, #0x0
 805b894: 6800         	ldr	r0, [r0]
 805b896: b920         	cbnz	r0, 0x805b8a2 <vPortExitCritical+0x1a> @ imm = #0x8
 805b898: e7ff         	b	0x805b89a <vPortExitCritical+0x12> @ imm = #-0x2
 805b89a: f7ff fffe    	bl	0x805b89a <vPortExitCritical+0x12> @ imm = #-0x4
 805b89e: e7ff         	b	0x805b8a0 <vPortExitCritical+0x18> @ imm = #-0x2
 805b8a0: e7fe         	b	0x805b8a0 <vPortExitCritical+0x18> @ imm = #-0x4
;     ulCriticalNesting--;
 805b8a2: f240 0000    	movw	r0, #0x0
 805b8a6: f2c0 0000    	movt	r0, #0x0
 805b8aa: 6801         	ldr	r1, [r0]
 805b8ac: 3901         	subs	r1, #0x1
 805b8ae: 6001         	str	r1, [r0]
;     if( ulCriticalNesting == 0 )
 805b8b0: 6800         	ldr	r0, [r0]
 805b8b2: b920         	cbnz	r0, 0x805b8be <vPortExitCritical+0x36> @ imm = #0x8
 805b8b4: e7ff         	b	0x805b8b6 <vPortExitCritical+0x2e> @ imm = #-0x2
 805b8b6: 2000         	movs	r0, #0x0
;         portENABLE_INTERRUPTS();
 805b8b8: f7ff fffe    	bl	0x805b8b8 <vPortExitCritical+0x30> @ imm = #-0x4
;     }
 805b8bc: e7ff         	b	0x805b8be <vPortExitCritical+0x36> @ imm = #-0x2
; }
 805b8be: bd80         	pop	{r7, pc}

0805b8c0 <SysTick_Handler>:
; {
 805b8c0: b580         	push	{r7, lr}
 805b8c2: 466f         	mov	r7, sp
 805b8c4: b082         	sub	sp, #0x8
;     ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 805b8c6: f7ff fffe    	bl	0x805b8c6 <SysTick_Handler+0x6> @ imm = #-0x4
 805b8ca: 9001         	str	r0, [sp, #0x4]
;         if( xTaskIncrementTick() != pdFALSE )
 805b8cc: f7ff fffe    	bl	0x805b8cc <SysTick_Handler+0xc> @ imm = #-0x4
 805b8d0: b140         	cbz	r0, 0x805b8e4 <SysTick_Handler+0x24> @ imm = #0x10
 805b8d2: e7ff         	b	0x805b8d4 <SysTick_Handler+0x14> @ imm = #-0x2
 805b8d4: f64e 5104    	movw	r1, #0xed04
 805b8d8: f2ce 0100    	movt	r1, #0xe000
 805b8dc: f04f 5080    	mov.w	r0, #0x10000000
;             portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 805b8e0: 6008         	str	r0, [r1]
;         }
 805b8e2: e000         	b	0x805b8e6 <SysTick_Handler+0x26> @ imm = #0x0
 805b8e4: e7ff         	b	0x805b8e6 <SysTick_Handler+0x26> @ imm = #-0x2
;     portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 805b8e6: 9801         	ldr	r0, [sp, #0x4]
 805b8e8: f7ff fffe    	bl	0x805b8e8 <SysTick_Handler+0x28> @ imm = #-0x4
; }
 805b8ec: b002         	add	sp, #0x8
 805b8ee: bd80         	pop	{r7, pc}

0805b8f0 <vPortSVCHandler_C>:
; {
 805b8f0: b580         	push	{r7, lr}
 805b8f2: 466f         	mov	r7, sp
 805b8f4: b084         	sub	sp, #0x10
 805b8f6: 9003         	str	r0, [sp, #0xc]
;     ulPC = pulCallerStackAddress[ portOFFSET_TO_PC ];
 805b8f8: 9803         	ldr	r0, [sp, #0xc]
 805b8fa: 6980         	ldr	r0, [r0, #0x18]
 805b8fc: 9002         	str	r0, [sp, #0x8]
;     ucSVCNumber = ( ( uint8_t * ) ulPC )[ -2 ];
 805b8fe: 9802         	ldr	r0, [sp, #0x8]
 805b900: f810 0c02    	ldrb	r0, [r0, #-2]
 805b904: f807 0c09    	strb	r0, [r7, #-9]
;     switch( ucSVCNumber )
 805b908: f817 0c09    	ldrb	r0, [r7, #-9]
 805b90c: 4601         	mov	r1, r0
 805b90e: 9100         	str	r1, [sp]
 805b910: 2802         	cmp	r0, #0x2
 805b912: d008         	beq	0x805b926 <vPortSVCHandler_C+0x36> @ imm = #0x10
 805b914: e7ff         	b	0x805b916 <vPortSVCHandler_C+0x26> @ imm = #-0x2
 805b916: 9800         	ldr	r0, [sp]
 805b918: 2803         	cmp	r0, #0x3
 805b91a: d007         	beq	0x805b92c <vPortSVCHandler_C+0x3c> @ imm = #0xe
 805b91c: e7ff         	b	0x805b91e <vPortSVCHandler_C+0x2e> @ imm = #-0x2
 805b91e: 9800         	ldr	r0, [sp]
 805b920: 2807         	cmp	r0, #0x7
 805b922: d017         	beq	0x805b954 <vPortSVCHandler_C+0x64> @ imm = #0x2e
 805b924: e019         	b	0x805b95a <vPortSVCHandler_C+0x6a> @ imm = #0x32
;             vRestoreContextOfFirstTask();
 805b926: f7ff fffe    	bl	0x805b926 <vPortSVCHandler_C+0x36> @ imm = #-0x4
;             break;
 805b92a: e01a         	b	0x805b962 <vPortSVCHandler_C+0x72> @ imm = #0x34
;                     if( ( ulPC >= ( uint32_t ) __syscalls_flash_start__ ) &&
 805b92c: 9802         	ldr	r0, [sp, #0x8]
 805b92e: f240 0100    	movw	r1, #0x0
 805b932: f2c0 0100    	movt	r1, #0x0
 805b936: 4288         	cmp	r0, r1
 805b938: d30b         	blo	0x805b952 <vPortSVCHandler_C+0x62> @ imm = #0x16
 805b93a: e7ff         	b	0x805b93c <vPortSVCHandler_C+0x4c> @ imm = #-0x2
;                         ( ulPC <= ( uint32_t ) __syscalls_flash_end__ ) )
 805b93c: 9802         	ldr	r0, [sp, #0x8]
 805b93e: f240 0100    	movw	r1, #0x0
 805b942: f2c0 0100    	movt	r1, #0x0
;                     if( ( ulPC >= ( uint32_t ) __syscalls_flash_start__ ) &&
 805b946: 4288         	cmp	r0, r1
 805b948: d803         	bhi	0x805b952 <vPortSVCHandler_C+0x62> @ imm = #0x6
 805b94a: e7ff         	b	0x805b94c <vPortSVCHandler_C+0x5c> @ imm = #-0x2
;                         vRaisePrivilege();
 805b94c: f7ff fffe    	bl	0x805b94c <vPortSVCHandler_C+0x5c> @ imm = #-0x4
;                     }
 805b950: e7ff         	b	0x805b952 <vPortSVCHandler_C+0x62> @ imm = #-0x2
;                     break;
 805b952: e006         	b	0x805b962 <vPortSVCHandler_C+0x72> @ imm = #0xc
;                     vPortYield();
 805b954: f7ff fffe    	bl	0x805b954 <vPortSVCHandler_C+0x64> @ imm = #-0x4
;                     break;
 805b958: e003         	b	0x805b962 <vPortSVCHandler_C+0x72> @ imm = #0x6
;             configASSERT( pdFALSE );
 805b95a: f7ff fffe    	bl	0x805b95a <vPortSVCHandler_C+0x6a> @ imm = #-0x4
 805b95e: e7ff         	b	0x805b960 <vPortSVCHandler_C+0x70> @ imm = #-0x2
 805b960: e7fe         	b	0x805b960 <vPortSVCHandler_C+0x70> @ imm = #-0x4
; }
 805b962: b004         	add	sp, #0x10
 805b964: bd80         	pop	{r7, pc}

0805b966 <xPortIsTaskPrivileged>:
;     {
 805b966: b580         	push	{r7, lr}
 805b968: 466f         	mov	r7, sp
 805b96a: b082         	sub	sp, #0x8
 805b96c: 2000         	movs	r0, #0x0
;         BaseType_t xTaskIsPrivileged = pdFALSE;
 805b96e: 9001         	str	r0, [sp, #0x4]
;         const xMPU_SETTINGS * xTaskMpuSettings = xTaskGetMPUSettings( NULL ); /* Calling task's MPU settings. */
 805b970: f7ff fffe    	bl	0x805b970 <xPortIsTaskPrivileged+0xa> @ imm = #-0x4
 805b974: 9000         	str	r0, [sp]
;         if( ( xTaskMpuSettings->ulTaskFlags & portTASK_IS_PRIVILEGED_FLAG ) == portTASK_IS_PRIVILEGED_FLAG )
 805b976: 9800         	ldr	r0, [sp]
 805b978: f890 0078    	ldrb.w	r0, [r0, #0x78]
 805b97c: 0780         	lsls	r0, r0, #0x1e
 805b97e: 2800         	cmp	r0, #0x0
 805b980: d503         	bpl	0x805b98a <xPortIsTaskPrivileged+0x24> @ imm = #0x6
 805b982: e7ff         	b	0x805b984 <xPortIsTaskPrivileged+0x1e> @ imm = #-0x2
 805b984: 2001         	movs	r0, #0x1
;             xTaskIsPrivileged = pdTRUE;
 805b986: 9001         	str	r0, [sp, #0x4]
;         }
 805b988: e7ff         	b	0x805b98a <xPortIsTaskPrivileged+0x24> @ imm = #-0x2
;         return xTaskIsPrivileged;
 805b98a: 9801         	ldr	r0, [sp, #0x4]
 805b98c: b002         	add	sp, #0x8
 805b98e: bd80         	pop	{r7, pc}

0805b990 <pxPortInitialiseStack>:
;     {
 805b990: b085         	sub	sp, #0x14
 805b992: f8dd c018    	ldr.w	r12, [sp, #0x18]
 805b996: f8dd c014    	ldr.w	r12, [sp, #0x14]
 805b99a: 9004         	str	r0, [sp, #0x10]
 805b99c: 9103         	str	r1, [sp, #0xc]
 805b99e: 9202         	str	r2, [sp, #0x8]
 805b9a0: 9301         	str	r3, [sp, #0x4]
 805b9a2: 2000         	movs	r0, #0x0
;         uint32_t ulIndex = 0;
 805b9a4: 9000         	str	r0, [sp]
;         xMPUSettings->ulContext[ ulIndex ] = 0x04040404; /* r4. */
 805b9a6: 9806         	ldr	r0, [sp, #0x18]
 805b9a8: 9900         	ldr	r1, [sp]
 805b9aa: eb00 0181    	add.w	r1, r0, r1, lsl #2
 805b9ae: f04f 3004    	mov.w	r0, #0x4040404
 805b9b2: 6248         	str	r0, [r1, #0x24]
;         ulIndex++;
 805b9b4: 9800         	ldr	r0, [sp]
 805b9b6: 3001         	adds	r0, #0x1
 805b9b8: 9000         	str	r0, [sp]
;         xMPUSettings->ulContext[ ulIndex ] = 0x05050505; /* r5. */
 805b9ba: 9806         	ldr	r0, [sp, #0x18]
 805b9bc: 9900         	ldr	r1, [sp]
 805b9be: eb00 0181    	add.w	r1, r0, r1, lsl #2
 805b9c2: f04f 3005    	mov.w	r0, #0x5050505
 805b9c6: 6248         	str	r0, [r1, #0x24]
;         ulIndex++;
 805b9c8: 9800         	ldr	r0, [sp]
 805b9ca: 3001         	adds	r0, #0x1
 805b9cc: 9000         	str	r0, [sp]
;         xMPUSettings->ulContext[ ulIndex ] = 0x06060606; /* r6. */
 805b9ce: 9806         	ldr	r0, [sp, #0x18]
 805b9d0: 9900         	ldr	r1, [sp]
 805b9d2: eb00 0181    	add.w	r1, r0, r1, lsl #2
 805b9d6: f04f 3006    	mov.w	r0, #0x6060606
 805b9da: 6248         	str	r0, [r1, #0x24]
;         ulIndex++;
 805b9dc: 9800         	ldr	r0, [sp]
 805b9de: 3001         	adds	r0, #0x1
 805b9e0: 9000         	str	r0, [sp]
;         xMPUSettings->ulContext[ ulIndex ] = 0x07070707; /* r7. */
 805b9e2: 9806         	ldr	r0, [sp, #0x18]
 805b9e4: 9900         	ldr	r1, [sp]
 805b9e6: eb00 0181    	add.w	r1, r0, r1, lsl #2
 805b9ea: f04f 3007    	mov.w	r0, #0x7070707
 805b9ee: 6248         	str	r0, [r1, #0x24]
;         ulIndex++;
 805b9f0: 9800         	ldr	r0, [sp]
 805b9f2: 3001         	adds	r0, #0x1
 805b9f4: 9000         	str	r0, [sp]
;         xMPUSettings->ulContext[ ulIndex ] = 0x08080808; /* r8. */
 805b9f6: 9806         	ldr	r0, [sp, #0x18]
 805b9f8: 9900         	ldr	r1, [sp]
 805b9fa: eb00 0181    	add.w	r1, r0, r1, lsl #2
 805b9fe: f04f 3008    	mov.w	r0, #0x8080808
 805ba02: 6248         	str	r0, [r1, #0x24]
;         ulIndex++;
 805ba04: 9800         	ldr	r0, [sp]
 805ba06: 3001         	adds	r0, #0x1
 805ba08: 9000         	str	r0, [sp]
;         xMPUSettings->ulContext[ ulIndex ] = 0x09090909; /* r9. */
 805ba0a: 9806         	ldr	r0, [sp, #0x18]
 805ba0c: 9900         	ldr	r1, [sp]
 805ba0e: eb00 0181    	add.w	r1, r0, r1, lsl #2
 805ba12: f04f 3009    	mov.w	r0, #0x9090909
 805ba16: 6248         	str	r0, [r1, #0x24]
;         ulIndex++;
 805ba18: 9800         	ldr	r0, [sp]
 805ba1a: 3001         	adds	r0, #0x1
 805ba1c: 9000         	str	r0, [sp]
;         xMPUSettings->ulContext[ ulIndex ] = 0x10101010; /* r10. */
 805ba1e: 9806         	ldr	r0, [sp, #0x18]
 805ba20: 9900         	ldr	r1, [sp]
 805ba22: eb00 0181    	add.w	r1, r0, r1, lsl #2
 805ba26: f04f 3010    	mov.w	r0, #0x10101010
 805ba2a: 6248         	str	r0, [r1, #0x24]
;         ulIndex++;
 805ba2c: 9800         	ldr	r0, [sp]
 805ba2e: 3001         	adds	r0, #0x1
 805ba30: 9000         	str	r0, [sp]
;         xMPUSettings->ulContext[ ulIndex ] = 0x11111111; /* r11. */
 805ba32: 9806         	ldr	r0, [sp, #0x18]
 805ba34: 9900         	ldr	r1, [sp]
 805ba36: eb00 0181    	add.w	r1, r0, r1, lsl #2
 805ba3a: f04f 3011    	mov.w	r0, #0x11111111
 805ba3e: 6248         	str	r0, [r1, #0x24]
;         ulIndex++;
 805ba40: 9800         	ldr	r0, [sp]
 805ba42: 3001         	adds	r0, #0x1
 805ba44: 9000         	str	r0, [sp]
;         xMPUSettings->ulContext[ ulIndex ] = ( uint32_t ) pvParameters;            /* r0. */
 805ba46: 9801         	ldr	r0, [sp, #0x4]
 805ba48: 9906         	ldr	r1, [sp, #0x18]
 805ba4a: 9a00         	ldr	r2, [sp]
 805ba4c: eb01 0182    	add.w	r1, r1, r2, lsl #2
 805ba50: 6248         	str	r0, [r1, #0x24]
;         ulIndex++;
 805ba52: 9800         	ldr	r0, [sp]
 805ba54: 3001         	adds	r0, #0x1
 805ba56: 9000         	str	r0, [sp]
;         xMPUSettings->ulContext[ ulIndex ] = 0x01010101;                           /* r1. */
 805ba58: 9806         	ldr	r0, [sp, #0x18]
 805ba5a: 9900         	ldr	r1, [sp]
 805ba5c: eb00 0181    	add.w	r1, r0, r1, lsl #2
 805ba60: f04f 3001    	mov.w	r0, #0x1010101
 805ba64: 6248         	str	r0, [r1, #0x24]
;         ulIndex++;
 805ba66: 9800         	ldr	r0, [sp]
 805ba68: 3001         	adds	r0, #0x1
 805ba6a: 9000         	str	r0, [sp]
;         xMPUSettings->ulContext[ ulIndex ] = 0x02020202;                           /* r2. */
 805ba6c: 9806         	ldr	r0, [sp, #0x18]
 805ba6e: 9900         	ldr	r1, [sp]
 805ba70: eb00 0181    	add.w	r1, r0, r1, lsl #2
 805ba74: f04f 3002    	mov.w	r0, #0x2020202
 805ba78: 6248         	str	r0, [r1, #0x24]
;         ulIndex++;
 805ba7a: 9800         	ldr	r0, [sp]
 805ba7c: 3001         	adds	r0, #0x1
 805ba7e: 9000         	str	r0, [sp]
;         xMPUSettings->ulContext[ ulIndex ] = 0x03030303;                           /* r3. */
 805ba80: 9806         	ldr	r0, [sp, #0x18]
 805ba82: 9900         	ldr	r1, [sp]
 805ba84: eb00 0181    	add.w	r1, r0, r1, lsl #2
 805ba88: f04f 3003    	mov.w	r0, #0x3030303
 805ba8c: 6248         	str	r0, [r1, #0x24]
;         ulIndex++;
 805ba8e: 9800         	ldr	r0, [sp]
 805ba90: 3001         	adds	r0, #0x1
 805ba92: 9000         	str	r0, [sp]
;         xMPUSettings->ulContext[ ulIndex ] = 0x12121212;                           /* r12. */
 805ba94: 9806         	ldr	r0, [sp, #0x18]
 805ba96: 9900         	ldr	r1, [sp]
 805ba98: eb00 0181    	add.w	r1, r0, r1, lsl #2
 805ba9c: f04f 3012    	mov.w	r0, #0x12121212
 805baa0: 6248         	str	r0, [r1, #0x24]
;         ulIndex++;
 805baa2: 9800         	ldr	r0, [sp]
 805baa4: 3001         	adds	r0, #0x1
 805baa6: 9000         	str	r0, [sp]
;         xMPUSettings->ulContext[ ulIndex ] = ( uint32_t ) portTASK_RETURN_ADDRESS; /* LR. */
 805baa8: 9806         	ldr	r0, [sp, #0x18]
 805baaa: 9900         	ldr	r1, [sp]
 805baac: eb00 0181    	add.w	r1, r0, r1, lsl #2
 805bab0: f240 0000    	movw	r0, #0x0
 805bab4: f2c0 0000    	movt	r0, #0x0
 805bab8: 6248         	str	r0, [r1, #0x24]
;         ulIndex++;
 805baba: 9800         	ldr	r0, [sp]
 805babc: 3001         	adds	r0, #0x1
 805babe: 9000         	str	r0, [sp]
;         xMPUSettings->ulContext[ ulIndex ] = ( uint32_t ) pxCode;                  /* PC. */
 805bac0: 9802         	ldr	r0, [sp, #0x8]
 805bac2: 9906         	ldr	r1, [sp, #0x18]
 805bac4: 9a00         	ldr	r2, [sp]
 805bac6: eb01 0182    	add.w	r1, r1, r2, lsl #2
 805baca: 6248         	str	r0, [r1, #0x24]
;         ulIndex++;
 805bacc: 9800         	ldr	r0, [sp]
 805bace: 3001         	adds	r0, #0x1
 805bad0: 9000         	str	r0, [sp]
;         xMPUSettings->ulContext[ ulIndex ] = portINITIAL_XPSR;                     /* xPSR. */
 805bad2: 9806         	ldr	r0, [sp, #0x18]
 805bad4: 9900         	ldr	r1, [sp]
 805bad6: eb00 0181    	add.w	r1, r0, r1, lsl #2
 805bada: f04f 7080    	mov.w	r0, #0x1000000
 805bade: 6248         	str	r0, [r1, #0x24]
;         ulIndex++;
 805bae0: 9800         	ldr	r0, [sp]
 805bae2: 3001         	adds	r0, #0x1
 805bae4: 9000         	str	r0, [sp]
;         xMPUSettings->ulContext[ ulIndex ] = ( uint32_t ) ( pxTopOfStack - 8 ); /* PSP with the hardware saved stack. */
 805bae6: 9804         	ldr	r0, [sp, #0x10]
 805bae8: 3820         	subs	r0, #0x20
 805baea: 9906         	ldr	r1, [sp, #0x18]
 805baec: 9a00         	ldr	r2, [sp]
 805baee: eb01 0182    	add.w	r1, r1, r2, lsl #2
 805baf2: 6248         	str	r0, [r1, #0x24]
;         ulIndex++;
 805baf4: 9800         	ldr	r0, [sp]
 805baf6: 3001         	adds	r0, #0x1
 805baf8: 9000         	str	r0, [sp]
;         xMPUSettings->ulContext[ ulIndex ] = ( uint32_t ) pxEndOfStack;         /* PSPLIM. */
 805bafa: 9803         	ldr	r0, [sp, #0xc]
 805bafc: 9906         	ldr	r1, [sp, #0x18]
 805bafe: 9a00         	ldr	r2, [sp]
 805bb00: eb01 0182    	add.w	r1, r1, r2, lsl #2
 805bb04: 6248         	str	r0, [r1, #0x24]
;         ulIndex++;
 805bb06: 9800         	ldr	r0, [sp]
 805bb08: 3001         	adds	r0, #0x1
 805bb0a: 9000         	str	r0, [sp]
;         if( xRunPrivileged == pdTRUE )
 805bb0c: 9805         	ldr	r0, [sp, #0x14]
 805bb0e: 2801         	cmp	r0, #0x1
 805bb10: d10f         	bne	0x805bb32 <pxPortInitialiseStack+0x1a2> @ imm = #0x1e
 805bb12: e7ff         	b	0x805bb14 <pxPortInitialiseStack+0x184> @ imm = #-0x2
;             xMPUSettings->ulTaskFlags |= portTASK_IS_PRIVILEGED_FLAG;
 805bb14: 9906         	ldr	r1, [sp, #0x18]
 805bb16: 6f88         	ldr	r0, [r1, #0x78]
 805bb18: f040 0002    	orr	r0, r0, #0x2
 805bb1c: 6788         	str	r0, [r1, #0x78]
;             xMPUSettings->ulContext[ ulIndex ] = ( uint32_t ) portINITIAL_CONTROL_PRIVILEGED; /* CONTROL. */
 805bb1e: 9806         	ldr	r0, [sp, #0x18]
 805bb20: 9900         	ldr	r1, [sp]
 805bb22: eb00 0181    	add.w	r1, r0, r1, lsl #2
 805bb26: 2002         	movs	r0, #0x2
 805bb28: 6248         	str	r0, [r1, #0x24]
;             ulIndex++;
 805bb2a: 9800         	ldr	r0, [sp]
 805bb2c: 3001         	adds	r0, #0x1
 805bb2e: 9000         	str	r0, [sp]
;         }
 805bb30: e00e         	b	0x805bb50 <pxPortInitialiseStack+0x1c0> @ imm = #0x1c
;             xMPUSettings->ulTaskFlags &= ( ~portTASK_IS_PRIVILEGED_FLAG );
 805bb32: 9906         	ldr	r1, [sp, #0x18]
 805bb34: 6f88         	ldr	r0, [r1, #0x78]
 805bb36: f020 0002    	bic	r0, r0, #0x2
 805bb3a: 6788         	str	r0, [r1, #0x78]
;             xMPUSettings->ulContext[ ulIndex ] = ( uint32_t ) portINITIAL_CONTROL_UNPRIVILEGED; /* CONTROL. */
 805bb3c: 9806         	ldr	r0, [sp, #0x18]
 805bb3e: 9900         	ldr	r1, [sp]
 805bb40: eb00 0181    	add.w	r1, r0, r1, lsl #2
 805bb44: 2003         	movs	r0, #0x3
 805bb46: 6248         	str	r0, [r1, #0x24]
;             ulIndex++;
 805bb48: 9800         	ldr	r0, [sp]
 805bb4a: 3001         	adds	r0, #0x1
 805bb4c: 9000         	str	r0, [sp]
 805bb4e: e7ff         	b	0x805bb50 <pxPortInitialiseStack+0x1c0> @ imm = #-0x2
;         xMPUSettings->ulContext[ ulIndex ] = portINITIAL_EXC_RETURN; /* LR (EXC_RETURN). */
 805bb50: 9806         	ldr	r0, [sp, #0x18]
 805bb52: 9900         	ldr	r1, [sp]
 805bb54: eb00 0181    	add.w	r1, r0, r1, lsl #2
 805bb58: f06f 0043    	mvn	r0, #0x43
 805bb5c: 6248         	str	r0, [r1, #0x24]
;         ulIndex++;
 805bb5e: 9800         	ldr	r0, [sp]
 805bb60: 3001         	adds	r0, #0x1
 805bb62: 9000         	str	r0, [sp]
;         return &( xMPUSettings->ulContext[ ulIndex ] );
 805bb64: 9806         	ldr	r0, [sp, #0x18]
 805bb66: 9900         	ldr	r1, [sp]
 805bb68: eb00 0081    	add.w	r0, r0, r1, lsl #2
 805bb6c: 3024         	adds	r0, #0x24
 805bb6e: b005         	add	sp, #0x14
 805bb70: 4770         	bx	lr

0805bb72 <xPortStartScheduler>:
; {
 805bb72: b580         	push	{r7, lr}
 805bb74: 466f         	mov	r7, sp
 805bb76: b084         	sub	sp, #0x10
 805bb78: 2000         	movs	r0, #0x0
;         volatile uint32_t ulImplementedPrioBits = 0;
 805bb7a: 9002         	str	r0, [sp, #0x8]
 805bb7c: f64e 501c    	movw	r0, #0xed1c
 805bb80: f2ce 0000    	movt	r0, #0xe000
;         ulOriginalPriority = portNVIC_SHPR2_REG;
 805bb84: 6801         	ldr	r1, [r0]
 805bb86: 9103         	str	r1, [sp, #0xc]
 805bb88: f04f 417f    	mov.w	r1, #0xff000000
;         portNVIC_SHPR2_REG = 0xFF000000;
 805bb8c: 6001         	str	r1, [r0]
;         ucMaxPriorityValue = ( uint8_t ) ( ( portNVIC_SHPR2_REG & 0xFF000000 ) >> 24 );
 805bb8e: 6800         	ldr	r0, [r0]
 805bb90: 0e00         	lsrs	r0, r0, #0x18
 805bb92: f807 0c09    	strb	r0, [r7, #-9]
;         ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 805bb96: f817 0c09    	ldrb	r0, [r7, #-9]
 805bb9a: f000 01a0    	and	r1, r0, #0xa0
 805bb9e: f240 0000    	movw	r0, #0x0
 805bba2: f2c0 0000    	movt	r0, #0x0
 805bba6: 7001         	strb	r1, [r0]
;         configASSERT( ucMaxSysCallPriority );
 805bba8: 7800         	ldrb	r0, [r0]
 805bbaa: b920         	cbnz	r0, 0x805bbb6 <xPortStartScheduler+0x44> @ imm = #0x8
 805bbac: e7ff         	b	0x805bbae <xPortStartScheduler+0x3c> @ imm = #-0x2
 805bbae: f7ff fffe    	bl	0x805bbae <xPortStartScheduler+0x3c> @ imm = #-0x4
 805bbb2: e7ff         	b	0x805bbb4 <xPortStartScheduler+0x42> @ imm = #-0x2
 805bbb4: e7fe         	b	0x805bbb4 <xPortStartScheduler+0x42> @ imm = #-0x4
;         configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( uint8_t ) ( ~( uint32_t ) ucMaxPriorityValue ) ) == 0U );
 805bbb6: f817 0c09    	ldrb	r0, [r7, #-9]
 805bbba: 43c0         	mvns	r0, r0
 805bbbc: f010 0fa0    	tst.w	r0, #0xa0
 805bbc0: d004         	beq	0x805bbcc <xPortStartScheduler+0x5a> @ imm = #0x8
 805bbc2: e7ff         	b	0x805bbc4 <xPortStartScheduler+0x52> @ imm = #-0x2
 805bbc4: f7ff fffe    	bl	0x805bbc4 <xPortStartScheduler+0x52> @ imm = #-0x4
 805bbc8: e7ff         	b	0x805bbca <xPortStartScheduler+0x58> @ imm = #-0x2
 805bbca: e7fe         	b	0x805bbca <xPortStartScheduler+0x58> @ imm = #-0x4
;         while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 805bbcc: e7ff         	b	0x805bbce <xPortStartScheduler+0x5c> @ imm = #-0x2
 805bbce: f817 0c09    	ldrb	r0, [r7, #-9]
 805bbd2: 0600         	lsls	r0, r0, #0x18
 805bbd4: 2800         	cmp	r0, #0x0
 805bbd6: d509         	bpl	0x805bbec <xPortStartScheduler+0x7a> @ imm = #0x12
 805bbd8: e7ff         	b	0x805bbda <xPortStartScheduler+0x68> @ imm = #-0x2
;             ulImplementedPrioBits++;
 805bbda: 9802         	ldr	r0, [sp, #0x8]
 805bbdc: 3001         	adds	r0, #0x1
 805bbde: 9002         	str	r0, [sp, #0x8]
;             ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 805bbe0: f817 0c09    	ldrb	r0, [r7, #-9]
 805bbe4: 0040         	lsls	r0, r0, #0x1
 805bbe6: f807 0c09    	strb	r0, [r7, #-9]
;         while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 805bbea: e7f0         	b	0x805bbce <xPortStartScheduler+0x5c> @ imm = #-0x20
;         if( ulImplementedPrioBits == 8 )
 805bbec: 9802         	ldr	r0, [sp, #0x8]
 805bbee: 2808         	cmp	r0, #0x8
 805bbf0: d107         	bne	0x805bc02 <xPortStartScheduler+0x90> @ imm = #0xe
 805bbf2: e7ff         	b	0x805bbf4 <xPortStartScheduler+0x82> @ imm = #-0x2
;             ulMaxPRIGROUPValue = 0;
 805bbf4: f240 0100    	movw	r1, #0x0
 805bbf8: f2c0 0100    	movt	r1, #0x0
 805bbfc: 2000         	movs	r0, #0x0
 805bbfe: 6008         	str	r0, [r1]
;         }
 805bc00: e008         	b	0x805bc14 <xPortStartScheduler+0xa2> @ imm = #0x10
;             ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
 805bc02: 9802         	ldr	r0, [sp, #0x8]
 805bc04: f1c0 0007    	rsb.w	r0, r0, #0x7
 805bc08: f240 0100    	movw	r1, #0x0
 805bc0c: f2c0 0100    	movt	r1, #0x0
 805bc10: 6008         	str	r0, [r1]
 805bc12: e7ff         	b	0x805bc14 <xPortStartScheduler+0xa2> @ imm = #-0x2
;         ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 805bc14: f240 0100    	movw	r1, #0x0
 805bc18: f2c0 0100    	movt	r1, #0x0
 805bc1c: 6808         	ldr	r0, [r1]
 805bc1e: 0200         	lsls	r0, r0, #0x8
 805bc20: 6008         	str	r0, [r1]
;         ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 805bc22: 6808         	ldr	r0, [r1]
 805bc24: f400 60e0    	and	r0, r0, #0x700
 805bc28: 6008         	str	r0, [r1]
;         portNVIC_SHPR2_REG = ulOriginalPriority;
 805bc2a: 9803         	ldr	r0, [sp, #0xc]
 805bc2c: f64e 511c    	movw	r1, #0xed1c
 805bc30: f2ce 0100    	movt	r1, #0xe000
 805bc34: 6008         	str	r0, [r1]
 805bc36: f64e 5120    	movw	r1, #0xed20
 805bc3a: f2ce 0100    	movt	r1, #0xe000
;     portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 805bc3e: 6808         	ldr	r0, [r1]
 805bc40: f440 007f    	orr	r0, r0, #0xff0000
 805bc44: 6008         	str	r0, [r1]
;     portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 805bc46: 6808         	ldr	r0, [r1]
 805bc48: f040 407f    	orr	r0, r0, #0xff000000
 805bc4c: 6008         	str	r0, [r1]
;         prvSetupMPU();
 805bc4e: f000 f812    	bl	0x805bc76 <prvSetupMPU> @ imm = #0x24
;     vPortSetupTimerInterrupt();
 805bc52: f7ff fffe    	bl	0x805bc52 <xPortStartScheduler+0xe0> @ imm = #-0x4
;     ulCriticalNesting = 0;
 805bc56: f240 0100    	movw	r1, #0x0
 805bc5a: f2c0 0100    	movt	r1, #0x0
 805bc5e: 2000         	movs	r0, #0x0
 805bc60: 9000         	str	r0, [sp]
 805bc62: 6008         	str	r0, [r1]
;     vStartFirstTask();
 805bc64: f7ff fffe    	bl	0x805bc64 <xPortStartScheduler+0xf2> @ imm = #-0x4
;     vTaskSwitchContext();
 805bc68: f7ff fffe    	bl	0x805bc68 <xPortStartScheduler+0xf6> @ imm = #-0x4
;     prvTaskExitError();
 805bc6c: f7ff fffe    	bl	0x805bc6c <xPortStartScheduler+0xfa> @ imm = #-0x4
 805bc70: 9800         	ldr	r0, [sp]
;     return 0;
 805bc72: b004         	add	sp, #0x10
 805bc74: bd80         	pop	{r7, pc}

0805bc76 <prvSetupMPU>:
;     {
 805bc76: b580         	push	{r7, lr}
 805bc78: 466f         	mov	r7, sp
 805bc7a: f64e 5090    	movw	r0, #0xed90
 805bc7e: f2ce 0000    	movt	r0, #0xe000
;         configASSERT( portMPU_TYPE_REG == portEXPECTED_MPU_TYPE_VALUE );
 805bc82: 6800         	ldr	r0, [r0]
 805bc84: f5b0 6f00    	cmp.w	r0, #0x800
 805bc88: d004         	beq	0x805bc94 <prvSetupMPU+0x1e> @ imm = #0x8
 805bc8a: e7ff         	b	0x805bc8c <prvSetupMPU+0x16> @ imm = #-0x2
 805bc8c: f7ff fffe    	bl	0x805bc8c <prvSetupMPU+0x16> @ imm = #-0x4
 805bc90: e7ff         	b	0x805bc92 <prvSetupMPU+0x1c> @ imm = #-0x2
 805bc92: e7fe         	b	0x805bc92 <prvSetupMPU+0x1c> @ imm = #-0x4
 805bc94: f64e 5090    	movw	r0, #0xed90
 805bc98: f2ce 0000    	movt	r0, #0xe000
;         if( portMPU_TYPE_REG == portEXPECTED_MPU_TYPE_VALUE )
 805bc9c: 6800         	ldr	r0, [r0]
 805bc9e: f5b0 6f00    	cmp.w	r0, #0x800
 805bca2: d170         	bne	0x805bd86 <prvSetupMPU+0x110> @ imm = #0xe0
 805bca4: e7ff         	b	0x805bca6 <prvSetupMPU+0x30> @ imm = #-0x2
 805bca6: f64e 51c0    	movw	r1, #0xedc0
 805bcaa: f2ce 0100    	movt	r1, #0xe000
;             portMPU_MAIR0_REG |= ( ( portMPU_NORMAL_MEMORY_BUFFERABLE_CACHEABLE << portMPU_MAIR_ATTR0_POS ) & portMPU_MAIR_ATTR0_MASK );
 805bcae: 6808         	ldr	r0, [r1]
 805bcb0: f040 00ff    	orr	r0, r0, #0xff
 805bcb4: 6008         	str	r0, [r1]
;             portMPU_MAIR0_REG |= ( ( portMPU_DEVICE_MEMORY_nGnRE << portMPU_MAIR_ATTR1_POS ) & portMPU_MAIR_ATTR1_MASK );
 805bcb6: 6808         	ldr	r0, [r1]
 805bcb8: f440 6080    	orr	r0, r0, #0x400
 805bcbc: 6008         	str	r0, [r1]
 805bcbe: f64e 5c98    	movw	r12, #0xed98
 805bcc2: f2ce 0c00    	movt	r12, #0xe000
 805bcc6: 2000         	movs	r0, #0x0
;             portMPU_RNR_REG = portPRIVILEGED_FLASH_REGION;
 805bcc8: f8cc 0000    	str.w	r0, [r12]
;             portMPU_RBAR_REG = ( ( ( uint32_t ) __privileged_functions_start__ ) & portMPU_RBAR_ADDRESS_MASK ) |
 805bccc: f240 0000    	movw	r0, #0x0
 805bcd0: f2c0 0000    	movt	r0, #0x0
 805bcd4: 2104         	movs	r1, #0x4
 805bcd6: f361 0004    	bfi	r0, r1, #0, #5
 805bcda: f64e 539c    	movw	r3, #0xed9c
 805bcde: f2ce 0300    	movt	r3, #0xe000
 805bce2: 6018         	str	r0, [r3]
;             portMPU_RLAR_REG = ( ( ( uint32_t ) __privileged_functions_end__ ) & portMPU_RLAR_ADDRESS_MASK ) |
 805bce4: f240 0000    	movw	r0, #0x0
 805bce8: f2c0 0000    	movt	r0, #0x0
 805bcec: 2201         	movs	r2, #0x1
 805bcee: f362 0004    	bfi	r0, r2, #0, #5
 805bcf2: f64e 51a0    	movw	r1, #0xeda0
 805bcf6: f2ce 0100    	movt	r1, #0xe000
 805bcfa: 6008         	str	r0, [r1]
;             portMPU_RNR_REG = portUNPRIVILEGED_FLASH_REGION;
 805bcfc: f8cc 2000    	str.w	r2, [r12]
;             portMPU_RBAR_REG = ( ( ( uint32_t ) __unprivileged_flash_start__ ) & portMPU_RBAR_ADDRESS_MASK ) |
 805bd00: f240 0000    	movw	r0, #0x0
 805bd04: f2c0 0000    	movt	r0, #0x0
 805bd08: f04f 0e06    	mov.w	lr, #0x6
 805bd0c: f36e 0004    	bfi	r0, lr, #0, #5
 805bd10: 6018         	str	r0, [r3]
;             portMPU_RLAR_REG = ( ( ( uint32_t ) __unprivileged_flash_end__ ) & portMPU_RLAR_ADDRESS_MASK ) |
 805bd12: f240 0000    	movw	r0, #0x0
 805bd16: f2c0 0000    	movt	r0, #0x0
 805bd1a: f362 0004    	bfi	r0, r2, #0, #5
 805bd1e: 6008         	str	r0, [r1]
 805bd20: 2002         	movs	r0, #0x2
;             portMPU_RNR_REG = portUNPRIVILEGED_SYSCALLS_REGION;
 805bd22: f8cc 0000    	str.w	r0, [r12]
;             portMPU_RBAR_REG = ( ( ( uint32_t ) __syscalls_flash_start__ ) & portMPU_RBAR_ADDRESS_MASK ) |
 805bd26: f240 0000    	movw	r0, #0x0
 805bd2a: f2c0 0000    	movt	r0, #0x0
 805bd2e: f36e 0004    	bfi	r0, lr, #0, #5
 805bd32: 6018         	str	r0, [r3]
;             portMPU_RLAR_REG = ( ( ( uint32_t ) __syscalls_flash_end__ ) & portMPU_RLAR_ADDRESS_MASK ) |
 805bd34: f240 0000    	movw	r0, #0x0
 805bd38: f2c0 0000    	movt	r0, #0x0
 805bd3c: f362 0004    	bfi	r0, r2, #0, #5
 805bd40: 6008         	str	r0, [r1]
 805bd42: 2003         	movs	r0, #0x3
;             portMPU_RNR_REG = portPRIVILEGED_RAM_REGION;
 805bd44: f8cc 0000    	str.w	r0, [r12]
;             portMPU_RBAR_REG = ( ( ( uint32_t ) __privileged_sram_start__ ) & portMPU_RBAR_ADDRESS_MASK ) |
 805bd48: f240 0000    	movw	r0, #0x0
 805bd4c: f2c0 0000    	movt	r0, #0x0
 805bd50: f362 0004    	bfi	r0, r2, #0, #5
 805bd54: 6018         	str	r0, [r3]
;             portMPU_RLAR_REG = ( ( ( uint32_t ) __privileged_sram_end__ ) & portMPU_RLAR_ADDRESS_MASK ) |
 805bd56: f240 0000    	movw	r0, #0x0
 805bd5a: f2c0 0000    	movt	r0, #0x0
 805bd5e: f362 0004    	bfi	r0, r2, #0, #5
 805bd62: 6008         	str	r0, [r1]
 805bd64: f64e 5124    	movw	r1, #0xed24
 805bd68: f2ce 0100    	movt	r1, #0xe000
;             portSCB_SYS_HANDLER_CTRL_STATE_REG |= portSCB_MEM_FAULT_ENABLE_BIT;
 805bd6c: 6808         	ldr	r0, [r1]
 805bd6e: f440 3080    	orr	r0, r0, #0x10000
 805bd72: 6008         	str	r0, [r1]
 805bd74: f64e 5194    	movw	r1, #0xed94
 805bd78: f2ce 0100    	movt	r1, #0xe000
;             portMPU_CTRL_REG |= ( portMPU_PRIV_BACKGROUND_ENABLE_BIT | portMPU_ENABLE_BIT );
 805bd7c: 6808         	ldr	r0, [r1]
 805bd7e: f040 0005    	orr	r0, r0, #0x5
 805bd82: 6008         	str	r0, [r1]
;         }
 805bd84: e7ff         	b	0x805bd86 <prvSetupMPU+0x110> @ imm = #-0x2
;     }
 805bd86: bd80         	pop	{r7, pc}

0805bd88 <vPortEndScheduler>:
; {
 805bd88: b580         	push	{r7, lr}
 805bd8a: 466f         	mov	r7, sp
;     configASSERT( ulCriticalNesting == 1000UL );
 805bd8c: f240 0000    	movw	r0, #0x0
 805bd90: f2c0 0000    	movt	r0, #0x0
 805bd94: 6800         	ldr	r0, [r0]
 805bd96: f5b0 7f7a    	cmp.w	r0, #0x3e8
 805bd9a: d004         	beq	0x805bda6 <vPortEndScheduler+0x1e> @ imm = #0x8
 805bd9c: e7ff         	b	0x805bd9e <vPortEndScheduler+0x16> @ imm = #-0x2
 805bd9e: f7ff fffe    	bl	0x805bd9e <vPortEndScheduler+0x16> @ imm = #-0x4
 805bda2: e7ff         	b	0x805bda4 <vPortEndScheduler+0x1c> @ imm = #-0x2
 805bda4: e7fe         	b	0x805bda4 <vPortEndScheduler+0x1c> @ imm = #-0x4
; }
 805bda6: bd80         	pop	{r7, pc}

0805bda8 <vPortStoreTaskMPUSettings>:
;     {
 805bda8: b088         	sub	sp, #0x20
 805bdaa: 9007         	str	r0, [sp, #0x1c]
 805bdac: 9106         	str	r1, [sp, #0x18]
 805bdae: 9205         	str	r2, [sp, #0x14]
 805bdb0: 9304         	str	r3, [sp, #0x10]
 805bdb2: 2000         	movs	r0, #0x0
;         int32_t lIndex = 0;
 805bdb4: 9000         	str	r0, [sp]
;         xMPUSettings->ulMAIR0 = ( ( portMPU_NORMAL_MEMORY_BUFFERABLE_CACHEABLE << portMPU_MAIR_ATTR0_POS ) & portMPU_MAIR_ATTR0_MASK );
 805bdb6: 9907         	ldr	r1, [sp, #0x1c]
 805bdb8: 20ff         	movs	r0, #0xff
 805bdba: 6008         	str	r0, [r1]
;         xMPUSettings->ulMAIR0 |= ( ( portMPU_DEVICE_MEMORY_nGnRE << portMPU_MAIR_ATTR1_POS ) & portMPU_MAIR_ATTR1_MASK );
 805bdbc: 9907         	ldr	r1, [sp, #0x1c]
 805bdbe: 6808         	ldr	r0, [r1]
 805bdc0: f440 6080    	orr	r0, r0, #0x400
 805bdc4: 6008         	str	r0, [r1]
;         if( ulStackDepth > 0 )
 805bdc6: 9804         	ldr	r0, [sp, #0x10]
 805bdc8: b390         	cbz	r0, 0x805be30 <vPortStoreTaskMPUSettings+0x88> @ imm = #0x64
 805bdca: e7ff         	b	0x805bdcc <vPortStoreTaskMPUSettings+0x24> @ imm = #-0x2
;             ulRegionStartAddress = ( uint32_t ) pxBottomOfStack;
 805bdcc: 9805         	ldr	r0, [sp, #0x14]
 805bdce: 9003         	str	r0, [sp, #0xc]
;             ulRegionEndAddress = ( uint32_t ) pxBottomOfStack + ( ulStackDepth * ( uint32_t ) sizeof( StackType_t ) ) - 1;
 805bdd0: 9805         	ldr	r0, [sp, #0x14]
 805bdd2: 9904         	ldr	r1, [sp, #0x10]
 805bdd4: eb00 0081    	add.w	r0, r0, r1, lsl #2
 805bdd8: 3801         	subs	r0, #0x1
 805bdda: 9002         	str	r0, [sp, #0x8]
;             if( ( ulRegionStartAddress >= ( uint32_t ) __privileged_sram_start__ ) &&
 805bddc: 9803         	ldr	r0, [sp, #0xc]
 805bdde: f240 0100    	movw	r1, #0x0
 805bde2: f2c0 0100    	movt	r1, #0x0
 805bde6: 4288         	cmp	r0, r1
 805bde8: d30e         	blo	0x805be08 <vPortStoreTaskMPUSettings+0x60> @ imm = #0x1c
 805bdea: e7ff         	b	0x805bdec <vPortStoreTaskMPUSettings+0x44> @ imm = #-0x2
;                 ( ulRegionEndAddress <= ( uint32_t ) __privileged_sram_end__ ) )
 805bdec: 9802         	ldr	r0, [sp, #0x8]
 805bdee: f240 0100    	movw	r1, #0x0
 805bdf2: f2c0 0100    	movt	r1, #0x0
;             if( ( ulRegionStartAddress >= ( uint32_t ) __privileged_sram_start__ ) &&
 805bdf6: 4288         	cmp	r0, r1
 805bdf8: d806         	bhi	0x805be08 <vPortStoreTaskMPUSettings+0x60> @ imm = #0xc
 805bdfa: e7ff         	b	0x805bdfc <vPortStoreTaskMPUSettings+0x54> @ imm = #-0x2
;                 xMPUSettings->xRegionsSettings[ 0 ].ulRBAR = 0;
 805bdfc: 9907         	ldr	r1, [sp, #0x1c]
 805bdfe: 2000         	movs	r0, #0x0
 805be00: 6048         	str	r0, [r1, #0x4]
;                 xMPUSettings->xRegionsSettings[ 0 ].ulRLAR = 0;
 805be02: 9907         	ldr	r1, [sp, #0x1c]
 805be04: 6088         	str	r0, [r1, #0x8]
;             }
 805be06: e012         	b	0x805be2e <vPortStoreTaskMPUSettings+0x86> @ imm = #0x24
;                 ulRegionStartAddress &= portMPU_RBAR_ADDRESS_MASK;
 805be08: 9803         	ldr	r0, [sp, #0xc]
 805be0a: f020 001f    	bic	r0, r0, #0x1f
 805be0e: 9003         	str	r0, [sp, #0xc]
;                 ulRegionEndAddress &= portMPU_RLAR_ADDRESS_MASK;
 805be10: 9802         	ldr	r0, [sp, #0x8]
 805be12: f020 001f    	bic	r0, r0, #0x1f
 805be16: 9002         	str	r0, [sp, #0x8]
;                 xMPUSettings->xRegionsSettings[ 0 ].ulRBAR = ( ulRegionStartAddress ) |
 805be18: 9803         	ldr	r0, [sp, #0xc]
;                                                              ( portMPU_REGION_READ_WRITE ) |
 805be1a: f040 0003    	orr	r0, r0, #0x3
;                 xMPUSettings->xRegionsSettings[ 0 ].ulRBAR = ( ulRegionStartAddress ) |
 805be1e: 9907         	ldr	r1, [sp, #0x1c]
 805be20: 6048         	str	r0, [r1, #0x4]
;                 xMPUSettings->xRegionsSettings[ 0 ].ulRLAR = ( ulRegionEndAddress ) |
 805be22: 9802         	ldr	r0, [sp, #0x8]
;                                                              ( portMPU_RLAR_ATTR_INDEX0 ) |
 805be24: f040 0001    	orr	r0, r0, #0x1
;                 xMPUSettings->xRegionsSettings[ 0 ].ulRLAR = ( ulRegionEndAddress ) |
 805be28: 9907         	ldr	r1, [sp, #0x1c]
 805be2a: 6088         	str	r0, [r1, #0x8]
 805be2c: e7ff         	b	0x805be2e <vPortStoreTaskMPUSettings+0x86> @ imm = #-0x2
;         }
 805be2e: e7ff         	b	0x805be30 <vPortStoreTaskMPUSettings+0x88> @ imm = #-0x2
 805be30: 2001         	movs	r0, #0x1
;         for( ulRegionNumber = 1; ulRegionNumber <= portNUM_CONFIGURABLE_REGIONS; ulRegionNumber++ )
 805be32: 9001         	str	r0, [sp, #0x4]
 805be34: e7ff         	b	0x805be36 <vPortStoreTaskMPUSettings+0x8e> @ imm = #-0x2
 805be36: 9801         	ldr	r0, [sp, #0x4]
 805be38: 2803         	cmp	r0, #0x3
 805be3a: f200 8090    	bhi.w	0x805bf5e <vPortStoreTaskMPUSettings+0x1b6> @ imm = #0x120
 805be3e: e7ff         	b	0x805be40 <vPortStoreTaskMPUSettings+0x98> @ imm = #-0x2
;             if( ( xRegions != NULL ) && ( xRegions[ lIndex ].ulLengthInBytes > 0UL ) )
 805be40: 9806         	ldr	r0, [sp, #0x18]
 805be42: 2800         	cmp	r0, #0x0
 805be44: d077         	beq	0x805bf36 <vPortStoreTaskMPUSettings+0x18e> @ imm = #0xee
 805be46: e7ff         	b	0x805be48 <vPortStoreTaskMPUSettings+0xa0> @ imm = #-0x2
 805be48: 9806         	ldr	r0, [sp, #0x18]
 805be4a: 9900         	ldr	r1, [sp]
 805be4c: eb01 0141    	add.w	r1, r1, r1, lsl #1
 805be50: eb00 0081    	add.w	r0, r0, r1, lsl #2
 805be54: 6840         	ldr	r0, [r0, #0x4]
 805be56: 2800         	cmp	r0, #0x0
 805be58: d06d         	beq	0x805bf36 <vPortStoreTaskMPUSettings+0x18e> @ imm = #0xda
 805be5a: e7ff         	b	0x805be5c <vPortStoreTaskMPUSettings+0xb4> @ imm = #-0x2
;                 ulRegionStartAddress = ( ( uint32_t ) xRegions[ lIndex ].pvBaseAddress ) & portMPU_RBAR_ADDRESS_MASK;
 805be5c: 9806         	ldr	r0, [sp, #0x18]
 805be5e: 9900         	ldr	r1, [sp]
 805be60: eb01 0141    	add.w	r1, r1, r1, lsl #1
 805be64: f850 0021    	ldr.w	r0, [r0, r1, lsl #2]
 805be68: f020 001f    	bic	r0, r0, #0x1f
 805be6c: 9003         	str	r0, [sp, #0xc]
;                 ulRegionEndAddress = ( uint32_t ) xRegions[ lIndex ].pvBaseAddress + xRegions[ lIndex ].ulLengthInBytes - 1;
 805be6e: 9806         	ldr	r0, [sp, #0x18]
 805be70: 9900         	ldr	r1, [sp]
 805be72: eb01 0241    	add.w	r2, r1, r1, lsl #1
 805be76: eb00 0182    	add.w	r1, r0, r2, lsl #2
 805be7a: f850 0022    	ldr.w	r0, [r0, r2, lsl #2]
 805be7e: 6849         	ldr	r1, [r1, #0x4]
 805be80: 4408         	add	r0, r1
 805be82: 3801         	subs	r0, #0x1
 805be84: 9002         	str	r0, [sp, #0x8]
;                 ulRegionEndAddress &= portMPU_RLAR_ADDRESS_MASK;
 805be86: 9802         	ldr	r0, [sp, #0x8]
 805be88: f020 001f    	bic	r0, r0, #0x1f
 805be8c: 9002         	str	r0, [sp, #0x8]
;                 xMPUSettings->xRegionsSettings[ ulRegionNumber ].ulRBAR = ( ulRegionStartAddress ) |
 805be8e: 9803         	ldr	r0, [sp, #0xc]
 805be90: 9907         	ldr	r1, [sp, #0x1c]
 805be92: 9a01         	ldr	r2, [sp, #0x4]
 805be94: eb01 01c2    	add.w	r1, r1, r2, lsl #3
 805be98: 6048         	str	r0, [r1, #0x4]
;                 if( ( xRegions[ lIndex ].ulParameters & tskMPU_REGION_READ_ONLY ) != 0 )
 805be9a: 9806         	ldr	r0, [sp, #0x18]
 805be9c: 9900         	ldr	r1, [sp]
 805be9e: eb01 0141    	add.w	r1, r1, r1, lsl #1
 805bea2: eb00 0081    	add.w	r0, r0, r1, lsl #2
 805bea6: 7a00         	ldrb	r0, [r0, #0x8]
 805bea8: 07c0         	lsls	r0, r0, #0x1f
 805beaa: b148         	cbz	r0, 0x805bec0 <vPortStoreTaskMPUSettings+0x118> @ imm = #0x12
 805beac: e7ff         	b	0x805beae <vPortStoreTaskMPUSettings+0x106> @ imm = #-0x2
;                     xMPUSettings->xRegionsSettings[ ulRegionNumber ].ulRBAR |= ( portMPU_REGION_READ_ONLY );
 805beae: 9807         	ldr	r0, [sp, #0x1c]
 805beb0: 9901         	ldr	r1, [sp, #0x4]
 805beb2: eb00 01c1    	add.w	r1, r0, r1, lsl #3
 805beb6: 6848         	ldr	r0, [r1, #0x4]
 805beb8: f040 0006    	orr	r0, r0, #0x6
 805bebc: 6048         	str	r0, [r1, #0x4]
;                 }
 805bebe: e008         	b	0x805bed2 <vPortStoreTaskMPUSettings+0x12a> @ imm = #0x10
;                     xMPUSettings->xRegionsSettings[ ulRegionNumber ].ulRBAR |= ( portMPU_REGION_READ_WRITE );
 805bec0: 9807         	ldr	r0, [sp, #0x1c]
 805bec2: 9901         	ldr	r1, [sp, #0x4]
 805bec4: eb00 01c1    	add.w	r1, r0, r1, lsl #3
 805bec8: 6848         	ldr	r0, [r1, #0x4]
 805beca: f040 0002    	orr	r0, r0, #0x2
 805bece: 6048         	str	r0, [r1, #0x4]
 805bed0: e7ff         	b	0x805bed2 <vPortStoreTaskMPUSettings+0x12a> @ imm = #-0x2
;                 if( ( xRegions[ lIndex ].ulParameters & tskMPU_REGION_EXECUTE_NEVER ) != 0 )
 805bed2: 9806         	ldr	r0, [sp, #0x18]
 805bed4: 9900         	ldr	r1, [sp]
 805bed6: eb01 0141    	add.w	r1, r1, r1, lsl #1
 805beda: eb00 0081    	add.w	r0, r0, r1, lsl #2
 805bede: 7a00         	ldrb	r0, [r0, #0x8]
 805bee0: 0740         	lsls	r0, r0, #0x1d
 805bee2: 2800         	cmp	r0, #0x0
 805bee4: d509         	bpl	0x805befa <vPortStoreTaskMPUSettings+0x152> @ imm = #0x12
 805bee6: e7ff         	b	0x805bee8 <vPortStoreTaskMPUSettings+0x140> @ imm = #-0x2
;                     xMPUSettings->xRegionsSettings[ ulRegionNumber ].ulRBAR |= ( portMPU_REGION_EXECUTE_NEVER );
 805bee8: 9807         	ldr	r0, [sp, #0x1c]
 805beea: 9901         	ldr	r1, [sp, #0x4]
 805beec: eb00 01c1    	add.w	r1, r0, r1, lsl #3
 805bef0: 6848         	ldr	r0, [r1, #0x4]
 805bef2: f040 0001    	orr	r0, r0, #0x1
 805bef6: 6048         	str	r0, [r1, #0x4]
;                 }
 805bef8: e7ff         	b	0x805befa <vPortStoreTaskMPUSettings+0x152> @ imm = #-0x2
;                 xMPUSettings->xRegionsSettings[ ulRegionNumber ].ulRLAR = ( ulRegionEndAddress ) |
 805befa: 9802         	ldr	r0, [sp, #0x8]
 805befc: f040 0001    	orr	r0, r0, #0x1
 805bf00: 9907         	ldr	r1, [sp, #0x1c]
 805bf02: 9a01         	ldr	r2, [sp, #0x4]
 805bf04: eb01 01c2    	add.w	r1, r1, r2, lsl #3
 805bf08: 6088         	str	r0, [r1, #0x8]
;                 if( ( xRegions[ lIndex ].ulParameters & tskMPU_REGION_DEVICE_MEMORY ) != 0 )
 805bf0a: 9806         	ldr	r0, [sp, #0x18]
 805bf0c: 9900         	ldr	r1, [sp]
 805bf0e: eb01 0141    	add.w	r1, r1, r1, lsl #1
 805bf12: eb00 0081    	add.w	r0, r0, r1, lsl #2
 805bf16: 7a00         	ldrb	r0, [r0, #0x8]
 805bf18: 06c0         	lsls	r0, r0, #0x1b
 805bf1a: 2800         	cmp	r0, #0x0
 805bf1c: d509         	bpl	0x805bf32 <vPortStoreTaskMPUSettings+0x18a> @ imm = #0x12
 805bf1e: e7ff         	b	0x805bf20 <vPortStoreTaskMPUSettings+0x178> @ imm = #-0x2
;                     xMPUSettings->xRegionsSettings[ ulRegionNumber ].ulRLAR |= portMPU_RLAR_ATTR_INDEX1;
 805bf20: 9807         	ldr	r0, [sp, #0x1c]
 805bf22: 9901         	ldr	r1, [sp, #0x4]
 805bf24: eb00 01c1    	add.w	r1, r0, r1, lsl #3
 805bf28: 6888         	ldr	r0, [r1, #0x8]
 805bf2a: f040 0002    	orr	r0, r0, #0x2
 805bf2e: 6088         	str	r0, [r1, #0x8]
;                 }
 805bf30: e000         	b	0x805bf34 <vPortStoreTaskMPUSettings+0x18c> @ imm = #0x0
 805bf32: e7ff         	b	0x805bf34 <vPortStoreTaskMPUSettings+0x18c> @ imm = #-0x2
;             }
 805bf34: e00b         	b	0x805bf4e <vPortStoreTaskMPUSettings+0x1a6> @ imm = #0x16
;                 xMPUSettings->xRegionsSettings[ ulRegionNumber ].ulRBAR = 0UL;
 805bf36: 9807         	ldr	r0, [sp, #0x1c]
 805bf38: 9901         	ldr	r1, [sp, #0x4]
 805bf3a: eb00 01c1    	add.w	r1, r0, r1, lsl #3
 805bf3e: 2000         	movs	r0, #0x0
 805bf40: 6048         	str	r0, [r1, #0x4]
;                 xMPUSettings->xRegionsSettings[ ulRegionNumber ].ulRLAR = 0UL;
 805bf42: 9907         	ldr	r1, [sp, #0x1c]
 805bf44: 9a01         	ldr	r2, [sp, #0x4]
 805bf46: eb01 01c2    	add.w	r1, r1, r2, lsl #3
 805bf4a: 6088         	str	r0, [r1, #0x8]
 805bf4c: e7ff         	b	0x805bf4e <vPortStoreTaskMPUSettings+0x1a6> @ imm = #-0x2
;             lIndex++;
 805bf4e: 9800         	ldr	r0, [sp]
 805bf50: 3001         	adds	r0, #0x1
 805bf52: 9000         	str	r0, [sp]
;         }
 805bf54: e7ff         	b	0x805bf56 <vPortStoreTaskMPUSettings+0x1ae> @ imm = #-0x2
;         for( ulRegionNumber = 1; ulRegionNumber <= portNUM_CONFIGURABLE_REGIONS; ulRegionNumber++ )
 805bf56: 9801         	ldr	r0, [sp, #0x4]
 805bf58: 3001         	adds	r0, #0x1
 805bf5a: 9001         	str	r0, [sp, #0x4]
 805bf5c: e76b         	b	0x805be36 <vPortStoreTaskMPUSettings+0x8e> @ imm = #-0x12a
;     }
 805bf5e: b008         	add	sp, #0x20
 805bf60: 4770         	bx	lr

0805bf62 <xPortIsAuthorizedToAccessBuffer>:
;     {
 805bf62: b580         	push	{r7, lr}
 805bf64: 466f         	mov	r7, sp
 805bf66: b088         	sub	sp, #0x20
 805bf68: 9007         	str	r0, [sp, #0x1c]
 805bf6a: 9106         	str	r1, [sp, #0x18]
 805bf6c: 9205         	str	r2, [sp, #0x14]
 805bf6e: 2000         	movs	r0, #0x0
;         BaseType_t xAccessGranted = pdFALSE;
 805bf70: 9001         	str	r0, [sp, #0x4]
;         const xMPU_SETTINGS * xTaskMpuSettings = xTaskGetMPUSettings( NULL ); /* Calling task's MPU settings. */
 805bf72: f7ff fffe    	bl	0x805bf72 <xPortIsAuthorizedToAccessBuffer+0x10> @ imm = #-0x4
 805bf76: 9000         	str	r0, [sp]
;         if( ( xTaskMpuSettings->ulTaskFlags & portTASK_IS_PRIVILEGED_FLAG ) == portTASK_IS_PRIVILEGED_FLAG )
 805bf78: 9800         	ldr	r0, [sp]
 805bf7a: f890 0078    	ldrb.w	r0, [r0, #0x78]
 805bf7e: 0780         	lsls	r0, r0, #0x1e
 805bf80: 2800         	cmp	r0, #0x0
 805bf82: d503         	bpl	0x805bf8c <xPortIsAuthorizedToAccessBuffer+0x2a> @ imm = #0x6
 805bf84: e7ff         	b	0x805bf86 <xPortIsAuthorizedToAccessBuffer+0x24> @ imm = #-0x2
 805bf86: 2001         	movs	r0, #0x1
;             xAccessGranted = pdTRUE;
 805bf88: 9001         	str	r0, [sp, #0x4]
;         }
 805bf8a: e05e         	b	0x805c04a <xPortIsAuthorizedToAccessBuffer+0xe8> @ imm = #0xbc
;             if( portADD_UINT32_WILL_OVERFLOW( ( ( uint32_t ) pvBuffer ), ( ulBufferLength - 1UL ) ) == pdFALSE )
 805bf8c: 9807         	ldr	r0, [sp, #0x1c]
 805bf8e: 9906         	ldr	r1, [sp, #0x18]
 805bf90: 4249         	rsbs	r1, r1, #0
 805bf92: 4288         	cmp	r0, r1
 805bf94: d858         	bhi	0x805c048 <xPortIsAuthorizedToAccessBuffer+0xe6> @ imm = #0xb0
 805bf96: e7ff         	b	0x805bf98 <xPortIsAuthorizedToAccessBuffer+0x36> @ imm = #-0x2
;                 ulBufferStartAddress = ( uint32_t ) pvBuffer;
 805bf98: 9807         	ldr	r0, [sp, #0x1c]
 805bf9a: 9003         	str	r0, [sp, #0xc]
;                 ulBufferEndAddress = ( ( ( uint32_t ) pvBuffer ) + ulBufferLength - 1UL );
 805bf9c: 9807         	ldr	r0, [sp, #0x1c]
 805bf9e: 9906         	ldr	r1, [sp, #0x18]
 805bfa0: 4408         	add	r0, r1
 805bfa2: 3801         	subs	r0, #0x1
 805bfa4: 9002         	str	r0, [sp, #0x8]
 805bfa6: 2000         	movs	r0, #0x0
;                 for( i = 0; i < portTOTAL_NUM_REGIONS; i++ )
 805bfa8: 9004         	str	r0, [sp, #0x10]
 805bfaa: e7ff         	b	0x805bfac <xPortIsAuthorizedToAccessBuffer+0x4a> @ imm = #-0x2
 805bfac: 9804         	ldr	r0, [sp, #0x10]
 805bfae: 2803         	cmp	r0, #0x3
 805bfb0: d849         	bhi	0x805c046 <xPortIsAuthorizedToAccessBuffer+0xe4> @ imm = #0x92
 805bfb2: e7ff         	b	0x805bfb4 <xPortIsAuthorizedToAccessBuffer+0x52> @ imm = #-0x2
;                     if( ( xTaskMpuSettings->xRegionsSettings[ i ].ulRLAR & portMPU_RLAR_REGION_ENABLE ) == portMPU_RLAR_REGION_ENABLE )
 805bfb4: 9800         	ldr	r0, [sp]
 805bfb6: 9904         	ldr	r1, [sp, #0x10]
 805bfb8: eb00 00c1    	add.w	r0, r0, r1, lsl #3
 805bfbc: 7a00         	ldrb	r0, [r0, #0x8]
 805bfbe: 07c0         	lsls	r0, r0, #0x1f
 805bfc0: b3e0         	cbz	r0, 0x805c03c <xPortIsAuthorizedToAccessBuffer+0xda> @ imm = #0x78
 805bfc2: e7ff         	b	0x805bfc4 <xPortIsAuthorizedToAccessBuffer+0x62> @ imm = #-0x2
;                         if( portIS_ADDRESS_WITHIN_RANGE( ulBufferStartAddress,
 805bfc4: 9803         	ldr	r0, [sp, #0xc]
 805bfc6: 9900         	ldr	r1, [sp]
 805bfc8: 9a04         	ldr	r2, [sp, #0x10]
 805bfca: eb01 01c2    	add.w	r1, r1, r2, lsl #3
 805bfce: 6849         	ldr	r1, [r1, #0x4]
 805bfd0: f021 011f    	bic	r1, r1, #0x1f
 805bfd4: 4288         	cmp	r0, r1
 805bfd6: d330         	blo	0x805c03a <xPortIsAuthorizedToAccessBuffer+0xd8> @ imm = #0x60
 805bfd8: e7ff         	b	0x805bfda <xPortIsAuthorizedToAccessBuffer+0x78> @ imm = #-0x2
 805bfda: 9803         	ldr	r0, [sp, #0xc]
 805bfdc: 9900         	ldr	r1, [sp]
 805bfde: 9a04         	ldr	r2, [sp, #0x10]
 805bfe0: eb01 01c2    	add.w	r1, r1, r2, lsl #3
 805bfe4: 6889         	ldr	r1, [r1, #0x8]
 805bfe6: f041 011f    	orr	r1, r1, #0x1f
;                                                          portEXTRACT_LAST_ADDRESS_FROM_RLAR( xTaskMpuSettings->xRegionsSettings[ i ].ulRLAR ) ) &&
 805bfea: 4288         	cmp	r0, r1
 805bfec: d825         	bhi	0x805c03a <xPortIsAuthorizedToAccessBuffer+0xd8> @ imm = #0x4a
 805bfee: e7ff         	b	0x805bff0 <xPortIsAuthorizedToAccessBuffer+0x8e> @ imm = #-0x2
;                             portIS_ADDRESS_WITHIN_RANGE( ulBufferEndAddress,
 805bff0: 9802         	ldr	r0, [sp, #0x8]
 805bff2: 9900         	ldr	r1, [sp]
 805bff4: 9a04         	ldr	r2, [sp, #0x10]
 805bff6: eb01 01c2    	add.w	r1, r1, r2, lsl #3
 805bffa: 6849         	ldr	r1, [r1, #0x4]
 805bffc: f021 011f    	bic	r1, r1, #0x1f
 805c000: 4288         	cmp	r0, r1
 805c002: d31a         	blo	0x805c03a <xPortIsAuthorizedToAccessBuffer+0xd8> @ imm = #0x34
 805c004: e7ff         	b	0x805c006 <xPortIsAuthorizedToAccessBuffer+0xa4> @ imm = #-0x2
 805c006: 9802         	ldr	r0, [sp, #0x8]
 805c008: 9900         	ldr	r1, [sp]
 805c00a: 9a04         	ldr	r2, [sp, #0x10]
 805c00c: eb01 01c2    	add.w	r1, r1, r2, lsl #3
 805c010: 6889         	ldr	r1, [r1, #0x8]
 805c012: f041 011f    	orr	r1, r1, #0x1f
;                                                          portEXTRACT_LAST_ADDRESS_FROM_RLAR( xTaskMpuSettings->xRegionsSettings[ i ].ulRLAR ) ) &&
 805c016: 4288         	cmp	r0, r1
 805c018: d80f         	bhi	0x805c03a <xPortIsAuthorizedToAccessBuffer+0xd8> @ imm = #0x1e
 805c01a: e7ff         	b	0x805c01c <xPortIsAuthorizedToAccessBuffer+0xba> @ imm = #-0x2
;                             portIS_AUTHORIZED( ulAccessRequested,
 805c01c: 9800         	ldr	r0, [sp]
 805c01e: 9904         	ldr	r1, [sp, #0x10]
 805c020: eb00 00c1    	add.w	r0, r0, r1, lsl #3
 805c024: 6840         	ldr	r0, [r0, #0x4]
 805c026: f000 f813    	bl	0x805c050 <prvGetRegionAccessPermissions> @ imm = #0x26
 805c02a: 9905         	ldr	r1, [sp, #0x14]
 805c02c: 4008         	ands	r0, r1
;                         if( portIS_ADDRESS_WITHIN_RANGE( ulBufferStartAddress,
 805c02e: 4288         	cmp	r0, r1
 805c030: d103         	bne	0x805c03a <xPortIsAuthorizedToAccessBuffer+0xd8> @ imm = #0x6
 805c032: e7ff         	b	0x805c034 <xPortIsAuthorizedToAccessBuffer+0xd2> @ imm = #-0x2
 805c034: 2001         	movs	r0, #0x1
;                             xAccessGranted = pdTRUE;
 805c036: 9001         	str	r0, [sp, #0x4]
;                             break;
 805c038: e005         	b	0x805c046 <xPortIsAuthorizedToAccessBuffer+0xe4> @ imm = #0xa
;                     }
 805c03a: e7ff         	b	0x805c03c <xPortIsAuthorizedToAccessBuffer+0xda> @ imm = #-0x2
;                 }
 805c03c: e7ff         	b	0x805c03e <xPortIsAuthorizedToAccessBuffer+0xdc> @ imm = #-0x2
;                 for( i = 0; i < portTOTAL_NUM_REGIONS; i++ )
 805c03e: 9804         	ldr	r0, [sp, #0x10]
 805c040: 3001         	adds	r0, #0x1
 805c042: 9004         	str	r0, [sp, #0x10]
 805c044: e7b2         	b	0x805bfac <xPortIsAuthorizedToAccessBuffer+0x4a> @ imm = #-0x9c
;             }
 805c046: e7ff         	b	0x805c048 <xPortIsAuthorizedToAccessBuffer+0xe6> @ imm = #-0x2
 805c048: e7ff         	b	0x805c04a <xPortIsAuthorizedToAccessBuffer+0xe8> @ imm = #-0x2
;         return xAccessGranted;
 805c04a: 9801         	ldr	r0, [sp, #0x4]
 805c04c: b008         	add	sp, #0x20
 805c04e: bd80         	pop	{r7, pc}

0805c050 <prvGetRegionAccessPermissions>:
;     {
 805c050: b082         	sub	sp, #0x8
 805c052: 9001         	str	r0, [sp, #0x4]
 805c054: 2000         	movs	r0, #0x0
;         uint32_t ulAccessPermissions = 0;
 805c056: 9000         	str	r0, [sp]
;         if( ( ulRBARValue & portMPU_RBAR_ACCESS_PERMISSIONS_MASK ) == portMPU_REGION_READ_ONLY )
 805c058: 9801         	ldr	r0, [sp, #0x4]
 805c05a: f000 0006    	and	r0, r0, #0x6
 805c05e: 2806         	cmp	r0, #0x6
 805c060: d103         	bne	0x805c06a <prvGetRegionAccessPermissions+0x1a> @ imm = #0x6
 805c062: e7ff         	b	0x805c064 <prvGetRegionAccessPermissions+0x14> @ imm = #-0x2
 805c064: 2001         	movs	r0, #0x1
;             ulAccessPermissions = tskMPU_READ_PERMISSION;
 805c066: 9000         	str	r0, [sp]
;         }
 805c068: e7ff         	b	0x805c06a <prvGetRegionAccessPermissions+0x1a> @ imm = #-0x2
;         if( ( ulRBARValue & portMPU_RBAR_ACCESS_PERMISSIONS_MASK ) == portMPU_REGION_READ_WRITE )
 805c06a: 9801         	ldr	r0, [sp, #0x4]
 805c06c: f000 0006    	and	r0, r0, #0x6
 805c070: 2802         	cmp	r0, #0x2
 805c072: d103         	bne	0x805c07c <prvGetRegionAccessPermissions+0x2c> @ imm = #0x6
 805c074: e7ff         	b	0x805c076 <prvGetRegionAccessPermissions+0x26> @ imm = #-0x2
 805c076: 2003         	movs	r0, #0x3
;             ulAccessPermissions = ( tskMPU_READ_PERMISSION | tskMPU_WRITE_PERMISSION );
 805c078: 9000         	str	r0, [sp]
;         }
 805c07a: e7ff         	b	0x805c07c <prvGetRegionAccessPermissions+0x2c> @ imm = #-0x2
;         return ulAccessPermissions;
 805c07c: 9800         	ldr	r0, [sp]
 805c07e: b002         	add	sp, #0x8
 805c080: 4770         	bx	lr
		...
 805c08e: 0000         	movs	r0, r0

0805c090 <vRestoreContextOfFirstTask>:
;         __asm volatile
 805c090: 4a1b         	ldr	r2, [pc, #0x6c]         @ 0x805c100 <pxCurrentTCBConst2>
 805c092: 6810         	ldr	r0, [r2]
 805c094: f3bf 8f5f    	dmb	sy
 805c098: 491a         	ldr	r1, [pc, #0x68]         @ 0x805c104 <xMPUCTRLConst2>
 805c09a: 680a         	ldr	r2, [r1]
 805c09c: f022 0201    	bic	r2, r2, #0x1
 805c0a0: 600a         	str	r2, [r1]
 805c0a2: 3004         	adds	r0, #0x4
 805c0a4: 6801         	ldr	r1, [r0]
 805c0a6: 4a18         	ldr	r2, [pc, #0x60]         @ 0x805c108 <xMAIR0Const2>
 805c0a8: 6011         	str	r1, [r2]
 805c0aa: 3004         	adds	r0, #0x4
 805c0ac: 4917         	ldr	r1, [pc, #0x5c]         @ 0x805c10c <xRNRConst2>
 805c0ae: 4a18         	ldr	r2, [pc, #0x60]         @ 0x805c110 <xRBARConst2>
 805c0b0: 2304         	movs	r3, #0x4
 805c0b2: 600b         	str	r3, [r1]
 805c0b4: e8b0 0ff0    	ldm.w	r0!, {r4, r5, r6, r7, r8, r9, r10, r11}
 805c0b8: e882 0ff0    	stm.w	r2, {r4, r5, r6, r7, r8, r9, r10, r11}
 805c0bc: 4911         	ldr	r1, [pc, #0x44]         @ 0x805c104 <xMPUCTRLConst2>
 805c0be: 680a         	ldr	r2, [r1]
 805c0c0: f042 0201    	orr	r2, r2, #0x1
 805c0c4: 600a         	str	r2, [r1]
 805c0c6: f3bf 8f4f    	dsb	sy

0805c0ca <restore_context_first_task>:
 805c0ca: 4a0d         	ldr	r2, [pc, #0x34]         @ 0x805c100 <pxCurrentTCBConst2>
 805c0cc: 6810         	ldr	r0, [r2]
 805c0ce: 6801         	ldr	r1, [r0]

0805c0d0 <restore_special_regs_first_task>:
 805c0d0: e931 401c    	ldmdb	r1!, {r2, r3, r4, lr}
 805c0d4: f382 8809    	msr	psp, r2
 805c0d8: f383 880b    	msr	psplim, r3
 805c0dc: f384 8814    	msr	control, r4

0805c0e0 <restore_general_regs_first_task>:
 805c0e0: e931 0ff0    	ldmdb	r1!, {r4, r5, r6, r7, r8, r9, r10, r11}
 805c0e4: e8a2 0ff0    	stm.w	r2!, {r4, r5, r6, r7, r8, r9, r10, r11}
 805c0e8: e931 0ff0    	ldmdb	r1!, {r4, r5, r6, r7, r8, r9, r10, r11}

0805c0ec <restore_context_done_first_task>:
 805c0ec: 6001         	str	r1, [r0]
 805c0ee: f04f 0000    	mov.w	r0, #0x0
 805c0f2: f380 8811    	msr	basepri, r0
 805c0f6: 4770         	bx	lr
 805c0f8: bf00         	nop
 805c0fa: bf00         	nop
 805c0fc: bf00         	nop
 805c0fe: bf00         	nop

0805c100 <pxCurrentTCBConst2>:
 805c100: 00 00 00 00  	.word	0x00000000

0805c104 <xMPUCTRLConst2>:
 805c104: 94 ed 00 e0  	.word	0xe000ed94

0805c108 <xMAIR0Const2>:
 805c108: c0 ed 00 e0  	.word	0xe000edc0

0805c10c <xRNRConst2>:
 805c10c: 98 ed 00 e0  	.word	0xe000ed98

0805c110 <xRBARConst2>:
 805c110: 9c ed 00 e0  	.word	0xe000ed9c

0805c114 <vRaisePrivilege>:
;     __asm volatile
 805c114: f3ef 8014    	mrs	r0, control
 805c118: f020 0001    	bic	r0, r0, #0x1
 805c11c: f380 8814    	msr	control, r0
 805c120: 4770         	bx	lr

0805c122 <vStartFirstTask>:
;     __asm volatile
 805c122: 4807         	ldr	r0, [pc, #0x1c]         @ 0x805c140 <xVTORConst>
 805c124: 6800         	ldr	r0, [r0]
 805c126: 6800         	ldr	r0, [r0]
 805c128: f380 8808    	msr	msp, r0
 805c12c: b662         	cpsie i
 805c12e: b661         	cpsie f
 805c130: f3bf 8f4f    	dsb	sy
 805c134: f3bf 8f6f    	isb	sy
 805c138: df02         	svc	#0x2
 805c13a: bf00         	nop
 805c13c: bf00         	nop
 805c13e: bf00         	nop

0805c140 <xVTORConst>:
 805c140: 08 ed 00 e0  	.word	0xe000ed08

0805c144 <ulSetInterruptMask>:
;     __asm volatile
 805c144: f3ef 8011    	mrs	r0, basepri
 805c148: f04f 01a0    	mov.w	r1, #0xa0
 805c14c: f381 8811    	msr	basepri, r1
 805c150: f3bf 8f4f    	dsb	sy
 805c154: f3bf 8f6f    	isb	sy
 805c158: 4770         	bx	lr

0805c15a <vClearInterruptMask>:
;     __asm volatile
 805c15a: f380 8811    	msr	basepri, r0
 805c15e: f3bf 8f4f    	dsb	sy
 805c162: f3bf 8f6f    	isb	sy
 805c166: 4770         	bx	lr

0805c168 <PendSV_Handler>:
;         __asm volatile
 805c168: 4a29         	ldr	r2, [pc, #0xa4]         @ 0x805c210 <pxCurrentTCBConst>
 805c16a: 6810         	ldr	r0, [r2]
 805c16c: 6801         	ldr	r1, [r0]
 805c16e: f3ef 8209    	mrs	r2, psp

0805c172 <save_general_regs>:
 805c172: e8a1 0ff0    	stm.w	r1!, {r4, r5, r6, r7, r8, r9, r10, r11}
 805c176: e892 0ff0    	ldm.w	r2, {r4, r5, r6, r7, r8, r9, r10, r11}
 805c17a: e8a1 0ff0    	stm.w	r1!, {r4, r5, r6, r7, r8, r9, r10, r11}

0805c17e <save_special_regs>:
 805c17e: f3ef 830b    	mrs	r3, psplim
 805c182: f3ef 8414    	mrs	r4, control
 805c186: e8a1 401c    	stm.w	r1!, {r2, r3, r4, lr}
 805c18a: 6001         	str	r1, [r0]

0805c18c <select_next_task>:
 805c18c: f04f 00a0    	mov.w	r0, #0xa0
 805c190: f380 8811    	msr	basepri, r0
 805c194: f3bf 8f4f    	dsb	sy
 805c198: f3bf 8f6f    	isb	sy
 805c19c: f7ff fffe    	bl	0x805c19c <select_next_task+0x10> @ imm = #-0x4
 805c1a0: f04f 0000    	mov.w	r0, #0x0
 805c1a4: f380 8811    	msr	basepri, r0

0805c1a8 <program_mpu>:
 805c1a8: 4a19         	ldr	r2, [pc, #0x64]         @ 0x805c210 <pxCurrentTCBConst>
 805c1aa: 6810         	ldr	r0, [r2]
 805c1ac: f3bf 8f5f    	dmb	sy
 805c1b0: 4918         	ldr	r1, [pc, #0x60]         @ 0x805c214 <xMPUCTRLConst>
 805c1b2: 680a         	ldr	r2, [r1]
 805c1b4: f022 0201    	bic	r2, r2, #0x1
 805c1b8: 600a         	str	r2, [r1]
 805c1ba: 3004         	adds	r0, #0x4
 805c1bc: 6801         	ldr	r1, [r0]
 805c1be: 4a16         	ldr	r2, [pc, #0x58]         @ 0x805c218 <xMAIR0Const>
 805c1c0: 6011         	str	r1, [r2]
 805c1c2: 3004         	adds	r0, #0x4
 805c1c4: 4915         	ldr	r1, [pc, #0x54]         @ 0x805c21c <xRNRConst>
 805c1c6: 4a16         	ldr	r2, [pc, #0x58]         @ 0x805c220 <xRBARConst>
 805c1c8: 2304         	movs	r3, #0x4
 805c1ca: 600b         	str	r3, [r1]
 805c1cc: e8b0 0ff0    	ldm.w	r0!, {r4, r5, r6, r7, r8, r9, r10, r11}
 805c1d0: e882 0ff0    	stm.w	r2, {r4, r5, r6, r7, r8, r9, r10, r11}
 805c1d4: 490f         	ldr	r1, [pc, #0x3c]         @ 0x805c214 <xMPUCTRLConst>
 805c1d6: 680a         	ldr	r2, [r1]
 805c1d8: f042 0201    	orr	r2, r2, #0x1
 805c1dc: 600a         	str	r2, [r1]
 805c1de: f3bf 8f4f    	dsb	sy

0805c1e2 <restore_context>:
 805c1e2: 4a0b         	ldr	r2, [pc, #0x2c]         @ 0x805c210 <pxCurrentTCBConst>
 805c1e4: 6810         	ldr	r0, [r2]
 805c1e6: 6801         	ldr	r1, [r0]

0805c1e8 <restore_special_regs>:
 805c1e8: e931 401c    	ldmdb	r1!, {r2, r3, r4, lr}
 805c1ec: f382 8809    	msr	psp, r2
 805c1f0: f383 880b    	msr	psplim, r3
 805c1f4: f384 8814    	msr	control, r4

0805c1f8 <restore_general_regs>:
 805c1f8: e931 0ff0    	ldmdb	r1!, {r4, r5, r6, r7, r8, r9, r10, r11}
 805c1fc: e8a2 0ff0    	stm.w	r2!, {r4, r5, r6, r7, r8, r9, r10, r11}
 805c200: e931 0ff0    	ldmdb	r1!, {r4, r5, r6, r7, r8, r9, r10, r11}

0805c204 <restore_context_done>:
 805c204: 6001         	str	r1, [r0]
 805c206: 4770         	bx	lr
 805c208: bf00         	nop
 805c20a: bf00         	nop
 805c20c: bf00         	nop
 805c20e: bf00         	nop

0805c210 <pxCurrentTCBConst>:
 805c210: 00 00 00 00  	.word	0x00000000

0805c214 <xMPUCTRLConst>:
 805c214: 94 ed 00 e0  	.word	0xe000ed94

0805c218 <xMAIR0Const>:
 805c218: c0 ed 00 e0  	.word	0xe000edc0

0805c21c <xRNRConst>:
 805c21c: 98 ed 00 e0  	.word	0xe000ed98

0805c220 <xRBARConst>:
 805c220: 9c ed 00 e0  	.word	0xe000ed9c

0805c224 <SVC_Handler>:
;         __asm volatile
 805c224: f01e 0f04    	tst.w	lr, #0x4
 805c228: bf0c         	ite	eq
 805c22a: f3ef 8008    	mrseq	r0, msp
 805c22e: f3ef 8009    	mrsne	r0, psp
 805c232: 4903         	ldr	r1, [pc, #0xc]          @ 0x805c240 <svchandler_address_const>
 805c234: 4708         	bx	r1
 805c236: bf00         	nop
 805c238: bf00         	nop
 805c23a: bf00         	nop
 805c23c: bf00         	nop
 805c23e: bf00         	nop

0805c240 <svchandler_address_const>:
 805c240: 00 00 00 00  	.word	0x00000000
 805c244: 00 00 00 00  	.word	0x00000000
 805c248: 00 00 00 00  	.word	0x00000000
 805c24c: 00 00 00 00  	.word	0x00000000
 805c250: 00 00 00 00  	.word	0x00000000
 805c254: 00 00 00 00  	.word	0x00000000
 805c258: 00 00 00 00  	.word	0x00000000
 805c25c: 00 00        	.short	0x0000
 805c25e: 00           	.byte	0x00

0805c25f <__privileged_functions_end__>:
 805c25f: 00           	.byte	0x00

Disassembly of section .freertos_system_calls:

0805c260 <__syscalls_flash_start__>:
;         {
 805c260: b580         	push	{r7, lr}
 805c262: 466f         	mov	r7, sp
 805c264: b084         	sub	sp, #0x10
 805c266: 9003         	str	r0, [sp, #0xc]
 805c268: 9102         	str	r1, [sp, #0x8]
;             if( portIS_PRIVILEGED() == pdFALSE )
 805c26a: f7ff fffe    	bl	0x805c26a <__syscalls_flash_start__+0xa> @ imm = #-0x4
 805c26e: b948         	cbnz	r0, 0x805c284 <__syscalls_flash_start__+0x24> @ imm = #0x12
 805c270: e7ff         	b	0x805c272 <__syscalls_flash_start__+0x12> @ imm = #-0x2
;                 portRAISE_PRIVILEGE();
 805c272: df03         	svc	#0x3
;                 xReturn = xTaskDelayUntil( pxPreviousWakeTime, xTimeIncrement );
 805c274: 9803         	ldr	r0, [sp, #0xc]
 805c276: 9902         	ldr	r1, [sp, #0x8]
 805c278: f7ff fffe    	bl	0x805c278 <__syscalls_flash_start__+0x18> @ imm = #-0x4
 805c27c: 9001         	str	r0, [sp, #0x4]
;                 portRESET_PRIVILEGE();
 805c27e: f7ff fffe    	bl	0x805c27e <__syscalls_flash_start__+0x1e> @ imm = #-0x4
;             }
 805c282: e005         	b	0x805c290 <__syscalls_flash_start__+0x30> @ imm = #0xa
;                 xReturn = xTaskDelayUntil( pxPreviousWakeTime, xTimeIncrement );
 805c284: 9803         	ldr	r0, [sp, #0xc]
 805c286: 9902         	ldr	r1, [sp, #0x8]
 805c288: f7ff fffe    	bl	0x805c288 <__syscalls_flash_start__+0x28> @ imm = #-0x4
 805c28c: 9001         	str	r0, [sp, #0x4]
 805c28e: e7ff         	b	0x805c290 <__syscalls_flash_start__+0x30> @ imm = #-0x2
;             return xReturn;
 805c290: 9801         	ldr	r0, [sp, #0x4]
 805c292: b004         	add	sp, #0x10
 805c294: bd80         	pop	{r7, pc}

0805c296 <MPU_vTaskDelay>:
;         {
 805c296: b580         	push	{r7, lr}
 805c298: 466f         	mov	r7, sp
 805c29a: b082         	sub	sp, #0x8
 805c29c: 9001         	str	r0, [sp, #0x4]
;             if( portIS_PRIVILEGED() == pdFALSE )
 805c29e: f7ff fffe    	bl	0x805c29e <MPU_vTaskDelay+0x8> @ imm = #-0x4
 805c2a2: b938         	cbnz	r0, 0x805c2b4 <MPU_vTaskDelay+0x1e> @ imm = #0xe
 805c2a4: e7ff         	b	0x805c2a6 <MPU_vTaskDelay+0x10> @ imm = #-0x2
;                 portRAISE_PRIVILEGE();
 805c2a6: df03         	svc	#0x3
;                 vTaskDelay( xTicksToDelay );
 805c2a8: 9801         	ldr	r0, [sp, #0x4]
 805c2aa: f7ff fffe    	bl	0x805c2aa <MPU_vTaskDelay+0x14> @ imm = #-0x4
;                 portRESET_PRIVILEGE();
 805c2ae: f7ff fffe    	bl	0x805c2ae <MPU_vTaskDelay+0x18> @ imm = #-0x4
;             }
 805c2b2: e003         	b	0x805c2bc <MPU_vTaskDelay+0x26> @ imm = #0x6
;                 vTaskDelay( xTicksToDelay );
 805c2b4: 9801         	ldr	r0, [sp, #0x4]
 805c2b6: f7ff fffe    	bl	0x805c2b6 <MPU_vTaskDelay+0x20> @ imm = #-0x4
 805c2ba: e7ff         	b	0x805c2bc <MPU_vTaskDelay+0x26> @ imm = #-0x2
;         }
 805c2bc: b002         	add	sp, #0x8
 805c2be: bd80         	pop	{r7, pc}

0805c2c0 <MPU_uxTaskPriorityGet>:
;         {
 805c2c0: b580         	push	{r7, lr}
 805c2c2: 466f         	mov	r7, sp
 805c2c4: b082         	sub	sp, #0x8
 805c2c6: 9001         	str	r0, [sp, #0x4]
;             if( portIS_PRIVILEGED() == pdFALSE )
 805c2c8: f7ff fffe    	bl	0x805c2c8 <MPU_uxTaskPriorityGet+0x8> @ imm = #-0x4
 805c2cc: b940         	cbnz	r0, 0x805c2e0 <MPU_uxTaskPriorityGet+0x20> @ imm = #0x10
 805c2ce: e7ff         	b	0x805c2d0 <MPU_uxTaskPriorityGet+0x10> @ imm = #-0x2
;                 portRAISE_PRIVILEGE();
 805c2d0: df03         	svc	#0x3
;                 uxReturn = uxTaskPriorityGet( pxTask );
 805c2d2: 9801         	ldr	r0, [sp, #0x4]
 805c2d4: f7ff fffe    	bl	0x805c2d4 <MPU_uxTaskPriorityGet+0x14> @ imm = #-0x4
 805c2d8: 9000         	str	r0, [sp]
;                 portRESET_PRIVILEGE();
 805c2da: f7ff fffe    	bl	0x805c2da <MPU_uxTaskPriorityGet+0x1a> @ imm = #-0x4
;             }
 805c2de: e004         	b	0x805c2ea <MPU_uxTaskPriorityGet+0x2a> @ imm = #0x8
;                 uxReturn = uxTaskPriorityGet( pxTask );
 805c2e0: 9801         	ldr	r0, [sp, #0x4]
 805c2e2: f7ff fffe    	bl	0x805c2e2 <MPU_uxTaskPriorityGet+0x22> @ imm = #-0x4
 805c2e6: 9000         	str	r0, [sp]
 805c2e8: e7ff         	b	0x805c2ea <MPU_uxTaskPriorityGet+0x2a> @ imm = #-0x2
;             return uxReturn;
 805c2ea: 9800         	ldr	r0, [sp]
 805c2ec: b002         	add	sp, #0x8
 805c2ee: bd80         	pop	{r7, pc}

0805c2f0 <MPU_eTaskGetState>:
;         {
 805c2f0: b580         	push	{r7, lr}
 805c2f2: 466f         	mov	r7, sp
 805c2f4: b082         	sub	sp, #0x8
 805c2f6: 9001         	str	r0, [sp, #0x4]
;             if( portIS_PRIVILEGED() == pdFALSE )
 805c2f8: f7ff fffe    	bl	0x805c2f8 <MPU_eTaskGetState+0x8> @ imm = #-0x4
 805c2fc: b948         	cbnz	r0, 0x805c312 <MPU_eTaskGetState+0x22> @ imm = #0x12
 805c2fe: e7ff         	b	0x805c300 <MPU_eTaskGetState+0x10> @ imm = #-0x2
;                 portRAISE_PRIVILEGE();
 805c300: df03         	svc	#0x3
;                 eReturn = eTaskGetState( pxTask );
 805c302: 9801         	ldr	r0, [sp, #0x4]
 805c304: f7ff fffe    	bl	0x805c304 <MPU_eTaskGetState+0x14> @ imm = #-0x4
 805c308: f807 0c05    	strb	r0, [r7, #-5]
;                 portRESET_PRIVILEGE();
 805c30c: f7ff fffe    	bl	0x805c30c <MPU_eTaskGetState+0x1c> @ imm = #-0x4
;             }
 805c310: e005         	b	0x805c31e <MPU_eTaskGetState+0x2e> @ imm = #0xa
;                 eReturn = eTaskGetState( pxTask );
 805c312: 9801         	ldr	r0, [sp, #0x4]
 805c314: f7ff fffe    	bl	0x805c314 <MPU_eTaskGetState+0x24> @ imm = #-0x4
 805c318: f807 0c05    	strb	r0, [r7, #-5]
 805c31c: e7ff         	b	0x805c31e <MPU_eTaskGetState+0x2e> @ imm = #-0x2
;             return eReturn;
 805c31e: f817 0c05    	ldrb	r0, [r7, #-5]
 805c322: b002         	add	sp, #0x8
 805c324: bd80         	pop	{r7, pc}

0805c326 <MPU_vTaskGetInfo>:
;         {
 805c326: b580         	push	{r7, lr}
 805c328: 466f         	mov	r7, sp
 805c32a: b084         	sub	sp, #0x10
 805c32c: 9003         	str	r0, [sp, #0xc]
 805c32e: 9102         	str	r1, [sp, #0x8]
 805c330: 9201         	str	r2, [sp, #0x4]
 805c332: f807 3c0d    	strb	r3, [r7, #-13]
;             if( portIS_PRIVILEGED() == pdFALSE )
 805c336: f7ff fffe    	bl	0x805c336 <MPU_vTaskGetInfo+0x10> @ imm = #-0x4
 805c33a: b958         	cbnz	r0, 0x805c354 <MPU_vTaskGetInfo+0x2e> @ imm = #0x16
 805c33c: e7ff         	b	0x805c33e <MPU_vTaskGetInfo+0x18> @ imm = #-0x2
;                 portRAISE_PRIVILEGE();
 805c33e: df03         	svc	#0x3
;                 vTaskGetInfo( xTask, pxTaskStatus, xGetFreeStackSpace, eState );
 805c340: 9803         	ldr	r0, [sp, #0xc]
 805c342: 9902         	ldr	r1, [sp, #0x8]
 805c344: 9a01         	ldr	r2, [sp, #0x4]
 805c346: f817 3c0d    	ldrb	r3, [r7, #-13]
 805c34a: f7ff fffe    	bl	0x805c34a <MPU_vTaskGetInfo+0x24> @ imm = #-0x4
;                 portRESET_PRIVILEGE();
 805c34e: f7ff fffe    	bl	0x805c34e <MPU_vTaskGetInfo+0x28> @ imm = #-0x4
;             }
 805c352: e007         	b	0x805c364 <MPU_vTaskGetInfo+0x3e> @ imm = #0xe
;                 vTaskGetInfo( xTask, pxTaskStatus, xGetFreeStackSpace, eState );
 805c354: 9803         	ldr	r0, [sp, #0xc]
 805c356: 9902         	ldr	r1, [sp, #0x8]
 805c358: 9a01         	ldr	r2, [sp, #0x4]
 805c35a: f817 3c0d    	ldrb	r3, [r7, #-13]
 805c35e: f7ff fffe    	bl	0x805c35e <MPU_vTaskGetInfo+0x38> @ imm = #-0x4
 805c362: e7ff         	b	0x805c364 <MPU_vTaskGetInfo+0x3e> @ imm = #-0x2
;         }
 805c364: b004         	add	sp, #0x10
 805c366: bd80         	pop	{r7, pc}

0805c368 <MPU_vTaskSuspend>:
;         {
 805c368: b580         	push	{r7, lr}
 805c36a: 466f         	mov	r7, sp
 805c36c: b082         	sub	sp, #0x8
 805c36e: 9001         	str	r0, [sp, #0x4]
;             if( portIS_PRIVILEGED() == pdFALSE )
 805c370: f7ff fffe    	bl	0x805c370 <MPU_vTaskSuspend+0x8> @ imm = #-0x4
 805c374: b938         	cbnz	r0, 0x805c386 <MPU_vTaskSuspend+0x1e> @ imm = #0xe
 805c376: e7ff         	b	0x805c378 <MPU_vTaskSuspend+0x10> @ imm = #-0x2
;                 portRAISE_PRIVILEGE();
 805c378: df03         	svc	#0x3
;                 vTaskSuspend( pxTaskToSuspend );
 805c37a: 9801         	ldr	r0, [sp, #0x4]
 805c37c: f7ff fffe    	bl	0x805c37c <MPU_vTaskSuspend+0x14> @ imm = #-0x4
;                 portRESET_PRIVILEGE();
 805c380: f7ff fffe    	bl	0x805c380 <MPU_vTaskSuspend+0x18> @ imm = #-0x4
;             }
 805c384: e003         	b	0x805c38e <MPU_vTaskSuspend+0x26> @ imm = #0x6
;                 vTaskSuspend( pxTaskToSuspend );
 805c386: 9801         	ldr	r0, [sp, #0x4]
 805c388: f7ff fffe    	bl	0x805c388 <MPU_vTaskSuspend+0x20> @ imm = #-0x4
 805c38c: e7ff         	b	0x805c38e <MPU_vTaskSuspend+0x26> @ imm = #-0x2
;         }
 805c38e: b002         	add	sp, #0x8
 805c390: bd80         	pop	{r7, pc}

0805c392 <MPU_vTaskResume>:
;         {
 805c392: b580         	push	{r7, lr}
 805c394: 466f         	mov	r7, sp
 805c396: b082         	sub	sp, #0x8
 805c398: 9001         	str	r0, [sp, #0x4]
;             if( portIS_PRIVILEGED() == pdFALSE )
 805c39a: f7ff fffe    	bl	0x805c39a <MPU_vTaskResume+0x8> @ imm = #-0x4
 805c39e: b938         	cbnz	r0, 0x805c3b0 <MPU_vTaskResume+0x1e> @ imm = #0xe
 805c3a0: e7ff         	b	0x805c3a2 <MPU_vTaskResume+0x10> @ imm = #-0x2
;                 portRAISE_PRIVILEGE();
 805c3a2: df03         	svc	#0x3
;                 vTaskResume( pxTaskToResume );
 805c3a4: 9801         	ldr	r0, [sp, #0x4]
 805c3a6: f7ff fffe    	bl	0x805c3a6 <MPU_vTaskResume+0x14> @ imm = #-0x4
;                 portRESET_PRIVILEGE();
 805c3aa: f7ff fffe    	bl	0x805c3aa <MPU_vTaskResume+0x18> @ imm = #-0x4
;             }
 805c3ae: e003         	b	0x805c3b8 <MPU_vTaskResume+0x26> @ imm = #0x6
;                 vTaskResume( pxTaskToResume );
 805c3b0: 9801         	ldr	r0, [sp, #0x4]
 805c3b2: f7ff fffe    	bl	0x805c3b2 <MPU_vTaskResume+0x20> @ imm = #-0x4
 805c3b6: e7ff         	b	0x805c3b8 <MPU_vTaskResume+0x26> @ imm = #-0x2
;         }
 805c3b8: b002         	add	sp, #0x8
 805c3ba: bd80         	pop	{r7, pc}

0805c3bc <MPU_xTaskGetTickCount>:
;     {
 805c3bc: b580         	push	{r7, lr}
 805c3be: 466f         	mov	r7, sp
 805c3c0: b082         	sub	sp, #0x8
;         if( portIS_PRIVILEGED() == pdFALSE )
 805c3c2: f7ff fffe    	bl	0x805c3c2 <MPU_xTaskGetTickCount+0x6> @ imm = #-0x4
 805c3c6: b938         	cbnz	r0, 0x805c3d8 <MPU_xTaskGetTickCount+0x1c> @ imm = #0xe
 805c3c8: e7ff         	b	0x805c3ca <MPU_xTaskGetTickCount+0xe> @ imm = #-0x2
;             portRAISE_PRIVILEGE();
 805c3ca: df03         	svc	#0x3
;             xReturn = xTaskGetTickCount();
 805c3cc: f7ff fffe    	bl	0x805c3cc <MPU_xTaskGetTickCount+0x10> @ imm = #-0x4
 805c3d0: 9001         	str	r0, [sp, #0x4]
;             portRESET_PRIVILEGE();
 805c3d2: f7ff fffe    	bl	0x805c3d2 <MPU_xTaskGetTickCount+0x16> @ imm = #-0x4
;         }
 805c3d6: e003         	b	0x805c3e0 <MPU_xTaskGetTickCount+0x24> @ imm = #0x6
;             xReturn = xTaskGetTickCount();
 805c3d8: f7ff fffe    	bl	0x805c3d8 <MPU_xTaskGetTickCount+0x1c> @ imm = #-0x4
 805c3dc: 9001         	str	r0, [sp, #0x4]
 805c3de: e7ff         	b	0x805c3e0 <MPU_xTaskGetTickCount+0x24> @ imm = #-0x2
;         return xReturn;
 805c3e0: 9801         	ldr	r0, [sp, #0x4]
 805c3e2: b002         	add	sp, #0x8
 805c3e4: bd80         	pop	{r7, pc}

0805c3e6 <MPU_uxTaskGetNumberOfTasks>:
;     {
 805c3e6: b580         	push	{r7, lr}
 805c3e8: 466f         	mov	r7, sp
 805c3ea: b082         	sub	sp, #0x8
;         if( portIS_PRIVILEGED() == pdFALSE )
 805c3ec: f7ff fffe    	bl	0x805c3ec <MPU_uxTaskGetNumberOfTasks+0x6> @ imm = #-0x4
 805c3f0: b938         	cbnz	r0, 0x805c402 <MPU_uxTaskGetNumberOfTasks+0x1c> @ imm = #0xe
 805c3f2: e7ff         	b	0x805c3f4 <MPU_uxTaskGetNumberOfTasks+0xe> @ imm = #-0x2
;             portRAISE_PRIVILEGE();
 805c3f4: df03         	svc	#0x3
;             uxReturn = uxTaskGetNumberOfTasks();
 805c3f6: f7ff fffe    	bl	0x805c3f6 <MPU_uxTaskGetNumberOfTasks+0x10> @ imm = #-0x4
 805c3fa: 9001         	str	r0, [sp, #0x4]
;             portRESET_PRIVILEGE();
 805c3fc: f7ff fffe    	bl	0x805c3fc <MPU_uxTaskGetNumberOfTasks+0x16> @ imm = #-0x4
;         }
 805c400: e003         	b	0x805c40a <MPU_uxTaskGetNumberOfTasks+0x24> @ imm = #0x6
;             uxReturn = uxTaskGetNumberOfTasks();
 805c402: f7ff fffe    	bl	0x805c402 <MPU_uxTaskGetNumberOfTasks+0x1c> @ imm = #-0x4
 805c406: 9001         	str	r0, [sp, #0x4]
 805c408: e7ff         	b	0x805c40a <MPU_uxTaskGetNumberOfTasks+0x24> @ imm = #-0x2
;         return uxReturn;
 805c40a: 9801         	ldr	r0, [sp, #0x4]
 805c40c: b002         	add	sp, #0x8
 805c40e: bd80         	pop	{r7, pc}

0805c410 <MPU_uxTaskGetSystemState>:
;         {
 805c410: b580         	push	{r7, lr}
 805c412: 466f         	mov	r7, sp
 805c414: b084         	sub	sp, #0x10
 805c416: 9003         	str	r0, [sp, #0xc]
 805c418: 9102         	str	r1, [sp, #0x8]
 805c41a: 9201         	str	r2, [sp, #0x4]
;             if( portIS_PRIVILEGED() == pdFALSE )
 805c41c: f7ff fffe    	bl	0x805c41c <MPU_uxTaskGetSystemState+0xc> @ imm = #-0x4
 805c420: b950         	cbnz	r0, 0x805c438 <MPU_uxTaskGetSystemState+0x28> @ imm = #0x14
 805c422: e7ff         	b	0x805c424 <MPU_uxTaskGetSystemState+0x14> @ imm = #-0x2
;                 portRAISE_PRIVILEGE();
 805c424: df03         	svc	#0x3
;                 uxReturn = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, pulTotalRunTime );
 805c426: 9803         	ldr	r0, [sp, #0xc]
 805c428: 9902         	ldr	r1, [sp, #0x8]
 805c42a: 9a01         	ldr	r2, [sp, #0x4]
 805c42c: f7ff fffe    	bl	0x805c42c <MPU_uxTaskGetSystemState+0x1c> @ imm = #-0x4
 805c430: 9000         	str	r0, [sp]
;                 portRESET_PRIVILEGE();
 805c432: f7ff fffe    	bl	0x805c432 <MPU_uxTaskGetSystemState+0x22> @ imm = #-0x4
;             }
 805c436: e006         	b	0x805c446 <MPU_uxTaskGetSystemState+0x36> @ imm = #0xc
;                 uxReturn = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, pulTotalRunTime );
 805c438: 9803         	ldr	r0, [sp, #0xc]
 805c43a: 9902         	ldr	r1, [sp, #0x8]
 805c43c: 9a01         	ldr	r2, [sp, #0x4]
 805c43e: f7ff fffe    	bl	0x805c43e <MPU_uxTaskGetSystemState+0x2e> @ imm = #-0x4
 805c442: 9000         	str	r0, [sp]
 805c444: e7ff         	b	0x805c446 <MPU_uxTaskGetSystemState+0x36> @ imm = #-0x2
;             return uxReturn;
 805c446: 9800         	ldr	r0, [sp]
 805c448: b004         	add	sp, #0x10
 805c44a: bd80         	pop	{r7, pc}

0805c44c <MPU_uxTaskGetStackHighWaterMark>:
;         {
 805c44c: b580         	push	{r7, lr}
 805c44e: 466f         	mov	r7, sp
 805c450: b082         	sub	sp, #0x8
 805c452: 9001         	str	r0, [sp, #0x4]
;             if( portIS_PRIVILEGED() == pdFALSE )
 805c454: f7ff fffe    	bl	0x805c454 <MPU_uxTaskGetStackHighWaterMark+0x8> @ imm = #-0x4
 805c458: b940         	cbnz	r0, 0x805c46c <MPU_uxTaskGetStackHighWaterMark+0x20> @ imm = #0x10
 805c45a: e7ff         	b	0x805c45c <MPU_uxTaskGetStackHighWaterMark+0x10> @ imm = #-0x2
;                 portRAISE_PRIVILEGE();
 805c45c: df03         	svc	#0x3
;                 uxReturn = uxTaskGetStackHighWaterMark( xTask );
 805c45e: 9801         	ldr	r0, [sp, #0x4]
 805c460: f7ff fffe    	bl	0x805c460 <MPU_uxTaskGetStackHighWaterMark+0x14> @ imm = #-0x4
 805c464: 9000         	str	r0, [sp]
;                 portRESET_PRIVILEGE();
 805c466: f7ff fffe    	bl	0x805c466 <MPU_uxTaskGetStackHighWaterMark+0x1a> @ imm = #-0x4
;             }
 805c46a: e004         	b	0x805c476 <MPU_uxTaskGetStackHighWaterMark+0x2a> @ imm = #0x8
;                 uxReturn = uxTaskGetStackHighWaterMark( xTask );
 805c46c: 9801         	ldr	r0, [sp, #0x4]
 805c46e: f7ff fffe    	bl	0x805c46e <MPU_uxTaskGetStackHighWaterMark+0x22> @ imm = #-0x4
 805c472: 9000         	str	r0, [sp]
 805c474: e7ff         	b	0x805c476 <MPU_uxTaskGetStackHighWaterMark+0x2a> @ imm = #-0x2
;             return uxReturn;
 805c476: 9800         	ldr	r0, [sp]
 805c478: b002         	add	sp, #0x8
 805c47a: bd80         	pop	{r7, pc}

0805c47c <MPU_xTaskGetCurrentTaskHandle>:
;         {
 805c47c: b580         	push	{r7, lr}
 805c47e: 466f         	mov	r7, sp
 805c480: b082         	sub	sp, #0x8
;             if( portIS_PRIVILEGED() == pdFALSE )
 805c482: f7ff fffe    	bl	0x805c482 <MPU_xTaskGetCurrentTaskHandle+0x6> @ imm = #-0x4
 805c486: b938         	cbnz	r0, 0x805c498 <MPU_xTaskGetCurrentTaskHandle+0x1c> @ imm = #0xe
 805c488: e7ff         	b	0x805c48a <MPU_xTaskGetCurrentTaskHandle+0xe> @ imm = #-0x2
;                 portRAISE_PRIVILEGE();
 805c48a: df03         	svc	#0x3
;                 xReturn = xTaskGetCurrentTaskHandle();
 805c48c: f7ff fffe    	bl	0x805c48c <MPU_xTaskGetCurrentTaskHandle+0x10> @ imm = #-0x4
 805c490: 9001         	str	r0, [sp, #0x4]
;                 portRESET_PRIVILEGE();
 805c492: f7ff fffe    	bl	0x805c492 <MPU_xTaskGetCurrentTaskHandle+0x16> @ imm = #-0x4
;             }
 805c496: e003         	b	0x805c4a0 <MPU_xTaskGetCurrentTaskHandle+0x24> @ imm = #0x6
;                 xReturn = xTaskGetCurrentTaskHandle();
 805c498: f7ff fffe    	bl	0x805c498 <MPU_xTaskGetCurrentTaskHandle+0x1c> @ imm = #-0x4
 805c49c: 9001         	str	r0, [sp, #0x4]
 805c49e: e7ff         	b	0x805c4a0 <MPU_xTaskGetCurrentTaskHandle+0x24> @ imm = #-0x2
;             return xReturn;
 805c4a0: 9801         	ldr	r0, [sp, #0x4]
 805c4a2: b002         	add	sp, #0x8
 805c4a4: bd80         	pop	{r7, pc}

0805c4a6 <MPU_xTaskGetSchedulerState>:
;         {
 805c4a6: b580         	push	{r7, lr}
 805c4a8: 466f         	mov	r7, sp
 805c4aa: b082         	sub	sp, #0x8
;             if( portIS_PRIVILEGED() == pdFALSE )
 805c4ac: f7ff fffe    	bl	0x805c4ac <MPU_xTaskGetSchedulerState+0x6> @ imm = #-0x4
 805c4b0: b938         	cbnz	r0, 0x805c4c2 <MPU_xTaskGetSchedulerState+0x1c> @ imm = #0xe
 805c4b2: e7ff         	b	0x805c4b4 <MPU_xTaskGetSchedulerState+0xe> @ imm = #-0x2
;                 portRAISE_PRIVILEGE();
 805c4b4: df03         	svc	#0x3
;                 xReturn = xTaskGetSchedulerState();
 805c4b6: f7ff fffe    	bl	0x805c4b6 <MPU_xTaskGetSchedulerState+0x10> @ imm = #-0x4
 805c4ba: 9001         	str	r0, [sp, #0x4]
;                 portRESET_PRIVILEGE();
 805c4bc: f7ff fffe    	bl	0x805c4bc <MPU_xTaskGetSchedulerState+0x16> @ imm = #-0x4
;             }
 805c4c0: e003         	b	0x805c4ca <MPU_xTaskGetSchedulerState+0x24> @ imm = #0x6
;                 xReturn = xTaskGetSchedulerState();
 805c4c2: f7ff fffe    	bl	0x805c4c2 <MPU_xTaskGetSchedulerState+0x1c> @ imm = #-0x4
 805c4c6: 9001         	str	r0, [sp, #0x4]
 805c4c8: e7ff         	b	0x805c4ca <MPU_xTaskGetSchedulerState+0x24> @ imm = #-0x2
;             return xReturn;
 805c4ca: 9801         	ldr	r0, [sp, #0x4]
 805c4cc: b002         	add	sp, #0x8
 805c4ce: bd80         	pop	{r7, pc}

0805c4d0 <MPU_vTaskSetTimeOutState>:
;     {
 805c4d0: b580         	push	{r7, lr}
 805c4d2: 466f         	mov	r7, sp
 805c4d4: b082         	sub	sp, #0x8
 805c4d6: 9001         	str	r0, [sp, #0x4]
;         if( portIS_PRIVILEGED() == pdFALSE )
 805c4d8: f7ff fffe    	bl	0x805c4d8 <MPU_vTaskSetTimeOutState+0x8> @ imm = #-0x4
 805c4dc: b938         	cbnz	r0, 0x805c4ee <MPU_vTaskSetTimeOutState+0x1e> @ imm = #0xe
 805c4de: e7ff         	b	0x805c4e0 <MPU_vTaskSetTimeOutState+0x10> @ imm = #-0x2
;             portRAISE_PRIVILEGE();
 805c4e0: df03         	svc	#0x3
;             vTaskSetTimeOutState( pxTimeOut );
 805c4e2: 9801         	ldr	r0, [sp, #0x4]
 805c4e4: f7ff fffe    	bl	0x805c4e4 <MPU_vTaskSetTimeOutState+0x14> @ imm = #-0x4
;             portRESET_PRIVILEGE();
 805c4e8: f7ff fffe    	bl	0x805c4e8 <MPU_vTaskSetTimeOutState+0x18> @ imm = #-0x4
;         }
 805c4ec: e003         	b	0x805c4f6 <MPU_vTaskSetTimeOutState+0x26> @ imm = #0x6
;             vTaskSetTimeOutState( pxTimeOut );
 805c4ee: 9801         	ldr	r0, [sp, #0x4]
 805c4f0: f7ff fffe    	bl	0x805c4f0 <MPU_vTaskSetTimeOutState+0x20> @ imm = #-0x4
 805c4f4: e7ff         	b	0x805c4f6 <MPU_vTaskSetTimeOutState+0x26> @ imm = #-0x2
;     }
 805c4f6: b002         	add	sp, #0x8
 805c4f8: bd80         	pop	{r7, pc}

0805c4fa <MPU_xTaskCheckForTimeOut>:
;     {
 805c4fa: b580         	push	{r7, lr}
 805c4fc: 466f         	mov	r7, sp
 805c4fe: b084         	sub	sp, #0x10
 805c500: 9003         	str	r0, [sp, #0xc]
 805c502: 9102         	str	r1, [sp, #0x8]
;         if( portIS_PRIVILEGED() == pdFALSE )
 805c504: f7ff fffe    	bl	0x805c504 <MPU_xTaskCheckForTimeOut+0xa> @ imm = #-0x4
 805c508: b948         	cbnz	r0, 0x805c51e <MPU_xTaskCheckForTimeOut+0x24> @ imm = #0x12
 805c50a: e7ff         	b	0x805c50c <MPU_xTaskCheckForTimeOut+0x12> @ imm = #-0x2
;             portRAISE_PRIVILEGE();
 805c50c: df03         	svc	#0x3
;             xReturn = xTaskCheckForTimeOut( pxTimeOut, pxTicksToWait );
 805c50e: 9803         	ldr	r0, [sp, #0xc]
 805c510: 9902         	ldr	r1, [sp, #0x8]
 805c512: f7ff fffe    	bl	0x805c512 <MPU_xTaskCheckForTimeOut+0x18> @ imm = #-0x4
 805c516: 9001         	str	r0, [sp, #0x4]
;             portRESET_PRIVILEGE();
 805c518: f7ff fffe    	bl	0x805c518 <MPU_xTaskCheckForTimeOut+0x1e> @ imm = #-0x4
;         }
 805c51c: e005         	b	0x805c52a <MPU_xTaskCheckForTimeOut+0x30> @ imm = #0xa
;             xReturn = xTaskCheckForTimeOut( pxTimeOut, pxTicksToWait );
 805c51e: 9803         	ldr	r0, [sp, #0xc]
 805c520: 9902         	ldr	r1, [sp, #0x8]
 805c522: f7ff fffe    	bl	0x805c522 <MPU_xTaskCheckForTimeOut+0x28> @ imm = #-0x4
 805c526: 9001         	str	r0, [sp, #0x4]
 805c528: e7ff         	b	0x805c52a <MPU_xTaskCheckForTimeOut+0x30> @ imm = #-0x2
;         return xReturn;
 805c52a: 9801         	ldr	r0, [sp, #0x4]
 805c52c: b004         	add	sp, #0x10
 805c52e: bd80         	pop	{r7, pc}

0805c530 <MPU_xTaskGenericNotify>:
;         {
 805c530: b580         	push	{r7, lr}
 805c532: 466f         	mov	r7, sp
 805c534: b086         	sub	sp, #0x18
 805c536: f8d7 c008    	ldr.w	r12, [r7, #0x8]
 805c53a: 9005         	str	r0, [sp, #0x14]
 805c53c: 9104         	str	r1, [sp, #0x10]
 805c53e: 9203         	str	r2, [sp, #0xc]
 805c540: f807 3c0d    	strb	r3, [r7, #-13]
;             if( portIS_PRIVILEGED() == pdFALSE )
 805c544: f7ff fffe    	bl	0x805c544 <MPU_xTaskGenericNotify+0x14> @ imm = #-0x4
 805c548: b988         	cbnz	r0, 0x805c56e <MPU_xTaskGenericNotify+0x3e> @ imm = #0x22
 805c54a: e7ff         	b	0x805c54c <MPU_xTaskGenericNotify+0x1c> @ imm = #-0x2
;                 portRAISE_PRIVILEGE();
 805c54c: df03         	svc	#0x3
;                 xReturn = xTaskGenericNotify( xTaskToNotify, uxIndexToNotify, ulValue, eAction, pulPreviousNotificationValue );
 805c54e: 9805         	ldr	r0, [sp, #0x14]
 805c550: 9904         	ldr	r1, [sp, #0x10]
 805c552: 9a03         	ldr	r2, [sp, #0xc]
 805c554: f817 3c0d    	ldrb	r3, [r7, #-13]
 805c558: f8d7 c008    	ldr.w	r12, [r7, #0x8]
 805c55c: 46ee         	mov	lr, sp
 805c55e: f8ce c000    	str.w	r12, [lr]
 805c562: f7ff fffe    	bl	0x805c562 <MPU_xTaskGenericNotify+0x32> @ imm = #-0x4
 805c566: 9001         	str	r0, [sp, #0x4]
;                 portRESET_PRIVILEGE();
 805c568: f7ff fffe    	bl	0x805c568 <MPU_xTaskGenericNotify+0x38> @ imm = #-0x4
;             }
 805c56c: e00d         	b	0x805c58a <MPU_xTaskGenericNotify+0x5a> @ imm = #0x1a
;                 xReturn = xTaskGenericNotify( xTaskToNotify, uxIndexToNotify, ulValue, eAction, pulPreviousNotificationValue );
 805c56e: 9805         	ldr	r0, [sp, #0x14]
 805c570: 9904         	ldr	r1, [sp, #0x10]
 805c572: 9a03         	ldr	r2, [sp, #0xc]
 805c574: f817 3c0d    	ldrb	r3, [r7, #-13]
 805c578: f8d7 c008    	ldr.w	r12, [r7, #0x8]
 805c57c: 46ee         	mov	lr, sp
 805c57e: f8ce c000    	str.w	r12, [lr]
 805c582: f7ff fffe    	bl	0x805c582 <MPU_xTaskGenericNotify+0x52> @ imm = #-0x4
 805c586: 9001         	str	r0, [sp, #0x4]
 805c588: e7ff         	b	0x805c58a <MPU_xTaskGenericNotify+0x5a> @ imm = #-0x2
;             return xReturn;
 805c58a: 9801         	ldr	r0, [sp, #0x4]
 805c58c: b006         	add	sp, #0x18
 805c58e: bd80         	pop	{r7, pc}

0805c590 <MPU_xTaskGenericNotifyWait>:
;         {
 805c590: b580         	push	{r7, lr}
 805c592: 466f         	mov	r7, sp
 805c594: b086         	sub	sp, #0x18
 805c596: f8d7 c008    	ldr.w	r12, [r7, #0x8]
 805c59a: 9005         	str	r0, [sp, #0x14]
 805c59c: 9104         	str	r1, [sp, #0x10]
 805c59e: 9203         	str	r2, [sp, #0xc]
 805c5a0: 9302         	str	r3, [sp, #0x8]
;             if( portIS_PRIVILEGED() == pdFALSE )
 805c5a2: f7ff fffe    	bl	0x805c5a2 <MPU_xTaskGenericNotifyWait+0x12> @ imm = #-0x4
 805c5a6: b980         	cbnz	r0, 0x805c5ca <MPU_xTaskGenericNotifyWait+0x3a> @ imm = #0x20
 805c5a8: e7ff         	b	0x805c5aa <MPU_xTaskGenericNotifyWait+0x1a> @ imm = #-0x2
;                 portRAISE_PRIVILEGE();
 805c5aa: df03         	svc	#0x3
;                 xReturn = xTaskGenericNotifyWait( uxIndexToWaitOn, ulBitsToClearOnEntry, ulBitsToClearOnExit, pulNotificationValue, xTicksToWait );
 805c5ac: 9805         	ldr	r0, [sp, #0x14]
 805c5ae: 9904         	ldr	r1, [sp, #0x10]
 805c5b0: 9a03         	ldr	r2, [sp, #0xc]
 805c5b2: 9b02         	ldr	r3, [sp, #0x8]
 805c5b4: f8d7 c008    	ldr.w	r12, [r7, #0x8]
 805c5b8: 46ee         	mov	lr, sp
 805c5ba: f8ce c000    	str.w	r12, [lr]
 805c5be: f7ff fffe    	bl	0x805c5be <MPU_xTaskGenericNotifyWait+0x2e> @ imm = #-0x4
 805c5c2: 9001         	str	r0, [sp, #0x4]
;                 portRESET_PRIVILEGE();
 805c5c4: f7ff fffe    	bl	0x805c5c4 <MPU_xTaskGenericNotifyWait+0x34> @ imm = #-0x4
;             }
 805c5c8: e00c         	b	0x805c5e4 <MPU_xTaskGenericNotifyWait+0x54> @ imm = #0x18
;                 xReturn = xTaskGenericNotifyWait( uxIndexToWaitOn, ulBitsToClearOnEntry, ulBitsToClearOnExit, pulNotificationValue, xTicksToWait );
 805c5ca: 9805         	ldr	r0, [sp, #0x14]
 805c5cc: 9904         	ldr	r1, [sp, #0x10]
 805c5ce: 9a03         	ldr	r2, [sp, #0xc]
 805c5d0: 9b02         	ldr	r3, [sp, #0x8]
 805c5d2: f8d7 c008    	ldr.w	r12, [r7, #0x8]
 805c5d6: 46ee         	mov	lr, sp
 805c5d8: f8ce c000    	str.w	r12, [lr]
 805c5dc: f7ff fffe    	bl	0x805c5dc <MPU_xTaskGenericNotifyWait+0x4c> @ imm = #-0x4
 805c5e0: 9001         	str	r0, [sp, #0x4]
 805c5e2: e7ff         	b	0x805c5e4 <MPU_xTaskGenericNotifyWait+0x54> @ imm = #-0x2
;             return xReturn;
 805c5e4: 9801         	ldr	r0, [sp, #0x4]
 805c5e6: b006         	add	sp, #0x18
 805c5e8: bd80         	pop	{r7, pc}

0805c5ea <MPU_ulTaskGenericNotifyTake>:
;         {
 805c5ea: b580         	push	{r7, lr}
 805c5ec: 466f         	mov	r7, sp
 805c5ee: b084         	sub	sp, #0x10
 805c5f0: 9003         	str	r0, [sp, #0xc]
 805c5f2: 9102         	str	r1, [sp, #0x8]
 805c5f4: 9201         	str	r2, [sp, #0x4]
;             if( portIS_PRIVILEGED() == pdFALSE )
 805c5f6: f7ff fffe    	bl	0x805c5f6 <MPU_ulTaskGenericNotifyTake+0xc> @ imm = #-0x4
 805c5fa: b950         	cbnz	r0, 0x805c612 <MPU_ulTaskGenericNotifyTake+0x28> @ imm = #0x14
 805c5fc: e7ff         	b	0x805c5fe <MPU_ulTaskGenericNotifyTake+0x14> @ imm = #-0x2
;                 portRAISE_PRIVILEGE();
 805c5fe: df03         	svc	#0x3
;                 ulReturn = ulTaskGenericNotifyTake( uxIndexToWaitOn, xClearCountOnExit, xTicksToWait );
 805c600: 9803         	ldr	r0, [sp, #0xc]
 805c602: 9902         	ldr	r1, [sp, #0x8]
 805c604: 9a01         	ldr	r2, [sp, #0x4]
 805c606: f7ff fffe    	bl	0x805c606 <MPU_ulTaskGenericNotifyTake+0x1c> @ imm = #-0x4
 805c60a: 9000         	str	r0, [sp]
;                 portRESET_PRIVILEGE();
 805c60c: f7ff fffe    	bl	0x805c60c <MPU_ulTaskGenericNotifyTake+0x22> @ imm = #-0x4
;             }
 805c610: e006         	b	0x805c620 <MPU_ulTaskGenericNotifyTake+0x36> @ imm = #0xc
;                 ulReturn = ulTaskGenericNotifyTake( uxIndexToWaitOn, xClearCountOnExit, xTicksToWait );
 805c612: 9803         	ldr	r0, [sp, #0xc]
 805c614: 9902         	ldr	r1, [sp, #0x8]
 805c616: 9a01         	ldr	r2, [sp, #0x4]
 805c618: f7ff fffe    	bl	0x805c618 <MPU_ulTaskGenericNotifyTake+0x2e> @ imm = #-0x4
 805c61c: 9000         	str	r0, [sp]
 805c61e: e7ff         	b	0x805c620 <MPU_ulTaskGenericNotifyTake+0x36> @ imm = #-0x2
;             return ulReturn;
 805c620: 9800         	ldr	r0, [sp]
 805c622: b004         	add	sp, #0x10
 805c624: bd80         	pop	{r7, pc}

0805c626 <MPU_xTaskGenericNotifyStateClear>:
;         {
 805c626: b580         	push	{r7, lr}
 805c628: 466f         	mov	r7, sp
 805c62a: b084         	sub	sp, #0x10
 805c62c: 9003         	str	r0, [sp, #0xc]
 805c62e: 9102         	str	r1, [sp, #0x8]
;             if( portIS_PRIVILEGED() == pdFALSE )
 805c630: f7ff fffe    	bl	0x805c630 <MPU_xTaskGenericNotifyStateClear+0xa> @ imm = #-0x4
 805c634: b948         	cbnz	r0, 0x805c64a <MPU_xTaskGenericNotifyStateClear+0x24> @ imm = #0x12
 805c636: e7ff         	b	0x805c638 <MPU_xTaskGenericNotifyStateClear+0x12> @ imm = #-0x2
;                 portRAISE_PRIVILEGE();
 805c638: df03         	svc	#0x3
;                 xReturn = xTaskGenericNotifyStateClear( xTask, uxIndexToClear );
 805c63a: 9803         	ldr	r0, [sp, #0xc]
 805c63c: 9902         	ldr	r1, [sp, #0x8]
 805c63e: f7ff fffe    	bl	0x805c63e <MPU_xTaskGenericNotifyStateClear+0x18> @ imm = #-0x4
 805c642: 9001         	str	r0, [sp, #0x4]
;                 portRESET_PRIVILEGE();
 805c644: f7ff fffe    	bl	0x805c644 <MPU_xTaskGenericNotifyStateClear+0x1e> @ imm = #-0x4
;             }
 805c648: e005         	b	0x805c656 <MPU_xTaskGenericNotifyStateClear+0x30> @ imm = #0xa
;                 xReturn = xTaskGenericNotifyStateClear( xTask, uxIndexToClear );
 805c64a: 9803         	ldr	r0, [sp, #0xc]
 805c64c: 9902         	ldr	r1, [sp, #0x8]
 805c64e: f7ff fffe    	bl	0x805c64e <MPU_xTaskGenericNotifyStateClear+0x28> @ imm = #-0x4
 805c652: 9001         	str	r0, [sp, #0x4]
 805c654: e7ff         	b	0x805c656 <MPU_xTaskGenericNotifyStateClear+0x30> @ imm = #-0x2
;             return xReturn;
 805c656: 9801         	ldr	r0, [sp, #0x4]
 805c658: b004         	add	sp, #0x10
 805c65a: bd80         	pop	{r7, pc}

0805c65c <MPU_ulTaskGenericNotifyValueClear>:
;         {
 805c65c: b580         	push	{r7, lr}
 805c65e: 466f         	mov	r7, sp
 805c660: b084         	sub	sp, #0x10
 805c662: 9003         	str	r0, [sp, #0xc]
 805c664: 9102         	str	r1, [sp, #0x8]
 805c666: 9201         	str	r2, [sp, #0x4]
;             if( portIS_PRIVILEGED() == pdFALSE )
 805c668: f7ff fffe    	bl	0x805c668 <MPU_ulTaskGenericNotifyValueClear+0xc> @ imm = #-0x4
 805c66c: b950         	cbnz	r0, 0x805c684 <MPU_ulTaskGenericNotifyValueClear+0x28> @ imm = #0x14
 805c66e: e7ff         	b	0x805c670 <MPU_ulTaskGenericNotifyValueClear+0x14> @ imm = #-0x2
;                 portRAISE_PRIVILEGE();
 805c670: df03         	svc	#0x3
;                 ulReturn = ulTaskGenericNotifyValueClear( xTask, uxIndexToClear, ulBitsToClear );
 805c672: 9803         	ldr	r0, [sp, #0xc]
 805c674: 9902         	ldr	r1, [sp, #0x8]
 805c676: 9a01         	ldr	r2, [sp, #0x4]
 805c678: f7ff fffe    	bl	0x805c678 <MPU_ulTaskGenericNotifyValueClear+0x1c> @ imm = #-0x4
 805c67c: 9000         	str	r0, [sp]
;                 portRESET_PRIVILEGE();
 805c67e: f7ff fffe    	bl	0x805c67e <MPU_ulTaskGenericNotifyValueClear+0x22> @ imm = #-0x4
;             }
 805c682: e006         	b	0x805c692 <MPU_ulTaskGenericNotifyValueClear+0x36> @ imm = #0xc
;                 ulReturn = ulTaskGenericNotifyValueClear( xTask, uxIndexToClear, ulBitsToClear );
 805c684: 9803         	ldr	r0, [sp, #0xc]
 805c686: 9902         	ldr	r1, [sp, #0x8]
 805c688: 9a01         	ldr	r2, [sp, #0x4]
 805c68a: f7ff fffe    	bl	0x805c68a <MPU_ulTaskGenericNotifyValueClear+0x2e> @ imm = #-0x4
 805c68e: 9000         	str	r0, [sp]
 805c690: e7ff         	b	0x805c692 <MPU_ulTaskGenericNotifyValueClear+0x36> @ imm = #-0x2
;             return ulReturn;
 805c692: 9800         	ldr	r0, [sp]
 805c694: b004         	add	sp, #0x10
 805c696: bd80         	pop	{r7, pc}

0805c698 <MPU_xQueueGenericSend>:
;     {
 805c698: b580         	push	{r7, lr}
 805c69a: 466f         	mov	r7, sp
 805c69c: b086         	sub	sp, #0x18
 805c69e: 9005         	str	r0, [sp, #0x14]
 805c6a0: 9104         	str	r1, [sp, #0x10]
 805c6a2: 9203         	str	r2, [sp, #0xc]
 805c6a4: 9302         	str	r3, [sp, #0x8]
;         if( portIS_PRIVILEGED() == pdFALSE )
 805c6a6: f7ff fffe    	bl	0x805c6a6 <MPU_xQueueGenericSend+0xe> @ imm = #-0x4
 805c6aa: b958         	cbnz	r0, 0x805c6c4 <MPU_xQueueGenericSend+0x2c> @ imm = #0x16
 805c6ac: e7ff         	b	0x805c6ae <MPU_xQueueGenericSend+0x16> @ imm = #-0x2
;             portRAISE_PRIVILEGE();
 805c6ae: df03         	svc	#0x3
;             xReturn = xQueueGenericSend( xQueue, pvItemToQueue, xTicksToWait, xCopyPosition );
 805c6b0: 9805         	ldr	r0, [sp, #0x14]
 805c6b2: 9904         	ldr	r1, [sp, #0x10]
 805c6b4: 9a03         	ldr	r2, [sp, #0xc]
 805c6b6: 9b02         	ldr	r3, [sp, #0x8]
 805c6b8: f7ff fffe    	bl	0x805c6b8 <MPU_xQueueGenericSend+0x20> @ imm = #-0x4
 805c6bc: 9001         	str	r0, [sp, #0x4]
;             portRESET_PRIVILEGE();
 805c6be: f7ff fffe    	bl	0x805c6be <MPU_xQueueGenericSend+0x26> @ imm = #-0x4
;         }
 805c6c2: e007         	b	0x805c6d4 <MPU_xQueueGenericSend+0x3c> @ imm = #0xe
;             xReturn = xQueueGenericSend( xQueue, pvItemToQueue, xTicksToWait, xCopyPosition );
 805c6c4: 9805         	ldr	r0, [sp, #0x14]
 805c6c6: 9904         	ldr	r1, [sp, #0x10]
 805c6c8: 9a03         	ldr	r2, [sp, #0xc]
 805c6ca: 9b02         	ldr	r3, [sp, #0x8]
 805c6cc: f7ff fffe    	bl	0x805c6cc <MPU_xQueueGenericSend+0x34> @ imm = #-0x4
 805c6d0: 9001         	str	r0, [sp, #0x4]
 805c6d2: e7ff         	b	0x805c6d4 <MPU_xQueueGenericSend+0x3c> @ imm = #-0x2
;         return xReturn;
 805c6d4: 9801         	ldr	r0, [sp, #0x4]
 805c6d6: b006         	add	sp, #0x18
 805c6d8: bd80         	pop	{r7, pc}

0805c6da <MPU_uxQueueMessagesWaiting>:
;     {
 805c6da: b580         	push	{r7, lr}
 805c6dc: 466f         	mov	r7, sp
 805c6de: b082         	sub	sp, #0x8
 805c6e0: 9001         	str	r0, [sp, #0x4]
;         if( portIS_PRIVILEGED() == pdFALSE )
 805c6e2: f7ff fffe    	bl	0x805c6e2 <MPU_uxQueueMessagesWaiting+0x8> @ imm = #-0x4
 805c6e6: b940         	cbnz	r0, 0x805c6fa <MPU_uxQueueMessagesWaiting+0x20> @ imm = #0x10
 805c6e8: e7ff         	b	0x805c6ea <MPU_uxQueueMessagesWaiting+0x10> @ imm = #-0x2
;             portRAISE_PRIVILEGE();
 805c6ea: df03         	svc	#0x3
;             uxReturn = uxQueueMessagesWaiting( pxQueue );
 805c6ec: 9801         	ldr	r0, [sp, #0x4]
 805c6ee: f7ff fffe    	bl	0x805c6ee <MPU_uxQueueMessagesWaiting+0x14> @ imm = #-0x4
 805c6f2: 9000         	str	r0, [sp]
;             portRESET_PRIVILEGE();
 805c6f4: f7ff fffe    	bl	0x805c6f4 <MPU_uxQueueMessagesWaiting+0x1a> @ imm = #-0x4
;         }
 805c6f8: e004         	b	0x805c704 <MPU_uxQueueMessagesWaiting+0x2a> @ imm = #0x8
;             uxReturn = uxQueueMessagesWaiting( pxQueue );
 805c6fa: 9801         	ldr	r0, [sp, #0x4]
 805c6fc: f7ff fffe    	bl	0x805c6fc <MPU_uxQueueMessagesWaiting+0x22> @ imm = #-0x4
 805c700: 9000         	str	r0, [sp]
 805c702: e7ff         	b	0x805c704 <MPU_uxQueueMessagesWaiting+0x2a> @ imm = #-0x2
;         return uxReturn;
 805c704: 9800         	ldr	r0, [sp]
 805c706: b002         	add	sp, #0x8
 805c708: bd80         	pop	{r7, pc}

0805c70a <MPU_uxQueueSpacesAvailable>:
;     {
 805c70a: b580         	push	{r7, lr}
 805c70c: 466f         	mov	r7, sp
 805c70e: b082         	sub	sp, #0x8
 805c710: 9001         	str	r0, [sp, #0x4]
;         if( portIS_PRIVILEGED() == pdFALSE )
 805c712: f7ff fffe    	bl	0x805c712 <MPU_uxQueueSpacesAvailable+0x8> @ imm = #-0x4
 805c716: b940         	cbnz	r0, 0x805c72a <MPU_uxQueueSpacesAvailable+0x20> @ imm = #0x10
 805c718: e7ff         	b	0x805c71a <MPU_uxQueueSpacesAvailable+0x10> @ imm = #-0x2
;             portRAISE_PRIVILEGE();
 805c71a: df03         	svc	#0x3
;             uxReturn = uxQueueSpacesAvailable( xQueue );
 805c71c: 9801         	ldr	r0, [sp, #0x4]
 805c71e: f7ff fffe    	bl	0x805c71e <MPU_uxQueueSpacesAvailable+0x14> @ imm = #-0x4
 805c722: 9000         	str	r0, [sp]
;             portRESET_PRIVILEGE();
 805c724: f7ff fffe    	bl	0x805c724 <MPU_uxQueueSpacesAvailable+0x1a> @ imm = #-0x4
;         }
 805c728: e004         	b	0x805c734 <MPU_uxQueueSpacesAvailable+0x2a> @ imm = #0x8
;             uxReturn = uxQueueSpacesAvailable( xQueue );
 805c72a: 9801         	ldr	r0, [sp, #0x4]
 805c72c: f7ff fffe    	bl	0x805c72c <MPU_uxQueueSpacesAvailable+0x22> @ imm = #-0x4
 805c730: 9000         	str	r0, [sp]
 805c732: e7ff         	b	0x805c734 <MPU_uxQueueSpacesAvailable+0x2a> @ imm = #-0x2
;         return uxReturn;
 805c734: 9800         	ldr	r0, [sp]
 805c736: b002         	add	sp, #0x8
 805c738: bd80         	pop	{r7, pc}

0805c73a <MPU_xQueueReceive>:
;     {
 805c73a: b580         	push	{r7, lr}
 805c73c: 466f         	mov	r7, sp
 805c73e: b084         	sub	sp, #0x10
 805c740: 9003         	str	r0, [sp, #0xc]
 805c742: 9102         	str	r1, [sp, #0x8]
 805c744: 9201         	str	r2, [sp, #0x4]
;         if( portIS_PRIVILEGED() == pdFALSE )
 805c746: f7ff fffe    	bl	0x805c746 <MPU_xQueueReceive+0xc> @ imm = #-0x4
 805c74a: b950         	cbnz	r0, 0x805c762 <MPU_xQueueReceive+0x28> @ imm = #0x14
 805c74c: e7ff         	b	0x805c74e <MPU_xQueueReceive+0x14> @ imm = #-0x2
;             portRAISE_PRIVILEGE();
 805c74e: df03         	svc	#0x3
;             xReturn = xQueueReceive( pxQueue, pvBuffer, xTicksToWait );
 805c750: 9803         	ldr	r0, [sp, #0xc]
 805c752: 9902         	ldr	r1, [sp, #0x8]
 805c754: 9a01         	ldr	r2, [sp, #0x4]
 805c756: f7ff fffe    	bl	0x805c756 <MPU_xQueueReceive+0x1c> @ imm = #-0x4
 805c75a: 9000         	str	r0, [sp]
;             portRESET_PRIVILEGE();
 805c75c: f7ff fffe    	bl	0x805c75c <MPU_xQueueReceive+0x22> @ imm = #-0x4
;         }
 805c760: e006         	b	0x805c770 <MPU_xQueueReceive+0x36> @ imm = #0xc
;             xReturn = xQueueReceive( pxQueue, pvBuffer, xTicksToWait );
 805c762: 9803         	ldr	r0, [sp, #0xc]
 805c764: 9902         	ldr	r1, [sp, #0x8]
 805c766: 9a01         	ldr	r2, [sp, #0x4]
 805c768: f7ff fffe    	bl	0x805c768 <MPU_xQueueReceive+0x2e> @ imm = #-0x4
 805c76c: 9000         	str	r0, [sp]
 805c76e: e7ff         	b	0x805c770 <MPU_xQueueReceive+0x36> @ imm = #-0x2
;         return xReturn;
 805c770: 9800         	ldr	r0, [sp]
 805c772: b004         	add	sp, #0x10
 805c774: bd80         	pop	{r7, pc}

0805c776 <MPU_xQueuePeek>:
;     {
 805c776: b580         	push	{r7, lr}
 805c778: 466f         	mov	r7, sp
 805c77a: b084         	sub	sp, #0x10
 805c77c: 9003         	str	r0, [sp, #0xc]
 805c77e: 9102         	str	r1, [sp, #0x8]
 805c780: 9201         	str	r2, [sp, #0x4]
;         if( portIS_PRIVILEGED() == pdFALSE )
 805c782: f7ff fffe    	bl	0x805c782 <MPU_xQueuePeek+0xc> @ imm = #-0x4
 805c786: b950         	cbnz	r0, 0x805c79e <MPU_xQueuePeek+0x28> @ imm = #0x14
 805c788: e7ff         	b	0x805c78a <MPU_xQueuePeek+0x14> @ imm = #-0x2
;             portRAISE_PRIVILEGE();
 805c78a: df03         	svc	#0x3
;             xReturn = xQueuePeek( xQueue, pvBuffer, xTicksToWait );
 805c78c: 9803         	ldr	r0, [sp, #0xc]
 805c78e: 9902         	ldr	r1, [sp, #0x8]
 805c790: 9a01         	ldr	r2, [sp, #0x4]
 805c792: f7ff fffe    	bl	0x805c792 <MPU_xQueuePeek+0x1c> @ imm = #-0x4
 805c796: 9000         	str	r0, [sp]
;             portRESET_PRIVILEGE();
 805c798: f7ff fffe    	bl	0x805c798 <MPU_xQueuePeek+0x22> @ imm = #-0x4
;         }
 805c79c: e006         	b	0x805c7ac <MPU_xQueuePeek+0x36> @ imm = #0xc
;             xReturn = xQueuePeek( xQueue, pvBuffer, xTicksToWait );
 805c79e: 9803         	ldr	r0, [sp, #0xc]
 805c7a0: 9902         	ldr	r1, [sp, #0x8]
 805c7a2: 9a01         	ldr	r2, [sp, #0x4]
 805c7a4: f7ff fffe    	bl	0x805c7a4 <MPU_xQueuePeek+0x2e> @ imm = #-0x4
 805c7a8: 9000         	str	r0, [sp]
 805c7aa: e7ff         	b	0x805c7ac <MPU_xQueuePeek+0x36> @ imm = #-0x2
;         return xReturn;
 805c7ac: 9800         	ldr	r0, [sp]
 805c7ae: b004         	add	sp, #0x10
 805c7b0: bd80         	pop	{r7, pc}

0805c7b2 <MPU_xQueueSemaphoreTake>:
;     {
 805c7b2: b580         	push	{r7, lr}
 805c7b4: 466f         	mov	r7, sp
 805c7b6: b084         	sub	sp, #0x10
 805c7b8: 9003         	str	r0, [sp, #0xc]
 805c7ba: 9102         	str	r1, [sp, #0x8]
;         if( portIS_PRIVILEGED() == pdFALSE )
 805c7bc: f7ff fffe    	bl	0x805c7bc <MPU_xQueueSemaphoreTake+0xa> @ imm = #-0x4
 805c7c0: b948         	cbnz	r0, 0x805c7d6 <MPU_xQueueSemaphoreTake+0x24> @ imm = #0x12
 805c7c2: e7ff         	b	0x805c7c4 <MPU_xQueueSemaphoreTake+0x12> @ imm = #-0x2
;             portRAISE_PRIVILEGE();
 805c7c4: df03         	svc	#0x3
;             xReturn = xQueueSemaphoreTake( xQueue, xTicksToWait );
 805c7c6: 9803         	ldr	r0, [sp, #0xc]
 805c7c8: 9902         	ldr	r1, [sp, #0x8]
 805c7ca: f7ff fffe    	bl	0x805c7ca <MPU_xQueueSemaphoreTake+0x18> @ imm = #-0x4
 805c7ce: 9001         	str	r0, [sp, #0x4]
;             portRESET_PRIVILEGE();
 805c7d0: f7ff fffe    	bl	0x805c7d0 <MPU_xQueueSemaphoreTake+0x1e> @ imm = #-0x4
;         }
 805c7d4: e005         	b	0x805c7e2 <MPU_xQueueSemaphoreTake+0x30> @ imm = #0xa
;             xReturn = xQueueSemaphoreTake( xQueue, xTicksToWait );
 805c7d6: 9803         	ldr	r0, [sp, #0xc]
 805c7d8: 9902         	ldr	r1, [sp, #0x8]
 805c7da: f7ff fffe    	bl	0x805c7da <MPU_xQueueSemaphoreTake+0x28> @ imm = #-0x4
 805c7de: 9001         	str	r0, [sp, #0x4]
 805c7e0: e7ff         	b	0x805c7e2 <MPU_xQueueSemaphoreTake+0x30> @ imm = #-0x2
;         return xReturn;
 805c7e2: 9801         	ldr	r0, [sp, #0x4]
 805c7e4: b004         	add	sp, #0x10
 805c7e6: bd80         	pop	{r7, pc}

0805c7e8 <MPU_xQueueGetMutexHolder>:
;         {
 805c7e8: b580         	push	{r7, lr}
 805c7ea: 466f         	mov	r7, sp
 805c7ec: b082         	sub	sp, #0x8
 805c7ee: 9001         	str	r0, [sp, #0x4]
;             if( portIS_PRIVILEGED() == pdFALSE )
 805c7f0: f7ff fffe    	bl	0x805c7f0 <MPU_xQueueGetMutexHolder+0x8> @ imm = #-0x4
 805c7f4: b940         	cbnz	r0, 0x805c808 <MPU_xQueueGetMutexHolder+0x20> @ imm = #0x10
 805c7f6: e7ff         	b	0x805c7f8 <MPU_xQueueGetMutexHolder+0x10> @ imm = #-0x2
;                 portRAISE_PRIVILEGE();
 805c7f8: df03         	svc	#0x3
;                 xReturn = xQueueGetMutexHolder( xSemaphore );
 805c7fa: 9801         	ldr	r0, [sp, #0x4]
 805c7fc: f7ff fffe    	bl	0x805c7fc <MPU_xQueueGetMutexHolder+0x14> @ imm = #-0x4
 805c800: 9000         	str	r0, [sp]
;                 portRESET_PRIVILEGE();
 805c802: f7ff fffe    	bl	0x805c802 <MPU_xQueueGetMutexHolder+0x1a> @ imm = #-0x4
;             }
 805c806: e004         	b	0x805c812 <MPU_xQueueGetMutexHolder+0x2a> @ imm = #0x8
;                 xReturn = xQueueGetMutexHolder( xSemaphore );
 805c808: 9801         	ldr	r0, [sp, #0x4]
 805c80a: f7ff fffe    	bl	0x805c80a <MPU_xQueueGetMutexHolder+0x22> @ imm = #-0x4
 805c80e: 9000         	str	r0, [sp]
 805c810: e7ff         	b	0x805c812 <MPU_xQueueGetMutexHolder+0x2a> @ imm = #-0x2
;             return xReturn;
 805c812: 9800         	ldr	r0, [sp]
 805c814: b002         	add	sp, #0x8
 805c816: bd80         	pop	{r7, pc}

0805c818 <MPU_xQueueTakeMutexRecursive>:
;         {
 805c818: b580         	push	{r7, lr}
 805c81a: 466f         	mov	r7, sp
 805c81c: b084         	sub	sp, #0x10
 805c81e: 9003         	str	r0, [sp, #0xc]
 805c820: 9102         	str	r1, [sp, #0x8]
;             if( portIS_PRIVILEGED() == pdFALSE )
 805c822: f7ff fffe    	bl	0x805c822 <MPU_xQueueTakeMutexRecursive+0xa> @ imm = #-0x4
 805c826: b948         	cbnz	r0, 0x805c83c <MPU_xQueueTakeMutexRecursive+0x24> @ imm = #0x12
 805c828: e7ff         	b	0x805c82a <MPU_xQueueTakeMutexRecursive+0x12> @ imm = #-0x2
;                 portRAISE_PRIVILEGE();
 805c82a: df03         	svc	#0x3
;                 xReturn = xQueueTakeMutexRecursive( xMutex, xBlockTime );
 805c82c: 9803         	ldr	r0, [sp, #0xc]
 805c82e: 9902         	ldr	r1, [sp, #0x8]
 805c830: f7ff fffe    	bl	0x805c830 <MPU_xQueueTakeMutexRecursive+0x18> @ imm = #-0x4
 805c834: 9001         	str	r0, [sp, #0x4]
;                 portRESET_PRIVILEGE();
 805c836: f7ff fffe    	bl	0x805c836 <MPU_xQueueTakeMutexRecursive+0x1e> @ imm = #-0x4
;             }
 805c83a: e005         	b	0x805c848 <MPU_xQueueTakeMutexRecursive+0x30> @ imm = #0xa
;                 xReturn = xQueueTakeMutexRecursive( xMutex, xBlockTime );
 805c83c: 9803         	ldr	r0, [sp, #0xc]
 805c83e: 9902         	ldr	r1, [sp, #0x8]
 805c840: f7ff fffe    	bl	0x805c840 <MPU_xQueueTakeMutexRecursive+0x28> @ imm = #-0x4
 805c844: 9001         	str	r0, [sp, #0x4]
 805c846: e7ff         	b	0x805c848 <MPU_xQueueTakeMutexRecursive+0x30> @ imm = #-0x2
;             return xReturn;
 805c848: 9801         	ldr	r0, [sp, #0x4]
 805c84a: b004         	add	sp, #0x10
 805c84c: bd80         	pop	{r7, pc}

0805c84e <MPU_xQueueGiveMutexRecursive>:
;         {
 805c84e: b580         	push	{r7, lr}
 805c850: 466f         	mov	r7, sp
 805c852: b082         	sub	sp, #0x8
 805c854: 9001         	str	r0, [sp, #0x4]
;             if( portIS_PRIVILEGED() == pdFALSE )
 805c856: f7ff fffe    	bl	0x805c856 <MPU_xQueueGiveMutexRecursive+0x8> @ imm = #-0x4
 805c85a: b940         	cbnz	r0, 0x805c86e <MPU_xQueueGiveMutexRecursive+0x20> @ imm = #0x10
 805c85c: e7ff         	b	0x805c85e <MPU_xQueueGiveMutexRecursive+0x10> @ imm = #-0x2
;                 portRAISE_PRIVILEGE();
 805c85e: df03         	svc	#0x3
;                 xReturn = xQueueGiveMutexRecursive( xMutex );
 805c860: 9801         	ldr	r0, [sp, #0x4]
 805c862: f7ff fffe    	bl	0x805c862 <MPU_xQueueGiveMutexRecursive+0x14> @ imm = #-0x4
 805c866: 9000         	str	r0, [sp]
;                 portRESET_PRIVILEGE();
 805c868: f7ff fffe    	bl	0x805c868 <MPU_xQueueGiveMutexRecursive+0x1a> @ imm = #-0x4
;             }
 805c86c: e004         	b	0x805c878 <MPU_xQueueGiveMutexRecursive+0x2a> @ imm = #0x8
;                 xReturn = xQueueGiveMutexRecursive( xMutex );
 805c86e: 9801         	ldr	r0, [sp, #0x4]
 805c870: f7ff fffe    	bl	0x805c870 <MPU_xQueueGiveMutexRecursive+0x22> @ imm = #-0x4
 805c874: 9000         	str	r0, [sp]
 805c876: e7ff         	b	0x805c878 <MPU_xQueueGiveMutexRecursive+0x2a> @ imm = #-0x2
;             return xReturn;
 805c878: 9800         	ldr	r0, [sp]
 805c87a: b002         	add	sp, #0x8
 805c87c: bd80         	pop	{r7, pc}

0805c87e <MPU_vQueueAddToRegistry>:
;         {
 805c87e: b580         	push	{r7, lr}
 805c880: 466f         	mov	r7, sp
 805c882: b082         	sub	sp, #0x8
 805c884: 9001         	str	r0, [sp, #0x4]
 805c886: 9100         	str	r1, [sp]
;             if( portIS_PRIVILEGED() == pdFALSE )
 805c888: f7ff fffe    	bl	0x805c888 <MPU_vQueueAddToRegistry+0xa> @ imm = #-0x4
 805c88c: b940         	cbnz	r0, 0x805c8a0 <MPU_vQueueAddToRegistry+0x22> @ imm = #0x10
 805c88e: e7ff         	b	0x805c890 <MPU_vQueueAddToRegistry+0x12> @ imm = #-0x2
;                 portRAISE_PRIVILEGE();
 805c890: df03         	svc	#0x3
;                 vQueueAddToRegistry( xQueue, pcName );
 805c892: 9801         	ldr	r0, [sp, #0x4]
 805c894: 9900         	ldr	r1, [sp]
 805c896: f7ff fffe    	bl	0x805c896 <MPU_vQueueAddToRegistry+0x18> @ imm = #-0x4
;                 portRESET_PRIVILEGE();
 805c89a: f7ff fffe    	bl	0x805c89a <MPU_vQueueAddToRegistry+0x1c> @ imm = #-0x4
;             }
 805c89e: e004         	b	0x805c8aa <MPU_vQueueAddToRegistry+0x2c> @ imm = #0x8
;                 vQueueAddToRegistry( xQueue, pcName );
 805c8a0: 9801         	ldr	r0, [sp, #0x4]
 805c8a2: 9900         	ldr	r1, [sp]
 805c8a4: f7ff fffe    	bl	0x805c8a4 <MPU_vQueueAddToRegistry+0x26> @ imm = #-0x4
 805c8a8: e7ff         	b	0x805c8aa <MPU_vQueueAddToRegistry+0x2c> @ imm = #-0x2
;         }
 805c8aa: b002         	add	sp, #0x8
 805c8ac: bd80         	pop	{r7, pc}

0805c8ae <MPU_vQueueUnregisterQueue>:
;         {
 805c8ae: b580         	push	{r7, lr}
 805c8b0: 466f         	mov	r7, sp
 805c8b2: b082         	sub	sp, #0x8
 805c8b4: 9001         	str	r0, [sp, #0x4]
;             if( portIS_PRIVILEGED() == pdFALSE )
 805c8b6: f7ff fffe    	bl	0x805c8b6 <MPU_vQueueUnregisterQueue+0x8> @ imm = #-0x4
 805c8ba: b938         	cbnz	r0, 0x805c8cc <MPU_vQueueUnregisterQueue+0x1e> @ imm = #0xe
 805c8bc: e7ff         	b	0x805c8be <MPU_vQueueUnregisterQueue+0x10> @ imm = #-0x2
;                 portRAISE_PRIVILEGE();
 805c8be: df03         	svc	#0x3
;                 vQueueUnregisterQueue( xQueue );
 805c8c0: 9801         	ldr	r0, [sp, #0x4]
 805c8c2: f7ff fffe    	bl	0x805c8c2 <MPU_vQueueUnregisterQueue+0x14> @ imm = #-0x4
;                 portRESET_PRIVILEGE();
 805c8c6: f7ff fffe    	bl	0x805c8c6 <MPU_vQueueUnregisterQueue+0x18> @ imm = #-0x4
;             }
 805c8ca: e003         	b	0x805c8d4 <MPU_vQueueUnregisterQueue+0x26> @ imm = #0x6
;                 vQueueUnregisterQueue( xQueue );
 805c8cc: 9801         	ldr	r0, [sp, #0x4]
 805c8ce: f7ff fffe    	bl	0x805c8ce <MPU_vQueueUnregisterQueue+0x20> @ imm = #-0x4
 805c8d2: e7ff         	b	0x805c8d4 <MPU_vQueueUnregisterQueue+0x26> @ imm = #-0x2
;         }
 805c8d4: b002         	add	sp, #0x8
 805c8d6: bd80         	pop	{r7, pc}

0805c8d8 <MPU_pcQueueGetName>:
;         {
 805c8d8: b580         	push	{r7, lr}
 805c8da: 466f         	mov	r7, sp
 805c8dc: b082         	sub	sp, #0x8
 805c8de: 9001         	str	r0, [sp, #0x4]
;             if( portIS_PRIVILEGED() == pdFALSE )
 805c8e0: f7ff fffe    	bl	0x805c8e0 <MPU_pcQueueGetName+0x8> @ imm = #-0x4
 805c8e4: b940         	cbnz	r0, 0x805c8f8 <MPU_pcQueueGetName+0x20> @ imm = #0x10
 805c8e6: e7ff         	b	0x805c8e8 <MPU_pcQueueGetName+0x10> @ imm = #-0x2
;                 portRAISE_PRIVILEGE();
 805c8e8: df03         	svc	#0x3
;                 pcReturn = pcQueueGetName( xQueue );
 805c8ea: 9801         	ldr	r0, [sp, #0x4]
 805c8ec: f7ff fffe    	bl	0x805c8ec <MPU_pcQueueGetName+0x14> @ imm = #-0x4
 805c8f0: 9000         	str	r0, [sp]
;                 portRESET_PRIVILEGE();
 805c8f2: f7ff fffe    	bl	0x805c8f2 <MPU_pcQueueGetName+0x1a> @ imm = #-0x4
;             }
 805c8f6: e004         	b	0x805c902 <MPU_pcQueueGetName+0x2a> @ imm = #0x8
;                 pcReturn = pcQueueGetName( xQueue );
 805c8f8: 9801         	ldr	r0, [sp, #0x4]
 805c8fa: f7ff fffe    	bl	0x805c8fa <MPU_pcQueueGetName+0x22> @ imm = #-0x4
 805c8fe: 9000         	str	r0, [sp]
 805c900: e7ff         	b	0x805c902 <MPU_pcQueueGetName+0x2a> @ imm = #-0x2
;             return pcReturn;
 805c902: 9800         	ldr	r0, [sp]
 805c904: b002         	add	sp, #0x8
 805c906: bd80         	pop	{r7, pc}

0805c908 <MPU_pvTimerGetTimerID>:
;         {
 805c908: b580         	push	{r7, lr}
 805c90a: 466f         	mov	r7, sp
 805c90c: b082         	sub	sp, #0x8
 805c90e: 9001         	str	r0, [sp, #0x4]
;             if( portIS_PRIVILEGED() == pdFALSE )
 805c910: f7ff fffe    	bl	0x805c910 <MPU_pvTimerGetTimerID+0x8> @ imm = #-0x4
 805c914: b940         	cbnz	r0, 0x805c928 <MPU_pvTimerGetTimerID+0x20> @ imm = #0x10
 805c916: e7ff         	b	0x805c918 <MPU_pvTimerGetTimerID+0x10> @ imm = #-0x2
;                 portRAISE_PRIVILEGE();
 805c918: df03         	svc	#0x3
;                 pvReturn = pvTimerGetTimerID( xTimer );
 805c91a: 9801         	ldr	r0, [sp, #0x4]
 805c91c: f7ff fffe    	bl	0x805c91c <MPU_pvTimerGetTimerID+0x14> @ imm = #-0x4
 805c920: 9000         	str	r0, [sp]
;                 portRESET_PRIVILEGE();
 805c922: f7ff fffe    	bl	0x805c922 <MPU_pvTimerGetTimerID+0x1a> @ imm = #-0x4
;             }
 805c926: e004         	b	0x805c932 <MPU_pvTimerGetTimerID+0x2a> @ imm = #0x8
;                 pvReturn = pvTimerGetTimerID( xTimer );
 805c928: 9801         	ldr	r0, [sp, #0x4]
 805c92a: f7ff fffe    	bl	0x805c92a <MPU_pvTimerGetTimerID+0x22> @ imm = #-0x4
 805c92e: 9000         	str	r0, [sp]
 805c930: e7ff         	b	0x805c932 <MPU_pvTimerGetTimerID+0x2a> @ imm = #-0x2
;             return pvReturn;
 805c932: 9800         	ldr	r0, [sp]
 805c934: b002         	add	sp, #0x8
 805c936: bd80         	pop	{r7, pc}

0805c938 <MPU_vTimerSetTimerID>:
;         {
 805c938: b580         	push	{r7, lr}
 805c93a: 466f         	mov	r7, sp
 805c93c: b082         	sub	sp, #0x8
 805c93e: 9001         	str	r0, [sp, #0x4]
 805c940: 9100         	str	r1, [sp]
;             if( portIS_PRIVILEGED() == pdFALSE )
 805c942: f7ff fffe    	bl	0x805c942 <MPU_vTimerSetTimerID+0xa> @ imm = #-0x4
 805c946: b940         	cbnz	r0, 0x805c95a <MPU_vTimerSetTimerID+0x22> @ imm = #0x10
 805c948: e7ff         	b	0x805c94a <MPU_vTimerSetTimerID+0x12> @ imm = #-0x2
;                 portRAISE_PRIVILEGE();
 805c94a: df03         	svc	#0x3
;                 vTimerSetTimerID( xTimer, pvNewID );
 805c94c: 9801         	ldr	r0, [sp, #0x4]
 805c94e: 9900         	ldr	r1, [sp]
 805c950: f7ff fffe    	bl	0x805c950 <MPU_vTimerSetTimerID+0x18> @ imm = #-0x4
;                 portRESET_PRIVILEGE();
 805c954: f7ff fffe    	bl	0x805c954 <MPU_vTimerSetTimerID+0x1c> @ imm = #-0x4
;             }
 805c958: e004         	b	0x805c964 <MPU_vTimerSetTimerID+0x2c> @ imm = #0x8
;                 vTimerSetTimerID( xTimer, pvNewID );
 805c95a: 9801         	ldr	r0, [sp, #0x4]
 805c95c: 9900         	ldr	r1, [sp]
 805c95e: f7ff fffe    	bl	0x805c95e <MPU_vTimerSetTimerID+0x26> @ imm = #-0x4
 805c962: e7ff         	b	0x805c964 <MPU_vTimerSetTimerID+0x2c> @ imm = #-0x2
;         }
 805c964: b002         	add	sp, #0x8
 805c966: bd80         	pop	{r7, pc}

0805c968 <MPU_xTimerIsTimerActive>:
;         {
 805c968: b580         	push	{r7, lr}
 805c96a: 466f         	mov	r7, sp
 805c96c: b082         	sub	sp, #0x8
 805c96e: 9001         	str	r0, [sp, #0x4]
;             if( portIS_PRIVILEGED() == pdFALSE )
 805c970: f7ff fffe    	bl	0x805c970 <MPU_xTimerIsTimerActive+0x8> @ imm = #-0x4
 805c974: b940         	cbnz	r0, 0x805c988 <MPU_xTimerIsTimerActive+0x20> @ imm = #0x10
 805c976: e7ff         	b	0x805c978 <MPU_xTimerIsTimerActive+0x10> @ imm = #-0x2
;                 portRAISE_PRIVILEGE();
 805c978: df03         	svc	#0x3
;                 xReturn = xTimerIsTimerActive( xTimer );
 805c97a: 9801         	ldr	r0, [sp, #0x4]
 805c97c: f7ff fffe    	bl	0x805c97c <MPU_xTimerIsTimerActive+0x14> @ imm = #-0x4
 805c980: 9000         	str	r0, [sp]
;                 portRESET_PRIVILEGE();
 805c982: f7ff fffe    	bl	0x805c982 <MPU_xTimerIsTimerActive+0x1a> @ imm = #-0x4
;             }
 805c986: e004         	b	0x805c992 <MPU_xTimerIsTimerActive+0x2a> @ imm = #0x8
;                 xReturn = xTimerIsTimerActive( xTimer );
 805c988: 9801         	ldr	r0, [sp, #0x4]
 805c98a: f7ff fffe    	bl	0x805c98a <MPU_xTimerIsTimerActive+0x22> @ imm = #-0x4
 805c98e: 9000         	str	r0, [sp]
 805c990: e7ff         	b	0x805c992 <MPU_xTimerIsTimerActive+0x2a> @ imm = #-0x2
;             return xReturn;
 805c992: 9800         	ldr	r0, [sp]
 805c994: b002         	add	sp, #0x8
 805c996: bd80         	pop	{r7, pc}

0805c998 <MPU_xTimerGetTimerDaemonTaskHandle>:
;         {
 805c998: b580         	push	{r7, lr}
 805c99a: 466f         	mov	r7, sp
 805c99c: b082         	sub	sp, #0x8
;             if( portIS_PRIVILEGED() == pdFALSE )
 805c99e: f7ff fffe    	bl	0x805c99e <MPU_xTimerGetTimerDaemonTaskHandle+0x6> @ imm = #-0x4
 805c9a2: b938         	cbnz	r0, 0x805c9b4 <MPU_xTimerGetTimerDaemonTaskHandle+0x1c> @ imm = #0xe
 805c9a4: e7ff         	b	0x805c9a6 <MPU_xTimerGetTimerDaemonTaskHandle+0xe> @ imm = #-0x2
;                 portRAISE_PRIVILEGE();
 805c9a6: df03         	svc	#0x3
;                 xReturn = xTimerGetTimerDaemonTaskHandle();
 805c9a8: f7ff fffe    	bl	0x805c9a8 <MPU_xTimerGetTimerDaemonTaskHandle+0x10> @ imm = #-0x4
 805c9ac: 9001         	str	r0, [sp, #0x4]
;                 portRESET_PRIVILEGE();
 805c9ae: f7ff fffe    	bl	0x805c9ae <MPU_xTimerGetTimerDaemonTaskHandle+0x16> @ imm = #-0x4
;             }
 805c9b2: e003         	b	0x805c9bc <MPU_xTimerGetTimerDaemonTaskHandle+0x24> @ imm = #0x6
;                 xReturn = xTimerGetTimerDaemonTaskHandle();
 805c9b4: f7ff fffe    	bl	0x805c9b4 <MPU_xTimerGetTimerDaemonTaskHandle+0x1c> @ imm = #-0x4
 805c9b8: 9001         	str	r0, [sp, #0x4]
 805c9ba: e7ff         	b	0x805c9bc <MPU_xTimerGetTimerDaemonTaskHandle+0x24> @ imm = #-0x2
;             return xReturn;
 805c9bc: 9801         	ldr	r0, [sp, #0x4]
 805c9be: b002         	add	sp, #0x8
 805c9c0: bd80         	pop	{r7, pc}

0805c9c2 <MPU_vTimerSetReloadMode>:
;         {
 805c9c2: b580         	push	{r7, lr}
 805c9c4: 466f         	mov	r7, sp
 805c9c6: b082         	sub	sp, #0x8
 805c9c8: 9001         	str	r0, [sp, #0x4]
 805c9ca: 9100         	str	r1, [sp]
;             if( portIS_PRIVILEGED() == pdFALSE )
 805c9cc: f7ff fffe    	bl	0x805c9cc <MPU_vTimerSetReloadMode+0xa> @ imm = #-0x4
 805c9d0: b940         	cbnz	r0, 0x805c9e4 <MPU_vTimerSetReloadMode+0x22> @ imm = #0x10
 805c9d2: e7ff         	b	0x805c9d4 <MPU_vTimerSetReloadMode+0x12> @ imm = #-0x2
;                 portRAISE_PRIVILEGE();
 805c9d4: df03         	svc	#0x3
;                 vTimerSetReloadMode( xTimer, uxAutoReload );
 805c9d6: 9801         	ldr	r0, [sp, #0x4]
 805c9d8: 9900         	ldr	r1, [sp]
 805c9da: f7ff fffe    	bl	0x805c9da <MPU_vTimerSetReloadMode+0x18> @ imm = #-0x4
;                 portRESET_PRIVILEGE();
 805c9de: f7ff fffe    	bl	0x805c9de <MPU_vTimerSetReloadMode+0x1c> @ imm = #-0x4
;             }
 805c9e2: e004         	b	0x805c9ee <MPU_vTimerSetReloadMode+0x2c> @ imm = #0x8
;                 vTimerSetReloadMode( xTimer, uxAutoReload );
 805c9e4: 9801         	ldr	r0, [sp, #0x4]
 805c9e6: 9900         	ldr	r1, [sp]
 805c9e8: f7ff fffe    	bl	0x805c9e8 <MPU_vTimerSetReloadMode+0x26> @ imm = #-0x4
 805c9ec: e7ff         	b	0x805c9ee <MPU_vTimerSetReloadMode+0x2c> @ imm = #-0x2
;         }
 805c9ee: b002         	add	sp, #0x8
 805c9f0: bd80         	pop	{r7, pc}

0805c9f2 <MPU_uxTimerGetReloadMode>:
;         {
 805c9f2: b580         	push	{r7, lr}
 805c9f4: 466f         	mov	r7, sp
 805c9f6: b082         	sub	sp, #0x8
 805c9f8: 9001         	str	r0, [sp, #0x4]
;             if( portIS_PRIVILEGED() == pdFALSE )
 805c9fa: f7ff fffe    	bl	0x805c9fa <MPU_uxTimerGetReloadMode+0x8> @ imm = #-0x4
 805c9fe: b940         	cbnz	r0, 0x805ca12 <MPU_uxTimerGetReloadMode+0x20> @ imm = #0x10
 805ca00: e7ff         	b	0x805ca02 <MPU_uxTimerGetReloadMode+0x10> @ imm = #-0x2
;                 portRAISE_PRIVILEGE();
 805ca02: df03         	svc	#0x3
;                 uxReturn = uxTimerGetReloadMode( xTimer );
 805ca04: 9801         	ldr	r0, [sp, #0x4]
 805ca06: f7ff fffe    	bl	0x805ca06 <MPU_uxTimerGetReloadMode+0x14> @ imm = #-0x4
 805ca0a: 9000         	str	r0, [sp]
;                 portRESET_PRIVILEGE();
 805ca0c: f7ff fffe    	bl	0x805ca0c <MPU_uxTimerGetReloadMode+0x1a> @ imm = #-0x4
;             }
 805ca10: e004         	b	0x805ca1c <MPU_uxTimerGetReloadMode+0x2a> @ imm = #0x8
;                 uxReturn = uxTimerGetReloadMode( xTimer );
 805ca12: 9801         	ldr	r0, [sp, #0x4]
 805ca14: f7ff fffe    	bl	0x805ca14 <MPU_uxTimerGetReloadMode+0x22> @ imm = #-0x4
 805ca18: 9000         	str	r0, [sp]
 805ca1a: e7ff         	b	0x805ca1c <MPU_uxTimerGetReloadMode+0x2a> @ imm = #-0x2
;             return uxReturn;
 805ca1c: 9800         	ldr	r0, [sp]
 805ca1e: b002         	add	sp, #0x8
 805ca20: bd80         	pop	{r7, pc}

0805ca22 <MPU_pcTimerGetName>:
;         {
 805ca22: b580         	push	{r7, lr}
 805ca24: 466f         	mov	r7, sp
 805ca26: b082         	sub	sp, #0x8
 805ca28: 9001         	str	r0, [sp, #0x4]
;             if( portIS_PRIVILEGED() == pdFALSE )
 805ca2a: f7ff fffe    	bl	0x805ca2a <MPU_pcTimerGetName+0x8> @ imm = #-0x4
 805ca2e: b940         	cbnz	r0, 0x805ca42 <MPU_pcTimerGetName+0x20> @ imm = #0x10
 805ca30: e7ff         	b	0x805ca32 <MPU_pcTimerGetName+0x10> @ imm = #-0x2
;                 portRAISE_PRIVILEGE();
 805ca32: df03         	svc	#0x3
;                 pcReturn = pcTimerGetName( xTimer );
 805ca34: 9801         	ldr	r0, [sp, #0x4]
 805ca36: f7ff fffe    	bl	0x805ca36 <MPU_pcTimerGetName+0x14> @ imm = #-0x4
 805ca3a: 9000         	str	r0, [sp]
;                 portRESET_PRIVILEGE();
 805ca3c: f7ff fffe    	bl	0x805ca3c <MPU_pcTimerGetName+0x1a> @ imm = #-0x4
;             }
 805ca40: e004         	b	0x805ca4c <MPU_pcTimerGetName+0x2a> @ imm = #0x8
;                 pcReturn = pcTimerGetName( xTimer );
 805ca42: 9801         	ldr	r0, [sp, #0x4]
 805ca44: f7ff fffe    	bl	0x805ca44 <MPU_pcTimerGetName+0x22> @ imm = #-0x4
 805ca48: 9000         	str	r0, [sp]
 805ca4a: e7ff         	b	0x805ca4c <MPU_pcTimerGetName+0x2a> @ imm = #-0x2
;             return pcReturn;
 805ca4c: 9800         	ldr	r0, [sp]
 805ca4e: b002         	add	sp, #0x8
 805ca50: bd80         	pop	{r7, pc}

0805ca52 <MPU_xTimerGetPeriod>:
;         {
 805ca52: b580         	push	{r7, lr}
 805ca54: 466f         	mov	r7, sp
 805ca56: b082         	sub	sp, #0x8
 805ca58: 9001         	str	r0, [sp, #0x4]
;             if( portIS_PRIVILEGED() == pdFALSE )
 805ca5a: f7ff fffe    	bl	0x805ca5a <MPU_xTimerGetPeriod+0x8> @ imm = #-0x4
 805ca5e: b940         	cbnz	r0, 0x805ca72 <MPU_xTimerGetPeriod+0x20> @ imm = #0x10
 805ca60: e7ff         	b	0x805ca62 <MPU_xTimerGetPeriod+0x10> @ imm = #-0x2
;                 portRAISE_PRIVILEGE();
 805ca62: df03         	svc	#0x3
;                 xReturn = xTimerGetPeriod( xTimer );
 805ca64: 9801         	ldr	r0, [sp, #0x4]
 805ca66: f7ff fffe    	bl	0x805ca66 <MPU_xTimerGetPeriod+0x14> @ imm = #-0x4
 805ca6a: 9000         	str	r0, [sp]
;                 portRESET_PRIVILEGE();
 805ca6c: f7ff fffe    	bl	0x805ca6c <MPU_xTimerGetPeriod+0x1a> @ imm = #-0x4
;             }
 805ca70: e004         	b	0x805ca7c <MPU_xTimerGetPeriod+0x2a> @ imm = #0x8
;                 xReturn = xTimerGetPeriod( xTimer );
 805ca72: 9801         	ldr	r0, [sp, #0x4]
 805ca74: f7ff fffe    	bl	0x805ca74 <MPU_xTimerGetPeriod+0x22> @ imm = #-0x4
 805ca78: 9000         	str	r0, [sp]
 805ca7a: e7ff         	b	0x805ca7c <MPU_xTimerGetPeriod+0x2a> @ imm = #-0x2
;             return xReturn;
 805ca7c: 9800         	ldr	r0, [sp]
 805ca7e: b002         	add	sp, #0x8
 805ca80: bd80         	pop	{r7, pc}

0805ca82 <MPU_xTimerGetExpiryTime>:
;         {
 805ca82: b580         	push	{r7, lr}
 805ca84: 466f         	mov	r7, sp
 805ca86: b082         	sub	sp, #0x8
 805ca88: 9001         	str	r0, [sp, #0x4]
;             if( portIS_PRIVILEGED() == pdFALSE )
 805ca8a: f7ff fffe    	bl	0x805ca8a <MPU_xTimerGetExpiryTime+0x8> @ imm = #-0x4
 805ca8e: b940         	cbnz	r0, 0x805caa2 <MPU_xTimerGetExpiryTime+0x20> @ imm = #0x10
 805ca90: e7ff         	b	0x805ca92 <MPU_xTimerGetExpiryTime+0x10> @ imm = #-0x2
;                 portRAISE_PRIVILEGE();
 805ca92: df03         	svc	#0x3
;                 xReturn = xTimerGetExpiryTime( xTimer );
 805ca94: 9801         	ldr	r0, [sp, #0x4]
 805ca96: f7ff fffe    	bl	0x805ca96 <MPU_xTimerGetExpiryTime+0x14> @ imm = #-0x4
 805ca9a: 9000         	str	r0, [sp]
;                 portRESET_PRIVILEGE();
 805ca9c: f7ff fffe    	bl	0x805ca9c <MPU_xTimerGetExpiryTime+0x1a> @ imm = #-0x4
;             }
 805caa0: e004         	b	0x805caac <MPU_xTimerGetExpiryTime+0x2a> @ imm = #0x8
;                 xReturn = xTimerGetExpiryTime( xTimer );
 805caa2: 9801         	ldr	r0, [sp, #0x4]
 805caa4: f7ff fffe    	bl	0x805caa4 <MPU_xTimerGetExpiryTime+0x22> @ imm = #-0x4
 805caa8: 9000         	str	r0, [sp]
 805caaa: e7ff         	b	0x805caac <MPU_xTimerGetExpiryTime+0x2a> @ imm = #-0x2
;             return xReturn;
 805caac: 9800         	ldr	r0, [sp]
 805caae: b002         	add	sp, #0x8
 805cab0: bd80         	pop	{r7, pc}

0805cab2 <MPU_xTimerGenericCommandFromTask>:
;         {
 805cab2: b580         	push	{r7, lr}
 805cab4: 466f         	mov	r7, sp
 805cab6: b086         	sub	sp, #0x18
 805cab8: f8d7 c008    	ldr.w	r12, [r7, #0x8]
 805cabc: 9005         	str	r0, [sp, #0x14]
 805cabe: 9104         	str	r1, [sp, #0x10]
 805cac0: 9203         	str	r2, [sp, #0xc]
 805cac2: 9302         	str	r3, [sp, #0x8]
;             if( portIS_PRIVILEGED() == pdFALSE )
 805cac4: f7ff fffe    	bl	0x805cac4 <MPU_xTimerGenericCommandFromTask+0x12> @ imm = #-0x4
 805cac8: b980         	cbnz	r0, 0x805caec <MPU_xTimerGenericCommandFromTask+0x3a> @ imm = #0x20
 805caca: e7ff         	b	0x805cacc <MPU_xTimerGenericCommandFromTask+0x1a> @ imm = #-0x2
;                 portRAISE_PRIVILEGE();
 805cacc: df03         	svc	#0x3
;                 xReturn = xTimerGenericCommandFromTask( xTimer, xCommandID, xOptionalValue, pxHigherPriorityTaskWoken, xTicksToWait );
 805cace: 9805         	ldr	r0, [sp, #0x14]
 805cad0: 9904         	ldr	r1, [sp, #0x10]
 805cad2: 9a03         	ldr	r2, [sp, #0xc]
 805cad4: 9b02         	ldr	r3, [sp, #0x8]
 805cad6: f8d7 c008    	ldr.w	r12, [r7, #0x8]
 805cada: 46ee         	mov	lr, sp
 805cadc: f8ce c000    	str.w	r12, [lr]
 805cae0: f7ff fffe    	bl	0x805cae0 <MPU_xTimerGenericCommandFromTask+0x2e> @ imm = #-0x4
 805cae4: 9001         	str	r0, [sp, #0x4]
;                 portRESET_PRIVILEGE();
 805cae6: f7ff fffe    	bl	0x805cae6 <MPU_xTimerGenericCommandFromTask+0x34> @ imm = #-0x4
;             }
 805caea: e00c         	b	0x805cb06 <MPU_xTimerGenericCommandFromTask+0x54> @ imm = #0x18
;                 xReturn = xTimerGenericCommandFromTask( xTimer, xCommandID, xOptionalValue, pxHigherPriorityTaskWoken, xTicksToWait );
 805caec: 9805         	ldr	r0, [sp, #0x14]
 805caee: 9904         	ldr	r1, [sp, #0x10]
 805caf0: 9a03         	ldr	r2, [sp, #0xc]
 805caf2: 9b02         	ldr	r3, [sp, #0x8]
 805caf4: f8d7 c008    	ldr.w	r12, [r7, #0x8]
 805caf8: 46ee         	mov	lr, sp
 805cafa: f8ce c000    	str.w	r12, [lr]
 805cafe: f7ff fffe    	bl	0x805cafe <MPU_xTimerGenericCommandFromTask+0x4c> @ imm = #-0x4
 805cb02: 9001         	str	r0, [sp, #0x4]
 805cb04: e7ff         	b	0x805cb06 <MPU_xTimerGenericCommandFromTask+0x54> @ imm = #-0x2
;             return xReturn;
 805cb06: 9801         	ldr	r0, [sp, #0x4]
 805cb08: b006         	add	sp, #0x18
 805cb0a: bd80         	pop	{r7, pc}

0805cb0c <MPU_xEventGroupWaitBits>:
;     {
 805cb0c: b580         	push	{r7, lr}
 805cb0e: 466f         	mov	r7, sp
 805cb10: b086         	sub	sp, #0x18
 805cb12: f8d7 c008    	ldr.w	r12, [r7, #0x8]
 805cb16: 9005         	str	r0, [sp, #0x14]
 805cb18: 9104         	str	r1, [sp, #0x10]
 805cb1a: 9203         	str	r2, [sp, #0xc]
 805cb1c: 9302         	str	r3, [sp, #0x8]
;         if( portIS_PRIVILEGED() == pdFALSE )
 805cb1e: f7ff fffe    	bl	0x805cb1e <MPU_xEventGroupWaitBits+0x12> @ imm = #-0x4
 805cb22: b980         	cbnz	r0, 0x805cb46 <MPU_xEventGroupWaitBits+0x3a> @ imm = #0x20
 805cb24: e7ff         	b	0x805cb26 <MPU_xEventGroupWaitBits+0x1a> @ imm = #-0x2
;             portRAISE_PRIVILEGE();
 805cb26: df03         	svc	#0x3
;             xReturn = xEventGroupWaitBits( xEventGroup, uxBitsToWaitFor, xClearOnExit, xWaitForAllBits, xTicksToWait );
 805cb28: 9805         	ldr	r0, [sp, #0x14]
 805cb2a: 9904         	ldr	r1, [sp, #0x10]
 805cb2c: 9a03         	ldr	r2, [sp, #0xc]
 805cb2e: 9b02         	ldr	r3, [sp, #0x8]
 805cb30: f8d7 c008    	ldr.w	r12, [r7, #0x8]
 805cb34: 46ee         	mov	lr, sp
 805cb36: f8ce c000    	str.w	r12, [lr]
 805cb3a: f7ff fffe    	bl	0x805cb3a <MPU_xEventGroupWaitBits+0x2e> @ imm = #-0x4
 805cb3e: 9001         	str	r0, [sp, #0x4]
;             portRESET_PRIVILEGE();
 805cb40: f7ff fffe    	bl	0x805cb40 <MPU_xEventGroupWaitBits+0x34> @ imm = #-0x4
;         }
 805cb44: e00c         	b	0x805cb60 <MPU_xEventGroupWaitBits+0x54> @ imm = #0x18
;             xReturn = xEventGroupWaitBits( xEventGroup, uxBitsToWaitFor, xClearOnExit, xWaitForAllBits, xTicksToWait );
 805cb46: 9805         	ldr	r0, [sp, #0x14]
 805cb48: 9904         	ldr	r1, [sp, #0x10]
 805cb4a: 9a03         	ldr	r2, [sp, #0xc]
 805cb4c: 9b02         	ldr	r3, [sp, #0x8]
 805cb4e: f8d7 c008    	ldr.w	r12, [r7, #0x8]
 805cb52: 46ee         	mov	lr, sp
 805cb54: f8ce c000    	str.w	r12, [lr]
 805cb58: f7ff fffe    	bl	0x805cb58 <MPU_xEventGroupWaitBits+0x4c> @ imm = #-0x4
 805cb5c: 9001         	str	r0, [sp, #0x4]
 805cb5e: e7ff         	b	0x805cb60 <MPU_xEventGroupWaitBits+0x54> @ imm = #-0x2
;         return xReturn;
 805cb60: 9801         	ldr	r0, [sp, #0x4]
 805cb62: b006         	add	sp, #0x18
 805cb64: bd80         	pop	{r7, pc}

0805cb66 <MPU_xEventGroupClearBits>:
;     {
 805cb66: b580         	push	{r7, lr}
 805cb68: 466f         	mov	r7, sp
 805cb6a: b084         	sub	sp, #0x10
 805cb6c: 9003         	str	r0, [sp, #0xc]
 805cb6e: 9102         	str	r1, [sp, #0x8]
;         if( portIS_PRIVILEGED() == pdFALSE )
 805cb70: f7ff fffe    	bl	0x805cb70 <MPU_xEventGroupClearBits+0xa> @ imm = #-0x4
 805cb74: b948         	cbnz	r0, 0x805cb8a <MPU_xEventGroupClearBits+0x24> @ imm = #0x12
 805cb76: e7ff         	b	0x805cb78 <MPU_xEventGroupClearBits+0x12> @ imm = #-0x2
;             portRAISE_PRIVILEGE();
 805cb78: df03         	svc	#0x3
;             xReturn = xEventGroupClearBits( xEventGroup, uxBitsToClear );
 805cb7a: 9803         	ldr	r0, [sp, #0xc]
 805cb7c: 9902         	ldr	r1, [sp, #0x8]
 805cb7e: f7ff fffe    	bl	0x805cb7e <MPU_xEventGroupClearBits+0x18> @ imm = #-0x4
 805cb82: 9001         	str	r0, [sp, #0x4]
;             portRESET_PRIVILEGE();
 805cb84: f7ff fffe    	bl	0x805cb84 <MPU_xEventGroupClearBits+0x1e> @ imm = #-0x4
;         }
 805cb88: e005         	b	0x805cb96 <MPU_xEventGroupClearBits+0x30> @ imm = #0xa
;             xReturn = xEventGroupClearBits( xEventGroup, uxBitsToClear );
 805cb8a: 9803         	ldr	r0, [sp, #0xc]
 805cb8c: 9902         	ldr	r1, [sp, #0x8]
 805cb8e: f7ff fffe    	bl	0x805cb8e <MPU_xEventGroupClearBits+0x28> @ imm = #-0x4
 805cb92: 9001         	str	r0, [sp, #0x4]
 805cb94: e7ff         	b	0x805cb96 <MPU_xEventGroupClearBits+0x30> @ imm = #-0x2
;         return xReturn;
 805cb96: 9801         	ldr	r0, [sp, #0x4]
 805cb98: b004         	add	sp, #0x10
 805cb9a: bd80         	pop	{r7, pc}

0805cb9c <MPU_xEventGroupSetBits>:
;     {
 805cb9c: b580         	push	{r7, lr}
 805cb9e: 466f         	mov	r7, sp
 805cba0: b084         	sub	sp, #0x10
 805cba2: 9003         	str	r0, [sp, #0xc]
 805cba4: 9102         	str	r1, [sp, #0x8]
;         if( portIS_PRIVILEGED() == pdFALSE )
 805cba6: f7ff fffe    	bl	0x805cba6 <MPU_xEventGroupSetBits+0xa> @ imm = #-0x4
 805cbaa: b948         	cbnz	r0, 0x805cbc0 <MPU_xEventGroupSetBits+0x24> @ imm = #0x12
 805cbac: e7ff         	b	0x805cbae <MPU_xEventGroupSetBits+0x12> @ imm = #-0x2
;             portRAISE_PRIVILEGE();
 805cbae: df03         	svc	#0x3
;             xReturn = xEventGroupSetBits( xEventGroup, uxBitsToSet );
 805cbb0: 9803         	ldr	r0, [sp, #0xc]
 805cbb2: 9902         	ldr	r1, [sp, #0x8]
 805cbb4: f7ff fffe    	bl	0x805cbb4 <MPU_xEventGroupSetBits+0x18> @ imm = #-0x4
 805cbb8: 9001         	str	r0, [sp, #0x4]
;             portRESET_PRIVILEGE();
 805cbba: f7ff fffe    	bl	0x805cbba <MPU_xEventGroupSetBits+0x1e> @ imm = #-0x4
;         }
 805cbbe: e005         	b	0x805cbcc <MPU_xEventGroupSetBits+0x30> @ imm = #0xa
;             xReturn = xEventGroupSetBits( xEventGroup, uxBitsToSet );
 805cbc0: 9803         	ldr	r0, [sp, #0xc]
 805cbc2: 9902         	ldr	r1, [sp, #0x8]
 805cbc4: f7ff fffe    	bl	0x805cbc4 <MPU_xEventGroupSetBits+0x28> @ imm = #-0x4
 805cbc8: 9001         	str	r0, [sp, #0x4]
 805cbca: e7ff         	b	0x805cbcc <MPU_xEventGroupSetBits+0x30> @ imm = #-0x2
;         return xReturn;
 805cbcc: 9801         	ldr	r0, [sp, #0x4]
 805cbce: b004         	add	sp, #0x10
 805cbd0: bd80         	pop	{r7, pc}

0805cbd2 <MPU_xEventGroupSync>:
;     {
 805cbd2: b580         	push	{r7, lr}
 805cbd4: 466f         	mov	r7, sp
 805cbd6: b086         	sub	sp, #0x18
 805cbd8: 9005         	str	r0, [sp, #0x14]
 805cbda: 9104         	str	r1, [sp, #0x10]
 805cbdc: 9203         	str	r2, [sp, #0xc]
 805cbde: 9302         	str	r3, [sp, #0x8]
;         if( portIS_PRIVILEGED() == pdFALSE )
 805cbe0: f7ff fffe    	bl	0x805cbe0 <MPU_xEventGroupSync+0xe> @ imm = #-0x4
 805cbe4: b958         	cbnz	r0, 0x805cbfe <MPU_xEventGroupSync+0x2c> @ imm = #0x16
 805cbe6: e7ff         	b	0x805cbe8 <MPU_xEventGroupSync+0x16> @ imm = #-0x2
;             portRAISE_PRIVILEGE();
 805cbe8: df03         	svc	#0x3
;             xReturn = xEventGroupSync( xEventGroup, uxBitsToSet, uxBitsToWaitFor, xTicksToWait );
 805cbea: 9805         	ldr	r0, [sp, #0x14]
 805cbec: 9904         	ldr	r1, [sp, #0x10]
 805cbee: 9a03         	ldr	r2, [sp, #0xc]
 805cbf0: 9b02         	ldr	r3, [sp, #0x8]
 805cbf2: f7ff fffe    	bl	0x805cbf2 <MPU_xEventGroupSync+0x20> @ imm = #-0x4
 805cbf6: 9001         	str	r0, [sp, #0x4]
;             portRESET_PRIVILEGE();
 805cbf8: f7ff fffe    	bl	0x805cbf8 <MPU_xEventGroupSync+0x26> @ imm = #-0x4
;         }
 805cbfc: e007         	b	0x805cc0e <MPU_xEventGroupSync+0x3c> @ imm = #0xe
;             xReturn = xEventGroupSync( xEventGroup, uxBitsToSet, uxBitsToWaitFor, xTicksToWait );
 805cbfe: 9805         	ldr	r0, [sp, #0x14]
 805cc00: 9904         	ldr	r1, [sp, #0x10]
 805cc02: 9a03         	ldr	r2, [sp, #0xc]
 805cc04: 9b02         	ldr	r3, [sp, #0x8]
 805cc06: f7ff fffe    	bl	0x805cc06 <MPU_xEventGroupSync+0x34> @ imm = #-0x4
 805cc0a: 9001         	str	r0, [sp, #0x4]
 805cc0c: e7ff         	b	0x805cc0e <MPU_xEventGroupSync+0x3c> @ imm = #-0x2
;         return xReturn;
 805cc0e: 9801         	ldr	r0, [sp, #0x4]
 805cc10: b006         	add	sp, #0x18
 805cc12: bd80         	pop	{r7, pc}

0805cc14 <MPU_xStreamBufferSend>:
;     {
 805cc14: b580         	push	{r7, lr}
 805cc16: 466f         	mov	r7, sp
 805cc18: b086         	sub	sp, #0x18
 805cc1a: 9005         	str	r0, [sp, #0x14]
 805cc1c: 9104         	str	r1, [sp, #0x10]
 805cc1e: 9203         	str	r2, [sp, #0xc]
 805cc20: 9302         	str	r3, [sp, #0x8]
;         if( portIS_PRIVILEGED() == pdFALSE )
 805cc22: f7ff fffe    	bl	0x805cc22 <MPU_xStreamBufferSend+0xe> @ imm = #-0x4
 805cc26: b958         	cbnz	r0, 0x805cc40 <MPU_xStreamBufferSend+0x2c> @ imm = #0x16
 805cc28: e7ff         	b	0x805cc2a <MPU_xStreamBufferSend+0x16> @ imm = #-0x2
;             portRAISE_PRIVILEGE();
 805cc2a: df03         	svc	#0x3
;             xReturn = xStreamBufferSend( xStreamBuffer, pvTxData, xDataLengthBytes, xTicksToWait );
 805cc2c: 9805         	ldr	r0, [sp, #0x14]
 805cc2e: 9904         	ldr	r1, [sp, #0x10]
 805cc30: 9a03         	ldr	r2, [sp, #0xc]
 805cc32: 9b02         	ldr	r3, [sp, #0x8]
 805cc34: f7ff fffe    	bl	0x805cc34 <MPU_xStreamBufferSend+0x20> @ imm = #-0x4
 805cc38: 9001         	str	r0, [sp, #0x4]
;             portRESET_PRIVILEGE();
 805cc3a: f7ff fffe    	bl	0x805cc3a <MPU_xStreamBufferSend+0x26> @ imm = #-0x4
;         }
 805cc3e: e007         	b	0x805cc50 <MPU_xStreamBufferSend+0x3c> @ imm = #0xe
;             xReturn = xStreamBufferSend( xStreamBuffer, pvTxData, xDataLengthBytes, xTicksToWait );
 805cc40: 9805         	ldr	r0, [sp, #0x14]
 805cc42: 9904         	ldr	r1, [sp, #0x10]
 805cc44: 9a03         	ldr	r2, [sp, #0xc]
 805cc46: 9b02         	ldr	r3, [sp, #0x8]
 805cc48: f7ff fffe    	bl	0x805cc48 <MPU_xStreamBufferSend+0x34> @ imm = #-0x4
 805cc4c: 9001         	str	r0, [sp, #0x4]
 805cc4e: e7ff         	b	0x805cc50 <MPU_xStreamBufferSend+0x3c> @ imm = #-0x2
;         return xReturn;
 805cc50: 9801         	ldr	r0, [sp, #0x4]
 805cc52: b006         	add	sp, #0x18
 805cc54: bd80         	pop	{r7, pc}

0805cc56 <MPU_xStreamBufferNextMessageLengthBytes>:
;     {
 805cc56: b580         	push	{r7, lr}
 805cc58: 466f         	mov	r7, sp
 805cc5a: b082         	sub	sp, #0x8
 805cc5c: 9001         	str	r0, [sp, #0x4]
;         if( portIS_PRIVILEGED() == pdFALSE )
 805cc5e: f7ff fffe    	bl	0x805cc5e <MPU_xStreamBufferNextMessageLengthBytes+0x8> @ imm = #-0x4
 805cc62: b940         	cbnz	r0, 0x805cc76 <MPU_xStreamBufferNextMessageLengthBytes+0x20> @ imm = #0x10
 805cc64: e7ff         	b	0x805cc66 <MPU_xStreamBufferNextMessageLengthBytes+0x10> @ imm = #-0x2
;             portRAISE_PRIVILEGE();
 805cc66: df03         	svc	#0x3
;             xReturn = xStreamBufferNextMessageLengthBytes( xStreamBuffer );
 805cc68: 9801         	ldr	r0, [sp, #0x4]
 805cc6a: f7ff fffe    	bl	0x805cc6a <MPU_xStreamBufferNextMessageLengthBytes+0x14> @ imm = #-0x4
 805cc6e: 9000         	str	r0, [sp]
;             portRESET_PRIVILEGE();
 805cc70: f7ff fffe    	bl	0x805cc70 <MPU_xStreamBufferNextMessageLengthBytes+0x1a> @ imm = #-0x4
;         }
 805cc74: e004         	b	0x805cc80 <MPU_xStreamBufferNextMessageLengthBytes+0x2a> @ imm = #0x8
;             xReturn = xStreamBufferNextMessageLengthBytes( xStreamBuffer );
 805cc76: 9801         	ldr	r0, [sp, #0x4]
 805cc78: f7ff fffe    	bl	0x805cc78 <MPU_xStreamBufferNextMessageLengthBytes+0x22> @ imm = #-0x4
 805cc7c: 9000         	str	r0, [sp]
 805cc7e: e7ff         	b	0x805cc80 <MPU_xStreamBufferNextMessageLengthBytes+0x2a> @ imm = #-0x2
;         return xReturn;
 805cc80: 9800         	ldr	r0, [sp]
 805cc82: b002         	add	sp, #0x8
 805cc84: bd80         	pop	{r7, pc}

0805cc86 <MPU_xStreamBufferReceive>:
;     {
 805cc86: b580         	push	{r7, lr}
 805cc88: 466f         	mov	r7, sp
 805cc8a: b086         	sub	sp, #0x18
 805cc8c: 9005         	str	r0, [sp, #0x14]
 805cc8e: 9104         	str	r1, [sp, #0x10]
 805cc90: 9203         	str	r2, [sp, #0xc]
 805cc92: 9302         	str	r3, [sp, #0x8]
;         if( portIS_PRIVILEGED() == pdFALSE )
 805cc94: f7ff fffe    	bl	0x805cc94 <MPU_xStreamBufferReceive+0xe> @ imm = #-0x4
 805cc98: b958         	cbnz	r0, 0x805ccb2 <MPU_xStreamBufferReceive+0x2c> @ imm = #0x16
 805cc9a: e7ff         	b	0x805cc9c <MPU_xStreamBufferReceive+0x16> @ imm = #-0x2
;             portRAISE_PRIVILEGE();
 805cc9c: df03         	svc	#0x3
;             xReturn = xStreamBufferReceive( xStreamBuffer, pvRxData, xBufferLengthBytes, xTicksToWait );
 805cc9e: 9805         	ldr	r0, [sp, #0x14]
 805cca0: 9904         	ldr	r1, [sp, #0x10]
 805cca2: 9a03         	ldr	r2, [sp, #0xc]
 805cca4: 9b02         	ldr	r3, [sp, #0x8]
 805cca6: f7ff fffe    	bl	0x805cca6 <MPU_xStreamBufferReceive+0x20> @ imm = #-0x4
 805ccaa: 9001         	str	r0, [sp, #0x4]
;             portRESET_PRIVILEGE();
 805ccac: f7ff fffe    	bl	0x805ccac <MPU_xStreamBufferReceive+0x26> @ imm = #-0x4
;         }
 805ccb0: e007         	b	0x805ccc2 <MPU_xStreamBufferReceive+0x3c> @ imm = #0xe
;             xReturn = xStreamBufferReceive( xStreamBuffer, pvRxData, xBufferLengthBytes, xTicksToWait );
 805ccb2: 9805         	ldr	r0, [sp, #0x14]
 805ccb4: 9904         	ldr	r1, [sp, #0x10]
 805ccb6: 9a03         	ldr	r2, [sp, #0xc]
 805ccb8: 9b02         	ldr	r3, [sp, #0x8]
 805ccba: f7ff fffe    	bl	0x805ccba <MPU_xStreamBufferReceive+0x34> @ imm = #-0x4
 805ccbe: 9001         	str	r0, [sp, #0x4]
 805ccc0: e7ff         	b	0x805ccc2 <MPU_xStreamBufferReceive+0x3c> @ imm = #-0x2
;         return xReturn;
 805ccc2: 9801         	ldr	r0, [sp, #0x4]
 805ccc4: b006         	add	sp, #0x18
 805ccc6: bd80         	pop	{r7, pc}

0805ccc8 <MPU_xStreamBufferIsFull>:
;     {
 805ccc8: b580         	push	{r7, lr}
 805ccca: 466f         	mov	r7, sp
 805cccc: b082         	sub	sp, #0x8
 805ccce: 9001         	str	r0, [sp, #0x4]
;         if( portIS_PRIVILEGED() == pdFALSE )
 805ccd0: f7ff fffe    	bl	0x805ccd0 <MPU_xStreamBufferIsFull+0x8> @ imm = #-0x4
 805ccd4: b940         	cbnz	r0, 0x805cce8 <MPU_xStreamBufferIsFull+0x20> @ imm = #0x10
 805ccd6: e7ff         	b	0x805ccd8 <MPU_xStreamBufferIsFull+0x10> @ imm = #-0x2
;             portRAISE_PRIVILEGE();
 805ccd8: df03         	svc	#0x3
;             xReturn = xStreamBufferIsFull( xStreamBuffer );
 805ccda: 9801         	ldr	r0, [sp, #0x4]
 805ccdc: f7ff fffe    	bl	0x805ccdc <MPU_xStreamBufferIsFull+0x14> @ imm = #-0x4
 805cce0: 9000         	str	r0, [sp]
;             portRESET_PRIVILEGE();
 805cce2: f7ff fffe    	bl	0x805cce2 <MPU_xStreamBufferIsFull+0x1a> @ imm = #-0x4
;         }
 805cce6: e004         	b	0x805ccf2 <MPU_xStreamBufferIsFull+0x2a> @ imm = #0x8
;             xReturn = xStreamBufferIsFull( xStreamBuffer );
 805cce8: 9801         	ldr	r0, [sp, #0x4]
 805ccea: f7ff fffe    	bl	0x805ccea <MPU_xStreamBufferIsFull+0x22> @ imm = #-0x4
 805ccee: 9000         	str	r0, [sp]
 805ccf0: e7ff         	b	0x805ccf2 <MPU_xStreamBufferIsFull+0x2a> @ imm = #-0x2
;         return xReturn;
 805ccf2: 9800         	ldr	r0, [sp]
 805ccf4: b002         	add	sp, #0x8
 805ccf6: bd80         	pop	{r7, pc}

0805ccf8 <MPU_xStreamBufferIsEmpty>:
;     {
 805ccf8: b580         	push	{r7, lr}
 805ccfa: 466f         	mov	r7, sp
 805ccfc: b082         	sub	sp, #0x8
 805ccfe: 9001         	str	r0, [sp, #0x4]
;         if( portIS_PRIVILEGED() == pdFALSE )
 805cd00: f7ff fffe    	bl	0x805cd00 <MPU_xStreamBufferIsEmpty+0x8> @ imm = #-0x4
 805cd04: b940         	cbnz	r0, 0x805cd18 <MPU_xStreamBufferIsEmpty+0x20> @ imm = #0x10
 805cd06: e7ff         	b	0x805cd08 <MPU_xStreamBufferIsEmpty+0x10> @ imm = #-0x2
;             portRAISE_PRIVILEGE();
 805cd08: df03         	svc	#0x3
;             xReturn = xStreamBufferIsEmpty( xStreamBuffer );
 805cd0a: 9801         	ldr	r0, [sp, #0x4]
 805cd0c: f7ff fffe    	bl	0x805cd0c <MPU_xStreamBufferIsEmpty+0x14> @ imm = #-0x4
 805cd10: 9000         	str	r0, [sp]
;             portRESET_PRIVILEGE();
 805cd12: f7ff fffe    	bl	0x805cd12 <MPU_xStreamBufferIsEmpty+0x1a> @ imm = #-0x4
;         }
 805cd16: e004         	b	0x805cd22 <MPU_xStreamBufferIsEmpty+0x2a> @ imm = #0x8
;             xReturn = xStreamBufferIsEmpty( xStreamBuffer );
 805cd18: 9801         	ldr	r0, [sp, #0x4]
 805cd1a: f7ff fffe    	bl	0x805cd1a <MPU_xStreamBufferIsEmpty+0x22> @ imm = #-0x4
 805cd1e: 9000         	str	r0, [sp]
 805cd20: e7ff         	b	0x805cd22 <MPU_xStreamBufferIsEmpty+0x2a> @ imm = #-0x2
;         return xReturn;
 805cd22: 9800         	ldr	r0, [sp]
 805cd24: b002         	add	sp, #0x8
 805cd26: bd80         	pop	{r7, pc}

0805cd28 <MPU_xStreamBufferSpacesAvailable>:
;     {
 805cd28: b580         	push	{r7, lr}
 805cd2a: 466f         	mov	r7, sp
 805cd2c: b082         	sub	sp, #0x8
 805cd2e: 9001         	str	r0, [sp, #0x4]
;         if( portIS_PRIVILEGED() == pdFALSE )
 805cd30: f7ff fffe    	bl	0x805cd30 <MPU_xStreamBufferSpacesAvailable+0x8> @ imm = #-0x4
 805cd34: b940         	cbnz	r0, 0x805cd48 <MPU_xStreamBufferSpacesAvailable+0x20> @ imm = #0x10
 805cd36: e7ff         	b	0x805cd38 <MPU_xStreamBufferSpacesAvailable+0x10> @ imm = #-0x2
;             portRAISE_PRIVILEGE();
 805cd38: df03         	svc	#0x3
;             xReturn = xStreamBufferSpacesAvailable( xStreamBuffer );
 805cd3a: 9801         	ldr	r0, [sp, #0x4]
 805cd3c: f7ff fffe    	bl	0x805cd3c <MPU_xStreamBufferSpacesAvailable+0x14> @ imm = #-0x4
 805cd40: 9000         	str	r0, [sp]
;             portRESET_PRIVILEGE();
 805cd42: f7ff fffe    	bl	0x805cd42 <MPU_xStreamBufferSpacesAvailable+0x1a> @ imm = #-0x4
;         }
 805cd46: e004         	b	0x805cd52 <MPU_xStreamBufferSpacesAvailable+0x2a> @ imm = #0x8
;             xReturn = xStreamBufferSpacesAvailable( xStreamBuffer );
 805cd48: 9801         	ldr	r0, [sp, #0x4]
 805cd4a: f7ff fffe    	bl	0x805cd4a <MPU_xStreamBufferSpacesAvailable+0x22> @ imm = #-0x4
 805cd4e: 9000         	str	r0, [sp]
 805cd50: e7ff         	b	0x805cd52 <MPU_xStreamBufferSpacesAvailable+0x2a> @ imm = #-0x2
;         return xReturn;
 805cd52: 9800         	ldr	r0, [sp]
 805cd54: b002         	add	sp, #0x8
 805cd56: bd80         	pop	{r7, pc}

0805cd58 <MPU_xStreamBufferBytesAvailable>:
;     {
 805cd58: b580         	push	{r7, lr}
 805cd5a: 466f         	mov	r7, sp
 805cd5c: b082         	sub	sp, #0x8
 805cd5e: 9001         	str	r0, [sp, #0x4]
;         if( portIS_PRIVILEGED() == pdFALSE )
 805cd60: f7ff fffe    	bl	0x805cd60 <MPU_xStreamBufferBytesAvailable+0x8> @ imm = #-0x4
 805cd64: b940         	cbnz	r0, 0x805cd78 <MPU_xStreamBufferBytesAvailable+0x20> @ imm = #0x10
 805cd66: e7ff         	b	0x805cd68 <MPU_xStreamBufferBytesAvailable+0x10> @ imm = #-0x2
;             portRAISE_PRIVILEGE();
 805cd68: df03         	svc	#0x3
;             xReturn = xStreamBufferBytesAvailable( xStreamBuffer );
 805cd6a: 9801         	ldr	r0, [sp, #0x4]
 805cd6c: f7ff fffe    	bl	0x805cd6c <MPU_xStreamBufferBytesAvailable+0x14> @ imm = #-0x4
 805cd70: 9000         	str	r0, [sp]
;             portRESET_PRIVILEGE();
 805cd72: f7ff fffe    	bl	0x805cd72 <MPU_xStreamBufferBytesAvailable+0x1a> @ imm = #-0x4
;         }
 805cd76: e004         	b	0x805cd82 <MPU_xStreamBufferBytesAvailable+0x2a> @ imm = #0x8
;             xReturn = xStreamBufferBytesAvailable( xStreamBuffer );
 805cd78: 9801         	ldr	r0, [sp, #0x4]
 805cd7a: f7ff fffe    	bl	0x805cd7a <MPU_xStreamBufferBytesAvailable+0x22> @ imm = #-0x4
 805cd7e: 9000         	str	r0, [sp]
 805cd80: e7ff         	b	0x805cd82 <MPU_xStreamBufferBytesAvailable+0x2a> @ imm = #-0x2
;         return xReturn;
 805cd82: 9800         	ldr	r0, [sp]
 805cd84: b002         	add	sp, #0x8
 805cd86: bd80         	pop	{r7, pc}

0805cd88 <MPU_xStreamBufferSetTriggerLevel>:
;     {
 805cd88: b580         	push	{r7, lr}
 805cd8a: 466f         	mov	r7, sp
 805cd8c: b084         	sub	sp, #0x10
 805cd8e: 9003         	str	r0, [sp, #0xc]
 805cd90: 9102         	str	r1, [sp, #0x8]
;         if( portIS_PRIVILEGED() == pdFALSE )
 805cd92: f7ff fffe    	bl	0x805cd92 <MPU_xStreamBufferSetTriggerLevel+0xa> @ imm = #-0x4
 805cd96: b948         	cbnz	r0, 0x805cdac <MPU_xStreamBufferSetTriggerLevel+0x24> @ imm = #0x12
 805cd98: e7ff         	b	0x805cd9a <MPU_xStreamBufferSetTriggerLevel+0x12> @ imm = #-0x2
;             portRAISE_PRIVILEGE();
 805cd9a: df03         	svc	#0x3
;             xReturn = xStreamBufferSetTriggerLevel( xStreamBuffer, xTriggerLevel );
 805cd9c: 9803         	ldr	r0, [sp, #0xc]
 805cd9e: 9902         	ldr	r1, [sp, #0x8]
 805cda0: f7ff fffe    	bl	0x805cda0 <MPU_xStreamBufferSetTriggerLevel+0x18> @ imm = #-0x4
 805cda4: 9001         	str	r0, [sp, #0x4]
;             portRESET_PRIVILEGE();
 805cda6: f7ff fffe    	bl	0x805cda6 <MPU_xStreamBufferSetTriggerLevel+0x1e> @ imm = #-0x4
;         }
 805cdaa: e005         	b	0x805cdb8 <MPU_xStreamBufferSetTriggerLevel+0x30> @ imm = #0xa
;             xReturn = xStreamBufferSetTriggerLevel( xStreamBuffer, xTriggerLevel );
 805cdac: 9803         	ldr	r0, [sp, #0xc]
 805cdae: 9902         	ldr	r1, [sp, #0x8]
 805cdb0: f7ff fffe    	bl	0x805cdb0 <MPU_xStreamBufferSetTriggerLevel+0x28> @ imm = #-0x4
 805cdb4: 9001         	str	r0, [sp, #0x4]
 805cdb6: e7ff         	b	0x805cdb8 <MPU_xStreamBufferSetTriggerLevel+0x30> @ imm = #-0x2
;         return xReturn;
 805cdb8: 9801         	ldr	r0, [sp, #0x4]
 805cdba: b004         	add	sp, #0x10
 805cdbc: bd80         	pop	{r7, pc}
 805cdbe: 0000         	movs	r0, r0

0805cdbf <__syscalls_flash_end__>:
 805cdbf: 00           	<unknown>

Disassembly of section .text:

0805cdc0 <__unprivileged_flash_start__>:
; {
 805cdc0: b580         	push	{r7, lr}
 805cdc2: 466f         	mov	r7, sp
 805cdc4: b082         	sub	sp, #0x8
 805cdc6: 2000         	movs	r0, #0x0
;   HAL_StatusTypeDef  status = HAL_OK;
 805cdc8: f807 0c01    	strb	r0, [r7, #-1]
 805cdcc: 2004         	movs	r0, #0x4
;   HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 805cdce: f7ff fffe    	bl	0x805cdce <__unprivileged_flash_start__+0xe> @ imm = #-0x4
;   SystemCoreClockUpdate();
 805cdd2: f7ff fffe    	bl	0x805cdd2 <__unprivileged_flash_start__+0x12> @ imm = #-0x4
 805cdd6: 2007         	movs	r0, #0x7
;   if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 805cdd8: f7ff fffe    	bl	0x805cdd8 <__unprivileged_flash_start__+0x18> @ imm = #-0x4
 805cddc: b120         	cbz	r0, 0x805cde8 <__unprivileged_flash_start__+0x28> @ imm = #0x8
 805cdde: e7ff         	b	0x805cde0 <__unprivileged_flash_start__+0x20> @ imm = #-0x2
 805cde0: 2001         	movs	r0, #0x1
;     status = HAL_ERROR;
 805cde2: f807 0c01    	strb	r0, [r7, #-1]
;   }
 805cde6: e002         	b	0x805cdee <__unprivileged_flash_start__+0x2e> @ imm = #0x4
;     HAL_MspInit();
 805cde8: f7ff fffe    	bl	0x805cde8 <__unprivileged_flash_start__+0x28> @ imm = #-0x4
 805cdec: e7ff         	b	0x805cdee <__unprivileged_flash_start__+0x2e> @ imm = #-0x2
;   return status;
 805cdee: f817 0c01    	ldrb	r0, [r7, #-1]
 805cdf2: b002         	add	sp, #0x8
 805cdf4: bd80         	pop	{r7, pc}
 805cdf6: 0000         	movs	r0, r0

0805cdf8 <HAL_InitTick>:
; {
 805cdf8: b580         	push	{r7, lr}
 805cdfa: 466f         	mov	r7, sp
 805cdfc: b082         	sub	sp, #0x8
 805cdfe: 9001         	str	r0, [sp, #0x4]
 805ce00: 2000         	movs	r0, #0x0
;   HAL_StatusTypeDef  status = HAL_OK;
 805ce02: f807 0c05    	strb	r0, [r7, #-5]
;   if ((uint32_t)uwTickFreq != 0U)
 805ce06: 481b         	ldr	r0, [pc, #0x6c]         @ 0x805ce74 <HAL_InitTick+0x7c>
 805ce08: 4478         	add	r0, pc
 805ce0a: 7800         	ldrb	r0, [r0]
 805ce0c: b350         	cbz	r0, 0x805ce64 <HAL_InitTick+0x6c> @ imm = #0x54
 805ce0e: e7ff         	b	0x805ce10 <HAL_InitTick+0x18> @ imm = #-0x2
;     if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 805ce10: 4819         	ldr	r0, [pc, #0x64]         @ 0x805ce78 <HAL_InitTick+0x80>
 805ce12: 4478         	add	r0, pc
 805ce14: 6800         	ldr	r0, [r0]
 805ce16: 6800         	ldr	r0, [r0]
 805ce18: 4918         	ldr	r1, [pc, #0x60]         @ 0x805ce7c <HAL_InitTick+0x84>
 805ce1a: 4479         	add	r1, pc
 805ce1c: 780a         	ldrb	r2, [r1]
 805ce1e: f44f 717a    	mov.w	r1, #0x3e8
 805ce22: fbb1 f1f2    	udiv	r1, r1, r2
 805ce26: fbb0 f0f1    	udiv	r0, r0, r1
 805ce2a: f7ff fffe    	bl	0x805ce2a <HAL_InitTick+0x32> @ imm = #-0x4
 805ce2e: b9a0         	cbnz	r0, 0x805ce5a <HAL_InitTick+0x62> @ imm = #0x28
 805ce30: e7ff         	b	0x805ce32 <HAL_InitTick+0x3a> @ imm = #-0x2
;       if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 805ce32: 9801         	ldr	r0, [sp, #0x4]
 805ce34: 2807         	cmp	r0, #0x7
 805ce36: d80b         	bhi	0x805ce50 <HAL_InitTick+0x58> @ imm = #0x16
 805ce38: e7ff         	b	0x805ce3a <HAL_InitTick+0x42> @ imm = #-0x2
;         HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 805ce3a: 9901         	ldr	r1, [sp, #0x4]
 805ce3c: f04f 30ff    	mov.w	r0, #0xffffffff
 805ce40: 2200         	movs	r2, #0x0
 805ce42: f7ff fffe    	bl	0x805ce42 <HAL_InitTick+0x4a> @ imm = #-0x4
;         uwTickPrio = TickPriority;
 805ce46: 9801         	ldr	r0, [sp, #0x4]
 805ce48: 490d         	ldr	r1, [pc, #0x34]         @ 0x805ce80 <HAL_InitTick+0x88>
 805ce4a: 4479         	add	r1, pc
 805ce4c: 6008         	str	r0, [r1]
;       }
 805ce4e: e003         	b	0x805ce58 <HAL_InitTick+0x60> @ imm = #0x6
 805ce50: 2001         	movs	r0, #0x1
;         status = HAL_ERROR;
 805ce52: f807 0c05    	strb	r0, [r7, #-5]
 805ce56: e7ff         	b	0x805ce58 <HAL_InitTick+0x60> @ imm = #-0x2
;     }
 805ce58: e003         	b	0x805ce62 <HAL_InitTick+0x6a> @ imm = #0x6
 805ce5a: 2001         	movs	r0, #0x1
;       status = HAL_ERROR;
 805ce5c: f807 0c05    	strb	r0, [r7, #-5]
 805ce60: e7ff         	b	0x805ce62 <HAL_InitTick+0x6a> @ imm = #-0x2
;   }
 805ce62: e003         	b	0x805ce6c <HAL_InitTick+0x74> @ imm = #0x6
 805ce64: 2001         	movs	r0, #0x1
;     status = HAL_ERROR;
 805ce66: f807 0c05    	strb	r0, [r7, #-5]
 805ce6a: e7ff         	b	0x805ce6c <HAL_InitTick+0x74> @ imm = #-0x2
;   return status;
 805ce6c: f817 0c05    	ldrb	r0, [r7, #-5]
 805ce70: b002         	add	sp, #0x8
 805ce72: bd80         	pop	{r7, pc}

0805ce74 <$d.2>:
 805ce74: 68 00 00 00  	.word	0x00000068
 805ce78: 62 00 00 00  	.word	0x00000062
 805ce7c: 5e 00 00 00  	.word	0x0000005e
 805ce80: 32 00 00 00  	.word	0x00000032

0805ce84 <HAL_MspInit>:
; }
 805ce84: 4770         	bx	lr

0805ce86 <SystemInit>:
; }
 805ce86: 4770         	bx	lr

0805ce88 <SystemCoreClockUpdate>:
; {
 805ce88: b088         	sub	sp, #0x20
 805ce8a: f241 0000    	movw	r0, #0x1000
 805ce8e: f2c4 0002    	movt	r0, #0x4002
;   if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 805ce92: 6800         	ldr	r0, [r0]
 805ce94: 0700         	lsls	r0, r0, #0x1c
 805ce96: 2800         	cmp	r0, #0x0
 805ce98: d409         	bmi	0x805ceae <SystemCoreClockUpdate+0x26> @ imm = #0x12
 805ce9a: e7ff         	b	0x805ce9c <SystemCoreClockUpdate+0x14> @ imm = #-0x2
 805ce9c: f241 0094    	movw	r0, #0x1094
 805cea0: f2c4 0002    	movt	r0, #0x4002
;     msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 805cea4: 6800         	ldr	r0, [r0]
 805cea6: f3c0 2003    	ubfx	r0, r0, #0x8, #0x4
 805ceaa: 9006         	str	r0, [sp, #0x18]
;   }
 805ceac: e008         	b	0x805cec0 <SystemCoreClockUpdate+0x38> @ imm = #0x10
 805ceae: f241 0000    	movw	r0, #0x1000
 805ceb2: f2c4 0002    	movt	r0, #0x4002
;     msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 805ceb6: 6800         	ldr	r0, [r0]
 805ceb8: b2c0         	uxtb	r0, r0
 805ceba: 0900         	lsrs	r0, r0, #0x4
 805cebc: 9006         	str	r0, [sp, #0x18]
 805cebe: e7ff         	b	0x805cec0 <SystemCoreClockUpdate+0x38> @ imm = #-0x2
;   msirange = MSIRangeTable[msirange];
 805cec0: 9906         	ldr	r1, [sp, #0x18]
 805cec2: 4847         	ldr	r0, [pc, #0x11c]        @ 0x805cfe0 <SystemCoreClockUpdate+0x158>
 805cec4: 4478         	add	r0, pc
 805cec6: f850 0021    	ldr.w	r0, [r0, r1, lsl #2]
 805ceca: 9006         	str	r0, [sp, #0x18]
 805cecc: f241 0008    	movw	r0, #0x1008
 805ced0: f2c4 0002    	movt	r0, #0x4002
;   switch (RCC->CFGR & RCC_CFGR_SWS)
 805ced4: 6800         	ldr	r0, [r0]
 805ced6: f000 000c    	and	r0, r0, #0xc
 805ceda: 4601         	mov	r1, r0
 805cedc: 9101         	str	r1, [sp, #0x4]
 805cede: 280c         	cmp	r0, #0xc
 805cee0: d866         	bhi	0x805cfb0 <SystemCoreClockUpdate+0x128> @ imm = #0xcc
 805cee2: 9901         	ldr	r1, [sp, #0x4]
 805cee4: e8df f001    	tbb	[pc, r1]

0805cee8 <$d.2>:
 805cee8: 07 64 64 64  	.word	0x64646407
 805ceec: 0c 64 64 64  	.word	0x6464640c
 805cef0: 14 64 64 64  	.word	0x64646414
 805cef4: 1c 00        	.short	0x001c

0805cef6 <$t.3>:
;       SystemCoreClock = msirange;
 805cef6: 9806         	ldr	r0, [sp, #0x18]
 805cef8: 493a         	ldr	r1, [pc, #0xe8]         @ 0x805cfe4 <SystemCoreClockUpdate+0x15c>
 805cefa: 4479         	add	r1, pc
 805cefc: 6008         	str	r0, [r1]
;       break;
 805cefe: e05c         	b	0x805cfba <SystemCoreClockUpdate+0x132> @ imm = #0xb8
;       SystemCoreClock = HSI_VALUE;
 805cf00: 4939         	ldr	r1, [pc, #0xe4]         @ 0x805cfe8 <SystemCoreClockUpdate+0x160>
 805cf02: 4479         	add	r1, pc
 805cf04: f242 4000    	movw	r0, #0x2400
 805cf08: f2c0 00f4    	movt	r0, #0xf4
 805cf0c: 6008         	str	r0, [r1]
;       break;
 805cf0e: e054         	b	0x805cfba <SystemCoreClockUpdate+0x132> @ imm = #0xa8
;       SystemCoreClock = HSE_VALUE;
 805cf10: 4936         	ldr	r1, [pc, #0xd8]         @ 0x805cfec <SystemCoreClockUpdate+0x164>
 805cf12: 4479         	add	r1, pc
 805cf14: f242 4000    	movw	r0, #0x2400
 805cf18: f2c0 00f4    	movt	r0, #0xf4
 805cf1c: 6008         	str	r0, [r1]
;       break;
 805cf1e: e04c         	b	0x805cfba <SystemCoreClockUpdate+0x132> @ imm = #0x98
 805cf20: f241 000c    	movw	r0, #0x100c
 805cf24: f2c4 0002    	movt	r0, #0x4002
;       pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 805cf28: 6801         	ldr	r1, [r0]
 805cf2a: f001 0103    	and	r1, r1, #0x3
 805cf2e: 9104         	str	r1, [sp, #0x10]
;       pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 805cf30: 6800         	ldr	r0, [r0]
 805cf32: b2c1         	uxtb	r1, r0
 805cf34: 2001         	movs	r0, #0x1
 805cf36: eb00 1011    	add.w	r0, r0, r1, lsr #4
 805cf3a: 9003         	str	r0, [sp, #0xc]
;       switch (pllsource)
 805cf3c: 9804         	ldr	r0, [sp, #0x10]
 805cf3e: 9000         	str	r0, [sp]
 805cf40: 2802         	cmp	r0, #0x2
 805cf42: d004         	beq	0x805cf4e <SystemCoreClockUpdate+0xc6> @ imm = #0x8
 805cf44: e7ff         	b	0x805cf46 <SystemCoreClockUpdate+0xbe> @ imm = #-0x2
 805cf46: 9800         	ldr	r0, [sp]
 805cf48: 2803         	cmp	r0, #0x3
 805cf4a: d009         	beq	0x805cf60 <SystemCoreClockUpdate+0xd8> @ imm = #0x12
 805cf4c: e011         	b	0x805cf72 <SystemCoreClockUpdate+0xea> @ imm = #0x22
;           pllvco = (HSI_VALUE / pllm);
 805cf4e: 9903         	ldr	r1, [sp, #0xc]
 805cf50: f242 4000    	movw	r0, #0x2400
 805cf54: f2c0 00f4    	movt	r0, #0xf4
 805cf58: fbb0 f0f1    	udiv	r0, r0, r1
 805cf5c: 9005         	str	r0, [sp, #0x14]
;           break;
 805cf5e: e00e         	b	0x805cf7e <SystemCoreClockUpdate+0xf6> @ imm = #0x1c
;           pllvco = (HSE_VALUE / pllm);
 805cf60: 9903         	ldr	r1, [sp, #0xc]
 805cf62: f242 4000    	movw	r0, #0x2400
 805cf66: f2c0 00f4    	movt	r0, #0xf4
 805cf6a: fbb0 f0f1    	udiv	r0, r0, r1
 805cf6e: 9005         	str	r0, [sp, #0x14]
;           break;
 805cf70: e005         	b	0x805cf7e <SystemCoreClockUpdate+0xf6> @ imm = #0xa
;           pllvco = (msirange / pllm);
 805cf72: 9806         	ldr	r0, [sp, #0x18]
 805cf74: 9903         	ldr	r1, [sp, #0xc]
 805cf76: fbb0 f0f1    	udiv	r0, r0, r1
 805cf7a: 9005         	str	r0, [sp, #0x14]
;           break;
 805cf7c: e7ff         	b	0x805cf7e <SystemCoreClockUpdate+0xf6> @ imm = #-0x2
;       pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 805cf7e: 9905         	ldr	r1, [sp, #0x14]
 805cf80: f241 000c    	movw	r0, #0x100c
 805cf84: f2c4 0002    	movt	r0, #0x4002
 805cf88: 6802         	ldr	r2, [r0]
 805cf8a: f3c2 2206    	ubfx	r2, r2, #0x8, #0x7
 805cf8e: 4351         	muls	r1, r2, r1
 805cf90: 9105         	str	r1, [sp, #0x14]
;       pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 805cf92: 6800         	ldr	r0, [r0]
 805cf94: f000 61c0    	and	r1, r0, #0x6000000
 805cf98: 2002         	movs	r0, #0x2
 805cf9a: eb00 6011    	add.w	r0, r0, r1, lsr #24
 805cf9e: 9002         	str	r0, [sp, #0x8]
;       SystemCoreClock = pllvco/pllr;
 805cfa0: 9805         	ldr	r0, [sp, #0x14]
 805cfa2: 9902         	ldr	r1, [sp, #0x8]
 805cfa4: fbb0 f0f1    	udiv	r0, r0, r1
 805cfa8: 4911         	ldr	r1, [pc, #0x44]         @ 0x805cff0 <SystemCoreClockUpdate+0x168>
 805cfaa: 4479         	add	r1, pc
 805cfac: 6008         	str	r0, [r1]
;       break;
 805cfae: e004         	b	0x805cfba <SystemCoreClockUpdate+0x132> @ imm = #0x8
;       SystemCoreClock = msirange;
 805cfb0: 9806         	ldr	r0, [sp, #0x18]
 805cfb2: 4910         	ldr	r1, [pc, #0x40]         @ 0x805cff4 <SystemCoreClockUpdate+0x16c>
 805cfb4: 4479         	add	r1, pc
 805cfb6: 6008         	str	r0, [r1]
;       break;
 805cfb8: e7ff         	b	0x805cfba <SystemCoreClockUpdate+0x132> @ imm = #-0x2
 805cfba: f241 0008    	movw	r0, #0x1008
 805cfbe: f2c4 0002    	movt	r0, #0x4002
;   tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 805cfc2: 6800         	ldr	r0, [r0]
 805cfc4: b2c0         	uxtb	r0, r0
 805cfc6: 0901         	lsrs	r1, r0, #0x4
 805cfc8: 480b         	ldr	r0, [pc, #0x2c]         @ 0x805cff8 <SystemCoreClockUpdate+0x170>
 805cfca: 4478         	add	r0, pc
 805cfcc: 5c40         	ldrb	r0, [r0, r1]
 805cfce: 9007         	str	r0, [sp, #0x1c]
;   SystemCoreClock >>= tmp;
 805cfd0: 9a07         	ldr	r2, [sp, #0x1c]
 805cfd2: 490a         	ldr	r1, [pc, #0x28]         @ 0x805cffc <SystemCoreClockUpdate+0x174>
 805cfd4: 4479         	add	r1, pc
 805cfd6: 6808         	ldr	r0, [r1]
 805cfd8: 40d0         	lsrs	r0, r2
 805cfda: 6008         	str	r0, [r1]
; }
 805cfdc: b008         	add	sp, #0x20
 805cfde: 4770         	bx	lr

0805cfe0 <$d.4>:
 805cfe0: 18 01 00 00  	.word	0x00000118
 805cfe4: e6 00 00 00  	.word	0x000000e6
 805cfe8: e2 00 00 00  	.word	0x000000e2
 805cfec: d6 00 00 00  	.word	0x000000d6
 805cff0: 42 00 00 00  	.word	0x00000042
 805cff4: 3c 00 00 00  	.word	0x0000003c
 805cff8: 2a 00 00 00  	.word	0x0000002a
 805cffc: 24 00 00 00  	.word	0x00000024

0805d000 <HAL_GPIO_Init>:
; void HAL_GPIO_Init(GPIO_TypeDef *GPIOx, GPIO_InitTypeDef *GPIO_Init) {
 805d000: b08b         	sub	sp, #0x2c
 805d002: 900a         	str	r0, [sp, #0x28]
 805d004: 9109         	str	r1, [sp, #0x24]
 805d006: 2000         	movs	r0, #0x0
;   uint32_t position = 0U;
 805d008: 9008         	str	r0, [sp, #0x20]
;   while (((GPIO_Init->Pin) >> position) != 0U) {
 805d00a: e7ff         	b	0x805d00c <HAL_GPIO_Init+0xc> @ imm = #-0x2
 805d00c: 9809         	ldr	r0, [sp, #0x24]
 805d00e: 6800         	ldr	r0, [r0]
 805d010: 9908         	ldr	r1, [sp, #0x20]
 805d012: 40c8         	lsrs	r0, r1
 805d014: 2800         	cmp	r0, #0x0
 805d016: f000 81a9    	beq.w	0x805d36c <HAL_GPIO_Init+0x36c> @ imm = #0x352
 805d01a: e7ff         	b	0x805d01c <HAL_GPIO_Init+0x1c> @ imm = #-0x2
;     iocurrent = (GPIO_Init->Pin) & (1UL << position);
 805d01c: 9809         	ldr	r0, [sp, #0x24]
 805d01e: 6800         	ldr	r0, [r0]
 805d020: 9a08         	ldr	r2, [sp, #0x20]
 805d022: 2101         	movs	r1, #0x1
 805d024: 4091         	lsls	r1, r2
 805d026: 4008         	ands	r0, r1
 805d028: 9007         	str	r0, [sp, #0x1c]
;     if (iocurrent != 0U) {
 805d02a: 9807         	ldr	r0, [sp, #0x1c]
 805d02c: 2800         	cmp	r0, #0x0
 805d02e: f000 8199    	beq.w	0x805d364 <HAL_GPIO_Init+0x364> @ imm = #0x332
 805d032: e7ff         	b	0x805d034 <HAL_GPIO_Init+0x34> @ imm = #-0x2
;       if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) ||
 805d034: 9809         	ldr	r0, [sp, #0x24]
 805d036: 6840         	ldr	r0, [r0, #0x4]
 805d038: 2801         	cmp	r0, #0x1
 805d03a: d00f         	beq	0x805d05c <HAL_GPIO_Init+0x5c> @ imm = #0x1e
 805d03c: e7ff         	b	0x805d03e <HAL_GPIO_Init+0x3e> @ imm = #-0x2
;           (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 805d03e: 9809         	ldr	r0, [sp, #0x24]
 805d040: 6840         	ldr	r0, [r0, #0x4]
 805d042: 2802         	cmp	r0, #0x2
 805d044: d00a         	beq	0x805d05c <HAL_GPIO_Init+0x5c> @ imm = #0x14
 805d046: e7ff         	b	0x805d048 <HAL_GPIO_Init+0x48> @ imm = #-0x2
;           (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) ||
 805d048: 9809         	ldr	r0, [sp, #0x24]
 805d04a: 6840         	ldr	r0, [r0, #0x4]
 805d04c: 2811         	cmp	r0, #0x11
 805d04e: d005         	beq	0x805d05c <HAL_GPIO_Init+0x5c> @ imm = #0xa
 805d050: e7ff         	b	0x805d052 <HAL_GPIO_Init+0x52> @ imm = #-0x2
;           (GPIO_Init->Mode == GPIO_MODE_AF_OD)) {
 805d052: 9809         	ldr	r0, [sp, #0x24]
 805d054: 6840         	ldr	r0, [r0, #0x4]
;       if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) ||
 805d056: 2812         	cmp	r0, #0x12
 805d058: d12f         	bne	0x805d0ba <HAL_GPIO_Init+0xba> @ imm = #0x5e
 805d05a: e7ff         	b	0x805d05c <HAL_GPIO_Init+0x5c> @ imm = #-0x2
;         temp = GPIOx->OSPEEDR;
 805d05c: 980a         	ldr	r0, [sp, #0x28]
 805d05e: 6880         	ldr	r0, [r0, #0x8]
 805d060: 9006         	str	r0, [sp, #0x18]
;         temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 805d062: 9808         	ldr	r0, [sp, #0x20]
 805d064: 0041         	lsls	r1, r0, #0x1
 805d066: 2003         	movs	r0, #0x3
 805d068: fa00 f101    	lsl.w	r1, r0, r1
 805d06c: 9806         	ldr	r0, [sp, #0x18]
 805d06e: 4388         	bics	r0, r1
 805d070: 9006         	str	r0, [sp, #0x18]
;         temp |= (GPIO_Init->Speed << (position * 2U));
 805d072: 9809         	ldr	r0, [sp, #0x24]
 805d074: 68c0         	ldr	r0, [r0, #0xc]
 805d076: 9908         	ldr	r1, [sp, #0x20]
 805d078: 0049         	lsls	r1, r1, #0x1
 805d07a: fa00 f101    	lsl.w	r1, r0, r1
 805d07e: 9806         	ldr	r0, [sp, #0x18]
 805d080: 4308         	orrs	r0, r1
 805d082: 9006         	str	r0, [sp, #0x18]
;         GPIOx->OSPEEDR = temp;
 805d084: 9806         	ldr	r0, [sp, #0x18]
 805d086: 990a         	ldr	r1, [sp, #0x28]
 805d088: 6088         	str	r0, [r1, #0x8]
;         temp = GPIOx->OTYPER;
 805d08a: 980a         	ldr	r0, [sp, #0x28]
 805d08c: 6840         	ldr	r0, [r0, #0x4]
 805d08e: 9006         	str	r0, [sp, #0x18]
;         temp &= ~(GPIO_OTYPER_OT0 << position);
 805d090: 9908         	ldr	r1, [sp, #0x20]
 805d092: 2001         	movs	r0, #0x1
 805d094: fa00 f101    	lsl.w	r1, r0, r1
 805d098: 9806         	ldr	r0, [sp, #0x18]
 805d09a: 4388         	bics	r0, r1
 805d09c: 9006         	str	r0, [sp, #0x18]
;         temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 805d09e: 9809         	ldr	r0, [sp, #0x24]
 805d0a0: 6840         	ldr	r0, [r0, #0x4]
 805d0a2: f3c0 1000    	ubfx	r0, r0, #0x4, #0x1
 805d0a6: 9908         	ldr	r1, [sp, #0x20]
 805d0a8: fa00 f101    	lsl.w	r1, r0, r1
 805d0ac: 9806         	ldr	r0, [sp, #0x18]
 805d0ae: 4308         	orrs	r0, r1
 805d0b0: 9006         	str	r0, [sp, #0x18]
;         GPIOx->OTYPER = temp;
 805d0b2: 9806         	ldr	r0, [sp, #0x18]
 805d0b4: 990a         	ldr	r1, [sp, #0x28]
 805d0b6: 6048         	str	r0, [r1, #0x4]
;       }
 805d0b8: e7ff         	b	0x805d0ba <HAL_GPIO_Init+0xba> @ imm = #-0x2
;       temp = GPIOx->PUPDR;
 805d0ba: 980a         	ldr	r0, [sp, #0x28]
 805d0bc: 68c0         	ldr	r0, [r0, #0xc]
 805d0be: 9006         	str	r0, [sp, #0x18]
;       temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 805d0c0: 9808         	ldr	r0, [sp, #0x20]
 805d0c2: 0041         	lsls	r1, r0, #0x1
 805d0c4: 2003         	movs	r0, #0x3
 805d0c6: fa00 f101    	lsl.w	r1, r0, r1
 805d0ca: 9806         	ldr	r0, [sp, #0x18]
 805d0cc: 4388         	bics	r0, r1
 805d0ce: 9006         	str	r0, [sp, #0x18]
;       temp |= ((GPIO_Init->Pull) << (position * 2U));
 805d0d0: 9809         	ldr	r0, [sp, #0x24]
 805d0d2: 6880         	ldr	r0, [r0, #0x8]
 805d0d4: 9908         	ldr	r1, [sp, #0x20]
 805d0d6: 0049         	lsls	r1, r1, #0x1
 805d0d8: fa00 f101    	lsl.w	r1, r0, r1
 805d0dc: 9806         	ldr	r0, [sp, #0x18]
 805d0de: 4308         	orrs	r0, r1
 805d0e0: 9006         	str	r0, [sp, #0x18]
;       GPIOx->PUPDR = temp;
 805d0e2: 9806         	ldr	r0, [sp, #0x18]
 805d0e4: 990a         	ldr	r1, [sp, #0x28]
 805d0e6: 60c8         	str	r0, [r1, #0xc]
;       if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 805d0e8: 9809         	ldr	r0, [sp, #0x24]
 805d0ea: 6840         	ldr	r0, [r0, #0x4]
 805d0ec: 2802         	cmp	r0, #0x2
 805d0ee: d005         	beq	0x805d0fc <HAL_GPIO_Init+0xfc> @ imm = #0xa
 805d0f0: e7ff         	b	0x805d0f2 <HAL_GPIO_Init+0xf2> @ imm = #-0x2
;           (GPIO_Init->Mode == GPIO_MODE_AF_OD)) {
 805d0f2: 9809         	ldr	r0, [sp, #0x24]
 805d0f4: 6840         	ldr	r0, [r0, #0x4]
;       if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 805d0f6: 2812         	cmp	r0, #0x12
 805d0f8: d126         	bne	0x805d148 <HAL_GPIO_Init+0x148> @ imm = #0x4c
 805d0fa: e7ff         	b	0x805d0fc <HAL_GPIO_Init+0xfc> @ imm = #-0x2
;         temp = GPIOx->AFR[position >> 3U];
 805d0fc: 980a         	ldr	r0, [sp, #0x28]
 805d0fe: 9908         	ldr	r1, [sp, #0x20]
 805d100: f06f 0203    	mvn	r2, #0x3
 805d104: ea02 0151    	and.w	r1, r2, r1, lsr #1
 805d108: 4408         	add	r0, r1
 805d10a: 6a00         	ldr	r0, [r0, #0x20]
 805d10c: 9006         	str	r0, [sp, #0x18]
;         temp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 805d10e: 9808         	ldr	r0, [sp, #0x20]
 805d110: f000 0007    	and	r0, r0, #0x7
 805d114: 0081         	lsls	r1, r0, #0x2
 805d116: 200f         	movs	r0, #0xf
 805d118: fa00 f101    	lsl.w	r1, r0, r1
 805d11c: 9806         	ldr	r0, [sp, #0x18]
 805d11e: 4388         	bics	r0, r1
 805d120: 9006         	str	r0, [sp, #0x18]
;         temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 805d122: 9809         	ldr	r0, [sp, #0x24]
 805d124: 6900         	ldr	r0, [r0, #0x10]
 805d126: 9908         	ldr	r1, [sp, #0x20]
 805d128: f001 0107    	and	r1, r1, #0x7
 805d12c: 0089         	lsls	r1, r1, #0x2
 805d12e: fa00 f101    	lsl.w	r1, r0, r1
 805d132: 9806         	ldr	r0, [sp, #0x18]
 805d134: 4308         	orrs	r0, r1
 805d136: 9006         	str	r0, [sp, #0x18]
;         GPIOx->AFR[position >> 3U] = temp;
 805d138: 9806         	ldr	r0, [sp, #0x18]
 805d13a: 990a         	ldr	r1, [sp, #0x28]
 805d13c: 9b08         	ldr	r3, [sp, #0x20]
 805d13e: ea02 0253    	and.w	r2, r2, r3, lsr #1
 805d142: 4411         	add	r1, r2
 805d144: 6208         	str	r0, [r1, #0x20]
;       }
 805d146: e7ff         	b	0x805d148 <HAL_GPIO_Init+0x148> @ imm = #-0x2
;       temp = GPIOx->MODER;
 805d148: 980a         	ldr	r0, [sp, #0x28]
 805d14a: 6800         	ldr	r0, [r0]
 805d14c: 9006         	str	r0, [sp, #0x18]
;       temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 805d14e: 9808         	ldr	r0, [sp, #0x20]
 805d150: 0041         	lsls	r1, r0, #0x1
 805d152: 2003         	movs	r0, #0x3
 805d154: fa00 f101    	lsl.w	r1, r0, r1
 805d158: 9806         	ldr	r0, [sp, #0x18]
 805d15a: 4388         	bics	r0, r1
 805d15c: 9006         	str	r0, [sp, #0x18]
;       temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 805d15e: 9809         	ldr	r0, [sp, #0x24]
 805d160: 6840         	ldr	r0, [r0, #0x4]
 805d162: f000 0003    	and	r0, r0, #0x3
 805d166: 9908         	ldr	r1, [sp, #0x20]
 805d168: 0049         	lsls	r1, r1, #0x1
 805d16a: fa00 f101    	lsl.w	r1, r0, r1
 805d16e: 9806         	ldr	r0, [sp, #0x18]
 805d170: 4308         	orrs	r0, r1
 805d172: 9006         	str	r0, [sp, #0x18]
;       GPIOx->MODER = temp;
 805d174: 9806         	ldr	r0, [sp, #0x18]
 805d176: 990a         	ldr	r1, [sp, #0x28]
 805d178: 6008         	str	r0, [r1]
;       if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) {
 805d17a: 9809         	ldr	r0, [sp, #0x24]
 805d17c: 79c0         	ldrb	r0, [r0, #0x7]
 805d17e: 06c0         	lsls	r0, r0, #0x1b
 805d180: 2800         	cmp	r0, #0x0
 805d182: f140 80ee    	bpl.w	0x805d362 <HAL_GPIO_Init+0x362> @ imm = #0x1dc
 805d186: e7ff         	b	0x805d188 <HAL_GPIO_Init+0x188> @ imm = #-0x2
;         temp = EXTI->EXTICR[position >> 2U];
 805d188: 9808         	ldr	r0, [sp, #0x20]
 805d18a: f020 0003    	bic	r0, r0, #0x3
 805d18e: f24f 4160    	movw	r1, #0xf460
 805d192: f2c4 0102    	movt	r1, #0x4002
 805d196: 5840         	ldr	r0, [r0, r1]
 805d198: 9006         	str	r0, [sp, #0x18]
;         temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 805d19a: 9808         	ldr	r0, [sp, #0x20]
 805d19c: f000 0003    	and	r0, r0, #0x3
 805d1a0: 00c1         	lsls	r1, r0, #0x3
 805d1a2: 200f         	movs	r0, #0xf
 805d1a4: fa00 f101    	lsl.w	r1, r0, r1
 805d1a8: 9806         	ldr	r0, [sp, #0x18]
 805d1aa: 4388         	bics	r0, r1
 805d1ac: 9006         	str	r0, [sp, #0x18]
;         temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 805d1ae: 980a         	ldr	r0, [sp, #0x28]
 805d1b0: 2100         	movs	r1, #0x0
 805d1b2: f2c4 2102    	movt	r1, #0x4202
 805d1b6: 4288         	cmp	r0, r1
 805d1b8: d103         	bne	0x805d1c2 <HAL_GPIO_Init+0x1c2> @ imm = #0x6
 805d1ba: e7ff         	b	0x805d1bc <HAL_GPIO_Init+0x1bc> @ imm = #-0x2
 805d1bc: 2000         	movs	r0, #0x0
;         temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 805d1be: 9005         	str	r0, [sp, #0x14]
 805d1c0: e050         	b	0x805d264 <HAL_GPIO_Init+0x264> @ imm = #0xa0
 805d1c2: 980a         	ldr	r0, [sp, #0x28]
 805d1c4: f240 4100    	movw	r1, #0x400
 805d1c8: f2c4 2102    	movt	r1, #0x4202
 805d1cc: 4288         	cmp	r0, r1
 805d1ce: d103         	bne	0x805d1d8 <HAL_GPIO_Init+0x1d8> @ imm = #0x6
 805d1d0: e7ff         	b	0x805d1d2 <HAL_GPIO_Init+0x1d2> @ imm = #-0x2
 805d1d2: 2001         	movs	r0, #0x1
;         temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 805d1d4: 9004         	str	r0, [sp, #0x10]
 805d1d6: e042         	b	0x805d25e <HAL_GPIO_Init+0x25e> @ imm = #0x84
 805d1d8: 980a         	ldr	r0, [sp, #0x28]
 805d1da: f640 0100    	movw	r1, #0x800
 805d1de: f2c4 2102    	movt	r1, #0x4202
 805d1e2: 4288         	cmp	r0, r1
 805d1e4: d103         	bne	0x805d1ee <HAL_GPIO_Init+0x1ee> @ imm = #0x6
 805d1e6: e7ff         	b	0x805d1e8 <HAL_GPIO_Init+0x1e8> @ imm = #-0x2
 805d1e8: 2002         	movs	r0, #0x2
;         temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 805d1ea: 9003         	str	r0, [sp, #0xc]
 805d1ec: e034         	b	0x805d258 <HAL_GPIO_Init+0x258> @ imm = #0x68
 805d1ee: 980a         	ldr	r0, [sp, #0x28]
 805d1f0: f640 4100    	movw	r1, #0xc00
 805d1f4: f2c4 2102    	movt	r1, #0x4202
 805d1f8: 4288         	cmp	r0, r1
 805d1fa: d103         	bne	0x805d204 <HAL_GPIO_Init+0x204> @ imm = #0x6
 805d1fc: e7ff         	b	0x805d1fe <HAL_GPIO_Init+0x1fe> @ imm = #-0x2
 805d1fe: 2003         	movs	r0, #0x3
;         temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 805d200: 9002         	str	r0, [sp, #0x8]
 805d202: e026         	b	0x805d252 <HAL_GPIO_Init+0x252> @ imm = #0x4c
 805d204: 980a         	ldr	r0, [sp, #0x28]
 805d206: f241 0100    	movw	r1, #0x1000
 805d20a: f2c4 2102    	movt	r1, #0x4202
 805d20e: 4288         	cmp	r0, r1
 805d210: d103         	bne	0x805d21a <HAL_GPIO_Init+0x21a> @ imm = #0x6
 805d212: e7ff         	b	0x805d214 <HAL_GPIO_Init+0x214> @ imm = #-0x2
 805d214: 2004         	movs	r0, #0x4
;         temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 805d216: 9001         	str	r0, [sp, #0x4]
 805d218: e018         	b	0x805d24c <HAL_GPIO_Init+0x24c> @ imm = #0x30
 805d21a: 980a         	ldr	r0, [sp, #0x28]
 805d21c: f241 4100    	movw	r1, #0x1400
 805d220: f2c4 2102    	movt	r1, #0x4202
 805d224: 4288         	cmp	r0, r1
 805d226: d103         	bne	0x805d230 <HAL_GPIO_Init+0x230> @ imm = #0x6
 805d228: e7ff         	b	0x805d22a <HAL_GPIO_Init+0x22a> @ imm = #-0x2
 805d22a: 2005         	movs	r0, #0x5
;         temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 805d22c: 9000         	str	r0, [sp]
 805d22e: e00a         	b	0x805d246 <HAL_GPIO_Init+0x246> @ imm = #0x14
 805d230: 990a         	ldr	r1, [sp, #0x28]
 805d232: f641 0200    	movw	r2, #0x1800
 805d236: f2c4 2202    	movt	r2, #0x4202
 805d23a: 2007         	movs	r0, #0x7
 805d23c: 4291         	cmp	r1, r2
 805d23e: bf08         	it	eq
 805d240: 2006         	moveq	r0, #0x6
 805d242: 9000         	str	r0, [sp]
 805d244: e7ff         	b	0x805d246 <HAL_GPIO_Init+0x246> @ imm = #-0x2
 805d246: 9800         	ldr	r0, [sp]
 805d248: 9001         	str	r0, [sp, #0x4]
 805d24a: e7ff         	b	0x805d24c <HAL_GPIO_Init+0x24c> @ imm = #-0x2
 805d24c: 9801         	ldr	r0, [sp, #0x4]
 805d24e: 9002         	str	r0, [sp, #0x8]
 805d250: e7ff         	b	0x805d252 <HAL_GPIO_Init+0x252> @ imm = #-0x2
 805d252: 9802         	ldr	r0, [sp, #0x8]
 805d254: 9003         	str	r0, [sp, #0xc]
 805d256: e7ff         	b	0x805d258 <HAL_GPIO_Init+0x258> @ imm = #-0x2
 805d258: 9803         	ldr	r0, [sp, #0xc]
 805d25a: 9004         	str	r0, [sp, #0x10]
 805d25c: e7ff         	b	0x805d25e <HAL_GPIO_Init+0x25e> @ imm = #-0x2
 805d25e: 9804         	ldr	r0, [sp, #0x10]
 805d260: 9005         	str	r0, [sp, #0x14]
 805d262: e7ff         	b	0x805d264 <HAL_GPIO_Init+0x264> @ imm = #-0x2
 805d264: 9805         	ldr	r0, [sp, #0x14]
 805d266: 9908         	ldr	r1, [sp, #0x20]
 805d268: f001 0103    	and	r1, r1, #0x3
 805d26c: 00c9         	lsls	r1, r1, #0x3
 805d26e: fa00 f101    	lsl.w	r1, r0, r1
 805d272: 9806         	ldr	r0, [sp, #0x18]
 805d274: 4308         	orrs	r0, r1
 805d276: 9006         	str	r0, [sp, #0x18]
;         EXTI->EXTICR[position >> 2U] = temp;
 805d278: 9806         	ldr	r0, [sp, #0x18]
 805d27a: 9908         	ldr	r1, [sp, #0x20]
 805d27c: f021 0103    	bic	r1, r1, #0x3
 805d280: f24f 4260    	movw	r2, #0xf460
 805d284: f2c4 0202    	movt	r2, #0x4002
 805d288: 5088         	str	r0, [r1, r2]
 805d28a: f24f 4080    	movw	r0, #0xf480
 805d28e: f2c4 0002    	movt	r0, #0x4002
;         temp = EXTI->IMR1;
 805d292: 6800         	ldr	r0, [r0]
 805d294: 9006         	str	r0, [sp, #0x18]
;         temp &= ~(iocurrent);
 805d296: 9907         	ldr	r1, [sp, #0x1c]
 805d298: 9806         	ldr	r0, [sp, #0x18]
 805d29a: 4388         	bics	r0, r1
 805d29c: 9006         	str	r0, [sp, #0x18]
;         if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT) {
 805d29e: 9809         	ldr	r0, [sp, #0x24]
 805d2a0: 7980         	ldrb	r0, [r0, #0x6]
 805d2a2: 07c0         	lsls	r0, r0, #0x1f
 805d2a4: b128         	cbz	r0, 0x805d2b2 <HAL_GPIO_Init+0x2b2> @ imm = #0xa
 805d2a6: e7ff         	b	0x805d2a8 <HAL_GPIO_Init+0x2a8> @ imm = #-0x2
;           temp |= iocurrent;
 805d2a8: 9907         	ldr	r1, [sp, #0x1c]
 805d2aa: 9806         	ldr	r0, [sp, #0x18]
 805d2ac: 4308         	orrs	r0, r1
 805d2ae: 9006         	str	r0, [sp, #0x18]
;         }
 805d2b0: e7ff         	b	0x805d2b2 <HAL_GPIO_Init+0x2b2> @ imm = #-0x2
;         EXTI->IMR1 = temp;
 805d2b2: 9806         	ldr	r0, [sp, #0x18]
 805d2b4: f24f 4180    	movw	r1, #0xf480
 805d2b8: f2c4 0102    	movt	r1, #0x4002
 805d2bc: 6008         	str	r0, [r1]
 805d2be: f24f 4084    	movw	r0, #0xf484
 805d2c2: f2c4 0002    	movt	r0, #0x4002
;         temp = EXTI->EMR1;
 805d2c6: 6800         	ldr	r0, [r0]
 805d2c8: 9006         	str	r0, [sp, #0x18]
;         temp &= ~(iocurrent);
 805d2ca: 9907         	ldr	r1, [sp, #0x1c]
 805d2cc: 9806         	ldr	r0, [sp, #0x18]
 805d2ce: 4388         	bics	r0, r1
 805d2d0: 9006         	str	r0, [sp, #0x18]
;         if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT) {
 805d2d2: 9809         	ldr	r0, [sp, #0x24]
 805d2d4: 7980         	ldrb	r0, [r0, #0x6]
 805d2d6: 0780         	lsls	r0, r0, #0x1e
 805d2d8: 2800         	cmp	r0, #0x0
 805d2da: d505         	bpl	0x805d2e8 <HAL_GPIO_Init+0x2e8> @ imm = #0xa
 805d2dc: e7ff         	b	0x805d2de <HAL_GPIO_Init+0x2de> @ imm = #-0x2
;           temp |= iocurrent;
 805d2de: 9907         	ldr	r1, [sp, #0x1c]
 805d2e0: 9806         	ldr	r0, [sp, #0x18]
 805d2e2: 4308         	orrs	r0, r1
 805d2e4: 9006         	str	r0, [sp, #0x18]
;         }
 805d2e6: e7ff         	b	0x805d2e8 <HAL_GPIO_Init+0x2e8> @ imm = #-0x2
;         EXTI->EMR1 = temp;
 805d2e8: 9806         	ldr	r0, [sp, #0x18]
 805d2ea: f24f 4184    	movw	r1, #0xf484
 805d2ee: f2c4 0102    	movt	r1, #0x4002
 805d2f2: 6008         	str	r0, [r1]
 805d2f4: f24f 4000    	movw	r0, #0xf400
 805d2f8: f2c4 0002    	movt	r0, #0x4002
;         temp = EXTI->RTSR1;
 805d2fc: 6800         	ldr	r0, [r0]
 805d2fe: 9006         	str	r0, [sp, #0x18]
;         temp &= ~(iocurrent);
 805d300: 9907         	ldr	r1, [sp, #0x1c]
 805d302: 9806         	ldr	r0, [sp, #0x18]
 805d304: 4388         	bics	r0, r1
 805d306: 9006         	str	r0, [sp, #0x18]
;         if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE) {
 805d308: 9809         	ldr	r0, [sp, #0x24]
 805d30a: 7980         	ldrb	r0, [r0, #0x6]
 805d30c: 06c0         	lsls	r0, r0, #0x1b
 805d30e: 2800         	cmp	r0, #0x0
 805d310: d505         	bpl	0x805d31e <HAL_GPIO_Init+0x31e> @ imm = #0xa
 805d312: e7ff         	b	0x805d314 <HAL_GPIO_Init+0x314> @ imm = #-0x2
;           temp |= iocurrent;
 805d314: 9907         	ldr	r1, [sp, #0x1c]
 805d316: 9806         	ldr	r0, [sp, #0x18]
 805d318: 4308         	orrs	r0, r1
 805d31a: 9006         	str	r0, [sp, #0x18]
;         }
 805d31c: e7ff         	b	0x805d31e <HAL_GPIO_Init+0x31e> @ imm = #-0x2
;         EXTI->RTSR1 = temp;
 805d31e: 9806         	ldr	r0, [sp, #0x18]
 805d320: f24f 4100    	movw	r1, #0xf400
 805d324: f2c4 0102    	movt	r1, #0x4002
 805d328: 6008         	str	r0, [r1]
 805d32a: f24f 4004    	movw	r0, #0xf404
 805d32e: f2c4 0002    	movt	r0, #0x4002
;         temp = EXTI->FTSR1;
 805d332: 6800         	ldr	r0, [r0]
 805d334: 9006         	str	r0, [sp, #0x18]
;         temp &= ~(iocurrent);
 805d336: 9907         	ldr	r1, [sp, #0x1c]
 805d338: 9806         	ldr	r0, [sp, #0x18]
 805d33a: 4388         	bics	r0, r1
 805d33c: 9006         	str	r0, [sp, #0x18]
;         if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE) {
 805d33e: 9809         	ldr	r0, [sp, #0x24]
 805d340: 7980         	ldrb	r0, [r0, #0x6]
 805d342: 0680         	lsls	r0, r0, #0x1a
 805d344: 2800         	cmp	r0, #0x0
 805d346: d505         	bpl	0x805d354 <HAL_GPIO_Init+0x354> @ imm = #0xa
 805d348: e7ff         	b	0x805d34a <HAL_GPIO_Init+0x34a> @ imm = #-0x2
;           temp |= iocurrent;
 805d34a: 9907         	ldr	r1, [sp, #0x1c]
 805d34c: 9806         	ldr	r0, [sp, #0x18]
 805d34e: 4308         	orrs	r0, r1
 805d350: 9006         	str	r0, [sp, #0x18]
;         }
 805d352: e7ff         	b	0x805d354 <HAL_GPIO_Init+0x354> @ imm = #-0x2
;         EXTI->FTSR1 = temp;
 805d354: 9806         	ldr	r0, [sp, #0x18]
 805d356: f24f 4104    	movw	r1, #0xf404
 805d35a: f2c4 0102    	movt	r1, #0x4002
 805d35e: 6008         	str	r0, [r1]
;       }
 805d360: e7ff         	b	0x805d362 <HAL_GPIO_Init+0x362> @ imm = #-0x2
;     }
 805d362: e7ff         	b	0x805d364 <HAL_GPIO_Init+0x364> @ imm = #-0x2
;     position++;
 805d364: 9808         	ldr	r0, [sp, #0x20]
 805d366: 3001         	adds	r0, #0x1
 805d368: 9008         	str	r0, [sp, #0x20]
;   while (((GPIO_Init->Pin) >> position) != 0U) {
 805d36a: e64f         	b	0x805d00c <HAL_GPIO_Init+0xc> @ imm = #-0x362
; }
 805d36c: b00b         	add	sp, #0x2c
 805d36e: 4770         	bx	lr

0805d370 <HAL_GPIO_WritePin>:
;                        GPIO_PinState PinState) {
 805d370: b082         	sub	sp, #0x8
 805d372: 9001         	str	r0, [sp, #0x4]
 805d374: f8ad 1002    	strh.w	r1, [sp, #0x2]
 805d378: f88d 2001    	strb.w	r2, [sp, #0x1]
;   if (PinState != GPIO_PIN_RESET) {
 805d37c: f89d 0001    	ldrb.w	r0, [sp, #0x1]
 805d380: b128         	cbz	r0, 0x805d38e <HAL_GPIO_WritePin+0x1e> @ imm = #0xa
 805d382: e7ff         	b	0x805d384 <HAL_GPIO_WritePin+0x14> @ imm = #-0x2
;     GPIOx->BSRR = (uint32_t)GPIO_Pin;
 805d384: f8bd 0002    	ldrh.w	r0, [sp, #0x2]
 805d388: 9901         	ldr	r1, [sp, #0x4]
 805d38a: 6188         	str	r0, [r1, #0x18]
;   } else {
 805d38c: e004         	b	0x805d398 <HAL_GPIO_WritePin+0x28> @ imm = #0x8
;     GPIOx->BRR = (uint32_t)GPIO_Pin;
 805d38e: f8bd 0002    	ldrh.w	r0, [sp, #0x2]
 805d392: 9901         	ldr	r1, [sp, #0x4]
 805d394: 6288         	str	r0, [r1, #0x28]
 805d396: e7ff         	b	0x805d398 <HAL_GPIO_WritePin+0x28> @ imm = #-0x2
; }
 805d398: b002         	add	sp, #0x8
 805d39a: 4770         	bx	lr

0805d39c <HAL_GPIO_TogglePin>:
; void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 805d39c: b083         	sub	sp, #0xc
 805d39e: 9002         	str	r0, [sp, #0x8]
 805d3a0: f8ad 1006    	strh.w	r1, [sp, #0x6]
;   odr = GPIOx->ODR;
 805d3a4: 9802         	ldr	r0, [sp, #0x8]
 805d3a6: 6940         	ldr	r0, [r0, #0x14]
 805d3a8: 9000         	str	r0, [sp]
;   GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 805d3aa: 9a00         	ldr	r2, [sp]
 805d3ac: f8bd 0006    	ldrh.w	r0, [sp, #0x6]
 805d3b0: ea02 0100    	and.w	r1, r2, r0
 805d3b4: 4390         	bics	r0, r2
 805d3b6: ea40 4001    	orr.w	r0, r0, r1, lsl #16
 805d3ba: 9902         	ldr	r1, [sp, #0x8]
 805d3bc: 6188         	str	r0, [r1, #0x18]
; }
 805d3be: b003         	add	sp, #0xc
 805d3c0: 4770         	bx	lr

0805d3c2 <HAL_NVIC_SetPriorityGrouping>:
; {
 805d3c2: b580         	push	{r7, lr}
 805d3c4: 466f         	mov	r7, sp
 805d3c6: b082         	sub	sp, #0x8
 805d3c8: 9001         	str	r0, [sp, #0x4]
;   NVIC_SetPriorityGrouping(PriorityGroup);
 805d3ca: 9801         	ldr	r0, [sp, #0x4]
 805d3cc: f7ff fffe    	bl	0x805d3cc <HAL_NVIC_SetPriorityGrouping+0xa> @ imm = #-0x4
; }
 805d3d0: b002         	add	sp, #0x8
 805d3d2: bd80         	pop	{r7, pc}

0805d3d4 <__NVIC_SetPriorityGrouping>:
; {
 805d3d4: b083         	sub	sp, #0xc
 805d3d6: 9002         	str	r0, [sp, #0x8]
;   uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 805d3d8: 9802         	ldr	r0, [sp, #0x8]
 805d3da: f000 0007    	and	r0, r0, #0x7
 805d3de: 9000         	str	r0, [sp]
 805d3e0: f64e 510c    	movw	r1, #0xed0c
 805d3e4: f2ce 0100    	movt	r1, #0xe000
;   reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 805d3e8: 6808         	ldr	r0, [r1]
 805d3ea: 9001         	str	r0, [sp, #0x4]
;   reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 805d3ec: 9801         	ldr	r0, [sp, #0x4]
 805d3ee: f64f 02ff    	movw	r2, #0xf8ff
 805d3f2: 4010         	ands	r0, r2
 805d3f4: 9001         	str	r0, [sp, #0x4]
;   reg_value  =  (reg_value                                   |
 805d3f6: 9801         	ldr	r0, [sp, #0x4]
;                 (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 805d3f8: 9a00         	ldr	r2, [sp]
;   reg_value  =  (reg_value                                   |
 805d3fa: ea40 2002    	orr.w	r0, r0, r2, lsl #8
 805d3fe: 2200         	movs	r2, #0x0
 805d400: f2c0 52fa    	movt	r2, #0x5fa
;                 ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 805d404: 4310         	orrs	r0, r2
;   reg_value  =  (reg_value                                   |
 805d406: 9001         	str	r0, [sp, #0x4]
;   SCB->AIRCR =  reg_value;
 805d408: 9801         	ldr	r0, [sp, #0x4]
 805d40a: 6008         	str	r0, [r1]
; }
 805d40c: b003         	add	sp, #0xc
 805d40e: 4770         	bx	lr

0805d410 <HAL_NVIC_SetPriority>:
; {
 805d410: b580         	push	{r7, lr}
 805d412: 466f         	mov	r7, sp
 805d414: b086         	sub	sp, #0x18
 805d416: f807 0c01    	strb	r0, [r7, #-1]
 805d41a: 9104         	str	r1, [sp, #0x10]
 805d41c: 9203         	str	r2, [sp, #0xc]
;   prioritygroup = NVIC_GetPriorityGrouping();
 805d41e: f7ff fffe    	bl	0x805d41e <HAL_NVIC_SetPriority+0xe> @ imm = #-0x4
 805d422: 9002         	str	r0, [sp, #0x8]
;   NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 805d424: f917 0c01    	ldrsb	r0, [r7, #-1]
 805d428: 9001         	str	r0, [sp, #0x4]
 805d42a: 9802         	ldr	r0, [sp, #0x8]
 805d42c: 9904         	ldr	r1, [sp, #0x10]
 805d42e: 9a03         	ldr	r2, [sp, #0xc]
 805d430: f7ff fffe    	bl	0x805d430 <HAL_NVIC_SetPriority+0x20> @ imm = #-0x4
 805d434: 4601         	mov	r1, r0
 805d436: 9801         	ldr	r0, [sp, #0x4]
 805d438: f7ff fffe    	bl	0x805d438 <HAL_NVIC_SetPriority+0x28> @ imm = #-0x4
; }
 805d43c: b006         	add	sp, #0x18
 805d43e: bd80         	pop	{r7, pc}

0805d440 <__NVIC_GetPriorityGrouping>:
; {
 805d440: f64e 500c    	movw	r0, #0xed0c
 805d444: f2ce 0000    	movt	r0, #0xe000
;   return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 805d448: 6800         	ldr	r0, [r0]
 805d44a: f3c0 2002    	ubfx	r0, r0, #0x8, #0x3
 805d44e: 4770         	bx	lr

0805d450 <__NVIC_SetPriority>:
; {
 805d450: b082         	sub	sp, #0x8
 805d452: f88d 0007    	strb.w	r0, [sp, #0x7]
 805d456: 9100         	str	r1, [sp]
;   if ((int32_t)(IRQn) >= 0)
 805d458: f99d 0007    	ldrsb.w	r0, [sp, #0x7]
 805d45c: 2800         	cmp	r0, #0x0
 805d45e: d40a         	bmi	0x805d476 <__NVIC_SetPriority+0x26> @ imm = #0x14
 805d460: e7ff         	b	0x805d462 <__NVIC_SetPriority+0x12> @ imm = #-0x2
;     NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 805d462: 9800         	ldr	r0, [sp]
 805d464: 0140         	lsls	r0, r0, #0x5
 805d466: f99d 1007    	ldrsb.w	r1, [sp, #0x7]
 805d46a: f24e 4200    	movw	r2, #0xe400
 805d46e: f2ce 0200    	movt	r2, #0xe000
 805d472: 5488         	strb	r0, [r1, r2]
;   }
 805d474: e00b         	b	0x805d48e <__NVIC_SetPriority+0x3e> @ imm = #0x16
;     SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 805d476: 9800         	ldr	r0, [sp]
 805d478: 0140         	lsls	r0, r0, #0x5
 805d47a: f89d 1007    	ldrb.w	r1, [sp, #0x7]
 805d47e: f001 010f    	and	r1, r1, #0xf
 805d482: f64e 5214    	movw	r2, #0xed14
 805d486: f2ce 0200    	movt	r2, #0xe000
 805d48a: 5488         	strb	r0, [r1, r2]
 805d48c: e7ff         	b	0x805d48e <__NVIC_SetPriority+0x3e> @ imm = #-0x2
; }
 805d48e: b002         	add	sp, #0x8
 805d490: 4770         	bx	lr

0805d492 <NVIC_EncodePriority>:
; {
 805d492: b088         	sub	sp, #0x20
 805d494: 9007         	str	r0, [sp, #0x1c]
 805d496: 9106         	str	r1, [sp, #0x18]
 805d498: 9205         	str	r2, [sp, #0x14]
;   uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 805d49a: 9807         	ldr	r0, [sp, #0x1c]
 805d49c: f000 0007    	and	r0, r0, #0x7
 805d4a0: 9004         	str	r0, [sp, #0x10]
;   PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 805d4a2: 9804         	ldr	r0, [sp, #0x10]
 805d4a4: f1c0 0007    	rsb.w	r0, r0, #0x7
 805d4a8: 2804         	cmp	r0, #0x4
 805d4aa: d303         	blo	0x805d4b4 <NVIC_EncodePriority+0x22> @ imm = #0x6
 805d4ac: e7ff         	b	0x805d4ae <NVIC_EncodePriority+0x1c> @ imm = #-0x2
 805d4ae: 2003         	movs	r0, #0x3
;   PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 805d4b0: 9001         	str	r0, [sp, #0x4]
 805d4b2: e004         	b	0x805d4be <NVIC_EncodePriority+0x2c> @ imm = #0x8
 805d4b4: 9804         	ldr	r0, [sp, #0x10]
 805d4b6: f1c0 0007    	rsb.w	r0, r0, #0x7
 805d4ba: 9001         	str	r0, [sp, #0x4]
 805d4bc: e7ff         	b	0x805d4be <NVIC_EncodePriority+0x2c> @ imm = #-0x2
 805d4be: 9801         	ldr	r0, [sp, #0x4]
 805d4c0: 9003         	str	r0, [sp, #0xc]
;   SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 805d4c2: 9804         	ldr	r0, [sp, #0x10]
 805d4c4: 3003         	adds	r0, #0x3
 805d4c6: 2806         	cmp	r0, #0x6
 805d4c8: d803         	bhi	0x805d4d2 <NVIC_EncodePriority+0x40> @ imm = #0x6
 805d4ca: e7ff         	b	0x805d4cc <NVIC_EncodePriority+0x3a> @ imm = #-0x2
 805d4cc: 2000         	movs	r0, #0x0
;   SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 805d4ce: 9000         	str	r0, [sp]
 805d4d0: e003         	b	0x805d4da <NVIC_EncodePriority+0x48> @ imm = #0x6
 805d4d2: 9804         	ldr	r0, [sp, #0x10]
 805d4d4: 3804         	subs	r0, #0x4
 805d4d6: 9000         	str	r0, [sp]
 805d4d8: e7ff         	b	0x805d4da <NVIC_EncodePriority+0x48> @ imm = #-0x2
 805d4da: 9800         	ldr	r0, [sp]
 805d4dc: 9002         	str	r0, [sp, #0x8]
;            ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 805d4de: 9806         	ldr	r0, [sp, #0x18]
 805d4e0: 9903         	ldr	r1, [sp, #0xc]
 805d4e2: 2201         	movs	r2, #0x1
 805d4e4: fa02 f101    	lsl.w	r1, r2, r1
 805d4e8: 3901         	subs	r1, #0x1
 805d4ea: 4008         	ands	r0, r1
 805d4ec: 9b02         	ldr	r3, [sp, #0x8]
 805d4ee: 4098         	lsls	r0, r3
;            ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 805d4f0: 9905         	ldr	r1, [sp, #0x14]
 805d4f2: 409a         	lsls	r2, r3
 805d4f4: 3a01         	subs	r2, #0x1
 805d4f6: 4011         	ands	r1, r2
;            ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 805d4f8: 4308         	orrs	r0, r1
;   return (
 805d4fa: b008         	add	sp, #0x20
 805d4fc: 4770         	bx	lr

0805d4fe <HAL_SYSTICK_Config>:
; {
 805d4fe: b580         	push	{r7, lr}
 805d500: 466f         	mov	r7, sp
 805d502: b082         	sub	sp, #0x8
 805d504: 9001         	str	r0, [sp, #0x4]
;   return SysTick_Config(TicksNumb);
 805d506: 9801         	ldr	r0, [sp, #0x4]
 805d508: f7ff fffe    	bl	0x805d508 <HAL_SYSTICK_Config+0xa> @ imm = #-0x4
 805d50c: b002         	add	sp, #0x8
 805d50e: bd80         	pop	{r7, pc}

0805d510 <SysTick_Config>:
; {
 805d510: b580         	push	{r7, lr}
 805d512: 466f         	mov	r7, sp
 805d514: b084         	sub	sp, #0x10
 805d516: 9002         	str	r0, [sp, #0x8]
;   if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 805d518: 9802         	ldr	r0, [sp, #0x8]
 805d51a: 3801         	subs	r0, #0x1
 805d51c: f1b0 7f80    	cmp.w	r0, #0x1000000
 805d520: d303         	blo	0x805d52a <SysTick_Config+0x1a> @ imm = #0x6
 805d522: e7ff         	b	0x805d524 <SysTick_Config+0x14> @ imm = #-0x2
 805d524: 2001         	movs	r0, #0x1
;     return (1UL);                                                   /* Reload value impossible */
 805d526: 9003         	str	r0, [sp, #0xc]
 805d528: e01a         	b	0x805d560 <SysTick_Config+0x50> @ imm = #0x34
;   SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 805d52a: 9802         	ldr	r0, [sp, #0x8]
 805d52c: 3801         	subs	r0, #0x1
 805d52e: f24e 0114    	movw	r1, #0xe014
 805d532: f2ce 0100    	movt	r1, #0xe000
 805d536: 6008         	str	r0, [r1]
 805d538: f04f 30ff    	mov.w	r0, #0xffffffff
 805d53c: 2107         	movs	r1, #0x7
;   NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 805d53e: 9101         	str	r1, [sp, #0x4]
 805d540: f7ff fffe    	bl	0x805d540 <SysTick_Config+0x30> @ imm = #-0x4
 805d544: 9901         	ldr	r1, [sp, #0x4]
 805d546: f24e 0218    	movw	r2, #0xe018
 805d54a: f2ce 0200    	movt	r2, #0xe000
 805d54e: 2000         	movs	r0, #0x0
;   SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 805d550: 6010         	str	r0, [r2]
 805d552: f24e 0210    	movw	r2, #0xe010
 805d556: f2ce 0200    	movt	r2, #0xe000
;   SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 805d55a: 6011         	str	r1, [r2]
;   return (0UL);                                                     /* Function successful */
 805d55c: 9003         	str	r0, [sp, #0xc]
 805d55e: e7ff         	b	0x805d560 <SysTick_Config+0x50> @ imm = #-0x2
; }
 805d560: 9803         	ldr	r0, [sp, #0xc]
 805d562: b004         	add	sp, #0x10
 805d564: bd80         	pop	{r7, pc}

0805d566 <NMI_Handler>:
; DEFAULT_IRQ_HANDLER(NMI_Handler)
 805d566: e7ff         	b	0x805d568 <NMI_Handler+0x2> @ imm = #-0x2
 805d568: e7fe         	b	0x805d568 <NMI_Handler+0x2> @ imm = #-0x4

0805d56a <HardFault_Handler>:
; DEFAULT_IRQ_HANDLER(HardFault_Handler)
 805d56a: e7ff         	b	0x805d56c <HardFault_Handler+0x2> @ imm = #-0x2
 805d56c: e7fe         	b	0x805d56c <HardFault_Handler+0x2> @ imm = #-0x4

0805d56e <MemManage_Handler>:
; DEFAULT_IRQ_HANDLER(MemManage_Handler)
 805d56e: e7ff         	b	0x805d570 <MemManage_Handler+0x2> @ imm = #-0x2
 805d570: e7fe         	b	0x805d570 <MemManage_Handler+0x2> @ imm = #-0x4

0805d572 <BusFault_Handler>:
; DEFAULT_IRQ_HANDLER(BusFault_Handler)
 805d572: e7ff         	b	0x805d574 <BusFault_Handler+0x2> @ imm = #-0x2
 805d574: e7fe         	b	0x805d574 <BusFault_Handler+0x2> @ imm = #-0x4

0805d576 <UsageFault_Handler>:
; DEFAULT_IRQ_HANDLER(UsageFault_Handler)
 805d576: e7ff         	b	0x805d578 <UsageFault_Handler+0x2> @ imm = #-0x2
 805d578: e7fe         	b	0x805d578 <UsageFault_Handler+0x2> @ imm = #-0x4

0805d57a <SecureFault_Handler>:
; DEFAULT_IRQ_HANDLER(SecureFault_Handler)
 805d57a: e7ff         	b	0x805d57c <SecureFault_Handler+0x2> @ imm = #-0x2
 805d57c: e7fe         	b	0x805d57c <SecureFault_Handler+0x2> @ imm = #-0x4

0805d57e <DebugMon_Handler>:
; DEFAULT_IRQ_HANDLER(DebugMon_Handler)
 805d57e: e7ff         	b	0x805d580 <DebugMon_Handler+0x2> @ imm = #-0x2
 805d580: e7fe         	b	0x805d580 <DebugMon_Handler+0x2> @ imm = #-0x4

0805d582 <WWDG_IRQHandler>:
; DEFAULT_IRQ_HANDLER(WWDG_IRQHandler)
 805d582: e7ff         	b	0x805d584 <WWDG_IRQHandler+0x2> @ imm = #-0x2
 805d584: e7fe         	b	0x805d584 <WWDG_IRQHandler+0x2> @ imm = #-0x4

0805d586 <PVD_PVM_IRQHandler>:
; DEFAULT_IRQ_HANDLER(PVD_PVM_IRQHandler)
 805d586: e7ff         	b	0x805d588 <PVD_PVM_IRQHandler+0x2> @ imm = #-0x2
 805d588: e7fe         	b	0x805d588 <PVD_PVM_IRQHandler+0x2> @ imm = #-0x4

0805d58a <RTC_IRQHandler>:
; DEFAULT_IRQ_HANDLER(RTC_IRQHandler)
 805d58a: e7ff         	b	0x805d58c <RTC_IRQHandler+0x2> @ imm = #-0x2
 805d58c: e7fe         	b	0x805d58c <RTC_IRQHandler+0x2> @ imm = #-0x4

0805d58e <RTC_IRQHandler_S>:
; DEFAULT_IRQ_HANDLER(RTC_IRQHandler_S)
 805d58e: e7ff         	b	0x805d590 <RTC_IRQHandler_S+0x2> @ imm = #-0x2
 805d590: e7fe         	b	0x805d590 <RTC_IRQHandler_S+0x2> @ imm = #-0x4

0805d592 <TAMP_IRQHandler>:
; DEFAULT_IRQ_HANDLER(TAMP_IRQHandler)
 805d592: e7ff         	b	0x805d594 <TAMP_IRQHandler+0x2> @ imm = #-0x2
 805d594: e7fe         	b	0x805d594 <TAMP_IRQHandler+0x2> @ imm = #-0x4

0805d596 <TAMP_IRQHandler_S>:
; DEFAULT_IRQ_HANDLER(TAMP_IRQHandler_S)
 805d596: e7ff         	b	0x805d598 <TAMP_IRQHandler_S+0x2> @ imm = #-0x2
 805d598: e7fe         	b	0x805d598 <TAMP_IRQHandler_S+0x2> @ imm = #-0x4

0805d59a <FLASH_IRQHandler>:
; DEFAULT_IRQ_HANDLER(FLASH_IRQHandler)
 805d59a: e7ff         	b	0x805d59c <FLASH_IRQHandler+0x2> @ imm = #-0x2
 805d59c: e7fe         	b	0x805d59c <FLASH_IRQHandler+0x2> @ imm = #-0x4

0805d59e <FLASH_IRQHandler_S>:
; DEFAULT_IRQ_HANDLER(FLASH_IRQHandler_S)
 805d59e: e7ff         	b	0x805d5a0 <FLASH_IRQHandler_S+0x2> @ imm = #-0x2
 805d5a0: e7fe         	b	0x805d5a0 <FLASH_IRQHandler_S+0x2> @ imm = #-0x4

0805d5a2 <SERR_IRQHandler>:
; DEFAULT_IRQ_HANDLER(SERR_IRQHandler)
 805d5a2: e7ff         	b	0x805d5a4 <SERR_IRQHandler+0x2> @ imm = #-0x2
 805d5a4: e7fe         	b	0x805d5a4 <SERR_IRQHandler+0x2> @ imm = #-0x4

0805d5a6 <RCC_IRQHandler>:
; DEFAULT_IRQ_HANDLER(RCC_IRQHandler)
 805d5a6: e7ff         	b	0x805d5a8 <RCC_IRQHandler+0x2> @ imm = #-0x2
 805d5a8: e7fe         	b	0x805d5a8 <RCC_IRQHandler+0x2> @ imm = #-0x4

0805d5aa <RCC_IRQHandler_S>:
; DEFAULT_IRQ_HANDLER(RCC_IRQHandler_S)
 805d5aa: e7ff         	b	0x805d5ac <RCC_IRQHandler_S+0x2> @ imm = #-0x2
 805d5ac: e7fe         	b	0x805d5ac <RCC_IRQHandler_S+0x2> @ imm = #-0x4

0805d5ae <EXTI0_IRQHandler>:
; DEFAULT_IRQ_HANDLER(EXTI0_IRQHandler)
 805d5ae: e7ff         	b	0x805d5b0 <EXTI0_IRQHandler+0x2> @ imm = #-0x2
 805d5b0: e7fe         	b	0x805d5b0 <EXTI0_IRQHandler+0x2> @ imm = #-0x4

0805d5b2 <EXTI1_IRQHandler>:
; DEFAULT_IRQ_HANDLER(EXTI1_IRQHandler)
 805d5b2: e7ff         	b	0x805d5b4 <EXTI1_IRQHandler+0x2> @ imm = #-0x2
 805d5b4: e7fe         	b	0x805d5b4 <EXTI1_IRQHandler+0x2> @ imm = #-0x4

0805d5b6 <EXTI2_IRQHandler>:
; DEFAULT_IRQ_HANDLER(EXTI2_IRQHandler)
 805d5b6: e7ff         	b	0x805d5b8 <EXTI2_IRQHandler+0x2> @ imm = #-0x2
 805d5b8: e7fe         	b	0x805d5b8 <EXTI2_IRQHandler+0x2> @ imm = #-0x4

0805d5ba <EXTI3_IRQHandler>:
; DEFAULT_IRQ_HANDLER(EXTI3_IRQHandler)
 805d5ba: e7ff         	b	0x805d5bc <EXTI3_IRQHandler+0x2> @ imm = #-0x2
 805d5bc: e7fe         	b	0x805d5bc <EXTI3_IRQHandler+0x2> @ imm = #-0x4

0805d5be <EXTI4_IRQHandler>:
; DEFAULT_IRQ_HANDLER(EXTI4_IRQHandler)
 805d5be: e7ff         	b	0x805d5c0 <EXTI4_IRQHandler+0x2> @ imm = #-0x2
 805d5c0: e7fe         	b	0x805d5c0 <EXTI4_IRQHandler+0x2> @ imm = #-0x4

0805d5c2 <EXTI5_IRQHandler>:
; DEFAULT_IRQ_HANDLER(EXTI5_IRQHandler)
 805d5c2: e7ff         	b	0x805d5c4 <EXTI5_IRQHandler+0x2> @ imm = #-0x2
 805d5c4: e7fe         	b	0x805d5c4 <EXTI5_IRQHandler+0x2> @ imm = #-0x4

0805d5c6 <EXTI6_IRQHandler>:
; DEFAULT_IRQ_HANDLER(EXTI6_IRQHandler)
 805d5c6: e7ff         	b	0x805d5c8 <EXTI6_IRQHandler+0x2> @ imm = #-0x2
 805d5c8: e7fe         	b	0x805d5c8 <EXTI6_IRQHandler+0x2> @ imm = #-0x4

0805d5ca <EXTI7_IRQHandler>:
; DEFAULT_IRQ_HANDLER(EXTI7_IRQHandler)
 805d5ca: e7ff         	b	0x805d5cc <EXTI7_IRQHandler+0x2> @ imm = #-0x2
 805d5cc: e7fe         	b	0x805d5cc <EXTI7_IRQHandler+0x2> @ imm = #-0x4

0805d5ce <EXTI8_IRQHandler>:
; DEFAULT_IRQ_HANDLER(EXTI8_IRQHandler)
 805d5ce: e7ff         	b	0x805d5d0 <EXTI8_IRQHandler+0x2> @ imm = #-0x2
 805d5d0: e7fe         	b	0x805d5d0 <EXTI8_IRQHandler+0x2> @ imm = #-0x4

0805d5d2 <EXTI9_IRQHandler>:
; DEFAULT_IRQ_HANDLER(EXTI9_IRQHandler)
 805d5d2: e7ff         	b	0x805d5d4 <EXTI9_IRQHandler+0x2> @ imm = #-0x2
 805d5d4: e7fe         	b	0x805d5d4 <EXTI9_IRQHandler+0x2> @ imm = #-0x4

0805d5d6 <EXTI10_IRQHandler>:
; DEFAULT_IRQ_HANDLER(EXTI10_IRQHandler)
 805d5d6: e7ff         	b	0x805d5d8 <EXTI10_IRQHandler+0x2> @ imm = #-0x2
 805d5d8: e7fe         	b	0x805d5d8 <EXTI10_IRQHandler+0x2> @ imm = #-0x4

0805d5da <EXTI11_IRQHandler>:
; DEFAULT_IRQ_HANDLER(EXTI11_IRQHandler)
 805d5da: e7ff         	b	0x805d5dc <EXTI11_IRQHandler+0x2> @ imm = #-0x2
 805d5dc: e7fe         	b	0x805d5dc <EXTI11_IRQHandler+0x2> @ imm = #-0x4

0805d5de <EXTI12_IRQHandler>:
; DEFAULT_IRQ_HANDLER(EXTI12_IRQHandler)
 805d5de: e7ff         	b	0x805d5e0 <EXTI12_IRQHandler+0x2> @ imm = #-0x2
 805d5e0: e7fe         	b	0x805d5e0 <EXTI12_IRQHandler+0x2> @ imm = #-0x4

0805d5e2 <EXTI13_IRQHandler>:
; DEFAULT_IRQ_HANDLER(EXTI13_IRQHandler)
 805d5e2: e7ff         	b	0x805d5e4 <EXTI13_IRQHandler+0x2> @ imm = #-0x2
 805d5e4: e7fe         	b	0x805d5e4 <EXTI13_IRQHandler+0x2> @ imm = #-0x4

0805d5e6 <EXTI14_IRQHandler>:
; DEFAULT_IRQ_HANDLER(EXTI14_IRQHandler)
 805d5e6: e7ff         	b	0x805d5e8 <EXTI14_IRQHandler+0x2> @ imm = #-0x2
 805d5e8: e7fe         	b	0x805d5e8 <EXTI14_IRQHandler+0x2> @ imm = #-0x4

0805d5ea <EXTI15_IRQHandler>:
; DEFAULT_IRQ_HANDLER(EXTI15_IRQHandler)
 805d5ea: e7ff         	b	0x805d5ec <EXTI15_IRQHandler+0x2> @ imm = #-0x2
 805d5ec: e7fe         	b	0x805d5ec <EXTI15_IRQHandler+0x2> @ imm = #-0x4

0805d5ee <DMAMUX1_IRQHandler>:
; DEFAULT_IRQ_HANDLER(DMAMUX1_IRQHandler)
 805d5ee: e7ff         	b	0x805d5f0 <DMAMUX1_IRQHandler+0x2> @ imm = #-0x2
 805d5f0: e7fe         	b	0x805d5f0 <DMAMUX1_IRQHandler+0x2> @ imm = #-0x4

0805d5f2 <DMAMUX1_IRQHandler_S>:
; DEFAULT_IRQ_HANDLER(DMAMUX1_IRQHandler_S)
 805d5f2: e7ff         	b	0x805d5f4 <DMAMUX1_IRQHandler_S+0x2> @ imm = #-0x2
 805d5f4: e7fe         	b	0x805d5f4 <DMAMUX1_IRQHandler_S+0x2> @ imm = #-0x4

0805d5f6 <DMA1_Channel1_IRQHandler>:
; DEFAULT_IRQ_HANDLER(DMA1_Channel1_IRQHandler)
 805d5f6: e7ff         	b	0x805d5f8 <DMA1_Channel1_IRQHandler+0x2> @ imm = #-0x2
 805d5f8: e7fe         	b	0x805d5f8 <DMA1_Channel1_IRQHandler+0x2> @ imm = #-0x4

0805d5fa <DMA1_Channel2_IRQHandler>:
; DEFAULT_IRQ_HANDLER(DMA1_Channel2_IRQHandler)
 805d5fa: e7ff         	b	0x805d5fc <DMA1_Channel2_IRQHandler+0x2> @ imm = #-0x2
 805d5fc: e7fe         	b	0x805d5fc <DMA1_Channel2_IRQHandler+0x2> @ imm = #-0x4

0805d5fe <DMA1_Channel3_IRQHandler>:
; DEFAULT_IRQ_HANDLER(DMA1_Channel3_IRQHandler)
 805d5fe: e7ff         	b	0x805d600 <DMA1_Channel3_IRQHandler+0x2> @ imm = #-0x2
 805d600: e7fe         	b	0x805d600 <DMA1_Channel3_IRQHandler+0x2> @ imm = #-0x4

0805d602 <DMA1_Channel4_IRQHandler>:
; DEFAULT_IRQ_HANDLER(DMA1_Channel4_IRQHandler)
 805d602: e7ff         	b	0x805d604 <DMA1_Channel4_IRQHandler+0x2> @ imm = #-0x2
 805d604: e7fe         	b	0x805d604 <DMA1_Channel4_IRQHandler+0x2> @ imm = #-0x4

0805d606 <DMA1_Channel5_IRQHandler>:
; DEFAULT_IRQ_HANDLER(DMA1_Channel5_IRQHandler)
 805d606: e7ff         	b	0x805d608 <DMA1_Channel5_IRQHandler+0x2> @ imm = #-0x2
 805d608: e7fe         	b	0x805d608 <DMA1_Channel5_IRQHandler+0x2> @ imm = #-0x4

0805d60a <DMA1_Channel6_IRQHandler>:
; DEFAULT_IRQ_HANDLER(DMA1_Channel6_IRQHandler)
 805d60a: e7ff         	b	0x805d60c <DMA1_Channel6_IRQHandler+0x2> @ imm = #-0x2
 805d60c: e7fe         	b	0x805d60c <DMA1_Channel6_IRQHandler+0x2> @ imm = #-0x4

0805d60e <DMA1_Channel7_IRQHandler>:
; DEFAULT_IRQ_HANDLER(DMA1_Channel7_IRQHandler)
 805d60e: e7ff         	b	0x805d610 <DMA1_Channel7_IRQHandler+0x2> @ imm = #-0x2
 805d610: e7fe         	b	0x805d610 <DMA1_Channel7_IRQHandler+0x2> @ imm = #-0x4

0805d612 <DMA1_Channel8_IRQHandler>:
; DEFAULT_IRQ_HANDLER(DMA1_Channel8_IRQHandler)
 805d612: e7ff         	b	0x805d614 <DMA1_Channel8_IRQHandler+0x2> @ imm = #-0x2
 805d614: e7fe         	b	0x805d614 <DMA1_Channel8_IRQHandler+0x2> @ imm = #-0x4

0805d616 <ADC1_2_IRQHandler>:
; DEFAULT_IRQ_HANDLER(ADC1_2_IRQHandler)
 805d616: e7ff         	b	0x805d618 <ADC1_2_IRQHandler+0x2> @ imm = #-0x2
 805d618: e7fe         	b	0x805d618 <ADC1_2_IRQHandler+0x2> @ imm = #-0x4

0805d61a <DAC_IRQHandler>:
; DEFAULT_IRQ_HANDLER(DAC_IRQHandler)
 805d61a: e7ff         	b	0x805d61c <DAC_IRQHandler+0x2> @ imm = #-0x2
 805d61c: e7fe         	b	0x805d61c <DAC_IRQHandler+0x2> @ imm = #-0x4

0805d61e <FDCAN1_IT0_IRQHandler>:
; DEFAULT_IRQ_HANDLER(FDCAN1_IT0_IRQHandler)
 805d61e: e7ff         	b	0x805d620 <FDCAN1_IT0_IRQHandler+0x2> @ imm = #-0x2
 805d620: e7fe         	b	0x805d620 <FDCAN1_IT0_IRQHandler+0x2> @ imm = #-0x4

0805d622 <FDCAN1_IT1_IRQHandler>:
; DEFAULT_IRQ_HANDLER(FDCAN1_IT1_IRQHandler)
 805d622: e7ff         	b	0x805d624 <FDCAN1_IT1_IRQHandler+0x2> @ imm = #-0x2
 805d624: e7fe         	b	0x805d624 <FDCAN1_IT1_IRQHandler+0x2> @ imm = #-0x4

0805d626 <TIM1_BRK_IRQHandler>:
; DEFAULT_IRQ_HANDLER(TIM1_BRK_IRQHandler)
 805d626: e7ff         	b	0x805d628 <TIM1_BRK_IRQHandler+0x2> @ imm = #-0x2
 805d628: e7fe         	b	0x805d628 <TIM1_BRK_IRQHandler+0x2> @ imm = #-0x4

0805d62a <TIM1_UP_IRQHandler>:
; DEFAULT_IRQ_HANDLER(TIM1_UP_IRQHandler)
 805d62a: e7ff         	b	0x805d62c <TIM1_UP_IRQHandler+0x2> @ imm = #-0x2
 805d62c: e7fe         	b	0x805d62c <TIM1_UP_IRQHandler+0x2> @ imm = #-0x4

0805d62e <TIM1_TRG_COM_IRQHandler>:
; DEFAULT_IRQ_HANDLER(TIM1_TRG_COM_IRQHandler)
 805d62e: e7ff         	b	0x805d630 <TIM1_TRG_COM_IRQHandler+0x2> @ imm = #-0x2
 805d630: e7fe         	b	0x805d630 <TIM1_TRG_COM_IRQHandler+0x2> @ imm = #-0x4

0805d632 <TIM1_CC_IRQHandler>:
; DEFAULT_IRQ_HANDLER(TIM1_CC_IRQHandler)
 805d632: e7ff         	b	0x805d634 <TIM1_CC_IRQHandler+0x2> @ imm = #-0x2
 805d634: e7fe         	b	0x805d634 <TIM1_CC_IRQHandler+0x2> @ imm = #-0x4

0805d636 <TIM2_IRQHandler>:
; DEFAULT_IRQ_HANDLER(TIM2_IRQHandler)
 805d636: e7ff         	b	0x805d638 <TIM2_IRQHandler+0x2> @ imm = #-0x2
 805d638: e7fe         	b	0x805d638 <TIM2_IRQHandler+0x2> @ imm = #-0x4

0805d63a <TIM3_IRQHandler>:
; DEFAULT_IRQ_HANDLER(TIM3_IRQHandler)
 805d63a: e7ff         	b	0x805d63c <TIM3_IRQHandler+0x2> @ imm = #-0x2
 805d63c: e7fe         	b	0x805d63c <TIM3_IRQHandler+0x2> @ imm = #-0x4

0805d63e <TIM4_IRQHandler>:
; DEFAULT_IRQ_HANDLER(TIM4_IRQHandler)
 805d63e: e7ff         	b	0x805d640 <TIM4_IRQHandler+0x2> @ imm = #-0x2
 805d640: e7fe         	b	0x805d640 <TIM4_IRQHandler+0x2> @ imm = #-0x4

0805d642 <TIM5_IRQHandler>:
; DEFAULT_IRQ_HANDLER(TIM5_IRQHandler)
 805d642: e7ff         	b	0x805d644 <TIM5_IRQHandler+0x2> @ imm = #-0x2
 805d644: e7fe         	b	0x805d644 <TIM5_IRQHandler+0x2> @ imm = #-0x4

0805d646 <TIM6_IRQHandler>:
; DEFAULT_IRQ_HANDLER(TIM6_IRQHandler)
 805d646: e7ff         	b	0x805d648 <TIM6_IRQHandler+0x2> @ imm = #-0x2
 805d648: e7fe         	b	0x805d648 <TIM6_IRQHandler+0x2> @ imm = #-0x4

0805d64a <TIM7_IRQHandler>:
; DEFAULT_IRQ_HANDLER(TIM7_IRQHandler)
 805d64a: e7ff         	b	0x805d64c <TIM7_IRQHandler+0x2> @ imm = #-0x2
 805d64c: e7fe         	b	0x805d64c <TIM7_IRQHandler+0x2> @ imm = #-0x4

0805d64e <TIM8_BRK_IRQHandler>:
; DEFAULT_IRQ_HANDLER(TIM8_BRK_IRQHandler)
 805d64e: e7ff         	b	0x805d650 <TIM8_BRK_IRQHandler+0x2> @ imm = #-0x2
 805d650: e7fe         	b	0x805d650 <TIM8_BRK_IRQHandler+0x2> @ imm = #-0x4

0805d652 <TIM8_UP_IRQHandler>:
; DEFAULT_IRQ_HANDLER(TIM8_UP_IRQHandler)
 805d652: e7ff         	b	0x805d654 <TIM8_UP_IRQHandler+0x2> @ imm = #-0x2
 805d654: e7fe         	b	0x805d654 <TIM8_UP_IRQHandler+0x2> @ imm = #-0x4

0805d656 <TIM8_TRG_COM_IRQHandler>:
; DEFAULT_IRQ_HANDLER(TIM8_TRG_COM_IRQHandler)
 805d656: e7ff         	b	0x805d658 <TIM8_TRG_COM_IRQHandler+0x2> @ imm = #-0x2
 805d658: e7fe         	b	0x805d658 <TIM8_TRG_COM_IRQHandler+0x2> @ imm = #-0x4

0805d65a <TIM8_CC_IRQHandler>:
; DEFAULT_IRQ_HANDLER(TIM8_CC_IRQHandler)
 805d65a: e7ff         	b	0x805d65c <TIM8_CC_IRQHandler+0x2> @ imm = #-0x2
 805d65c: e7fe         	b	0x805d65c <TIM8_CC_IRQHandler+0x2> @ imm = #-0x4

0805d65e <I2C1_EV_IRQHandler>:
; DEFAULT_IRQ_HANDLER(I2C1_EV_IRQHandler)
 805d65e: e7ff         	b	0x805d660 <I2C1_EV_IRQHandler+0x2> @ imm = #-0x2
 805d660: e7fe         	b	0x805d660 <I2C1_EV_IRQHandler+0x2> @ imm = #-0x4

0805d662 <I2C1_ER_IRQHandler>:
; DEFAULT_IRQ_HANDLER(I2C1_ER_IRQHandler)
 805d662: e7ff         	b	0x805d664 <I2C1_ER_IRQHandler+0x2> @ imm = #-0x2
 805d664: e7fe         	b	0x805d664 <I2C1_ER_IRQHandler+0x2> @ imm = #-0x4

0805d666 <I2C2_EV_IRQHandler>:
; DEFAULT_IRQ_HANDLER(I2C2_EV_IRQHandler)
 805d666: e7ff         	b	0x805d668 <I2C2_EV_IRQHandler+0x2> @ imm = #-0x2
 805d668: e7fe         	b	0x805d668 <I2C2_EV_IRQHandler+0x2> @ imm = #-0x4

0805d66a <I2C2_ER_IRQHandler>:
; DEFAULT_IRQ_HANDLER(I2C2_ER_IRQHandler)
 805d66a: e7ff         	b	0x805d66c <I2C2_ER_IRQHandler+0x2> @ imm = #-0x2
 805d66c: e7fe         	b	0x805d66c <I2C2_ER_IRQHandler+0x2> @ imm = #-0x4

0805d66e <SPI1_IRQHandler>:
; DEFAULT_IRQ_HANDLER(SPI1_IRQHandler)
 805d66e: e7ff         	b	0x805d670 <SPI1_IRQHandler+0x2> @ imm = #-0x2
 805d670: e7fe         	b	0x805d670 <SPI1_IRQHandler+0x2> @ imm = #-0x4

0805d672 <SPI2_IRQHandler>:
; DEFAULT_IRQ_HANDLER(SPI2_IRQHandler)
 805d672: e7ff         	b	0x805d674 <SPI2_IRQHandler+0x2> @ imm = #-0x2
 805d674: e7fe         	b	0x805d674 <SPI2_IRQHandler+0x2> @ imm = #-0x4

0805d676 <USART1_IRQHandler>:
; DEFAULT_IRQ_HANDLER(USART1_IRQHandler)
 805d676: e7ff         	b	0x805d678 <USART1_IRQHandler+0x2> @ imm = #-0x2
 805d678: e7fe         	b	0x805d678 <USART1_IRQHandler+0x2> @ imm = #-0x4

0805d67a <USART2_IRQHandler>:
; DEFAULT_IRQ_HANDLER(USART2_IRQHandler)
 805d67a: e7ff         	b	0x805d67c <USART2_IRQHandler+0x2> @ imm = #-0x2
 805d67c: e7fe         	b	0x805d67c <USART2_IRQHandler+0x2> @ imm = #-0x4

0805d67e <USART3_IRQHandler>:
; DEFAULT_IRQ_HANDLER(USART3_IRQHandler)
 805d67e: e7ff         	b	0x805d680 <USART3_IRQHandler+0x2> @ imm = #-0x2
 805d680: e7fe         	b	0x805d680 <USART3_IRQHandler+0x2> @ imm = #-0x4

0805d682 <UART4_IRQHandler>:
; DEFAULT_IRQ_HANDLER(UART4_IRQHandler)
 805d682: e7ff         	b	0x805d684 <UART4_IRQHandler+0x2> @ imm = #-0x2
 805d684: e7fe         	b	0x805d684 <UART4_IRQHandler+0x2> @ imm = #-0x4

0805d686 <UART5_IRQHandler>:
; DEFAULT_IRQ_HANDLER(UART5_IRQHandler)
 805d686: e7ff         	b	0x805d688 <UART5_IRQHandler+0x2> @ imm = #-0x2
 805d688: e7fe         	b	0x805d688 <UART5_IRQHandler+0x2> @ imm = #-0x4

0805d68a <LPUART1_IRQHandler>:
; DEFAULT_IRQ_HANDLER(LPUART1_IRQHandler)
 805d68a: e7ff         	b	0x805d68c <LPUART1_IRQHandler+0x2> @ imm = #-0x2
 805d68c: e7fe         	b	0x805d68c <LPUART1_IRQHandler+0x2> @ imm = #-0x4

0805d68e <LPTIM1_IRQHandler>:
; DEFAULT_IRQ_HANDLER(LPTIM1_IRQHandler)
 805d68e: e7ff         	b	0x805d690 <LPTIM1_IRQHandler+0x2> @ imm = #-0x2
 805d690: e7fe         	b	0x805d690 <LPTIM1_IRQHandler+0x2> @ imm = #-0x4

0805d692 <LPTIM2_IRQHandler>:
; DEFAULT_IRQ_HANDLER(LPTIM2_IRQHandler)
 805d692: e7ff         	b	0x805d694 <LPTIM2_IRQHandler+0x2> @ imm = #-0x2
 805d694: e7fe         	b	0x805d694 <LPTIM2_IRQHandler+0x2> @ imm = #-0x4

0805d696 <TIM15_IRQHandler>:
; DEFAULT_IRQ_HANDLER(TIM15_IRQHandler)
 805d696: e7ff         	b	0x805d698 <TIM15_IRQHandler+0x2> @ imm = #-0x2
 805d698: e7fe         	b	0x805d698 <TIM15_IRQHandler+0x2> @ imm = #-0x4

0805d69a <TIM16_IRQHandler>:
; DEFAULT_IRQ_HANDLER(TIM16_IRQHandler)
 805d69a: e7ff         	b	0x805d69c <TIM16_IRQHandler+0x2> @ imm = #-0x2
 805d69c: e7fe         	b	0x805d69c <TIM16_IRQHandler+0x2> @ imm = #-0x4

0805d69e <TIM17_IRQHandler>:
; DEFAULT_IRQ_HANDLER(TIM17_IRQHandler)
 805d69e: e7ff         	b	0x805d6a0 <TIM17_IRQHandler+0x2> @ imm = #-0x2
 805d6a0: e7fe         	b	0x805d6a0 <TIM17_IRQHandler+0x2> @ imm = #-0x4

0805d6a2 <COMP_IRQHandler>:
; DEFAULT_IRQ_HANDLER(COMP_IRQHandler)
 805d6a2: e7ff         	b	0x805d6a4 <COMP_IRQHandler+0x2> @ imm = #-0x2
 805d6a4: e7fe         	b	0x805d6a4 <COMP_IRQHandler+0x2> @ imm = #-0x4

0805d6a6 <USB_FS_IRQHandler>:
; DEFAULT_IRQ_HANDLER(USB_FS_IRQHandler)
 805d6a6: e7ff         	b	0x805d6a8 <USB_FS_IRQHandler+0x2> @ imm = #-0x2
 805d6a8: e7fe         	b	0x805d6a8 <USB_FS_IRQHandler+0x2> @ imm = #-0x4

0805d6aa <CRS_IRQHandler>:
; DEFAULT_IRQ_HANDLER(CRS_IRQHandler)
 805d6aa: e7ff         	b	0x805d6ac <CRS_IRQHandler+0x2> @ imm = #-0x2
 805d6ac: e7fe         	b	0x805d6ac <CRS_IRQHandler+0x2> @ imm = #-0x4

0805d6ae <FMC_IRQHandler>:
; DEFAULT_IRQ_HANDLER(FMC_IRQHandler)
 805d6ae: e7ff         	b	0x805d6b0 <FMC_IRQHandler+0x2> @ imm = #-0x2
 805d6b0: e7fe         	b	0x805d6b0 <FMC_IRQHandler+0x2> @ imm = #-0x4

0805d6b2 <OCTOSPI1_IRQHandler>:
; DEFAULT_IRQ_HANDLER(OCTOSPI1_IRQHandler)
 805d6b2: e7ff         	b	0x805d6b4 <OCTOSPI1_IRQHandler+0x2> @ imm = #-0x2
 805d6b4: e7fe         	b	0x805d6b4 <OCTOSPI1_IRQHandler+0x2> @ imm = #-0x4

0805d6b6 <SDMMC1_IRQHandler>:
; DEFAULT_IRQ_HANDLER(SDMMC1_IRQHandler)
 805d6b6: e7ff         	b	0x805d6b8 <SDMMC1_IRQHandler+0x2> @ imm = #-0x2
 805d6b8: e7fe         	b	0x805d6b8 <SDMMC1_IRQHandler+0x2> @ imm = #-0x4

0805d6ba <DMA2_Channel1_IRQHandler>:
; DEFAULT_IRQ_HANDLER(DMA2_Channel1_IRQHandler)
 805d6ba: e7ff         	b	0x805d6bc <DMA2_Channel1_IRQHandler+0x2> @ imm = #-0x2
 805d6bc: e7fe         	b	0x805d6bc <DMA2_Channel1_IRQHandler+0x2> @ imm = #-0x4

0805d6be <DMA2_Channel2_IRQHandler>:
; DEFAULT_IRQ_HANDLER(DMA2_Channel2_IRQHandler)
 805d6be: e7ff         	b	0x805d6c0 <DMA2_Channel2_IRQHandler+0x2> @ imm = #-0x2
 805d6c0: e7fe         	b	0x805d6c0 <DMA2_Channel2_IRQHandler+0x2> @ imm = #-0x4

0805d6c2 <DMA2_Channel3_IRQHandler>:
; DEFAULT_IRQ_HANDLER(DMA2_Channel3_IRQHandler)
 805d6c2: e7ff         	b	0x805d6c4 <DMA2_Channel3_IRQHandler+0x2> @ imm = #-0x2
 805d6c4: e7fe         	b	0x805d6c4 <DMA2_Channel3_IRQHandler+0x2> @ imm = #-0x4

0805d6c6 <DMA2_Channel4_IRQHandler>:
; DEFAULT_IRQ_HANDLER(DMA2_Channel4_IRQHandler)
 805d6c6: e7ff         	b	0x805d6c8 <DMA2_Channel4_IRQHandler+0x2> @ imm = #-0x2
 805d6c8: e7fe         	b	0x805d6c8 <DMA2_Channel4_IRQHandler+0x2> @ imm = #-0x4

0805d6ca <DMA2_Channel5_IRQHandler>:
; DEFAULT_IRQ_HANDLER(DMA2_Channel5_IRQHandler)
 805d6ca: e7ff         	b	0x805d6cc <DMA2_Channel5_IRQHandler+0x2> @ imm = #-0x2
 805d6cc: e7fe         	b	0x805d6cc <DMA2_Channel5_IRQHandler+0x2> @ imm = #-0x4

0805d6ce <DMA2_Channel6_IRQHandler>:
; DEFAULT_IRQ_HANDLER(DMA2_Channel6_IRQHandler)
 805d6ce: e7ff         	b	0x805d6d0 <DMA2_Channel6_IRQHandler+0x2> @ imm = #-0x2
 805d6d0: e7fe         	b	0x805d6d0 <DMA2_Channel6_IRQHandler+0x2> @ imm = #-0x4

0805d6d2 <DMA2_Channel7_IRQHandler>:
; DEFAULT_IRQ_HANDLER(DMA2_Channel7_IRQHandler)
 805d6d2: e7ff         	b	0x805d6d4 <DMA2_Channel7_IRQHandler+0x2> @ imm = #-0x2
 805d6d4: e7fe         	b	0x805d6d4 <DMA2_Channel7_IRQHandler+0x2> @ imm = #-0x4

0805d6d6 <DMA2_Channel8_IRQHandler>:
; DEFAULT_IRQ_HANDLER(DMA2_Channel8_IRQHandler)
 805d6d6: e7ff         	b	0x805d6d8 <DMA2_Channel8_IRQHandler+0x2> @ imm = #-0x2
 805d6d8: e7fe         	b	0x805d6d8 <DMA2_Channel8_IRQHandler+0x2> @ imm = #-0x4

0805d6da <I2C3_EV_IRQHandler>:
; DEFAULT_IRQ_HANDLER(I2C3_EV_IRQHandler)
 805d6da: e7ff         	b	0x805d6dc <I2C3_EV_IRQHandler+0x2> @ imm = #-0x2
 805d6dc: e7fe         	b	0x805d6dc <I2C3_EV_IRQHandler+0x2> @ imm = #-0x4

0805d6de <I2C3_ER_IRQHandler>:
; DEFAULT_IRQ_HANDLER(I2C3_ER_IRQHandler)
 805d6de: e7ff         	b	0x805d6e0 <I2C3_ER_IRQHandler+0x2> @ imm = #-0x2
 805d6e0: e7fe         	b	0x805d6e0 <I2C3_ER_IRQHandler+0x2> @ imm = #-0x4

0805d6e2 <SAI1_IRQHandler>:
; DEFAULT_IRQ_HANDLER(SAI1_IRQHandler)
 805d6e2: e7ff         	b	0x805d6e4 <SAI1_IRQHandler+0x2> @ imm = #-0x2
 805d6e4: e7fe         	b	0x805d6e4 <SAI1_IRQHandler+0x2> @ imm = #-0x4

0805d6e6 <SAI2_IRQHandler>:
; DEFAULT_IRQ_HANDLER(SAI2_IRQHandler)
 805d6e6: e7ff         	b	0x805d6e8 <SAI2_IRQHandler+0x2> @ imm = #-0x2
 805d6e8: e7fe         	b	0x805d6e8 <SAI2_IRQHandler+0x2> @ imm = #-0x4

0805d6ea <TSC_IRQHandler>:
; DEFAULT_IRQ_HANDLER(TSC_IRQHandler)
 805d6ea: e7ff         	b	0x805d6ec <TSC_IRQHandler+0x2> @ imm = #-0x2
 805d6ec: e7fe         	b	0x805d6ec <TSC_IRQHandler+0x2> @ imm = #-0x4

0805d6ee <AES_IRQHandler>:
; DEFAULT_IRQ_HANDLER(AES_IRQHandler)
 805d6ee: e7ff         	b	0x805d6f0 <AES_IRQHandler+0x2> @ imm = #-0x2
 805d6f0: e7fe         	b	0x805d6f0 <AES_IRQHandler+0x2> @ imm = #-0x4

0805d6f2 <RNG_IRQHandler>:
; DEFAULT_IRQ_HANDLER(RNG_IRQHandler)
 805d6f2: e7ff         	b	0x805d6f4 <RNG_IRQHandler+0x2> @ imm = #-0x2
 805d6f4: e7fe         	b	0x805d6f4 <RNG_IRQHandler+0x2> @ imm = #-0x4

0805d6f6 <FPU_IRQHandler>:
; DEFAULT_IRQ_HANDLER(FPU_IRQHandler)
 805d6f6: e7ff         	b	0x805d6f8 <FPU_IRQHandler+0x2> @ imm = #-0x2
 805d6f8: e7fe         	b	0x805d6f8 <FPU_IRQHandler+0x2> @ imm = #-0x4

0805d6fa <HASH_IRQHandler>:
; DEFAULT_IRQ_HANDLER(HASH_IRQHandler)
 805d6fa: e7ff         	b	0x805d6fc <HASH_IRQHandler+0x2> @ imm = #-0x2
 805d6fc: e7fe         	b	0x805d6fc <HASH_IRQHandler+0x2> @ imm = #-0x4

0805d6fe <PKA_IRQHandler>:
; DEFAULT_IRQ_HANDLER(PKA_IRQHandler)
 805d6fe: e7ff         	b	0x805d700 <PKA_IRQHandler+0x2> @ imm = #-0x2
 805d700: e7fe         	b	0x805d700 <PKA_IRQHandler+0x2> @ imm = #-0x4

0805d702 <LPTIM3_IRQHandler>:
; DEFAULT_IRQ_HANDLER(LPTIM3_IRQHandler)
 805d702: e7ff         	b	0x805d704 <LPTIM3_IRQHandler+0x2> @ imm = #-0x2
 805d704: e7fe         	b	0x805d704 <LPTIM3_IRQHandler+0x2> @ imm = #-0x4

0805d706 <SPI3_IRQHandler>:
; DEFAULT_IRQ_HANDLER(SPI3_IRQHandler)
 805d706: e7ff         	b	0x805d708 <SPI3_IRQHandler+0x2> @ imm = #-0x2
 805d708: e7fe         	b	0x805d708 <SPI3_IRQHandler+0x2> @ imm = #-0x4

0805d70a <I2C4_ER_IRQHandler>:
; DEFAULT_IRQ_HANDLER(I2C4_ER_IRQHandler)
 805d70a: e7ff         	b	0x805d70c <I2C4_ER_IRQHandler+0x2> @ imm = #-0x2
 805d70c: e7fe         	b	0x805d70c <I2C4_ER_IRQHandler+0x2> @ imm = #-0x4

0805d70e <I2C4_EV_IRQHandler>:
; DEFAULT_IRQ_HANDLER(I2C4_EV_IRQHandler)
 805d70e: e7ff         	b	0x805d710 <I2C4_EV_IRQHandler+0x2> @ imm = #-0x2
 805d710: e7fe         	b	0x805d710 <I2C4_EV_IRQHandler+0x2> @ imm = #-0x4

0805d712 <DFSDM1_FLT0_IRQHandler>:
; DEFAULT_IRQ_HANDLER(DFSDM1_FLT0_IRQHandler)
 805d712: e7ff         	b	0x805d714 <DFSDM1_FLT0_IRQHandler+0x2> @ imm = #-0x2
 805d714: e7fe         	b	0x805d714 <DFSDM1_FLT0_IRQHandler+0x2> @ imm = #-0x4

0805d716 <DFSDM1_FLT1_IRQHandler>:
; DEFAULT_IRQ_HANDLER(DFSDM1_FLT1_IRQHandler)
 805d716: e7ff         	b	0x805d718 <DFSDM1_FLT1_IRQHandler+0x2> @ imm = #-0x2
 805d718: e7fe         	b	0x805d718 <DFSDM1_FLT1_IRQHandler+0x2> @ imm = #-0x4

0805d71a <DFSDM1_FLT2_IRQHandler>:
; DEFAULT_IRQ_HANDLER(DFSDM1_FLT2_IRQHandler)
 805d71a: e7ff         	b	0x805d71c <DFSDM1_FLT2_IRQHandler+0x2> @ imm = #-0x2
 805d71c: e7fe         	b	0x805d71c <DFSDM1_FLT2_IRQHandler+0x2> @ imm = #-0x4

0805d71e <DFSDM1_FLT3_IRQHandler>:
; DEFAULT_IRQ_HANDLER(DFSDM1_FLT3_IRQHandler)
 805d71e: e7ff         	b	0x805d720 <DFSDM1_FLT3_IRQHandler+0x2> @ imm = #-0x2
 805d720: e7fe         	b	0x805d720 <DFSDM1_FLT3_IRQHandler+0x2> @ imm = #-0x4

0805d722 <UCPD1_IRQHandler>:
; DEFAULT_IRQ_HANDLER(UCPD1_IRQHandler)
 805d722: e7ff         	b	0x805d724 <UCPD1_IRQHandler+0x2> @ imm = #-0x2
 805d724: e7fe         	b	0x805d724 <UCPD1_IRQHandler+0x2> @ imm = #-0x4

0805d726 <ICACHE_IRQHandler>:
; DEFAULT_IRQ_HANDLER(ICACHE_IRQHandler)
 805d726: e7ff         	b	0x805d728 <ICACHE_IRQHandler+0x2> @ imm = #-0x2
 805d728: e7fe         	b	0x805d728 <ICACHE_IRQHandler+0x2> @ imm = #-0x4

0805d72a <OTFDEC1_IRQHandler>:
; DEFAULT_IRQ_HANDLER(OTFDEC1_IRQHandler)
 805d72a: e7ff         	b	0x805d72c <OTFDEC1_IRQHandler+0x2> @ imm = #-0x2
 805d72c: e7fe         	b	0x805d72c <OTFDEC1_IRQHandler+0x2> @ imm = #-0x4
 805d72e: 0000         	movs	r0, r0

0805d730 <Reset_Handler>:
; void Reset_Handler(void) {
 805d730: b580         	push	{r7, lr}
 805d732: 466f         	mov	r7, sp
 805d734: b088         	sub	sp, #0x20
 805d736: 482f         	ldr	r0, [pc, #0xbc]         @ 0x805d7f4 <Reset_Handler+0xc4>
 805d738: 4478         	add	r0, pc
 805d73a: 6800         	ldr	r0, [r0]
 805d73c: 9005         	str	r0, [sp, #0x14]
;   __ASM volatile("MSR msplim, %0" : : "r"(MainStackPtrLimit));
 805d73e: 9905         	ldr	r1, [sp, #0x14]
 805d740: f381 880a    	msr	msplim, r1
 805d744: 492c         	ldr	r1, [pc, #0xb0]         @ 0x805d7f8 <Reset_Handler+0xc8>
 805d746: 4479         	add	r1, pc
 805d748: 6809         	ldr	r1, [r1]
 805d74a: 9106         	str	r1, [sp, #0x18]
;   __ASM volatile("MSR psp, %0" : : "r"(topOfProcStack) :);
 805d74c: 9906         	ldr	r1, [sp, #0x18]
 805d74e: f381 8809    	msr	psp, r1
 805d752: 9007         	str	r0, [sp, #0x1c]
;   __ASM volatile("MSR psplim, %0" : : "r"(ProcStackPtrLimit));
 805d754: 9807         	ldr	r0, [sp, #0x1c]
 805d756: f380 880b    	msr	psplim, r0
;   SystemInit();      /* CMSIS System Initialization */
 805d75a: f7ff fffe    	bl	0x805d75a <Reset_Handler+0x2a> @ imm = #-0x4
;   for (__copy_table_t const *pTable = &__copy_table_start__;
 805d75e: 4827         	ldr	r0, [pc, #0x9c]         @ 0x805d7fc <Reset_Handler+0xcc>
 805d760: 4478         	add	r0, pc
 805d762: 6800         	ldr	r0, [r0]
 805d764: 9004         	str	r0, [sp, #0x10]
 805d766: e7ff         	b	0x805d768 <Reset_Handler+0x38> @ imm = #-0x2
;        pTable < &__copy_table_end__; ++pTable) {
 805d768: 9804         	ldr	r0, [sp, #0x10]
 805d76a: 4925         	ldr	r1, [pc, #0x94]         @ 0x805d800 <Reset_Handler+0xd0>
 805d76c: 4479         	add	r1, pc
 805d76e: 6809         	ldr	r1, [r1]
;   for (__copy_table_t const *pTable = &__copy_table_start__;
 805d770: 4288         	cmp	r0, r1
 805d772: d219         	bhs	0x805d7a8 <Reset_Handler+0x78> @ imm = #0x32
 805d774: e7ff         	b	0x805d776 <Reset_Handler+0x46> @ imm = #-0x2
 805d776: 2000         	movs	r0, #0x0
;     for (uint32_t i = 0u; i < pTable->wlen; ++i) {
 805d778: 9003         	str	r0, [sp, #0xc]
 805d77a: e7ff         	b	0x805d77c <Reset_Handler+0x4c> @ imm = #-0x2
 805d77c: 9803         	ldr	r0, [sp, #0xc]
 805d77e: 9904         	ldr	r1, [sp, #0x10]
 805d780: 6889         	ldr	r1, [r1, #0x8]
 805d782: 4288         	cmp	r0, r1
 805d784: d20c         	bhs	0x805d7a0 <Reset_Handler+0x70> @ imm = #0x18
 805d786: e7ff         	b	0x805d788 <Reset_Handler+0x58> @ imm = #-0x2
;       pTable->dest[i] = pTable->src[i];
 805d788: 9904         	ldr	r1, [sp, #0x10]
 805d78a: 9a03         	ldr	r2, [sp, #0xc]
 805d78c: 6808         	ldr	r0, [r1]
 805d78e: 6849         	ldr	r1, [r1, #0x4]
 805d790: f850 0022    	ldr.w	r0, [r0, r2, lsl #2]
 805d794: f841 0022    	str.w	r0, [r1, r2, lsl #2]
;     for (uint32_t i = 0u; i < pTable->wlen; ++i) {
 805d798: 9803         	ldr	r0, [sp, #0xc]
 805d79a: 3001         	adds	r0, #0x1
 805d79c: 9003         	str	r0, [sp, #0xc]
 805d79e: e7ed         	b	0x805d77c <Reset_Handler+0x4c> @ imm = #-0x26
;        pTable < &__copy_table_end__; ++pTable) {
 805d7a0: 9804         	ldr	r0, [sp, #0x10]
 805d7a2: 300c         	adds	r0, #0xc
 805d7a4: 9004         	str	r0, [sp, #0x10]
;   for (__copy_table_t const *pTable = &__copy_table_start__;
 805d7a6: e7df         	b	0x805d768 <Reset_Handler+0x38> @ imm = #-0x42
;   for (__zero_table_t const *pTable = &__zero_table_start__;
 805d7a8: 4816         	ldr	r0, [pc, #0x58]         @ 0x805d804 <Reset_Handler+0xd4>
 805d7aa: 4478         	add	r0, pc
 805d7ac: 6800         	ldr	r0, [r0]
 805d7ae: 9002         	str	r0, [sp, #0x8]
 805d7b0: e7ff         	b	0x805d7b2 <Reset_Handler+0x82> @ imm = #-0x2
;        pTable < &__zero_table_end__; ++pTable) {
 805d7b2: 9802         	ldr	r0, [sp, #0x8]
 805d7b4: 4914         	ldr	r1, [pc, #0x50]         @ 0x805d808 <Reset_Handler+0xd8>
 805d7b6: 4479         	add	r1, pc
 805d7b8: 6809         	ldr	r1, [r1]
;   for (__zero_table_t const *pTable = &__zero_table_start__;
 805d7ba: 4288         	cmp	r0, r1
 805d7bc: d217         	bhs	0x805d7ee <Reset_Handler+0xbe> @ imm = #0x2e
 805d7be: e7ff         	b	0x805d7c0 <Reset_Handler+0x90> @ imm = #-0x2
 805d7c0: 2000         	movs	r0, #0x0
;     for (uint32_t i = 0u; i < pTable->wlen; ++i) {
 805d7c2: 9001         	str	r0, [sp, #0x4]
 805d7c4: e7ff         	b	0x805d7c6 <Reset_Handler+0x96> @ imm = #-0x2
 805d7c6: 9801         	ldr	r0, [sp, #0x4]
 805d7c8: 9902         	ldr	r1, [sp, #0x8]
 805d7ca: 6849         	ldr	r1, [r1, #0x4]
 805d7cc: 4288         	cmp	r0, r1
 805d7ce: d20a         	bhs	0x805d7e6 <Reset_Handler+0xb6> @ imm = #0x14
 805d7d0: e7ff         	b	0x805d7d2 <Reset_Handler+0xa2> @ imm = #-0x2
;       pTable->dest[i] = 0u;
 805d7d2: 9802         	ldr	r0, [sp, #0x8]
 805d7d4: 6801         	ldr	r1, [r0]
 805d7d6: 9a01         	ldr	r2, [sp, #0x4]
 805d7d8: 2000         	movs	r0, #0x0
 805d7da: f841 0022    	str.w	r0, [r1, r2, lsl #2]
;     for (uint32_t i = 0u; i < pTable->wlen; ++i) {
 805d7de: 9801         	ldr	r0, [sp, #0x4]
 805d7e0: 3001         	adds	r0, #0x1
 805d7e2: 9001         	str	r0, [sp, #0x4]
 805d7e4: e7ef         	b	0x805d7c6 <Reset_Handler+0x96> @ imm = #-0x22
;        pTable < &__zero_table_end__; ++pTable) {
 805d7e6: 9802         	ldr	r0, [sp, #0x8]
 805d7e8: 3008         	adds	r0, #0x8
 805d7ea: 9002         	str	r0, [sp, #0x8]
;   for (__zero_table_t const *pTable = &__zero_table_start__;
 805d7ec: e7e1         	b	0x805d7b2 <Reset_Handler+0x82> @ imm = #-0x3e
;   main();
 805d7ee: f7ff fffe    	bl	0x805d7ee <Reset_Handler+0xbe> @ imm = #-0x4
 805d7f2: bf00         	nop

0805d7f4 <$d.118>:
 805d7f4: b8 00 00 00  	.word	0x000000b8
 805d7f8: ae 00 00 00  	.word	0x000000ae
 805d7fc: 98 00 00 00  	.word	0x00000098
 805d800: 90 00 00 00  	.word	0x00000090
 805d804: 56 00 00 00  	.word	0x00000056
 805d808: 4e 00 00 00  	.word	0x0000004e

0805d80c <sum>:
; int sum(int a, int b) { return a + b; }
 805d80c: b082         	sub	sp, #0x8
 805d80e: 9001         	str	r0, [sp, #0x4]
 805d810: 9100         	str	r1, [sp]
 805d812: 9801         	ldr	r0, [sp, #0x4]
 805d814: 9900         	ldr	r1, [sp]
 805d816: 4408         	add	r0, r1
 805d818: b002         	add	sp, #0x8
 805d81a: 4770         	bx	lr

0805d81c <testThread2>:
; void testThread2(void *pvParameters) {
 805d81c: b580         	push	{r7, lr}
 805d81e: 466f         	mov	r7, sp
 805d820: b086         	sub	sp, #0x18
 805d822: 9005         	str	r0, [sp, #0x14]
;   initialise_benchmark();
 805d824: f7ff fffe    	bl	0x805d824 <testThread2+0x8> @ imm = #-0x4
;   int result = benchmark();
 805d828: f7ff fffe    	bl	0x805d828 <testThread2+0xc> @ imm = #-0x4
 805d82c: 9004         	str	r0, [sp, #0x10]
;   assert(verify_benchmark(result));
 805d82e: 9804         	ldr	r0, [sp, #0x10]
 805d830: f7ff fffe    	bl	0x805d830 <testThread2+0x14> @ imm = #-0x4
 805d834: b108         	cbz	r0, 0x805d83a <testThread2+0x1e> @ imm = #0x2
 805d836: e7ff         	b	0x805d838 <testThread2+0x1c> @ imm = #-0x2
 805d838: e008         	b	0x805d84c <testThread2+0x30> @ imm = #0x10
 805d83a: 480f         	ldr	r0, [pc, #0x3c]         @ 0x805d878 <testThread2+0x5c>
 805d83c: 4478         	add	r0, pc
 805d83e: 4a0f         	ldr	r2, [pc, #0x3c]         @ 0x805d87c <testThread2+0x60>
 805d840: 447a         	add	r2, pc
 805d842: 4b0f         	ldr	r3, [pc, #0x3c]         @ 0x805d880 <testThread2+0x64>
 805d844: 447b         	add	r3, pc
 805d846: 212c         	movs	r1, #0x2c
 805d848: f7ff fffe    	bl	0x805d848 <testThread2+0x2c> @ imm = #-0x4
;   while (1) {
 805d84c: e7ff         	b	0x805d84e <testThread2+0x32> @ imm = #-0x2
 805d84e: f640 4000    	movw	r0, #0xc00
 805d852: f2c4 2002    	movt	r0, #0x4202
 805d856: 2108         	movs	r1, #0x8
;     HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_3);
 805d858: f7ff fffe    	bl	0x805d858 <testThread2+0x3c> @ imm = #-0x4
 805d85c: 2002         	movs	r0, #0x2
;     int a = 2;
 805d85e: 9003         	str	r0, [sp, #0xc]
 805d860: 2003         	movs	r0, #0x3
;     int b = 3;
 805d862: 9002         	str	r0, [sp, #0x8]
;     int c = sum(a, b);
 805d864: 9803         	ldr	r0, [sp, #0xc]
 805d866: 9902         	ldr	r1, [sp, #0x8]
 805d868: f7ff fffe    	bl	0x805d868 <testThread2+0x4c> @ imm = #-0x4
 805d86c: 9001         	str	r0, [sp, #0x4]
 805d86e: f44f 70fa    	mov.w	r0, #0x1f4
;     vTaskDelay(500);
 805d872: f7ff fffe    	bl	0x805d872 <testThread2+0x56> @ imm = #-0x4
;   while (1) {
 805d876: e7ea         	b	0x805d84e <testThread2+0x32> @ imm = #-0x2c

0805d878 <$d.3>:
 805d878: 38 00 00 00  	.word	0x00000038
 805d87c: 38 00 00 00  	.word	0x00000038
 805d880: 38 00 00 00  	.word	0x00000038

0805d884 <main>:
; int main() {
 805d884: b580         	push	{r7, lr}
 805d886: 466f         	mov	r7, sp
 805d888: b092         	sub	sp, #0x48
 805d88a: 2000         	movs	r0, #0x0
 805d88c: 9001         	str	r0, [sp, #0x4]
 805d88e: 9011         	str	r0, [sp, #0x44]
;   HAL_Init();
 805d890: f7ff fffe    	bl	0x805d890 <main+0xc>    @ imm = #-0x4
;   MX_GPIO_Init();
 805d894: f7ff fffe    	bl	0x805d894 <main+0x10>   @ imm = #-0x4
 805d898: 9901         	ldr	r1, [sp, #0x4]
;   TaskParameters_t taskParams2 = {
 805d89a: 4b0b         	ldr	r3, [pc, #0x2c]         @ 0x805d8c8 <main+0x44>
 805d89c: 447b         	add	r3, pc
 805d89e: a802         	add	r0, sp, #0x8
 805d8a0: 4602         	mov	r2, r0
 805d8a2: e8b3 5070    	ldm.w	r3!, {r4, r5, r6, r12, lr}
 805d8a6: e8a2 5070    	stm.w	r2!, {r4, r5, r6, r12, lr}
 805d8aa: e8b3 5070    	ldm.w	r3!, {r4, r5, r6, r12, lr}
 805d8ae: e8a2 5070    	stm.w	r2!, {r4, r5, r6, r12, lr}
 805d8b2: e893 5070    	ldm.w	r3, {r4, r5, r6, r12, lr}
 805d8b6: e882 5070    	stm.w	r2, {r4, r5, r6, r12, lr}
;   xTaskCreateRestricted(&taskParams2, NULL);
 805d8ba: f7ff fffe    	bl	0x805d8ba <main+0x36>   @ imm = #-0x4
;   vTaskStartScheduler();
 805d8be: f7ff fffe    	bl	0x805d8be <main+0x3a>   @ imm = #-0x4
;   for (;;)
 805d8c2: e7ff         	b	0x805d8c4 <main+0x40>   @ imm = #-0x2
 805d8c4: e7fe         	b	0x805d8c4 <main+0x40>   @ imm = #-0x4
 805d8c6: bf00         	nop

0805d8c8 <$d.5>:
 805d8c8: 28 00 00 00  	.word	0x00000028

0805d8cc <MX_GPIO_Init>:
; static void MX_GPIO_Init(void) {
 805d8cc: b580         	push	{r7, lr}
 805d8ce: 466f         	mov	r7, sp
 805d8d0: b08a         	sub	sp, #0x28
 805d8d2: 2000         	movs	r0, #0x0
;   GPIO_InitTypeDef GPIO_InitStruct = {0};
 805d8d4: 9009         	str	r0, [sp, #0x24]
 805d8d6: 9008         	str	r0, [sp, #0x20]
 805d8d8: 9007         	str	r0, [sp, #0x1c]
 805d8da: 9006         	str	r0, [sp, #0x18]
 805d8dc: 9005         	str	r0, [sp, #0x14]
;   __HAL_RCC_GPIOD_CLK_ENABLE();
 805d8de: e7ff         	b	0x805d8e0 <MX_GPIO_Init+0x14> @ imm = #-0x2
 805d8e0: f241 004c    	movw	r0, #0x104c
 805d8e4: f2c4 0002    	movt	r0, #0x4002
;   __HAL_RCC_GPIOD_CLK_ENABLE();
 805d8e8: 6801         	ldr	r1, [r0]
 805d8ea: f041 0108    	orr	r1, r1, #0x8
 805d8ee: 6001         	str	r1, [r0]
 805d8f0: 6800         	ldr	r0, [r0]
 805d8f2: f000 0008    	and	r0, r0, #0x8
 805d8f6: 9004         	str	r0, [sp, #0x10]
 805d8f8: 9804         	ldr	r0, [sp, #0x10]
 805d8fa: e7ff         	b	0x805d8fc <MX_GPIO_Init+0x30> @ imm = #-0x2
 805d8fc: f640 4000    	movw	r0, #0xc00
 805d900: f2c4 2002    	movt	r0, #0x4202
 805d904: 9003         	str	r0, [sp, #0xc]
 805d906: 2108         	movs	r1, #0x8
 805d908: 9101         	str	r1, [sp, #0x4]
 805d90a: 2201         	movs	r2, #0x1
;   HAL_GPIO_WritePin(LED9_GPIO_Port, LED9_Pin, GPIO_PIN_SET);
 805d90c: 9202         	str	r2, [sp, #0x8]
 805d90e: f7ff fffe    	bl	0x805d90e <MX_GPIO_Init+0x42> @ imm = #-0x4
 805d912: 9a01         	ldr	r2, [sp, #0x4]
 805d914: 9902         	ldr	r1, [sp, #0x8]
 805d916: 9803         	ldr	r0, [sp, #0xc]
;   GPIO_InitStruct.Pin = LED9_Pin;
 805d918: 9205         	str	r2, [sp, #0x14]
;   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 805d91a: 9106         	str	r1, [sp, #0x18]
;   GPIO_InitStruct.Pull = GPIO_PULLUP;
 805d91c: 9107         	str	r1, [sp, #0x1c]
 805d91e: 2103         	movs	r1, #0x3
;   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 805d920: 9108         	str	r1, [sp, #0x20]
 805d922: a905         	add	r1, sp, #0x14
;   HAL_GPIO_Init(LED9_GPIO_Port, &GPIO_InitStruct);
 805d924: f7ff fffe    	bl	0x805d924 <MX_GPIO_Init+0x58> @ imm = #-0x4
; }
 805d928: b00a         	add	sp, #0x28
 805d92a: bd80         	pop	{r7, pc}

0805d92c <enqueue>:
; {
 805d92c: b580         	push	{r7, lr}
 805d92e: 466f         	mov	r7, sp
 805d930: b086         	sub	sp, #0x18
 805d932: 9005         	str	r0, [sp, #0x14]
 805d934: 9104         	str	r1, [sp, #0x10]
 805d936: 9203         	str	r2, [sp, #0xc]
 805d938: 2010         	movs	r0, #0x10
;    QITEM *qNew = (QITEM *) qmalloc_beebs(sizeof(QITEM));
 805d93a: f7ff fffe    	bl	0x805d93a <enqueue+0xe> @ imm = #-0x4
 805d93e: 9002         	str	r0, [sp, #0x8]
;    QITEM *qLast = qHead;
 805d940: 4815         	ldr	r0, [pc, #0x54]         @ 0x805d998 <enqueue+0x6c>
 805d942: 4478         	add	r0, pc
 805d944: 6800         	ldr	r0, [r0]
 805d946: 9001         	str	r0, [sp, #0x4]
;    qNew->iNode = iNode;
 805d948: 9805         	ldr	r0, [sp, #0x14]
 805d94a: 9902         	ldr	r1, [sp, #0x8]
 805d94c: 6008         	str	r0, [r1]
;    qNew->iDist = iDist;
 805d94e: 9804         	ldr	r0, [sp, #0x10]
 805d950: 9902         	ldr	r1, [sp, #0x8]
 805d952: 6048         	str	r0, [r1, #0x4]
;    qNew->iPrev = iPrev;
 805d954: 9803         	ldr	r0, [sp, #0xc]
 805d956: 9902         	ldr	r1, [sp, #0x8]
 805d958: 6088         	str	r0, [r1, #0x8]
;    qNew->qNext = NULL;
 805d95a: 9902         	ldr	r1, [sp, #0x8]
 805d95c: 2000         	movs	r0, #0x0
 805d95e: 60c8         	str	r0, [r1, #0xc]
;    if (!qLast)
 805d960: 9801         	ldr	r0, [sp, #0x4]
 805d962: b928         	cbnz	r0, 0x805d970 <enqueue+0x44> @ imm = #0xa
 805d964: e7ff         	b	0x805d966 <enqueue+0x3a> @ imm = #-0x2
;       qHead = qNew;
 805d966: 9802         	ldr	r0, [sp, #0x8]
 805d968: 490c         	ldr	r1, [pc, #0x30]         @ 0x805d99c <enqueue+0x70>
 805d96a: 4479         	add	r1, pc
 805d96c: 6008         	str	r0, [r1]
;    }
 805d96e: e00c         	b	0x805d98a <enqueue+0x5e> @ imm = #0x18
;       while (qLast->qNext) qLast = qLast->qNext;
 805d970: e7ff         	b	0x805d972 <enqueue+0x46> @ imm = #-0x2
 805d972: 9801         	ldr	r0, [sp, #0x4]
 805d974: 68c0         	ldr	r0, [r0, #0xc]
 805d976: b120         	cbz	r0, 0x805d982 <enqueue+0x56> @ imm = #0x8
 805d978: e7ff         	b	0x805d97a <enqueue+0x4e> @ imm = #-0x2
 805d97a: 9801         	ldr	r0, [sp, #0x4]
 805d97c: 68c0         	ldr	r0, [r0, #0xc]
 805d97e: 9001         	str	r0, [sp, #0x4]
 805d980: e7f7         	b	0x805d972 <enqueue+0x46> @ imm = #-0x12
;       qLast->qNext = qNew;
 805d982: 9802         	ldr	r0, [sp, #0x8]
 805d984: 9901         	ldr	r1, [sp, #0x4]
 805d986: 60c8         	str	r0, [r1, #0xc]
 805d988: e7ff         	b	0x805d98a <enqueue+0x5e> @ imm = #-0x2
;    g_qCount++;
 805d98a: 4905         	ldr	r1, [pc, #0x14]         @ 0x805d9a0 <enqueue+0x74>
 805d98c: 4479         	add	r1, pc
 805d98e: 6808         	ldr	r0, [r1]
 805d990: 3001         	adds	r0, #0x1
 805d992: 6008         	str	r0, [r1]
; }
 805d994: b006         	add	sp, #0x18
 805d996: bd80         	pop	{r7, pc}

0805d998 <$d.1>:
 805d998: 52 00 00 00  	.word	0x00000052
 805d99c: 2e 00 00 00  	.word	0x0000002e
 805d9a0: 10 00 00 00  	.word	0x00000010

0805d9a4 <qmalloc_beebs>:
; {
 805d9a4: b083         	sub	sp, #0xc
 805d9a6: 9001         	str	r0, [sp, #0x4]
;   if ((size != sizeof(QITEM)) || (0 == size))
 805d9a8: 9801         	ldr	r0, [sp, #0x4]
 805d9aa: 2810         	cmp	r0, #0x10
 805d9ac: d103         	bne	0x805d9b6 <qmalloc_beebs+0x12> @ imm = #0x6
 805d9ae: e7ff         	b	0x805d9b0 <qmalloc_beebs+0xc> @ imm = #-0x2
 805d9b0: 9801         	ldr	r0, [sp, #0x4]
 805d9b2: b918         	cbnz	r0, 0x805d9bc <qmalloc_beebs+0x18> @ imm = #0x6
 805d9b4: e7ff         	b	0x805d9b6 <qmalloc_beebs+0x12> @ imm = #-0x2
 805d9b6: 2000         	movs	r0, #0x0
;     return NULL;
 805d9b8: 9002         	str	r0, [sp, #0x8]
 805d9ba: e00f         	b	0x805d9dc <qmalloc_beebs+0x38> @ imm = #0x1e
;   QITEM *new_ptr = qfree_list;
 805d9bc: 4809         	ldr	r0, [pc, #0x24]         @ 0x805d9e4 <qmalloc_beebs+0x40>
 805d9be: 4478         	add	r0, pc
 805d9c0: 6800         	ldr	r0, [r0]
 805d9c2: 9000         	str	r0, [sp]
;   if (new_ptr != NULL)
 805d9c4: 9800         	ldr	r0, [sp]
 805d9c6: b130         	cbz	r0, 0x805d9d6 <qmalloc_beebs+0x32> @ imm = #0xc
 805d9c8: e7ff         	b	0x805d9ca <qmalloc_beebs+0x26> @ imm = #-0x2
;       qfree_list = new_ptr->qNext;
 805d9ca: 9800         	ldr	r0, [sp]
 805d9cc: 68c0         	ldr	r0, [r0, #0xc]
 805d9ce: 4906         	ldr	r1, [pc, #0x18]         @ 0x805d9e8 <qmalloc_beebs+0x44>
 805d9d0: 4479         	add	r1, pc
 805d9d2: 6008         	str	r0, [r1]
;     }
 805d9d4: e7ff         	b	0x805d9d6 <qmalloc_beebs+0x32> @ imm = #-0x2
;   return (void *) new_ptr;
 805d9d6: 9800         	ldr	r0, [sp]
 805d9d8: 9002         	str	r0, [sp, #0x8]
 805d9da: e7ff         	b	0x805d9dc <qmalloc_beebs+0x38> @ imm = #-0x2
; }
 805d9dc: 9802         	ldr	r0, [sp, #0x8]
 805d9de: b003         	add	sp, #0xc
 805d9e0: 4770         	bx	lr
 805d9e2: bf00         	nop

0805d9e4 <$d.3>:
 805d9e4: 22 00 00 00  	.word	0x00000022
 805d9e8: 14 00 00 00  	.word	0x00000014

0805d9ec <dequeue>:
; {
 805d9ec: b085         	sub	sp, #0x14
 805d9ee: 9003         	str	r0, [sp, #0xc]
 805d9f0: 9102         	str	r1, [sp, #0x8]
 805d9f2: 9201         	str	r2, [sp, #0x4]
;    QITEM *qKill = qHead;
 805d9f4: 4812         	ldr	r0, [pc, #0x48]         @ 0x805da40 <dequeue+0x54>
 805d9f6: 4478         	add	r0, pc
 805d9f8: 6801         	ldr	r1, [r0]
 805d9fa: 9100         	str	r1, [sp]
;    if (qHead != 0)
 805d9fc: 6800         	ldr	r0, [r0]
 805d9fe: b1c8         	cbz	r0, 0x805da34 <dequeue+0x48> @ imm = #0x32
 805da00: e7ff         	b	0x805da02 <dequeue+0x16> @ imm = #-0x2
;       *piNode = qHead->iNode;
 805da02: 4910         	ldr	r1, [pc, #0x40]         @ 0x805da44 <dequeue+0x58>
 805da04: 4479         	add	r1, pc
 805da06: 6808         	ldr	r0, [r1]
 805da08: 6800         	ldr	r0, [r0]
 805da0a: 9a03         	ldr	r2, [sp, #0xc]
 805da0c: 6010         	str	r0, [r2]
;       *piDist = qHead->iDist;
 805da0e: 6808         	ldr	r0, [r1]
 805da10: 6840         	ldr	r0, [r0, #0x4]
 805da12: 9a02         	ldr	r2, [sp, #0x8]
 805da14: 6010         	str	r0, [r2]
;       *piPrev = qHead->iPrev;
 805da16: 6808         	ldr	r0, [r1]
 805da18: 6880         	ldr	r0, [r0, #0x8]
 805da1a: 9a01         	ldr	r2, [sp, #0x4]
 805da1c: 6010         	str	r0, [r2]
;       qHead = qHead->qNext;
 805da1e: 6808         	ldr	r0, [r1]
 805da20: 68c0         	ldr	r0, [r0, #0xc]
 805da22: 6008         	str	r0, [r1]
;       g_qCount--;
 805da24: 4908         	ldr	r1, [pc, #0x20]         @ 0x805da48 <dequeue+0x5c>
 805da26: 4479         	add	r1, pc
 805da28: 6808         	ldr	r0, [r1]
 805da2a: 3801         	subs	r0, #0x1
 805da2c: 6008         	str	r0, [r1]
;       return qKill;
 805da2e: 9800         	ldr	r0, [sp]
 805da30: 9004         	str	r0, [sp, #0x10]
 805da32: e002         	b	0x805da3a <dequeue+0x4e> @ imm = #0x4
 805da34: 2000         	movs	r0, #0x0
;    return 0;
 805da36: 9004         	str	r0, [sp, #0x10]
 805da38: e7ff         	b	0x805da3a <dequeue+0x4e> @ imm = #-0x2
; }
 805da3a: 9804         	ldr	r0, [sp, #0x10]
 805da3c: b005         	add	sp, #0x14
 805da3e: 4770         	bx	lr

0805da40 <$d.5>:
 805da40: 46 00 00 00  	.word	0x00000046
 805da44: 3c 00 00 00  	.word	0x0000003c
 805da48: 1e 00 00 00  	.word	0x0000001e

0805da4c <qcount>:
;    return(g_qCount);
 805da4c: 4801         	ldr	r0, [pc, #0x4]          @ 0x805da54 <qcount+0x8>
 805da4e: 4478         	add	r0, pc
 805da50: 6800         	ldr	r0, [r0]
 805da52: 4770         	bx	lr

0805da54 <$d.7>:
 805da54: 02 00 00 00  	.word	0x00000002

0805da58 <dijkstra>:
; {
 805da58: b5d0         	push	{r4, r6, r7, lr}
 805da5a: af02         	add	r7, sp, #0x8
 805da5c: b084         	sub	sp, #0x10
 805da5e: 9002         	str	r0, [sp, #0x8]
 805da60: 9101         	str	r1, [sp, #0x4]
;    for (ch = 0; ch < NUM_NODES; ch++)
 805da62: 4960         	ldr	r1, [pc, #0x180]        @ 0x805dbe4 <dijkstra+0x18c>
 805da64: 4479         	add	r1, pc
 805da66: 2000         	movs	r0, #0x0
 805da68: 6008         	str	r0, [r1]
 805da6a: e7ff         	b	0x805da6c <dijkstra+0x14> @ imm = #-0x2
 805da6c: 485e         	ldr	r0, [pc, #0x178]        @ 0x805dbe8 <dijkstra+0x190>
 805da6e: 4478         	add	r0, pc
 805da70: 6800         	ldr	r0, [r0]
 805da72: 2809         	cmp	r0, #0x9
 805da74: dc14         	bgt	0x805daa0 <dijkstra+0x48> @ imm = #0x28
 805da76: e7ff         	b	0x805da78 <dijkstra+0x20> @ imm = #-0x2
;       rgnNodes[ch].iDist = NONE;
 805da78: 4a5c         	ldr	r2, [pc, #0x170]        @ 0x805dbec <dijkstra+0x194>
 805da7a: 447a         	add	r2, pc
 805da7c: 6813         	ldr	r3, [r2]
 805da7e: 495c         	ldr	r1, [pc, #0x170]        @ 0x805dbf0 <dijkstra+0x198>
 805da80: 4479         	add	r1, pc
 805da82: f242 700f    	movw	r0, #0x270f
 805da86: f841 0033    	str.w	r0, [r1, r3, lsl #3]
;       rgnNodes[ch].iPrev = NONE;
 805da8a: 6812         	ldr	r2, [r2]
 805da8c: eb01 01c2    	add.w	r1, r1, r2, lsl #3
 805da90: 6048         	str	r0, [r1, #0x4]
;    }
 805da92: e7ff         	b	0x805da94 <dijkstra+0x3c> @ imm = #-0x2
;    for (ch = 0; ch < NUM_NODES; ch++)
 805da94: 4957         	ldr	r1, [pc, #0x15c]        @ 0x805dbf4 <dijkstra+0x19c>
 805da96: 4479         	add	r1, pc
 805da98: 6808         	ldr	r0, [r1]
 805da9a: 3001         	adds	r0, #0x1
 805da9c: 6008         	str	r0, [r1]
 805da9e: e7e5         	b	0x805da6c <dijkstra+0x14> @ imm = #-0x36
;    if (chStart == chEnd)
 805daa0: 9802         	ldr	r0, [sp, #0x8]
 805daa2: 9901         	ldr	r1, [sp, #0x4]
 805daa4: 4288         	cmp	r0, r1
 805daa6: d103         	bne	0x805dab0 <dijkstra+0x58> @ imm = #0x6
 805daa8: e7ff         	b	0x805daaa <dijkstra+0x52> @ imm = #-0x2
 805daaa: 2000         	movs	r0, #0x0
;       return 0;
 805daac: 9003         	str	r0, [sp, #0xc]
 805daae: e095         	b	0x805dbdc <dijkstra+0x184> @ imm = #0x12a
;       rgnNodes[chStart].iDist = 0;
 805dab0: 9a02         	ldr	r2, [sp, #0x8]
 805dab2: 4851         	ldr	r0, [pc, #0x144]        @ 0x805dbf8 <dijkstra+0x1a0>
 805dab4: 4478         	add	r0, pc
 805dab6: 2100         	movs	r1, #0x0
 805dab8: f840 1032    	str.w	r1, [r0, r2, lsl #3]
;       rgnNodes[chStart].iPrev = NONE;
 805dabc: 9a02         	ldr	r2, [sp, #0x8]
 805dabe: eb00 00c2    	add.w	r0, r0, r2, lsl #3
 805dac2: f242 720f    	movw	r2, #0x270f
 805dac6: 6042         	str	r2, [r0, #0x4]
;       enqueue (chStart, 0, NONE);
 805dac8: 9802         	ldr	r0, [sp, #0x8]
 805daca: f7ff fffe    	bl	0x805daca <dijkstra+0x72> @ imm = #-0x4
;       while (qcount() > 0)
 805dace: e7ff         	b	0x805dad0 <dijkstra+0x78> @ imm = #-0x2
 805dad0: f7ff fffe    	bl	0x805dad0 <dijkstra+0x78> @ imm = #-0x4
 805dad4: 2801         	cmp	r0, #0x1
 805dad6: db79         	blt	0x805dbcc <dijkstra+0x174> @ imm = #0xf2
 805dad8: e7ff         	b	0x805dada <dijkstra+0x82> @ imm = #-0x2
;          QITEM *tmp = dequeue (&iNode, &iDist, &iPrev);
 805dada: 4848         	ldr	r0, [pc, #0x120]        @ 0x805dbfc <dijkstra+0x1a4>
 805dadc: 4478         	add	r0, pc
 805dade: 4948         	ldr	r1, [pc, #0x120]        @ 0x805dc00 <dijkstra+0x1a8>
 805dae0: 4479         	add	r1, pc
 805dae2: 4a48         	ldr	r2, [pc, #0x120]        @ 0x805dc04 <dijkstra+0x1ac>
 805dae4: 447a         	add	r2, pc
 805dae6: f7ff fffe    	bl	0x805dae6 <dijkstra+0x8e> @ imm = #-0x4
 805daea: 9000         	str	r0, [sp]
;          if(tmp != 0)
 805daec: 9800         	ldr	r0, [sp]
 805daee: b120         	cbz	r0, 0x805dafa <dijkstra+0xa2> @ imm = #0x8
 805daf0: e7ff         	b	0x805daf2 <dijkstra+0x9a> @ imm = #-0x2
;             qfree_beebs(tmp);
 805daf2: 9800         	ldr	r0, [sp]
 805daf4: f7ff fffe    	bl	0x805daf4 <dijkstra+0x9c> @ imm = #-0x4
 805daf8: e7ff         	b	0x805dafa <dijkstra+0xa2> @ imm = #-0x2
;          for (i = 0; i < NUM_NODES; i++)
 805dafa: 4943         	ldr	r1, [pc, #0x10c]        @ 0x805dc08 <dijkstra+0x1b0>
 805dafc: 4479         	add	r1, pc
 805dafe: 2000         	movs	r0, #0x0
 805db00: 6008         	str	r0, [r1]
 805db02: e7ff         	b	0x805db04 <dijkstra+0xac> @ imm = #-0x2
 805db04: 4841         	ldr	r0, [pc, #0x104]        @ 0x805dc0c <dijkstra+0x1b4>
 805db06: 4478         	add	r0, pc
 805db08: 6800         	ldr	r0, [r0]
 805db0a: 2809         	cmp	r0, #0x9
 805db0c: dc5d         	bgt	0x805dbca <dijkstra+0x172> @ imm = #0xba
 805db0e: e7ff         	b	0x805db10 <dijkstra+0xb8> @ imm = #-0x2
;             iCost = AdjMatrix[iNode][i];
 805db10: 483f         	ldr	r0, [pc, #0xfc]         @ 0x805dc10 <dijkstra+0x1b8>
 805db12: 4478         	add	r0, pc
 805db14: 6800         	ldr	r0, [r0]
 805db16: eb00 0180    	add.w	r1, r0, r0, lsl #2
 805db1a: 483e         	ldr	r0, [pc, #0xf8]         @ 0x805dc14 <dijkstra+0x1bc>
 805db1c: 4478         	add	r0, pc
 805db1e: eb00 00c1    	add.w	r0, r0, r1, lsl #3
 805db22: 493d         	ldr	r1, [pc, #0xf4]         @ 0x805dc18 <dijkstra+0x1c0>
 805db24: 4479         	add	r1, pc
 805db26: 6809         	ldr	r1, [r1]
 805db28: f850 1021    	ldr.w	r1, [r0, r1, lsl #2]
 805db2c: 483b         	ldr	r0, [pc, #0xec]         @ 0x805dc1c <dijkstra+0x1c4>
 805db2e: 4478         	add	r0, pc
 805db30: 6001         	str	r1, [r0]
;             if (iCost != NONE)
 805db32: 6800         	ldr	r0, [r0]
 805db34: f242 710f    	movw	r1, #0x270f
 805db38: 4288         	cmp	r0, r1
 805db3a: d03f         	beq	0x805dbbc <dijkstra+0x164> @ imm = #0x7e
 805db3c: e7ff         	b	0x805db3e <dijkstra+0xe6> @ imm = #-0x2
;                if ((NONE == rgnNodes[i].iDist) ||
 805db3e: 4838         	ldr	r0, [pc, #0xe0]         @ 0x805dc20 <dijkstra+0x1c8>
 805db40: 4478         	add	r0, pc
 805db42: 6801         	ldr	r1, [r0]
 805db44: 4837         	ldr	r0, [pc, #0xdc]         @ 0x805dc24 <dijkstra+0x1cc>
 805db46: 4478         	add	r0, pc
 805db48: f850 0031    	ldr.w	r0, [r0, r1, lsl #3]
 805db4c: f242 710f    	movw	r1, #0x270f
 805db50: 4288         	cmp	r0, r1
 805db52: d011         	beq	0x805db78 <dijkstra+0x120> @ imm = #0x22
 805db54: e7ff         	b	0x805db56 <dijkstra+0xfe> @ imm = #-0x2
;                      (rgnNodes[i].iDist > (iCost + iDist)))
 805db56: 4834         	ldr	r0, [pc, #0xd0]         @ 0x805dc28 <dijkstra+0x1d0>
 805db58: 4478         	add	r0, pc
 805db5a: 6801         	ldr	r1, [r0]
 805db5c: 4833         	ldr	r0, [pc, #0xcc]         @ 0x805dc2c <dijkstra+0x1d4>
 805db5e: 4478         	add	r0, pc
 805db60: f850 0031    	ldr.w	r0, [r0, r1, lsl #3]
 805db64: 4932         	ldr	r1, [pc, #0xc8]         @ 0x805dc30 <dijkstra+0x1d8>
 805db66: 4479         	add	r1, pc
 805db68: 6809         	ldr	r1, [r1]
 805db6a: 4a32         	ldr	r2, [pc, #0xc8]         @ 0x805dc34 <dijkstra+0x1dc>
 805db6c: 447a         	add	r2, pc
 805db6e: 6812         	ldr	r2, [r2]
 805db70: 4411         	add	r1, r2
;                if ((NONE == rgnNodes[i].iDist) ||
 805db72: 4288         	cmp	r0, r1
 805db74: dd21         	ble	0x805dbba <dijkstra+0x162> @ imm = #0x42
 805db76: e7ff         	b	0x805db78 <dijkstra+0x120> @ imm = #-0x2
;                   rgnNodes[i].iDist = iDist + iCost;
 805db78: 492f         	ldr	r1, [pc, #0xbc]         @ 0x805dc38 <dijkstra+0x1e0>
 805db7a: 4479         	add	r1, pc
 805db7c: 6808         	ldr	r0, [r1]
 805db7e: 4b2f         	ldr	r3, [pc, #0xbc]         @ 0x805dc3c <dijkstra+0x1e4>
 805db80: 447b         	add	r3, pc
 805db82: 681a         	ldr	r2, [r3]
 805db84: 4402         	add	r2, r0
 805db86: 482e         	ldr	r0, [pc, #0xb8]         @ 0x805dc40 <dijkstra+0x1e8>
 805db88: 4478         	add	r0, pc
 805db8a: f8d0 c000    	ldr.w	r12, [r0]
 805db8e: 4c2d         	ldr	r4, [pc, #0xb4]         @ 0x805dc44 <dijkstra+0x1ec>
 805db90: 447c         	add	r4, pc
 805db92: f844 203c    	str.w	r2, [r4, r12, lsl #3]
;                   rgnNodes[i].iPrev = iNode;
 805db96: 4a2c         	ldr	r2, [pc, #0xb0]         @ 0x805dc48 <dijkstra+0x1f0>
 805db98: 447a         	add	r2, pc
 805db9a: f8d2 c000    	ldr.w	r12, [r2]
 805db9e: f8d0 e000    	ldr.w	lr, [r0]
 805dba2: eb04 0ece    	add.w	lr, r4, lr, lsl #3
 805dba6: f8ce c004    	str.w	r12, [lr, #0x4]
;                   enqueue (i, iDist + iCost, iNode);
 805dbaa: 6800         	ldr	r0, [r0]
 805dbac: 6809         	ldr	r1, [r1]
 805dbae: 681b         	ldr	r3, [r3]
 805dbb0: 4419         	add	r1, r3
 805dbb2: 6812         	ldr	r2, [r2]
 805dbb4: f7ff fffe    	bl	0x805dbb4 <dijkstra+0x15c> @ imm = #-0x4
;                }
 805dbb8: e7ff         	b	0x805dbba <dijkstra+0x162> @ imm = #-0x2
;             }
 805dbba: e7ff         	b	0x805dbbc <dijkstra+0x164> @ imm = #-0x2
;          }
 805dbbc: e7ff         	b	0x805dbbe <dijkstra+0x166> @ imm = #-0x2
;          for (i = 0; i < NUM_NODES; i++)
 805dbbe: 4923         	ldr	r1, [pc, #0x8c]         @ 0x805dc4c <dijkstra+0x1f4>
 805dbc0: 4479         	add	r1, pc
 805dbc2: 6808         	ldr	r0, [r1]
 805dbc4: 3001         	adds	r0, #0x1
 805dbc6: 6008         	str	r0, [r1]
 805dbc8: e79c         	b	0x805db04 <dijkstra+0xac> @ imm = #-0xc8
;       while (qcount() > 0)
 805dbca: e781         	b	0x805dad0 <dijkstra+0x78> @ imm = #-0xfe
 805dbcc: e7ff         	b	0x805dbce <dijkstra+0x176> @ imm = #-0x2
;    return rgnNodes[chEnd].iDist;
 805dbce: 9901         	ldr	r1, [sp, #0x4]
 805dbd0: 481f         	ldr	r0, [pc, #0x7c]         @ 0x805dc50 <dijkstra+0x1f8>
 805dbd2: 4478         	add	r0, pc
 805dbd4: f850 0031    	ldr.w	r0, [r0, r1, lsl #3]
 805dbd8: 9003         	str	r0, [sp, #0xc]
 805dbda: e7ff         	b	0x805dbdc <dijkstra+0x184> @ imm = #-0x2
; }
 805dbdc: 9803         	ldr	r0, [sp, #0xc]
 805dbde: b004         	add	sp, #0x10
 805dbe0: bdd0         	pop	{r4, r6, r7, pc}
 805dbe2: bf00         	nop

0805dbe4 <$d.9>:
 805dbe4: 7c 01 00 00  	.word	0x0000017c
 805dbe8: 76 01 00 00  	.word	0x00000176
 805dbec: 6e 01 00 00  	.word	0x0000016e
 805dbf0: 6c 01 00 00  	.word	0x0000016c
 805dbf4: 5a 01 00 00  	.word	0x0000015a
 805dbf8: 40 01 00 00  	.word	0x00000140
 805dbfc: 1c 01 00 00  	.word	0x0000011c
 805dc00: 1c 01 00 00  	.word	0x0000011c
 805dc04: 1c 01 00 00  	.word	0x0000011c
 805dc08: 08 01 00 00  	.word	0x00000108
 805dc0c: 02 01 00 00  	.word	0x00000102
 805dc10: fa 00 00 00  	.word	0x000000fa
 805dc14: f4 00 00 00  	.word	0x000000f4
 805dc18: f0 00 00 00  	.word	0x000000f0
 805dc1c: ea 00 00 00  	.word	0x000000ea
 805dc20: dc 00 00 00  	.word	0x000000dc
 805dc24: da 00 00 00  	.word	0x000000da
 805dc28: cc 00 00 00  	.word	0x000000cc
 805dc2c: ca 00 00 00  	.word	0x000000ca
 805dc30: c6 00 00 00  	.word	0x000000c6
 805dc34: c4 00 00 00  	.word	0x000000c4
 805dc38: ba 00 00 00  	.word	0x000000ba
 805dc3c: b8 00 00 00  	.word	0x000000b8
 805dc40: b4 00 00 00  	.word	0x000000b4
 805dc44: b0 00 00 00  	.word	0x000000b0
 805dc48: ac 00 00 00  	.word	0x000000ac
 805dc4c: 88 00 00 00  	.word	0x00000088
 805dc50: 7a 00 00 00  	.word	0x0000007a

0805dc54 <qfree_beebs>:
; {
 805dc54: b082         	sub	sp, #0x8
 805dc56: 9001         	str	r0, [sp, #0x4]
;   QITEM *qptr = (QITEM *) ptr;
 805dc58: 9801         	ldr	r0, [sp, #0x4]
 805dc5a: 9000         	str	r0, [sp]
;   qptr->qNext = qfree_list;
 805dc5c: 4904         	ldr	r1, [pc, #0x10]         @ 0x805dc70 <qfree_beebs+0x1c>
 805dc5e: 4479         	add	r1, pc
 805dc60: 6808         	ldr	r0, [r1]
 805dc62: 9a00         	ldr	r2, [sp]
 805dc64: 60d0         	str	r0, [r2, #0xc]
;   qfree_list = qptr;
 805dc66: 9800         	ldr	r0, [sp]
 805dc68: 6008         	str	r0, [r1]
; }
 805dc6a: b002         	add	sp, #0x8
 805dc6c: 4770         	bx	lr
 805dc6e: bf00         	nop

0805dc70 <$d.11>:
 805dc70: 0e 00 00 00  	.word	0x0000000e

0805dc74 <initialise_benchmark>:
; {
 805dc74: b580         	push	{r7, lr}
 805dc76: 466f         	mov	r7, sp
;   qinit_heap ();		/* Set up the BEEBS QITEM heap */
 805dc78: f7ff fffe    	bl	0x805dc78 <initialise_benchmark+0x4> @ imm = #-0x4
; }
 805dc7c: bd80         	pop	{r7, pc}
 805dc7e: 0000         	movs	r0, r0

0805dc80 <qinit_heap>:
; {
 805dc80: b081         	sub	sp, #0x4
;   qfree_list = NULL;
 805dc82: 4910         	ldr	r1, [pc, #0x40]         @ 0x805dcc4 <qinit_heap+0x44>
 805dc84: 4479         	add	r1, pc
 805dc86: 2000         	movs	r0, #0x0
 805dc88: 6008         	str	r0, [r1]
;   for (i = 0; i < QHEAP_SIZE; i++)
 805dc8a: 9000         	str	r0, [sp]
 805dc8c: e7ff         	b	0x805dc8e <qinit_heap+0xe> @ imm = #-0x2
 805dc8e: 9900         	ldr	r1, [sp]
 805dc90: 2000         	movs	r0, #0x0
 805dc92: ebb0 2f51    	cmp.w	r0, r1, lsr #9
 805dc96: d112         	bne	0x805dcbe <qinit_heap+0x3e> @ imm = #0x24
 805dc98: e7ff         	b	0x805dc9a <qinit_heap+0x1a> @ imm = #-0x2
;       qheap[i].qNext = qfree_list;
 805dc9a: 490b         	ldr	r1, [pc, #0x2c]         @ 0x805dcc8 <qinit_heap+0x48>
 805dc9c: 4479         	add	r1, pc
 805dc9e: 680a         	ldr	r2, [r1]
 805dca0: 9b00         	ldr	r3, [sp]
 805dca2: 480a         	ldr	r0, [pc, #0x28]         @ 0x805dccc <qinit_heap+0x4c>
 805dca4: 4478         	add	r0, pc
 805dca6: eb00 1303    	add.w	r3, r0, r3, lsl #4
 805dcaa: 60da         	str	r2, [r3, #0xc]
;       qfree_list = &(qheap[i]);
 805dcac: 9a00         	ldr	r2, [sp]
 805dcae: eb00 1002    	add.w	r0, r0, r2, lsl #4
 805dcb2: 6008         	str	r0, [r1]
;     }
 805dcb4: e7ff         	b	0x805dcb6 <qinit_heap+0x36> @ imm = #-0x2
;   for (i = 0; i < QHEAP_SIZE; i++)
 805dcb6: 9800         	ldr	r0, [sp]
 805dcb8: 3001         	adds	r0, #0x1
 805dcba: 9000         	str	r0, [sp]
 805dcbc: e7e7         	b	0x805dc8e <qinit_heap+0xe> @ imm = #-0x32
; }
 805dcbe: b001         	add	sp, #0x4
 805dcc0: 4770         	bx	lr
 805dcc2: bf00         	nop

0805dcc4 <$d.14>:
 805dcc4: 3c 00 00 00  	.word	0x0000003c
 805dcc8: 28 00 00 00  	.word	0x00000028
 805dccc: 24 00 00 00  	.word	0x00000024

0805dcd0 <benchmark>:
; int benchmark() {
 805dcd0: b580         	push	{r7, lr}
 805dcd2: 466f         	mov	r7, sp
 805dcd4: b082         	sub	sp, #0x8
;    output_count = 0;
 805dcd6: 4916         	ldr	r1, [pc, #0x58]         @ 0x805dd30 <benchmark+0x60>
 805dcd8: 4479         	add	r1, pc
 805dcda: 2000         	movs	r0, #0x0
 805dcdc: 6008         	str	r0, [r1]
;    for(j = 0; j < NUM_NODES; j++) {
 805dcde: 9000         	str	r0, [sp]
 805dce0: e7ff         	b	0x805dce2 <benchmark+0x12> @ imm = #-0x2
 805dce2: 9800         	ldr	r0, [sp]
 805dce4: 2809         	cmp	r0, #0x9
 805dce6: dc1f         	bgt	0x805dd28 <benchmark+0x58> @ imm = #0x3e
 805dce8: e7ff         	b	0x805dcea <benchmark+0x1a> @ imm = #-0x2
 805dcea: 2000         	movs	r0, #0x0
;       for (i=0; i < NUM_NODES; i++) {
 805dcec: 9001         	str	r0, [sp, #0x4]
 805dcee: e7ff         	b	0x805dcf0 <benchmark+0x20> @ imm = #-0x2
 805dcf0: 9801         	ldr	r0, [sp, #0x4]
 805dcf2: 2809         	cmp	r0, #0x9
 805dcf4: dc13         	bgt	0x805dd1e <benchmark+0x4e> @ imm = #0x26
 805dcf6: e7ff         	b	0x805dcf8 <benchmark+0x28> @ imm = #-0x2
;          output[output_count] = dijkstra(i,j);
 805dcf8: 9801         	ldr	r0, [sp, #0x4]
 805dcfa: 9900         	ldr	r1, [sp]
 805dcfc: f7ff fffe    	bl	0x805dcfc <benchmark+0x2c> @ imm = #-0x4
 805dd00: 490c         	ldr	r1, [pc, #0x30]         @ 0x805dd34 <benchmark+0x64>
 805dd02: 4479         	add	r1, pc
 805dd04: 680b         	ldr	r3, [r1]
 805dd06: 4a0c         	ldr	r2, [pc, #0x30]         @ 0x805dd38 <benchmark+0x68>
 805dd08: 447a         	add	r2, pc
 805dd0a: f842 0023    	str.w	r0, [r2, r3, lsl #2]
;          output_count++;
 805dd0e: 6808         	ldr	r0, [r1]
 805dd10: 3001         	adds	r0, #0x1
 805dd12: 6008         	str	r0, [r1]
;       }
 805dd14: e7ff         	b	0x805dd16 <benchmark+0x46> @ imm = #-0x2
;       for (i=0; i < NUM_NODES; i++) {
 805dd16: 9801         	ldr	r0, [sp, #0x4]
 805dd18: 3001         	adds	r0, #0x1
 805dd1a: 9001         	str	r0, [sp, #0x4]
 805dd1c: e7e8         	b	0x805dcf0 <benchmark+0x20> @ imm = #-0x30
;    }
 805dd1e: e7ff         	b	0x805dd20 <benchmark+0x50> @ imm = #-0x2
;    for(j = 0; j < NUM_NODES; j++) {
 805dd20: 9800         	ldr	r0, [sp]
 805dd22: 3001         	adds	r0, #0x1
 805dd24: 9000         	str	r0, [sp]
 805dd26: e7dc         	b	0x805dce2 <benchmark+0x12> @ imm = #-0x48
 805dd28: 2000         	movs	r0, #0x0
;    return 0;
 805dd2a: b002         	add	sp, #0x8
 805dd2c: bd80         	pop	{r7, pc}
 805dd2e: bf00         	nop

0805dd30 <$d.16>:
 805dd30: 54 00 00 00  	.word	0x00000054
 805dd34: 2e 00 00 00  	.word	0x0000002e
 805dd38: 2c 00 00 00  	.word	0x0000002c

0805dd3c <verify_benchmark>:
; int verify_benchmark(int unused) {
 805dd3c: b580         	push	{r7, lr}
 805dd3e: 466f         	mov	r7, sp
 805dd40: b0e8         	sub	sp, #0x1a0
 805dd42: 9066         	str	r0, [sp, #0x198]
;    int expected[] = {0, 7, 38, 23, 14, 36, 3, 29, 7, 14, 28, 0, 31, 16, 7, 34,
 805dd44: 4913         	ldr	r1, [pc, #0x4c]         @ 0x805dd94 <verify_benchmark+0x58>
 805dd46: 4479         	add	r1, pc
 805dd48: a802         	add	r0, sp, #0x8
 805dd4a: f44f 72c8    	mov.w	r2, #0x190
 805dd4e: f7ff fffe    	bl	0x805dd4e <verify_benchmark+0x12> @ imm = #-0x4
 805dd52: 2000         	movs	r0, #0x0
;    for (i=0; i<NUM_NODES*NUM_NODES; i++) {
 805dd54: 9001         	str	r0, [sp, #0x4]
 805dd56: e7ff         	b	0x805dd58 <verify_benchmark+0x1c> @ imm = #-0x2
 805dd58: 9801         	ldr	r0, [sp, #0x4]
 805dd5a: 2863         	cmp	r0, #0x63
 805dd5c: dc13         	bgt	0x805dd86 <verify_benchmark+0x4a> @ imm = #0x26
 805dd5e: e7ff         	b	0x805dd60 <verify_benchmark+0x24> @ imm = #-0x2
;       if (output[i] != expected[i]) {
 805dd60: 9a01         	ldr	r2, [sp, #0x4]
 805dd62: 480d         	ldr	r0, [pc, #0x34]         @ 0x805dd98 <verify_benchmark+0x5c>
 805dd64: 4478         	add	r0, pc
 805dd66: f850 0022    	ldr.w	r0, [r0, r2, lsl #2]
 805dd6a: a902         	add	r1, sp, #0x8
 805dd6c: f851 1022    	ldr.w	r1, [r1, r2, lsl #2]
 805dd70: 4288         	cmp	r0, r1
 805dd72: d003         	beq	0x805dd7c <verify_benchmark+0x40> @ imm = #0x6
 805dd74: e7ff         	b	0x805dd76 <verify_benchmark+0x3a> @ imm = #-0x2
 805dd76: 2000         	movs	r0, #0x0
;          return 0;
 805dd78: 9067         	str	r0, [sp, #0x19c]
 805dd7a: e007         	b	0x805dd8c <verify_benchmark+0x50> @ imm = #0xe
;    }
 805dd7c: e7ff         	b	0x805dd7e <verify_benchmark+0x42> @ imm = #-0x2
;    for (i=0; i<NUM_NODES*NUM_NODES; i++) {
 805dd7e: 9801         	ldr	r0, [sp, #0x4]
 805dd80: 3001         	adds	r0, #0x1
 805dd82: 9001         	str	r0, [sp, #0x4]
 805dd84: e7e8         	b	0x805dd58 <verify_benchmark+0x1c> @ imm = #-0x30
 805dd86: 2001         	movs	r0, #0x1
;    return 1;
 805dd88: 9067         	str	r0, [sp, #0x19c]
 805dd8a: e7ff         	b	0x805dd8c <verify_benchmark+0x50> @ imm = #-0x2
; }
 805dd8c: 9867         	ldr	r0, [sp, #0x19c]
 805dd8e: b068         	add	sp, #0x1a0
 805dd90: bd80         	pop	{r7, pc}
 805dd92: bf00         	nop

0805dd94 <$d.18>:
 805dd94: 4a 00 00 00  	.word	0x0000004a
 805dd98: 30 00 00 00  	.word	0x00000030

0805dd9c <prvCreateIdleTasks>:
; {
 805dd9c: b580         	push	{r7, lr}
 805dd9e: 466f         	mov	r7, sp
 805dda0: b08a         	sub	sp, #0x28
 805dda2: 2001         	movs	r0, #0x1
;     BaseType_t xReturn = pdPASS;
 805dda4: 9009         	str	r0, [sp, #0x24]
 805dda6: 2000         	movs	r0, #0x0
;     TaskFunction_t pxIdleTaskFunction = NULL;
 805dda8: 9003         	str	r0, [sp, #0xc]
;     for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 805ddaa: 9002         	str	r0, [sp, #0x8]
 805ddac: e7ff         	b	0x805ddae <prvCreateIdleTasks+0x12> @ imm = #-0x2
 805ddae: 9802         	ldr	r0, [sp, #0x8]
 805ddb0: 280f         	cmp	r0, #0xf
 805ddb2: dc13         	bgt	0x805dddc <prvCreateIdleTasks+0x40> @ imm = #0x26
 805ddb4: e7ff         	b	0x805ddb6 <prvCreateIdleTasks+0x1a> @ imm = #-0x2
;         cIdleName[ xIdleTaskNameIndex ] = configIDLE_TASK_NAME[ xIdleTaskNameIndex ];
 805ddb6: 9a02         	ldr	r2, [sp, #0x8]
 805ddb8: f240 0000    	movw	r0, #0x0
 805ddbc: f2c0 0000    	movt	r0, #0x0
 805ddc0: 5c81         	ldrb	r1, [r0, r2]
 805ddc2: a804         	add	r0, sp, #0x10
 805ddc4: 5481         	strb	r1, [r0, r2]
;         if( cIdleName[ xIdleTaskNameIndex ] == ( char ) 0x00 )
 805ddc6: 9902         	ldr	r1, [sp, #0x8]
 805ddc8: 5c40         	ldrb	r0, [r0, r1]
 805ddca: b908         	cbnz	r0, 0x805ddd0 <prvCreateIdleTasks+0x34> @ imm = #0x2
 805ddcc: e7ff         	b	0x805ddce <prvCreateIdleTasks+0x32> @ imm = #-0x2
;             break;
 805ddce: e005         	b	0x805dddc <prvCreateIdleTasks+0x40> @ imm = #0xa
 805ddd0: e7ff         	b	0x805ddd2 <prvCreateIdleTasks+0x36> @ imm = #-0x2
;     }
 805ddd2: e7ff         	b	0x805ddd4 <prvCreateIdleTasks+0x38> @ imm = #-0x2
;     for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 805ddd4: 9802         	ldr	r0, [sp, #0x8]
 805ddd6: 3001         	adds	r0, #0x1
 805ddd8: 9002         	str	r0, [sp, #0x8]
 805ddda: e7e8         	b	0x805ddae <prvCreateIdleTasks+0x12> @ imm = #-0x30
 805dddc: 2000         	movs	r0, #0x0
;     for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 805ddde: 9008         	str	r0, [sp, #0x20]
 805dde0: e7ff         	b	0x805dde2 <prvCreateIdleTasks+0x46> @ imm = #-0x2
 805dde2: 9808         	ldr	r0, [sp, #0x20]
 805dde4: 2800         	cmp	r0, #0x0
 805dde6: dc23         	bgt	0x805de30 <prvCreateIdleTasks+0x94> @ imm = #0x46
 805dde8: e7ff         	b	0x805ddea <prvCreateIdleTasks+0x4e> @ imm = #-0x2
;             pxIdleTaskFunction = prvIdleTask;
 805ddea: f240 0000    	movw	r0, #0x0
 805ddee: f2c0 0000    	movt	r0, #0x0
 805ddf2: 9003         	str	r0, [sp, #0xc]
;             xReturn = xTaskCreate( pxIdleTaskFunction,
 805ddf4: 9803         	ldr	r0, [sp, #0xc]
;                                    &xIdleTaskHandles[ xCoreID ] ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
 805ddf6: 9a08         	ldr	r2, [sp, #0x20]
 805ddf8: f240 0100    	movw	r1, #0x0
 805ddfc: f2c0 0100    	movt	r1, #0x0
 805de00: eb01 0182    	add.w	r1, r1, r2, lsl #2
;             xReturn = xTaskCreate( pxIdleTaskFunction,
 805de04: 466a         	mov	r2, sp
 805de06: 6051         	str	r1, [r2, #0x4]
 805de08: f04f 4100    	mov.w	r1, #0x80000000
 805de0c: 6011         	str	r1, [r2]
 805de0e: a904         	add	r1, sp, #0x10
 805de10: f44f 6280    	mov.w	r2, #0x400
 805de14: 2300         	movs	r3, #0x0
 805de16: f7ff fffe    	bl	0x805de16 <prvCreateIdleTasks+0x7a> @ imm = #-0x4
 805de1a: 9009         	str	r0, [sp, #0x24]
;         if( xReturn == pdFAIL )
 805de1c: 9809         	ldr	r0, [sp, #0x24]
 805de1e: b908         	cbnz	r0, 0x805de24 <prvCreateIdleTasks+0x88> @ imm = #0x2
 805de20: e7ff         	b	0x805de22 <prvCreateIdleTasks+0x86> @ imm = #-0x2
;             break;
 805de22: e005         	b	0x805de30 <prvCreateIdleTasks+0x94> @ imm = #0xa
 805de24: e7ff         	b	0x805de26 <prvCreateIdleTasks+0x8a> @ imm = #-0x2
;     }
 805de26: e7ff         	b	0x805de28 <prvCreateIdleTasks+0x8c> @ imm = #-0x2
;     for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 805de28: 9808         	ldr	r0, [sp, #0x20]
 805de2a: 3001         	adds	r0, #0x1
 805de2c: 9008         	str	r0, [sp, #0x20]
 805de2e: e7d8         	b	0x805dde2 <prvCreateIdleTasks+0x46> @ imm = #-0x50
;     return xReturn;
 805de30: 9809         	ldr	r0, [sp, #0x24]
 805de32: b00a         	add	sp, #0x28
 805de34: bd80         	pop	{r7, pc}

0805de36 <prvTaskExitError>:
; {
 805de36: b580         	push	{r7, lr}
 805de38: 466f         	mov	r7, sp
 805de3a: b082         	sub	sp, #0x8
 805de3c: 2000         	movs	r0, #0x0
;     volatile uint32_t ulDummy = 0UL;
 805de3e: 9001         	str	r0, [sp, #0x4]
;     configASSERT( ulCriticalNesting == ~0UL );
 805de40: f240 0000    	movw	r0, #0x0
 805de44: f2c0 0000    	movt	r0, #0x0
 805de48: 6800         	ldr	r0, [r0]
 805de4a: 3001         	adds	r0, #0x1
 805de4c: b120         	cbz	r0, 0x805de58 <prvTaskExitError+0x22> @ imm = #0x8
 805de4e: e7ff         	b	0x805de50 <prvTaskExitError+0x1a> @ imm = #-0x2
 805de50: f7ff fffe    	bl	0x805de50 <prvTaskExitError+0x1a> @ imm = #-0x4
 805de54: e7ff         	b	0x805de56 <prvTaskExitError+0x20> @ imm = #-0x2
 805de56: e7fe         	b	0x805de56 <prvTaskExitError+0x20> @ imm = #-0x4
;     portDISABLE_INTERRUPTS();
 805de58: f7ff fffe    	bl	0x805de58 <prvTaskExitError+0x22> @ imm = #-0x4
;     while( ulDummy == 0 )
 805de5c: e7ff         	b	0x805de5e <prvTaskExitError+0x28> @ imm = #-0x2
 805de5e: 9801         	ldr	r0, [sp, #0x4]
 805de60: b908         	cbnz	r0, 0x805de66 <prvTaskExitError+0x30> @ imm = #0x2
 805de62: e7ff         	b	0x805de64 <prvTaskExitError+0x2e> @ imm = #-0x2
 805de64: e7fb         	b	0x805de5e <prvTaskExitError+0x28> @ imm = #-0xa
; }
 805de66: b002         	add	sp, #0x8
 805de68: bd80         	pop	{r7, pc}

0805de6a <vPortValidateInterruptPriority>:
;     {
 805de6a: b580         	push	{r7, lr}
 805de6c: 466f         	mov	r7, sp
 805de6e: b082         	sub	sp, #0x8
;         __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 805de70: f3ef 8005    	mrs	r0, ipsr
 805de74: 9001         	str	r0, [sp, #0x4]
;         if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 805de76: 9801         	ldr	r0, [sp, #0x4]
 805de78: 2810         	cmp	r0, #0x10
 805de7a: d317         	blo	0x805deac <vPortValidateInterruptPriority+0x42> @ imm = #0x2e
 805de7c: e7ff         	b	0x805de7e <vPortValidateInterruptPriority+0x14> @ imm = #-0x2
;             ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 805de7e: 9801         	ldr	r0, [sp, #0x4]
 805de80: f24e 31f0    	movw	r1, #0xe3f0
 805de84: f2ce 0100    	movt	r1, #0xe000
 805de88: 5c40         	ldrb	r0, [r0, r1]
 805de8a: f807 0c05    	strb	r0, [r7, #-5]
;             configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 805de8e: f817 0c05    	ldrb	r0, [r7, #-5]
 805de92: f240 0100    	movw	r1, #0x0
 805de96: f2c0 0100    	movt	r1, #0x0
 805de9a: 7809         	ldrb	r1, [r1]
 805de9c: 4288         	cmp	r0, r1
 805de9e: da04         	bge	0x805deaa <vPortValidateInterruptPriority+0x40> @ imm = #0x8
 805dea0: e7ff         	b	0x805dea2 <vPortValidateInterruptPriority+0x38> @ imm = #-0x2
 805dea2: f7ff fffe    	bl	0x805dea2 <vPortValidateInterruptPriority+0x38> @ imm = #-0x4
 805dea6: e7ff         	b	0x805dea8 <vPortValidateInterruptPriority+0x3e> @ imm = #-0x2
 805dea8: e7fe         	b	0x805dea8 <vPortValidateInterruptPriority+0x3e> @ imm = #-0x4
;         }
 805deaa: e7ff         	b	0x805deac <vPortValidateInterruptPriority+0x42> @ imm = #-0x2
 805deac: f64e 500c    	movw	r0, #0xed0c
 805deb0: f2ce 0000    	movt	r0, #0xe000
;         configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 805deb4: 6800         	ldr	r0, [r0]
 805deb6: f400 60e0    	and	r0, r0, #0x700
 805deba: f240 0100    	movw	r1, #0x0
 805debe: f2c0 0100    	movt	r1, #0x0
 805dec2: 6809         	ldr	r1, [r1]
 805dec4: 4288         	cmp	r0, r1
 805dec6: d904         	bls	0x805ded2 <vPortValidateInterruptPriority+0x68> @ imm = #0x8
 805dec8: e7ff         	b	0x805deca <vPortValidateInterruptPriority+0x60> @ imm = #-0x2
 805deca: f7ff fffe    	bl	0x805deca <vPortValidateInterruptPriority+0x60> @ imm = #-0x4
 805dece: e7ff         	b	0x805ded0 <vPortValidateInterruptPriority+0x66> @ imm = #-0x2
 805ded0: e7fe         	b	0x805ded0 <vPortValidateInterruptPriority+0x66> @ imm = #-0x4
;     }
 805ded2: b002         	add	sp, #0x8
 805ded4: bd80         	pop	{r7, pc}
		...
 805dede: 0000         	movs	r0, r0

0805dee0 <xIsPrivileged>:
;     __asm volatile
 805dee0: f3ef 8014    	mrs	r0, control
 805dee4: f010 0f01    	tst.w	r0, #0x1
 805dee8: bf14         	ite	ne
 805deea: 2000         	movne	r0, #0x0
 805deec: 2001         	moveq	r0, #0x1
 805deee: 4770         	bx	lr

0805def0 <vResetPrivilege>:
;     __asm volatile
 805def0: f3ef 8014    	mrs	r0, control
 805def4: f040 0001    	orr	r0, r0, #0x1
 805def8: f380 8814    	msr	control, r0
 805defc: 4770         	bx	lr
 805defe: 0000         	movs	r0, r0

0805df00 <__aeabi_memcpy8>:
 805df00: f7ff bffe    	b.w	0x805df00 <__aeabi_memcpy8> @ imm = #-0x4

0805df04 <__assert_func>:
 805df04: 4d0a         	ldr	r5, [pc, #0x28]         @ 0x805df30 <__assert_func+0x2c>
 805df06: 4614         	mov	r4, r2
 805df08: 461a         	mov	r2, r3
 805df0a: 4603         	mov	r3, r0
 805df0c: 682e         	ldr	r6, [r5]
 805df0e: 460d         	mov	r5, r1
 805df10: b500         	push	{lr}
 805df12: 68f0         	ldr	r0, [r6, #0xc]
 805df14: b085         	sub	sp, #0x14
 805df16: b144         	cbz	r4, 0x805df2a <__assert_func+0x26> @ imm = #0x10
 805df18: 4906         	ldr	r1, [pc, #0x18]         @ 0x805df34 <__assert_func+0x30>
 805df1a: 9500         	str	r5, [sp]
 805df1c: e9cd 1401    	strd	r1, r4, [sp, #4]
 805df20: 4905         	ldr	r1, [pc, #0x14]         @ 0x805df38 <__assert_func+0x34>
 805df22: f7ff fffe    	bl	0x805df22 <__assert_func+0x1e> @ imm = #-0x4
 805df26: f7ff fffe    	bl	0x805df26 <__assert_func+0x22> @ imm = #-0x4
 805df2a: 4904         	ldr	r1, [pc, #0x10]         @ 0x805df3c <__assert_func+0x38>
 805df2c: 460c         	mov	r4, r1
 805df2e: e7f4         	b	0x805df1a <__assert_func+0x16> @ imm = #-0x18

0805df30 <$d>:
 805df30: 00 00 00 00  	.word	0x00000000
 805df34: 00 48 00 00  	.word	0x00004800
 805df38: 10 48 00 00  	.word	0x00004810
 805df3c: fc 47 00 00  	.word	0x000047fc

0805df40 <__assert>:
 805df40: b508         	push	{r3, lr}
 805df42: 4613         	mov	r3, r2
 805df44: 2200         	movs	r2, #0x0
 805df46: f7ff fffe    	bl	0x805df46 <__assert+0x6> @ imm = #-0x4
 805df4a: bf00         	nop

0805df4c <_fiprintf_r>:
 805df4c: b40c         	push	{r2, r3}
 805df4e: b500         	push	{lr}
 805df50: b083         	sub	sp, #0xc
 805df52: ab04         	add	r3, sp, #0x10
 805df54: f853 2b04    	ldr	r2, [r3], #4
 805df58: 9301         	str	r3, [sp, #0x4]
 805df5a: f7ff fffe    	bl	0x805df5a <_fiprintf_r+0xe> @ imm = #-0x4
 805df5e: b003         	add	sp, #0xc
 805df60: f85d eb04    	ldr	lr, [sp], #4
 805df64: b002         	add	sp, #0x8
 805df66: 4770         	bx	lr

0805df68 <fiprintf>:
 805df68: b40e         	push	{r1, r2, r3}
 805df6a: b510         	push	{r4, lr}
 805df6c: b083         	sub	sp, #0xc
 805df6e: 4c07         	ldr	r4, [pc, #0x1c]         @ 0x805df8c <fiprintf+0x24>
 805df70: 4601         	mov	r1, r0
 805df72: ab05         	add	r3, sp, #0x14
 805df74: 6820         	ldr	r0, [r4]
 805df76: f853 2b04    	ldr	r2, [r3], #4
 805df7a: 9301         	str	r3, [sp, #0x4]
 805df7c: f7ff fffe    	bl	0x805df7c <fiprintf+0x14> @ imm = #-0x4
 805df80: b003         	add	sp, #0xc
 805df82: e8bd 4010    	pop.w	{r4, lr}
 805df86: b003         	add	sp, #0xc
 805df88: 4770         	bx	lr
 805df8a: bf00         	nop

0805df8c <$d>:
 805df8c: 00 00 00 00  	.word	0x00000000

0805df90 <memcpy>:
 805df90: 4684         	mov	r12, r0
 805df92: ea41 0300    	orr.w	r3, r1, r0
 805df96: f013 0303    	ands	r3, r3, #0x3
 805df9a: d149         	bne	0x805e030 <memcpy+0xa0> @ imm = #0x92
 805df9c: 3a40         	subs	r2, #0x40
 805df9e: d323         	blo	0x805dfe8 <memcpy+0x58> @ imm = #0x46
 805dfa0: 680b         	ldr	r3, [r1]
 805dfa2: 6003         	str	r3, [r0]
 805dfa4: 684b         	ldr	r3, [r1, #0x4]
 805dfa6: 6043         	str	r3, [r0, #0x4]
 805dfa8: 688b         	ldr	r3, [r1, #0x8]
 805dfaa: 6083         	str	r3, [r0, #0x8]
 805dfac: 68cb         	ldr	r3, [r1, #0xc]
 805dfae: 60c3         	str	r3, [r0, #0xc]
 805dfb0: 690b         	ldr	r3, [r1, #0x10]
 805dfb2: 6103         	str	r3, [r0, #0x10]
 805dfb4: 694b         	ldr	r3, [r1, #0x14]
 805dfb6: 6143         	str	r3, [r0, #0x14]
 805dfb8: 698b         	ldr	r3, [r1, #0x18]
 805dfba: 6183         	str	r3, [r0, #0x18]
 805dfbc: 69cb         	ldr	r3, [r1, #0x1c]
 805dfbe: 61c3         	str	r3, [r0, #0x1c]
 805dfc0: 6a0b         	ldr	r3, [r1, #0x20]
 805dfc2: 6203         	str	r3, [r0, #0x20]
 805dfc4: 6a4b         	ldr	r3, [r1, #0x24]
 805dfc6: 6243         	str	r3, [r0, #0x24]
 805dfc8: 6a8b         	ldr	r3, [r1, #0x28]
 805dfca: 6283         	str	r3, [r0, #0x28]
 805dfcc: 6acb         	ldr	r3, [r1, #0x2c]
 805dfce: 62c3         	str	r3, [r0, #0x2c]
 805dfd0: 6b0b         	ldr	r3, [r1, #0x30]
 805dfd2: 6303         	str	r3, [r0, #0x30]
 805dfd4: 6b4b         	ldr	r3, [r1, #0x34]
 805dfd6: 6343         	str	r3, [r0, #0x34]
 805dfd8: 6b8b         	ldr	r3, [r1, #0x38]
 805dfda: 6383         	str	r3, [r0, #0x38]
 805dfdc: 6bcb         	ldr	r3, [r1, #0x3c]
 805dfde: 63c3         	str	r3, [r0, #0x3c]
 805dfe0: 3040         	adds	r0, #0x40
 805dfe2: 3140         	adds	r1, #0x40
 805dfe4: 3a40         	subs	r2, #0x40
 805dfe6: d2db         	bhs	0x805dfa0 <memcpy+0x10> @ imm = #-0x4a
 805dfe8: 3230         	adds	r2, #0x30
 805dfea: d30b         	blo	0x805e004 <memcpy+0x74> @ imm = #0x16
 805dfec: 680b         	ldr	r3, [r1]
 805dfee: 6003         	str	r3, [r0]
 805dff0: 684b         	ldr	r3, [r1, #0x4]
 805dff2: 6043         	str	r3, [r0, #0x4]
 805dff4: 688b         	ldr	r3, [r1, #0x8]
 805dff6: 6083         	str	r3, [r0, #0x8]
 805dff8: 68cb         	ldr	r3, [r1, #0xc]
 805dffa: 60c3         	str	r3, [r0, #0xc]
 805dffc: 3010         	adds	r0, #0x10
 805dffe: 3110         	adds	r1, #0x10
 805e000: 3a10         	subs	r2, #0x10
 805e002: d2f3         	bhs	0x805dfec <memcpy+0x5c> @ imm = #-0x1a
 805e004: 320c         	adds	r2, #0xc
 805e006: d305         	blo	0x805e014 <memcpy+0x84> @ imm = #0xa
 805e008: f851 3b04    	ldr	r3, [r1], #4
 805e00c: f840 3b04    	str	r3, [r0], #4
 805e010: 3a04         	subs	r2, #0x4
 805e012: d2f9         	bhs	0x805e008 <memcpy+0x78> @ imm = #-0xe
 805e014: 3204         	adds	r2, #0x4
 805e016: d008         	beq	0x805e02a <memcpy+0x9a> @ imm = #0x10
 805e018: 07d2         	lsls	r2, r2, #0x1f
 805e01a: bf1c         	itt	ne
 805e01c: f811 3b01    	ldrbne	r3, [r1], #1
 805e020: f800 3b01    	strbne	r3, [r0], #1
 805e024: d301         	blo	0x805e02a <memcpy+0x9a> @ imm = #0x2
 805e026: 880b         	ldrh	r3, [r1]
 805e028: 8003         	strh	r3, [r0]
 805e02a: 4660         	mov	r0, r12
 805e02c: 4770         	bx	lr
 805e02e: bf00         	nop
 805e030: 2a08         	cmp	r2, #0x8
 805e032: d313         	blo	0x805e05c <memcpy+0xcc> @ imm = #0x26
 805e034: 078b         	lsls	r3, r1, #0x1e
 805e036: d0b1         	beq	0x805df9c <memcpy+0xc>  @ imm = #-0x9e
 805e038: f010 0303    	ands	r3, r0, #0x3
 805e03c: d0ae         	beq	0x805df9c <memcpy+0xc>  @ imm = #-0xa4
 805e03e: f1c3 0304    	rsb.w	r3, r3, #0x4
 805e042: 1ad2         	subs	r2, r2, r3
 805e044: 07db         	lsls	r3, r3, #0x1f
 805e046: bf1c         	itt	ne
 805e048: f811 3b01    	ldrbne	r3, [r1], #1
 805e04c: f800 3b01    	strbne	r3, [r0], #1
 805e050: d3a4         	blo	0x805df9c <memcpy+0xc>  @ imm = #-0xb8
 805e052: f831 3b02    	ldrh	r3, [r1], #2
 805e056: f820 3b02    	strh	r3, [r0], #2
 805e05a: e79f         	b	0x805df9c <memcpy+0xc>  @ imm = #-0xc2
 805e05c: 3a04         	subs	r2, #0x4
 805e05e: d3d9         	blo	0x805e014 <memcpy+0x84> @ imm = #-0x4e
 805e060: 3a01         	subs	r2, #0x1
 805e062: f811 3b01    	ldrb	r3, [r1], #1
 805e066: f800 3b01    	strb	r3, [r0], #1
 805e06a: d2f9         	bhs	0x805e060 <memcpy+0xd0> @ imm = #-0xe
 805e06c: 780b         	ldrb	r3, [r1]
 805e06e: 7003         	strb	r3, [r0]
 805e070: 784b         	ldrb	r3, [r1, #0x1]
 805e072: 7043         	strb	r3, [r0, #0x1]
 805e074: 788b         	ldrb	r3, [r1, #0x2]
 805e076: 7083         	strb	r3, [r0, #0x2]
 805e078: 4660         	mov	r0, r12
 805e07a: 4770         	bx	lr

0805e07c <memset>:
 805e07c: b570         	push	{r4, r5, r6, lr}
 805e07e: 0786         	lsls	r6, r0, #0x1e
 805e080: d048         	beq	0x805e114 <memset+0x98> @ imm = #0x90
 805e082: 1e54         	subs	r4, r2, #0x1
 805e084: 2a00         	cmp	r2, #0x0
 805e086: d03f         	beq	0x805e108 <memset+0x8c> @ imm = #0x7e
 805e088: b2ca         	uxtb	r2, r1
 805e08a: 4603         	mov	r3, r0
 805e08c: e001         	b	0x805e092 <memset+0x16> @ imm = #0x2
 805e08e: 3c01         	subs	r4, #0x1
 805e090: d33a         	blo	0x805e108 <memset+0x8c> @ imm = #0x74
 805e092: f803 2b01    	strb	r2, [r3], #1
 805e096: 079d         	lsls	r5, r3, #0x1e
 805e098: d1f9         	bne	0x805e08e <memset+0x12> @ imm = #-0xe
 805e09a: 2c03         	cmp	r4, #0x3
 805e09c: d92d         	bls	0x805e0fa <memset+0x7e> @ imm = #0x5a
 805e09e: b2cd         	uxtb	r5, r1
 805e0a0: 2c0f         	cmp	r4, #0xf
 805e0a2: ea45 2505    	orr.w	r5, r5, r5, lsl #8
 805e0a6: ea45 4505    	orr.w	r5, r5, r5, lsl #16
 805e0aa: d936         	bls	0x805e11a <memset+0x9e> @ imm = #0x6c
 805e0ac: f1a4 0c10    	sub.w	r12, r4, #0x10
 805e0b0: f103 0e20    	add.w	lr, r3, #0x20
 805e0b4: f103 0210    	add.w	r2, r3, #0x10
 805e0b8: f02c 060f    	bic	r6, r12, #0xf
 805e0bc: ea4f 1c1c    	lsr.w	r12, r12, #0x4
 805e0c0: 44b6         	add	lr, r6
 805e0c2: e942 5504    	strd	r5, r5, [r2, #-16]
 805e0c6: e942 5502    	strd	r5, r5, [r2, #-8]
 805e0ca: 3210         	adds	r2, #0x10
 805e0cc: 4572         	cmp	r2, lr
 805e0ce: d1f8         	bne	0x805e0c2 <memset+0x46> @ imm = #-0x10
 805e0d0: f10c 0201    	add.w	r2, r12, #0x1
 805e0d4: f014 0f0c    	tst.w	r4, #0xc
 805e0d8: f004 0c0f    	and	r12, r4, #0xf
 805e0dc: eb03 1202    	add.w	r2, r3, r2, lsl #4
 805e0e0: d013         	beq	0x805e10a <memset+0x8e> @ imm = #0x26
 805e0e2: f1ac 0304    	sub.w	r3, r12, #0x4
 805e0e6: f023 0303    	bic	r3, r3, #0x3
 805e0ea: 3304         	adds	r3, #0x4
 805e0ec: 4413         	add	r3, r2
 805e0ee: f842 5b04    	str	r5, [r2], #4
 805e0f2: 4293         	cmp	r3, r2
 805e0f4: d1fb         	bne	0x805e0ee <memset+0x72> @ imm = #-0xa
 805e0f6: f00c 0403    	and	r4, r12, #0x3
 805e0fa: b12c         	cbz	r4, 0x805e108 <memset+0x8c> @ imm = #0xa
 805e0fc: b2ca         	uxtb	r2, r1
 805e0fe: 441c         	add	r4, r3
 805e100: f803 2b01    	strb	r2, [r3], #1
 805e104: 429c         	cmp	r4, r3
 805e106: d1fb         	bne	0x805e100 <memset+0x84> @ imm = #-0xa
 805e108: bd70         	pop	{r4, r5, r6, pc}
 805e10a: 4664         	mov	r4, r12
 805e10c: 4613         	mov	r3, r2
 805e10e: 2c00         	cmp	r4, #0x0
 805e110: d1f4         	bne	0x805e0fc <memset+0x80> @ imm = #-0x18
 805e112: e7f9         	b	0x805e108 <memset+0x8c> @ imm = #-0xe
 805e114: 4603         	mov	r3, r0
 805e116: 4614         	mov	r4, r2
 805e118: e7bf         	b	0x805e09a <memset+0x1e> @ imm = #-0x82
 805e11a: 461a         	mov	r2, r3
 805e11c: 46a4         	mov	r12, r4
 805e11e: e7e0         	b	0x805e0e2 <memset+0x66> @ imm = #-0x40

0805e120 <__sprint_r.part.0>:
 805e120: e92d 4ff8    	push.w	{r3, r4, r5, r6, r7, r8, r9, r10, r11, lr}
 805e124: 6e4b         	ldr	r3, [r1, #0x64]
 805e126: 4690         	mov	r8, r2
 805e128: 049c         	lsls	r4, r3, #0x12
 805e12a: d52c         	bpl	0x805e186 <__sprint_r.part.0+0x66> @ imm = #0x58
 805e12c: 6893         	ldr	r3, [r2, #0x8]
 805e12e: 6812         	ldr	r2, [r2]
 805e130: b33b         	cbz	r3, 0x805e182 <__sprint_r.part.0+0x62> @ imm = #0x4e
 805e132: 468b         	mov	r11, r1
 805e134: 4606         	mov	r6, r0
 805e136: f102 0908    	add.w	r9, r2, #0x8
 805e13a: e959 5a02    	ldrd	r5, r10, [r9, #-8]
 805e13e: ea5f 079a    	lsrs.w	r7, r10, #0x2
 805e142: d014         	beq	0x805e16e <__sprint_r.part.0+0x4e> @ imm = #0x28
 805e144: 3d04         	subs	r5, #0x4
 805e146: 2400         	movs	r4, #0x0
 805e148: e001         	b	0x805e14e <__sprint_r.part.0+0x2e> @ imm = #0x2
 805e14a: 42a7         	cmp	r7, r4
 805e14c: d00d         	beq	0x805e16a <__sprint_r.part.0+0x4a> @ imm = #0x1a
 805e14e: 465a         	mov	r2, r11
 805e150: f855 1f04    	ldr	r1, [r5, #4]!
 805e154: 4630         	mov	r0, r6
 805e156: 3401         	adds	r4, #0x1
 805e158: f7ff fffe    	bl	0x805e158 <__sprint_r.part.0+0x38> @ imm = #-0x4
 805e15c: 1c43         	adds	r3, r0, #0x1
 805e15e: d1f4         	bne	0x805e14a <__sprint_r.part.0+0x2a> @ imm = #-0x18
 805e160: 2300         	movs	r3, #0x0
 805e162: e9c8 3301    	strd	r3, r3, [r8, #4]
 805e166: e8bd 8ff8    	pop.w	{r3, r4, r5, r6, r7, r8, r9, r10, r11, pc}
 805e16a: f8d8 3008    	ldr.w	r3, [r8, #0x8]
 805e16e: f02a 0a03    	bic	r10, r10, #0x3
 805e172: f109 0908    	add.w	r9, r9, #0x8
 805e176: eba3 030a    	sub.w	r3, r3, r10
 805e17a: f8c8 3008    	str.w	r3, [r8, #0x8]
 805e17e: 2b00         	cmp	r3, #0x0
 805e180: d1db         	bne	0x805e13a <__sprint_r.part.0+0x1a> @ imm = #-0x4a
 805e182: 2000         	movs	r0, #0x0
 805e184: e7ec         	b	0x805e160 <__sprint_r.part.0+0x40> @ imm = #-0x28
 805e186: f7ff fffe    	bl	0x805e186 <__sprint_r.part.0+0x66> @ imm = #-0x4
 805e18a: 2300         	movs	r3, #0x0
 805e18c: e9c8 3301    	strd	r3, r3, [r8, #4]
 805e190: e8bd 8ff8    	pop.w	{r3, r4, r5, r6, r7, r8, r9, r10, r11, pc}

0805e194 <__sprint_r>:
 805e194: b410         	push	{r4}
 805e196: 6894         	ldr	r4, [r2, #0x8]
 805e198: b10c         	cbz	r4, 0x805e19e <__sprint_r+0xa> @ imm = #0x2
 805e19a: bc10         	pop	{r4}
 805e19c: e7c0         	b	0x805e120 <__sprint_r.part.0> @ imm = #-0x80
 805e19e: 4620         	mov	r0, r4
 805e1a0: 6054         	str	r4, [r2, #0x4]
 805e1a2: bc10         	pop	{r4}
 805e1a4: 4770         	bx	lr
 805e1a6: bf00         	nop

0805e1a8 <_vfiprintf_r>:
 805e1a8: e92d 4ff0    	push.w	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 805e1ac: b0ab         	sub	sp, #0xac
 805e1ae: 461c         	mov	r4, r3
 805e1b0: 468b         	mov	r11, r1
 805e1b2: 4617         	mov	r7, r2
 805e1b4: 4680         	mov	r8, r0
 805e1b6: 9306         	str	r3, [sp, #0x18]
 805e1b8: b118         	cbz	r0, 0x805e1c2 <_vfiprintf_r+0x1a> @ imm = #0x6
 805e1ba: 6b83         	ldr	r3, [r0, #0x38]
 805e1bc: 2b00         	cmp	r3, #0x0
 805e1be: f000 8224    	beq.w	0x805e60a <_vfiprintf_r+0x462> @ imm = #0x448
 805e1c2: f9bb 100c    	ldrsh.w	r1, [r11, #0xc]
 805e1c6: 048e         	lsls	r6, r1, #0x12
 805e1c8: b28a         	uxth	r2, r1
 805e1ca: d40a         	bmi	0x805e1e2 <_vfiprintf_r+0x3a> @ imm = #0x14
 805e1cc: f441 5200    	orr	r2, r1, #0x2000
 805e1d0: f8db 3064    	ldr.w	r3, [r11, #0x64]
 805e1d4: f8ab 200c    	strh.w	r2, [r11, #0xc]
 805e1d8: f423 5300    	bic	r3, r3, #0x2000
 805e1dc: b292         	uxth	r2, r2
 805e1de: f8cb 3064    	str.w	r3, [r11, #0x64]
 805e1e2: 0715         	lsls	r5, r2, #0x1c
 805e1e4: f140 80b0    	bpl.w	0x805e348 <_vfiprintf_r+0x1a0> @ imm = #0x160
 805e1e8: f8db 3010    	ldr.w	r3, [r11, #0x10]
 805e1ec: 2b00         	cmp	r3, #0x0
 805e1ee: f000 80ab    	beq.w	0x805e348 <_vfiprintf_r+0x1a0> @ imm = #0x156
 805e1f2: f002 021a    	and	r2, r2, #0x1a
 805e1f6: 2a0a         	cmp	r2, #0xa
 805e1f8: f000 80b4    	beq.w	0x805e364 <_vfiprintf_r+0x1bc> @ imm = #0x168
 805e1fc: ab1a         	add	r3, sp, #0x68
 805e1fe: f10d 0968    	add.w	r9, sp, #0x68
 805e202: 930d         	str	r3, [sp, #0x34]
 805e204: 2300         	movs	r3, #0x0
 805e206: e9cd 330e    	strd	r3, r3, [sp, #56]
 805e20a: 9309         	str	r3, [sp, #0x24]
 805e20c: 9305         	str	r3, [sp, #0x14]
 805e20e: 783b         	ldrb	r3, [r7]
 805e210: 463c         	mov	r4, r7
 805e212: b1d3         	cbz	r3, 0x805e24a <_vfiprintf_r+0xa2> @ imm = #0x34
 805e214: 2b25         	cmp	r3, #0x25
 805e216: d018         	beq	0x805e24a <_vfiprintf_r+0xa2> @ imm = #0x30
 805e218: 4625         	mov	r5, r4
 805e21a: f814 3f01    	ldrb	r3, [r4, #1]!
 805e21e: b10b         	cbz	r3, 0x805e224 <_vfiprintf_r+0x7c> @ imm = #0x2
 805e220: 2b25         	cmp	r3, #0x25
 805e222: d1f9         	bne	0x805e218 <_vfiprintf_r+0x70> @ imm = #-0xe
 805e224: 1be6         	subs	r6, r4, r7
 805e226: d010         	beq	0x805e24a <_vfiprintf_r+0xa2> @ imm = #0x20
 805e228: 9b0e         	ldr	r3, [sp, #0x38]
 805e22a: 9a0f         	ldr	r2, [sp, #0x3c]
 805e22c: 3301         	adds	r3, #0x1
 805e22e: 4432         	add	r2, r6
 805e230: 2b07         	cmp	r3, #0x7
 805e232: 930e         	str	r3, [sp, #0x38]
 805e234: 920f         	str	r2, [sp, #0x3c]
 805e236: e9c9 7600    	strd	r7, r6, [r9]
 805e23a: f300 8175    	bgt.w	0x805e528 <_vfiprintf_r+0x380> @ imm = #0x2ea
 805e23e: f109 0908    	add.w	r9, r9, #0x8
 805e242: 9b05         	ldr	r3, [sp, #0x14]
 805e244: 4433         	add	r3, r6
 805e246: 9305         	str	r3, [sp, #0x14]
 805e248: 786b         	ldrb	r3, [r5, #0x1]
 805e24a: 2b00         	cmp	r3, #0x0
 805e24c: f000 8178    	beq.w	0x805e540 <_vfiprintf_r+0x398> @ imm = #0x2f0
 805e250: 2100         	movs	r1, #0x0
 805e252: f04f 0200    	mov.w	r2, #0x0
 805e256: 1c67         	adds	r7, r4, #0x1
 805e258: 7863         	ldrb	r3, [r4, #0x1]
 805e25a: f04f 3aff    	mov.w	r10, #0xffffffff
 805e25e: 4608         	mov	r0, r1
 805e260: 460d         	mov	r5, r1
 805e262: f88d 202f    	strb.w	r2, [sp, #0x2f]
 805e266: 9104         	str	r1, [sp, #0x10]
 805e268: 3701         	adds	r7, #0x1
 805e26a: f1a3 0220    	sub.w	r2, r3, #0x20
 805e26e: 2a58         	cmp	r2, #0x58
 805e270: f200 8173    	bhi.w	0x805e55a <_vfiprintf_r+0x3b2> @ imm = #0x2e6
 805e274: e8df f012    	tbh	[pc, r2, lsl #1]

0805e278 <$d>:
 805e278: 77 02 71 01  	.word	0x01710277
 805e27c: 71 01 73 02  	.word	0x02730171
 805e280: 71 01 71 01  	.word	0x01710171
 805e284: 71 01 71 01  	.word	0x01710171
 805e288: 71 01 71 01  	.word	0x01710171
 805e28c: d7 01 6f 02  	.word	0x026f01d7
 805e290: 71 01 e2 01  	.word	0x01e20171
 805e294: 3b 02 71 01  	.word	0x0171023b
 805e298: 6b 02 59 00  	.word	0x0059026b
 805e29c: 59 00 59 00  	.word	0x00590059
 805e2a0: 59 00 59 00  	.word	0x00590059
 805e2a4: 59 00 59 00  	.word	0x00590059
 805e2a8: 59 00 59 00  	.word	0x00590059
 805e2ac: 71 01 71 01  	.word	0x01710171
 805e2b0: 71 01 71 01  	.word	0x01710171
 805e2b4: 71 01 71 01  	.word	0x01710171
 805e2b8: 71 01 71 01  	.word	0x01710171
 805e2bc: 71 01 71 01  	.word	0x01710171
 805e2c0: 54 02 71 01  	.word	0x01710254
 805e2c4: 71 01 71 01  	.word	0x01710171
 805e2c8: 71 01 71 01  	.word	0x01710171
 805e2cc: 71 01 71 01  	.word	0x01710171
 805e2d0: 71 01 71 01  	.word	0x01710171
 805e2d4: 71 01 94 00  	.word	0x00940171
 805e2d8: 71 01 71 01  	.word	0x01710171
 805e2dc: 71 01 71 01  	.word	0x01710171
 805e2e0: 71 01 84 00  	.word	0x00840171
 805e2e4: 71 01 71 01  	.word	0x01710171
 805e2e8: ab 02 71 01  	.word	0x017102ab
 805e2ec: 71 01 71 01  	.word	0x01710171
 805e2f0: 71 01 71 01  	.word	0x01710171
 805e2f4: 71 01 71 01  	.word	0x01710171
 805e2f8: 71 01 71 01  	.word	0x01710171
 805e2fc: 71 01 9c 02  	.word	0x029c0171
 805e300: 9e 01 71 01  	.word	0x0171019e
 805e304: 71 01 71 01  	.word	0x01710171
 805e308: 7e 02 9e 01  	.word	0x019e027e
 805e30c: 71 01 71 01  	.word	0x01710171
 805e310: 95 02 71 01  	.word	0x01710295
 805e314: 82 02 96 00  	.word	0x00960282
 805e318: 2a 02 26 02  	.word	0x0226022a
 805e31c: 71 01 07 02  	.word	0x02070171
 805e320: 71 01 86 00  	.word	0x00860171
 805e324: 71 01 71 01  	.word	0x01710171
 805e328: e6 01        	.short	0x01e6

0805e32a <$t>:
 805e32a: f1a3 0230    	sub.w	r2, r3, #0x30
 805e32e: 2400         	movs	r4, #0x0
 805e330: eb04 0484    	add.w	r4, r4, r4, lsl #2
 805e334: f817 3b01    	ldrb	r3, [r7], #1
 805e338: eb02 0444    	add.w	r4, r2, r4, lsl #1
 805e33c: f1a3 0230    	sub.w	r2, r3, #0x30
 805e340: 2a09         	cmp	r2, #0x9
 805e342: d9f5         	bls	0x805e330 <_vfiprintf_r+0x188> @ imm = #-0x16
 805e344: 9404         	str	r4, [sp, #0x10]
 805e346: e790         	b	0x805e26a <_vfiprintf_r+0xc2> @ imm = #-0xe0
 805e348: 4659         	mov	r1, r11
 805e34a: 4640         	mov	r0, r8
 805e34c: f7ff fffe    	bl	0x805e34c <_vfiprintf_r+0x1a4> @ imm = #-0x4
 805e350: 2800         	cmp	r0, #0x0
 805e352: f040 84ef    	bne.w	0x805ed34 <_vfiprintf_r+0xb8c> @ imm = #0x9de
 805e356: f8bb 200c    	ldrh.w	r2, [r11, #0xc]
 805e35a: f002 021a    	and	r2, r2, #0x1a
 805e35e: 2a0a         	cmp	r2, #0xa
 805e360: f47f af4c    	bne.w	0x805e1fc <_vfiprintf_r+0x54> @ imm = #-0x168
 805e364: f9bb 300e    	ldrsh.w	r3, [r11, #0xe]
 805e368: 2b00         	cmp	r3, #0x0
 805e36a: f6ff af47    	blt.w	0x805e1fc <_vfiprintf_r+0x54> @ imm = #-0x172
 805e36e: 4623         	mov	r3, r4
 805e370: 463a         	mov	r2, r7
 805e372: 4659         	mov	r1, r11
 805e374: 4640         	mov	r0, r8
 805e376: b02b         	add	sp, #0xac
 805e378: e8bd 4ff0    	pop.w	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 805e37c: f000 bcfa    	b.w	0x805ed74 <__sbprintf>  @ imm = #0x9f4
 805e380: f045 0510    	orr	r5, r5, #0x10
 805e384: f015 0120    	ands	r1, r5, #0x20
 805e388: 9a06         	ldr	r2, [sp, #0x18]
 805e38a: f000 8106    	beq.w	0x805e59a <_vfiprintf_r+0x3f2> @ imm = #0x20c
 805e38e: 3207         	adds	r2, #0x7
 805e390: 2301         	movs	r3, #0x1
 805e392: f022 0207    	bic	r2, r2, #0x7
 805e396: 6851         	ldr	r1, [r2, #0x4]
 805e398: f852 0b08    	ldr	r0, [r2], #8
 805e39c: 9206         	str	r2, [sp, #0x18]
 805e39e: e00e         	b	0x805e3be <_vfiprintf_r+0x216> @ imm = #0x1c
 805e3a0: f045 0510    	orr	r5, r5, #0x10
 805e3a4: f015 0120    	ands	r1, r5, #0x20
 805e3a8: f000 80ea    	beq.w	0x805e580 <_vfiprintf_r+0x3d8> @ imm = #0x1d4
 805e3ac: 9a06         	ldr	r2, [sp, #0x18]
 805e3ae: 2300         	movs	r3, #0x0
 805e3b0: 3207         	adds	r2, #0x7
 805e3b2: f022 0207    	bic	r2, r2, #0x7
 805e3b6: 6851         	ldr	r1, [r2, #0x4]
 805e3b8: f852 0b08    	ldr	r0, [r2], #8
 805e3bc: 9206         	str	r2, [sp, #0x18]
 805e3be: f04f 0200    	mov.w	r2, #0x0
 805e3c2: 2600         	movs	r6, #0x0
 805e3c4: f88d 202f    	strb.w	r2, [sp, #0x2f]
 805e3c8: f1ba 3fff    	cmp.w	r10, #0xffffffff
 805e3cc: f000 8223    	beq.w	0x805e816 <_vfiprintf_r+0x66e> @ imm = #0x446
 805e3d0: f025 0280    	bic	r2, r5, #0x80
 805e3d4: 9202         	str	r2, [sp, #0x8]
 805e3d6: ea50 0201    	orrs.w	r2, r0, r1
 805e3da: f040 821b    	bne.w	0x805e814 <_vfiprintf_r+0x66c> @ imm = #0x436
 805e3de: f1ba 0200    	subs.w	r2, r10, #0x0
 805e3e2: bf18         	it	ne
 805e3e4: 2201         	movne	r2, #0x1
 805e3e6: f1ba 0f00    	cmp.w	r10, #0x0
 805e3ea: f040 8213    	bne.w	0x805e814 <_vfiprintf_r+0x66c> @ imm = #0x426
 805e3ee: 2b00         	cmp	r3, #0x0
 805e3f0: f040 8399    	bne.w	0x805eb26 <_vfiprintf_r+0x97e> @ imm = #0x732
 805e3f4: f015 0201    	ands	r2, r5, #0x1
 805e3f8: 469a         	mov	r10, r3
 805e3fa: 9203         	str	r2, [sp, #0xc]
 805e3fc: f000 83c7    	beq.w	0x805eb8e <_vfiprintf_r+0x9e6> @ imm = #0x78e
 805e400: 2330         	movs	r3, #0x30
 805e402: f10d 0467    	add.w	r4, sp, #0x67
 805e406: f88d 3067    	strb.w	r3, [sp, #0x67]
 805e40a: 9b03         	ldr	r3, [sp, #0xc]
 805e40c: 4553         	cmp	r3, r10
 805e40e: bfb8         	it	lt
 805e410: 4653         	movlt	r3, r10
 805e412: 9301         	str	r3, [sp, #0x4]
 805e414: b10e         	cbz	r6, 0x805e41a <_vfiprintf_r+0x272> @ imm = #0x2
 805e416: 3301         	adds	r3, #0x1
 805e418: 9301         	str	r3, [sp, #0x4]
 805e41a: 9b02         	ldr	r3, [sp, #0x8]
 805e41c: f013 0302    	ands	r3, r3, #0x2
 805e420: 9307         	str	r3, [sp, #0x1c]
 805e422: d002         	beq	0x805e42a <_vfiprintf_r+0x282> @ imm = #0x4
 805e424: 9b01         	ldr	r3, [sp, #0x4]
 805e426: 3302         	adds	r3, #0x2
 805e428: 9301         	str	r3, [sp, #0x4]
 805e42a: 9b02         	ldr	r3, [sp, #0x8]
 805e42c: f013 0384    	ands	r3, r3, #0x84
 805e430: 9308         	str	r3, [sp, #0x20]
 805e432: d105         	bne	0x805e440 <_vfiprintf_r+0x298> @ imm = #0xa
 805e434: 9b04         	ldr	r3, [sp, #0x10]
 805e436: 9a01         	ldr	r2, [sp, #0x4]
 805e438: 1a9d         	subs	r5, r3, r2
 805e43a: 2d00         	cmp	r5, #0x0
 805e43c: f300 82de    	bgt.w	0x805e9fc <_vfiprintf_r+0x854> @ imm = #0x5bc
 805e440: e9dd 2c0e    	ldrd	r2, r12, [sp, #56]
 805e444: 1c51         	adds	r1, r2, #0x1
 805e446: f89d 002f    	ldrb.w	r0, [sp, #0x2f]
 805e44a: b190         	cbz	r0, 0x805e472 <_vfiprintf_r+0x2ca> @ imm = #0x24
 805e44c: f10d 022f    	add.w	r2, sp, #0x2f
 805e450: f10c 0c01    	add.w	r12, r12, #0x1
 805e454: 2907         	cmp	r1, #0x7
 805e456: f8c9 2000    	str.w	r2, [r9]
 805e45a: f04f 0201    	mov.w	r2, #0x1
 805e45e: e9cd 1c0e    	strd	r1, r12, [sp, #56]
 805e462: f8c9 2004    	str.w	r2, [r9, #0x4]
 805e466: f300 82aa    	bgt.w	0x805e9be <_vfiprintf_r+0x816> @ imm = #0x554
 805e46a: 460a         	mov	r2, r1
 805e46c: f109 0908    	add.w	r9, r9, #0x8
 805e470: 3101         	adds	r1, #0x1
 805e472: 9b07         	ldr	r3, [sp, #0x1c]
 805e474: b1eb         	cbz	r3, 0x805e4b2 <_vfiprintf_r+0x30a> @ imm = #0x3a
 805e476: ab0c         	add	r3, sp, #0x30
 805e478: f10c 0c02    	add.w	r12, r12, #0x2
 805e47c: 2907         	cmp	r1, #0x7
 805e47e: f8c9 3000    	str.w	r3, [r9]
 805e482: f04f 0302    	mov.w	r3, #0x2
 805e486: e9cd 1c0e    	strd	r1, r12, [sp, #56]
 805e48a: f8c9 3004    	str.w	r3, [r9, #0x4]
 805e48e: f340 82b0    	ble.w	0x805e9f2 <_vfiprintf_r+0x84a> @ imm = #0x560
 805e492: f1bc 0f00    	cmp.w	r12, #0x0
 805e496: f000 835d    	beq.w	0x805eb54 <_vfiprintf_r+0x9ac> @ imm = #0x6ba
 805e49a: aa0d         	add	r2, sp, #0x34
 805e49c: 4659         	mov	r1, r11
 805e49e: 4640         	mov	r0, r8
 805e4a0: f7ff fe3e    	bl	0x805e120 <__sprint_r.part.0> @ imm = #-0x384
 805e4a4: 2800         	cmp	r0, #0x0
 805e4a6: d14f         	bne	0x805e548 <_vfiprintf_r+0x3a0> @ imm = #0x9e
 805e4a8: f10d 0968    	add.w	r9, sp, #0x68
 805e4ac: e9dd 2c0e    	ldrd	r2, r12, [sp, #56]
 805e4b0: 1c51         	adds	r1, r2, #0x1
 805e4b2: 9b08         	ldr	r3, [sp, #0x20]
 805e4b4: 2b80         	cmp	r3, #0x80
 805e4b6: f000 81e1    	beq.w	0x805e87c <_vfiprintf_r+0x6d4> @ imm = #0x3c2
 805e4ba: 9b03         	ldr	r3, [sp, #0xc]
 805e4bc: ebaa 0603    	sub.w	r6, r10, r3
 805e4c0: 2e00         	cmp	r6, #0x0
 805e4c2: f300 8238    	bgt.w	0x805e936 <_vfiprintf_r+0x78e> @ imm = #0x470
 805e4c6: 9a03         	ldr	r2, [sp, #0xc]
 805e4c8: 2907         	cmp	r1, #0x7
 805e4ca: f8c9 4000    	str.w	r4, [r9]
 805e4ce: eb02 030c    	add.w	r3, r2, r12
 805e4d2: f8c9 2004    	str.w	r2, [r9, #0x4]
 805e4d6: e9cd 130e    	strd	r1, r3, [sp, #56]
 805e4da: f340 8198    	ble.w	0x805e80e <_vfiprintf_r+0x666> @ imm = #0x330
 805e4de: 2b00         	cmp	r3, #0x0
 805e4e0: f000 82cc    	beq.w	0x805ea7c <_vfiprintf_r+0x8d4> @ imm = #0x598
 805e4e4: aa0d         	add	r2, sp, #0x34
 805e4e6: 4659         	mov	r1, r11
 805e4e8: 4640         	mov	r0, r8
 805e4ea: f7ff fe19    	bl	0x805e120 <__sprint_r.part.0> @ imm = #-0x3ce
 805e4ee: bb58         	cbnz	r0, 0x805e548 <_vfiprintf_r+0x3a0> @ imm = #0x56
 805e4f0: 9b0f         	ldr	r3, [sp, #0x3c]
 805e4f2: f10d 0968    	add.w	r9, sp, #0x68
 805e4f6: 9a02         	ldr	r2, [sp, #0x8]
 805e4f8: 0752         	lsls	r2, r2, #0x1d
 805e4fa: d505         	bpl	0x805e508 <_vfiprintf_r+0x360> @ imm = #0xa
 805e4fc: 9a04         	ldr	r2, [sp, #0x10]
 805e4fe: 9901         	ldr	r1, [sp, #0x4]
 805e500: 1a54         	subs	r4, r2, r1
 805e502: 2c00         	cmp	r4, #0x0
 805e504: f300 82c5    	bgt.w	0x805ea92 <_vfiprintf_r+0x8ea> @ imm = #0x58a
 805e508: 9801         	ldr	r0, [sp, #0x4]
 805e50a: e9dd 1204    	ldrd	r1, r2, [sp, #16]
 805e50e: 4281         	cmp	r1, r0
 805e510: bfac         	ite	ge
 805e512: 1852         	addge	r2, r2, r1
 805e514: 1812         	addlt	r2, r2, r0
 805e516: 9205         	str	r2, [sp, #0x14]
 805e518: 2b00         	cmp	r3, #0x0
 805e51a: f040 8247    	bne.w	0x805e9ac <_vfiprintf_r+0x804> @ imm = #0x48e
 805e51e: 2300         	movs	r3, #0x0
 805e520: f10d 0968    	add.w	r9, sp, #0x68
 805e524: 930e         	str	r3, [sp, #0x38]
 805e526: e672         	b	0x805e20e <_vfiprintf_r+0x66> @ imm = #-0x31c
 805e528: 2a00         	cmp	r2, #0x0
 805e52a: f000 832b    	beq.w	0x805eb84 <_vfiprintf_r+0x9dc> @ imm = #0x656
 805e52e: aa0d         	add	r2, sp, #0x34
 805e530: 4659         	mov	r1, r11
 805e532: 4640         	mov	r0, r8
 805e534: f7ff fdf4    	bl	0x805e120 <__sprint_r.part.0> @ imm = #-0x418
 805e538: b930         	cbnz	r0, 0x805e548 <_vfiprintf_r+0x3a0> @ imm = #0xc
 805e53a: f10d 0968    	add.w	r9, sp, #0x68
 805e53e: e680         	b	0x805e242 <_vfiprintf_r+0x9a> @ imm = #-0x300
 805e540: 9b0f         	ldr	r3, [sp, #0x3c]
 805e542: 2b00         	cmp	r3, #0x0
 805e544: f040 83ca    	bne.w	0x805ecdc <_vfiprintf_r+0xb34> @ imm = #0x794
 805e548: f8bb 300c    	ldrh.w	r3, [r11, #0xc]
 805e54c: 065b         	lsls	r3, r3, #0x19
 805e54e: f100 83f1    	bmi.w	0x805ed34 <_vfiprintf_r+0xb8c> @ imm = #0x7e2
 805e552: 9805         	ldr	r0, [sp, #0x14]
 805e554: b02b         	add	sp, #0xac
 805e556: e8bd 8ff0    	pop.w	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
 805e55a: 2900         	cmp	r1, #0x0
 805e55c: f040 83bb    	bne.w	0x805ecd6 <_vfiprintf_r+0xb2e> @ imm = #0x776
 805e560: 2b00         	cmp	r3, #0x0
 805e562: d0ed         	beq	0x805e540 <_vfiprintf_r+0x398> @ imm = #-0x26
 805e564: f88d 3040    	strb.w	r3, [sp, #0x40]
 805e568: f04f 0300    	mov.w	r3, #0x0
 805e56c: ac10         	add	r4, sp, #0x40
 805e56e: f88d 302f    	strb.w	r3, [sp, #0x2f]
 805e572: 2301         	movs	r3, #0x1
 805e574: 9301         	str	r3, [sp, #0x4]
 805e576: 9303         	str	r3, [sp, #0xc]
 805e578: f04f 0a00    	mov.w	r10, #0x0
 805e57c: 9502         	str	r5, [sp, #0x8]
 805e57e: e74c         	b	0x805e41a <_vfiprintf_r+0x272> @ imm = #-0x168
 805e580: f015 0310    	ands	r3, r5, #0x10
 805e584: d144         	bne	0x805e610 <_vfiprintf_r+0x468> @ imm = #0x88
 805e586: f015 0140    	ands	r1, r5, #0x40
 805e58a: d041         	beq	0x805e610 <_vfiprintf_r+0x468> @ imm = #0x82
 805e58c: 9a06         	ldr	r2, [sp, #0x18]
 805e58e: 4619         	mov	r1, r3
 805e590: f852 0b04    	ldr	r0, [r2], #4
 805e594: b280         	uxth	r0, r0
 805e596: 9206         	str	r2, [sp, #0x18]
 805e598: e711         	b	0x805e3be <_vfiprintf_r+0x216> @ imm = #-0x1de
 805e59a: f015 0310    	ands	r3, r5, #0x10
 805e59e: d13d         	bne	0x805e61c <_vfiprintf_r+0x474> @ imm = #0x7a
 805e5a0: f015 0140    	ands	r1, r5, #0x40
 805e5a4: d03a         	beq	0x805e61c <_vfiprintf_r+0x474> @ imm = #0x74
 805e5a6: f852 0b04    	ldr	r0, [r2], #4
 805e5aa: 4619         	mov	r1, r3
 805e5ac: 2301         	movs	r3, #0x1
 805e5ae: b280         	uxth	r0, r0
 805e5b0: 9206         	str	r2, [sp, #0x18]
 805e5b2: e704         	b	0x805e3be <_vfiprintf_r+0x216> @ imm = #-0x1f8
 805e5b4: 2900         	cmp	r1, #0x0
 805e5b6: f040 83a5    	bne.w	0x805ed04 <_vfiprintf_r+0xb5c> @ imm = #0x74a
 805e5ba: 06a8         	lsls	r0, r5, #0x1a
 805e5bc: 9b06         	ldr	r3, [sp, #0x18]
 805e5be: f140 80b8    	bpl.w	0x805e732 <_vfiprintf_r+0x58a> @ imm = #0x170
 805e5c2: 3307         	adds	r3, #0x7
 805e5c4: f023 0307    	bic	r3, r3, #0x7
 805e5c8: 461a         	mov	r2, r3
 805e5ca: 685b         	ldr	r3, [r3, #0x4]
 805e5cc: f852 0b08    	ldr	r0, [r2], #8
 805e5d0: 4619         	mov	r1, r3
 805e5d2: 9206         	str	r2, [sp, #0x18]
 805e5d4: 2b00         	cmp	r3, #0x0
 805e5d6: f2c0 82e1    	blt.w	0x805eb9c <_vfiprintf_r+0x9f4> @ imm = #0x5c2
 805e5da: f1ba 3fff    	cmp.w	r10, #0xffffffff
 805e5de: f000 82a6    	beq.w	0x805eb2e <_vfiprintf_r+0x986> @ imm = #0x54c
 805e5e2: f025 0380    	bic	r3, r5, #0x80
 805e5e6: f89d 602f    	ldrb.w	r6, [sp, #0x2f]
 805e5ea: 9302         	str	r3, [sp, #0x8]
 805e5ec: f1ba 0f00    	cmp.w	r10, #0x0
 805e5f0: f040 837a    	bne.w	0x805ece8 <_vfiprintf_r+0xb40> @ imm = #0x6f4
 805e5f4: ea50 0301    	orrs.w	r3, r0, r1
 805e5f8: bf14         	ite	ne
 805e5fa: 2301         	movne	r3, #0x1
 805e5fc: 2300         	moveq	r3, #0x0
 805e5fe: f040 8373    	bne.w	0x805ece8 <_vfiprintf_r+0xb40> @ imm = #0x6e6
 805e602: 469a         	mov	r10, r3
 805e604: ac1a         	add	r4, sp, #0x68
 805e606: 9303         	str	r3, [sp, #0xc]
 805e608: e6ff         	b	0x805e40a <_vfiprintf_r+0x262> @ imm = #-0x202
 805e60a: f7ff fffe    	bl	0x805e60a <_vfiprintf_r+0x462> @ imm = #-0x4
 805e60e: e5d8         	b	0x805e1c2 <_vfiprintf_r+0x1a> @ imm = #-0x450
 805e610: 9b06         	ldr	r3, [sp, #0x18]
 805e612: f853 0b04    	ldr	r0, [r3], #4
 805e616: 9306         	str	r3, [sp, #0x18]
 805e618: 460b         	mov	r3, r1
 805e61a: e6d0         	b	0x805e3be <_vfiprintf_r+0x216> @ imm = #-0x260
 805e61c: f852 0b04    	ldr	r0, [r2], #4
 805e620: 2301         	movs	r3, #0x1
 805e622: 9206         	str	r2, [sp, #0x18]
 805e624: e6cb         	b	0x805e3be <_vfiprintf_r+0x216> @ imm = #-0x26a
 805e626: 9b06         	ldr	r3, [sp, #0x18]
 805e628: f853 2b04    	ldr	r2, [r3], #4
 805e62c: 2a00         	cmp	r2, #0x0
 805e62e: 9204         	str	r2, [sp, #0x10]
 805e630: f280 82d3    	bge.w	0x805ebda <_vfiprintf_r+0xa32> @ imm = #0x5a6
 805e634: 9a04         	ldr	r2, [sp, #0x10]
 805e636: 9306         	str	r3, [sp, #0x18]
 805e638: 4252         	rsbs	r2, r2, #0
 805e63a: 9204         	str	r2, [sp, #0x10]
 805e63c: f045 0504    	orr	r5, r5, #0x4
 805e640: 783b         	ldrb	r3, [r7]
 805e642: e611         	b	0x805e268 <_vfiprintf_r+0xc0> @ imm = #-0x3de
 805e644: 2900         	cmp	r1, #0x0
 805e646: f040 8354    	bne.w	0x805ecf2 <_vfiprintf_r+0xb4a> @ imm = #0x6a8
 805e64a: 4a92         	ldr	r2, [pc, #0x248]        @ 0x805e894 <_vfiprintf_r+0x6ec>
 805e64c: f015 0120    	ands	r1, r5, #0x20
 805e650: 9209         	str	r2, [sp, #0x24]
 805e652: f000 80c5    	beq.w	0x805e7e0 <_vfiprintf_r+0x638> @ imm = #0x18a
 805e656: 9a06         	ldr	r2, [sp, #0x18]
 805e658: 3207         	adds	r2, #0x7
 805e65a: f022 0207    	bic	r2, r2, #0x7
 805e65e: 6851         	ldr	r1, [r2, #0x4]
 805e660: f852 0b08    	ldr	r0, [r2], #8
 805e664: 9206         	str	r2, [sp, #0x18]
 805e666: 07ec         	lsls	r4, r5, #0x1f
 805e668: d50b         	bpl	0x805e682 <_vfiprintf_r+0x4da> @ imm = #0x16
 805e66a: ea50 0201    	orrs.w	r2, r0, r1
 805e66e: d008         	beq	0x805e682 <_vfiprintf_r+0x4da> @ imm = #0x10
 805e670: f88d 3031    	strb.w	r3, [sp, #0x31]
 805e674: 2330         	movs	r3, #0x30
 805e676: f045 0502    	orr	r5, r5, #0x2
 805e67a: f88d 3030    	strb.w	r3, [sp, #0x30]
 805e67e: 2302         	movs	r3, #0x2
 805e680: e69d         	b	0x805e3be <_vfiprintf_r+0x216> @ imm = #-0x2c6
 805e682: 2302         	movs	r3, #0x2
 805e684: e69b         	b	0x805e3be <_vfiprintf_r+0x216> @ imm = #-0x2ca
 805e686: 9e06         	ldr	r6, [sp, #0x18]
 805e688: f04f 0300    	mov.w	r3, #0x0
 805e68c: f856 4b04    	ldr	r4, [r6], #4
 805e690: f88d 302f    	strb.w	r3, [sp, #0x2f]
 805e694: 2c00         	cmp	r4, #0x0
 805e696: f000 8305    	beq.w	0x805eca4 <_vfiprintf_r+0xafc> @ imm = #0x60a
 805e69a: f1ba 3fff    	cmp.w	r10, #0xffffffff
 805e69e: f000 82b7    	beq.w	0x805ec10 <_vfiprintf_r+0xa68> @ imm = #0x56e
 805e6a2: 4652         	mov	r2, r10
 805e6a4: 2100         	movs	r1, #0x0
 805e6a6: 4620         	mov	r0, r4
 805e6a8: f7ff fffe    	bl	0x805e6a8 <_vfiprintf_r+0x500> @ imm = #-0x4
 805e6ac: 2800         	cmp	r0, #0x0
 805e6ae: f000 832c    	beq.w	0x805ed0a <_vfiprintf_r+0xb62> @ imm = #0x658
 805e6b2: 1b03         	subs	r3, r0, r4
 805e6b4: 9606         	str	r6, [sp, #0x18]
 805e6b6: f04f 0a00    	mov.w	r10, #0x0
 805e6ba: f89d 602f    	ldrb.w	r6, [sp, #0x2f]
 805e6be: 9303         	str	r3, [sp, #0xc]
 805e6c0: 9502         	str	r5, [sp, #0x8]
 805e6c2: e6a2         	b	0x805e40a <_vfiprintf_r+0x262> @ imm = #-0x2bc
 805e6c4: f045 0520    	orr	r5, r5, #0x20
 805e6c8: 783b         	ldrb	r3, [r7]
 805e6ca: e5cd         	b	0x805e268 <_vfiprintf_r+0xc0> @ imm = #-0x466
 805e6cc: 9b06         	ldr	r3, [sp, #0x18]
 805e6ce: 2230         	movs	r2, #0x30
 805e6d0: f045 0502    	orr	r5, r5, #0x2
 805e6d4: 2100         	movs	r1, #0x0
 805e6d6: f853 0b04    	ldr	r0, [r3], #4
 805e6da: f88d 2030    	strb.w	r2, [sp, #0x30]
 805e6de: 9306         	str	r3, [sp, #0x18]
 805e6e0: 2378         	movs	r3, #0x78
 805e6e2: f88d 3031    	strb.w	r3, [sp, #0x31]
 805e6e6: 4b6b         	ldr	r3, [pc, #0x1ac]        @ 0x805e894 <_vfiprintf_r+0x6ec>
 805e6e8: 9309         	str	r3, [sp, #0x24]
 805e6ea: 2302         	movs	r3, #0x2
 805e6ec: e667         	b	0x805e3be <_vfiprintf_r+0x216> @ imm = #-0x332
 805e6ee: 463c         	mov	r4, r7
 805e6f0: f814 3b01    	ldrb	r3, [r4], #1
 805e6f4: 2b2a         	cmp	r3, #0x2a
 805e6f6: f000 8321    	beq.w	0x805ed3c <_vfiprintf_r+0xb94> @ imm = #0x642
 805e6fa: f1a3 0230    	sub.w	r2, r3, #0x30
 805e6fe: 4627         	mov	r7, r4
 805e700: f04f 0a00    	mov.w	r10, #0x0
 805e704: 2a09         	cmp	r2, #0x9
 805e706: f63f adb0    	bhi.w	0x805e26a <_vfiprintf_r+0xc2> @ imm = #-0x4a0
 805e70a: eb0a 0a8a    	add.w	r10, r10, r10, lsl #2
 805e70e: f817 3b01    	ldrb	r3, [r7], #1
 805e712: eb02 0a4a    	add.w	r10, r2, r10, lsl #1
 805e716: f1a3 0230    	sub.w	r2, r3, #0x30
 805e71a: 2a09         	cmp	r2, #0x9
 805e71c: d9f5         	bls	0x805e70a <_vfiprintf_r+0x562> @ imm = #-0x16
 805e71e: e5a4         	b	0x805e26a <_vfiprintf_r+0xc2> @ imm = #-0x4b8
 805e720: 2900         	cmp	r1, #0x0
 805e722: f040 82ec    	bne.w	0x805ecfe <_vfiprintf_r+0xb56> @ imm = #0x5d8
 805e726: f045 0510    	orr	r5, r5, #0x10
 805e72a: 9b06         	ldr	r3, [sp, #0x18]
 805e72c: 06a8         	lsls	r0, r5, #0x1a
 805e72e: f53f af48    	bmi.w	0x805e5c2 <_vfiprintf_r+0x41a> @ imm = #-0x170
 805e732: f853 0b04    	ldr	r0, [r3], #4
 805e736: 06e9         	lsls	r1, r5, #0x1b
 805e738: 9306         	str	r3, [sp, #0x18]
 805e73a: f100 822a    	bmi.w	0x805eb92 <_vfiprintf_r+0x9ea> @ imm = #0x454
 805e73e: 066a         	lsls	r2, r5, #0x19
 805e740: f140 8227    	bpl.w	0x805eb92 <_vfiprintf_r+0x9ea> @ imm = #0x44e
 805e744: f340 31c0    	sbfx	r1, r0, #0xf, #0x1
 805e748: b200         	sxth	r0, r0
 805e74a: 460b         	mov	r3, r1
 805e74c: e742         	b	0x805e5d4 <_vfiprintf_r+0x42c> @ imm = #-0x17c
 805e74e: f045 0580    	orr	r5, r5, #0x80
 805e752: 783b         	ldrb	r3, [r7]
 805e754: e588         	b	0x805e268 <_vfiprintf_r+0xc0> @ imm = #-0x4f0
 805e756: 783b         	ldrb	r3, [r7]
 805e758: 2101         	movs	r1, #0x1
 805e75a: 202b         	movs	r0, #0x2b
 805e75c: e584         	b	0x805e268 <_vfiprintf_r+0xc0> @ imm = #-0x4f8
 805e75e: f045 0501    	orr	r5, r5, #0x1
 805e762: 783b         	ldrb	r3, [r7]
 805e764: e580         	b	0x805e268 <_vfiprintf_r+0xc0> @ imm = #-0x500
 805e766: 783b         	ldrb	r3, [r7]
 805e768: 2800         	cmp	r0, #0x0
 805e76a: f47f ad7d    	bne.w	0x805e268 <_vfiprintf_r+0xc0> @ imm = #-0x506
 805e76e: 2101         	movs	r1, #0x1
 805e770: 2020         	movs	r0, #0x20
 805e772: e579         	b	0x805e268 <_vfiprintf_r+0xc0> @ imm = #-0x50e
 805e774: f045 0540    	orr	r5, r5, #0x40
 805e778: 783b         	ldrb	r3, [r7]
 805e77a: e575         	b	0x805e268 <_vfiprintf_r+0xc0> @ imm = #-0x516
 805e77c: 2900         	cmp	r1, #0x0
 805e77e: f040 82bb    	bne.w	0x805ecf8 <_vfiprintf_r+0xb50> @ imm = #0x576
 805e782: 06ab         	lsls	r3, r5, #0x1a
 805e784: f100 8232    	bmi.w	0x805ebec <_vfiprintf_r+0xa44> @ imm = #0x464
 805e788: 06ee         	lsls	r6, r5, #0x1b
 805e78a: f100 825e    	bmi.w	0x805ec4a <_vfiprintf_r+0xaa2> @ imm = #0x4bc
 805e78e: 066d         	lsls	r5, r5, #0x19
 805e790: f140 825b    	bpl.w	0x805ec4a <_vfiprintf_r+0xaa2> @ imm = #0x4b6
 805e794: 9b06         	ldr	r3, [sp, #0x18]
 805e796: 9905         	ldr	r1, [sp, #0x14]
 805e798: f853 2b04    	ldr	r2, [r3], #4
 805e79c: 8011         	strh	r1, [r2]
 805e79e: 9306         	str	r3, [sp, #0x18]
 805e7a0: e535         	b	0x805e20e <_vfiprintf_r+0x66> @ imm = #-0x596
 805e7a2: 783b         	ldrb	r3, [r7]
 805e7a4: 2b6c         	cmp	r3, #0x6c
 805e7a6: f000 8277    	beq.w	0x805ec98 <_vfiprintf_r+0xaf0> @ imm = #0x4ee
 805e7aa: f045 0510    	orr	r5, r5, #0x10
 805e7ae: e55b         	b	0x805e268 <_vfiprintf_r+0xc0> @ imm = #-0x54a
 805e7b0: 9b06         	ldr	r3, [sp, #0x18]
 805e7b2: f04f 0200    	mov.w	r2, #0x0
 805e7b6: 2101         	movs	r1, #0x1
 805e7b8: ac10         	add	r4, sp, #0x40
 805e7ba: f88d 202f    	strb.w	r2, [sp, #0x2f]
 805e7be: f853 2b04    	ldr	r2, [r3], #4
 805e7c2: 9101         	str	r1, [sp, #0x4]
 805e7c4: f88d 2040    	strb.w	r2, [sp, #0x40]
 805e7c8: 9306         	str	r3, [sp, #0x18]
 805e7ca: 9103         	str	r1, [sp, #0xc]
 805e7cc: e6d4         	b	0x805e578 <_vfiprintf_r+0x3d0> @ imm = #-0x258
 805e7ce: 2900         	cmp	r1, #0x0
 805e7d0: f040 828c    	bne.w	0x805ecec <_vfiprintf_r+0xb44> @ imm = #0x518
 805e7d4: 4a30         	ldr	r2, [pc, #0xc0]         @ 0x805e898 <_vfiprintf_r+0x6f0>
 805e7d6: f015 0120    	ands	r1, r5, #0x20
 805e7da: 9209         	str	r2, [sp, #0x24]
 805e7dc: f47f af3b    	bne.w	0x805e656 <_vfiprintf_r+0x4ae> @ imm = #-0x18a
 805e7e0: f015 0210    	ands	r2, r5, #0x10
 805e7e4: f040 81e3    	bne.w	0x805ebae <_vfiprintf_r+0xa06> @ imm = #0x3c6
 805e7e8: f015 0140    	ands	r1, r5, #0x40
 805e7ec: f000 81df    	beq.w	0x805ebae <_vfiprintf_r+0xa06> @ imm = #0x3be
 805e7f0: 9c06         	ldr	r4, [sp, #0x18]
 805e7f2: 4611         	mov	r1, r2
 805e7f4: f854 0b04    	ldr	r0, [r4], #4
 805e7f8: b280         	uxth	r0, r0
 805e7fa: 9406         	str	r4, [sp, #0x18]
 805e7fc: e733         	b	0x805e666 <_vfiprintf_r+0x4be> @ imm = #-0x19a
 805e7fe: 9b03         	ldr	r3, [sp, #0xc]
 805e800: 2201         	movs	r2, #0x1
 805e802: f10d 0968    	add.w	r9, sp, #0x68
 805e806: 941a         	str	r4, [sp, #0x68]
 805e808: 931b         	str	r3, [sp, #0x6c]
 805e80a: 930f         	str	r3, [sp, #0x3c]
 805e80c: 920e         	str	r2, [sp, #0x38]
 805e80e: f109 0908    	add.w	r9, r9, #0x8
 805e812: e670         	b	0x805e4f6 <_vfiprintf_r+0x34e> @ imm = #-0x320
 805e814: 9d02         	ldr	r5, [sp, #0x8]
 805e816: 2b01         	cmp	r3, #0x1
 805e818: f000 818b    	beq.w	0x805eb32 <_vfiprintf_r+0x98a> @ imm = #0x316
 805e81c: 2b02         	cmp	r3, #0x2
 805e81e: ac1a         	add	r4, sp, #0x68
 805e820: d111         	bne	0x805e846 <_vfiprintf_r+0x69e> @ imm = #0x22
 805e822: 9a09         	ldr	r2, [sp, #0x24]
 805e824: f000 030f    	and	r3, r0, #0xf
 805e828: 0900         	lsrs	r0, r0, #0x4
 805e82a: 5cd3         	ldrb	r3, [r2, r3]
 805e82c: ea40 7001    	orr.w	r0, r0, r1, lsl #28
 805e830: 0909         	lsrs	r1, r1, #0x4
 805e832: f804 3d01    	strb	r3, [r4, #-1]!
 805e836: ea50 0301    	orrs.w	r3, r0, r1
 805e83a: d1f3         	bne	0x805e824 <_vfiprintf_r+0x67c> @ imm = #-0x1a
 805e83c: ab1a         	add	r3, sp, #0x68
 805e83e: 9502         	str	r5, [sp, #0x8]
 805e840: 1b1b         	subs	r3, r3, r4
 805e842: 9303         	str	r3, [sp, #0xc]
 805e844: e5e1         	b	0x805e40a <_vfiprintf_r+0x262> @ imm = #-0x43e
 805e846: f000 0307    	and	r3, r0, #0x7
 805e84a: 08c0         	lsrs	r0, r0, #0x3
 805e84c: 4622         	mov	r2, r4
 805e84e: ea40 7041    	orr.w	r0, r0, r1, lsl #29
 805e852: 3330         	adds	r3, #0x30
 805e854: 08c9         	lsrs	r1, r1, #0x3
 805e856: f804 3d01    	strb	r3, [r4, #-1]!
 805e85a: ea50 0c01    	orrs.w	r12, r0, r1
 805e85e: d1f2         	bne	0x805e846 <_vfiprintf_r+0x69e> @ imm = #-0x1c
 805e860: 2b30         	cmp	r3, #0x30
 805e862: d0eb         	beq	0x805e83c <_vfiprintf_r+0x694> @ imm = #-0x2a
 805e864: 07e8         	lsls	r0, r5, #0x1f
 805e866: d5e9         	bpl	0x805e83c <_vfiprintf_r+0x694> @ imm = #-0x2e
 805e868: 2330         	movs	r3, #0x30
 805e86a: 3a02         	subs	r2, #0x2
 805e86c: 9502         	str	r5, [sp, #0x8]
 805e86e: f804 3c01    	strb	r3, [r4, #-1]
 805e872: ab1a         	add	r3, sp, #0x68
 805e874: 4614         	mov	r4, r2
 805e876: 1a9b         	subs	r3, r3, r2
 805e878: 9303         	str	r3, [sp, #0xc]
 805e87a: e5c6         	b	0x805e40a <_vfiprintf_r+0x262> @ imm = #-0x474
 805e87c: 9b04         	ldr	r3, [sp, #0x10]
 805e87e: 9801         	ldr	r0, [sp, #0x4]
 805e880: 1a1e         	subs	r6, r3, r0
 805e882: 2e00         	cmp	r6, #0x0
 805e884: f77f ae19    	ble.w	0x805e4ba <_vfiprintf_r+0x312> @ imm = #-0x3ce
 805e888: 2e10         	cmp	r6, #0x10
 805e88a: f340 8250    	ble.w	0x805ed2e <_vfiprintf_r+0xb86> @ imm = #0x4a0
 805e88e: 4d03         	ldr	r5, [pc, #0xc]          @ 0x805e89c <_vfiprintf_r+0x6f4>
 805e890: 4660         	mov	r0, r12
 805e892: e012         	b	0x805e8ba <_vfiprintf_r+0x712> @ imm = #0x24

0805e894 <$d>:
 805e894: 58 48 00 00  	.word	0x00004858
 805e898: 44 48 00 00  	.word	0x00004844
 805e89c: 84 48 00 00  	.word	0x00004884

0805e8a0 <$t>:
 805e8a0: 4659         	mov	r1, r11
 805e8a2: 4640         	mov	r0, r8
 805e8a4: f7ff fc3c    	bl	0x805e120 <__sprint_r.part.0> @ imm = #-0x788
 805e8a8: 2800         	cmp	r0, #0x0
 805e8aa: f47f ae4d    	bne.w	0x805e548 <_vfiprintf_r+0x3a0> @ imm = #-0x366
 805e8ae: e9dd 200e    	ldrd	r2, r0, [sp, #56]
 805e8b2: 1c51         	adds	r1, r2, #0x1
 805e8b4: 3e10         	subs	r6, #0x10
 805e8b6: 2e10         	cmp	r6, #0x10
 805e8b8: dd19         	ble	0x805e8ee <_vfiprintf_r+0x746> @ imm = #0x32
 805e8ba: 1c53         	adds	r3, r2, #0x1
 805e8bc: 2110         	movs	r1, #0x10
 805e8be: 3010         	adds	r0, #0x10
 805e8c0: f8c9 5000    	str.w	r5, [r9]
 805e8c4: 2b07         	cmp	r3, #0x7
 805e8c6: f8c9 1004    	str.w	r1, [r9, #0x4]
 805e8ca: f102 0102    	add.w	r1, r2, #0x2
 805e8ce: f109 0908    	add.w	r9, r9, #0x8
 805e8d2: 461a         	mov	r2, r3
 805e8d4: e9cd 300e    	strd	r3, r0, [sp, #56]
 805e8d8: ddec         	ble	0x805e8b4 <_vfiprintf_r+0x70c> @ imm = #-0x28
 805e8da: aa0d         	add	r2, sp, #0x34
 805e8dc: f10d 0968    	add.w	r9, sp, #0x68
 805e8e0: 2800         	cmp	r0, #0x0
 805e8e2: d1dd         	bne	0x805e8a0 <_vfiprintf_r+0x6f8> @ imm = #-0x46
 805e8e4: 3e10         	subs	r6, #0x10
 805e8e6: 2101         	movs	r1, #0x1
 805e8e8: 4602         	mov	r2, r0
 805e8ea: 2e10         	cmp	r6, #0x10
 805e8ec: dce5         	bgt	0x805e8ba <_vfiprintf_r+0x712> @ imm = #-0x36
 805e8ee: 4684         	mov	r12, r0
 805e8f0: 4608         	mov	r0, r1
 805e8f2: 44b4         	add	r12, r6
 805e8f4: 2807         	cmp	r0, #0x7
 805e8f6: f8c9 5000    	str.w	r5, [r9]
 805e8fa: f8c9 6004    	str.w	r6, [r9, #0x4]
 805e8fe: e9cd 0c0e    	strd	r0, r12, [sp, #56]
 805e902: f340 816e    	ble.w	0x805ebe2 <_vfiprintf_r+0xa3a> @ imm = #0x2dc
 805e906: f1bc 0f00    	cmp.w	r12, #0x0
 805e90a: f000 81d4    	beq.w	0x805ecb6 <_vfiprintf_r+0xb0e> @ imm = #0x3a8
 805e90e: aa0d         	add	r2, sp, #0x34
 805e910: 4659         	mov	r1, r11
 805e912: 4640         	mov	r0, r8
 805e914: f7ff fc04    	bl	0x805e120 <__sprint_r.part.0> @ imm = #-0x7f8
 805e918: 2800         	cmp	r0, #0x0
 805e91a: f47f ae15    	bne.w	0x805e548 <_vfiprintf_r+0x3a0> @ imm = #-0x3d6
 805e91e: 9b03         	ldr	r3, [sp, #0xc]
 805e920: f10d 0968    	add.w	r9, sp, #0x68
 805e924: ebaa 0603    	sub.w	r6, r10, r3
 805e928: e9dd 2c0e    	ldrd	r2, r12, [sp, #56]
 805e92c: 2e00         	cmp	r6, #0x0
 805e92e: f102 0101    	add.w	r1, r2, #0x1
 805e932: f77f adc8    	ble.w	0x805e4c6 <_vfiprintf_r+0x31e> @ imm = #-0x470
 805e936: 2e10         	cmp	r6, #0x10
 805e938: 4dbb         	ldr	r5, [pc, #0x2ec]        @ 0x805ec28 <_vfiprintf_r+0xa80>
 805e93a: dd29         	ble	0x805e990 <_vfiprintf_r+0x7e8> @ imm = #0x52
 805e93c: 9407         	str	r4, [sp, #0x1c]
 805e93e: f04f 0a10    	mov.w	r10, #0x10
 805e942: 4664         	mov	r4, r12
 805e944: e00a         	b	0x805e95c <_vfiprintf_r+0x7b4> @ imm = #0x14
 805e946: f7ff fbeb    	bl	0x805e120 <__sprint_r.part.0> @ imm = #-0x82a
 805e94a: 2800         	cmp	r0, #0x0
 805e94c: f47f adfc    	bne.w	0x805e548 <_vfiprintf_r+0x3a0> @ imm = #-0x408
 805e950: e9dd 240e    	ldrd	r2, r4, [sp, #56]
 805e954: 1c51         	adds	r1, r2, #0x1
 805e956: 3e10         	subs	r6, #0x10
 805e958: 2e10         	cmp	r6, #0x10
 805e95a: dd17         	ble	0x805e98c <_vfiprintf_r+0x7e4> @ imm = #0x2e
 805e95c: 1c53         	adds	r3, r2, #0x1
 805e95e: 3410         	adds	r4, #0x10
 805e960: 1c91         	adds	r1, r2, #0x2
 805e962: 2b07         	cmp	r3, #0x7
 805e964: 461a         	mov	r2, r3
 805e966: e9c9 5a00    	strd	r5, r10, [r9]
 805e96a: e9cd 340e    	strd	r3, r4, [sp, #56]
 805e96e: f109 0908    	add.w	r9, r9, #0x8
 805e972: ddf0         	ble	0x805e956 <_vfiprintf_r+0x7ae> @ imm = #-0x20
 805e974: aa0d         	add	r2, sp, #0x34
 805e976: 4659         	mov	r1, r11
 805e978: 4640         	mov	r0, r8
 805e97a: f10d 0968    	add.w	r9, sp, #0x68
 805e97e: 2c00         	cmp	r4, #0x0
 805e980: d1e1         	bne	0x805e946 <_vfiprintf_r+0x79e> @ imm = #-0x3e
 805e982: 3e10         	subs	r6, #0x10
 805e984: 2101         	movs	r1, #0x1
 805e986: 4622         	mov	r2, r4
 805e988: 2e10         	cmp	r6, #0x10
 805e98a: dce7         	bgt	0x805e95c <_vfiprintf_r+0x7b4> @ imm = #-0x32
 805e98c: 46a4         	mov	r12, r4
 805e98e: 9c07         	ldr	r4, [sp, #0x1c]
 805e990: 44b4         	add	r12, r6
 805e992: 2907         	cmp	r1, #0x7
 805e994: f8c9 5000    	str.w	r5, [r9]
 805e998: f8c9 6004    	str.w	r6, [r9, #0x4]
 805e99c: e9cd 1c0e    	strd	r1, r12, [sp, #56]
 805e9a0: f300 80dd    	bgt.w	0x805eb5e <_vfiprintf_r+0x9b6> @ imm = #0x1ba
 805e9a4: f109 0908    	add.w	r9, r9, #0x8
 805e9a8: 3101         	adds	r1, #0x1
 805e9aa: e58c         	b	0x805e4c6 <_vfiprintf_r+0x31e> @ imm = #-0x4e8
 805e9ac: aa0d         	add	r2, sp, #0x34
 805e9ae: 4659         	mov	r1, r11
 805e9b0: 4640         	mov	r0, r8
 805e9b2: f7ff fbb5    	bl	0x805e120 <__sprint_r.part.0> @ imm = #-0x896
 805e9b6: 2800         	cmp	r0, #0x0
 805e9b8: f43f adb1    	beq.w	0x805e51e <_vfiprintf_r+0x376> @ imm = #-0x49e
 805e9bc: e5c4         	b	0x805e548 <_vfiprintf_r+0x3a0> @ imm = #-0x478
 805e9be: f1bc 0f00    	cmp.w	r12, #0x0
 805e9c2: f000 80c4    	beq.w	0x805eb4e <_vfiprintf_r+0x9a6> @ imm = #0x188
 805e9c6: aa0d         	add	r2, sp, #0x34
 805e9c8: 4659         	mov	r1, r11
 805e9ca: 4640         	mov	r0, r8
 805e9cc: f7ff fba8    	bl	0x805e120 <__sprint_r.part.0> @ imm = #-0x8b0
 805e9d0: 2800         	cmp	r0, #0x0
 805e9d2: f47f adb9    	bne.w	0x805e548 <_vfiprintf_r+0x3a0> @ imm = #-0x48e
 805e9d6: f10d 0968    	add.w	r9, sp, #0x68
 805e9da: e9dd 2c0e    	ldrd	r2, r12, [sp, #56]
 805e9de: 1c51         	adds	r1, r2, #0x1
 805e9e0: e547         	b	0x805e472 <_vfiprintf_r+0x2ca> @ imm = #-0x572
 805e9e2: 2302         	movs	r3, #0x2
 805e9e4: 2101         	movs	r1, #0x1
 805e9e6: f10d 0968    	add.w	r9, sp, #0x68
 805e9ea: 469c         	mov	r12, r3
 805e9ec: 931b         	str	r3, [sp, #0x6c]
 805e9ee: ab0c         	add	r3, sp, #0x30
 805e9f0: 931a         	str	r3, [sp, #0x68]
 805e9f2: 460a         	mov	r2, r1
 805e9f4: f109 0908    	add.w	r9, r9, #0x8
 805e9f8: 1c51         	adds	r1, r2, #0x1
 805e9fa: e55a         	b	0x805e4b2 <_vfiprintf_r+0x30a> @ imm = #-0x54c
 805e9fc: 2d10         	cmp	r5, #0x10
 805e9fe: f340 818d    	ble.w	0x805ed1c <_vfiprintf_r+0xb74> @ imm = #0x31a
 805ea02: 4e8a         	ldr	r6, [pc, #0x228]        @ 0x805ec2c <_vfiprintf_r+0xa84>
 805ea04: 2310         	movs	r3, #0x10
 805ea06: e9dd c00e    	ldrd	r12, r0, [sp, #56]
 805ea0a: 4662         	mov	r2, r12
 805ea0c: e00d         	b	0x805ea2a <_vfiprintf_r+0x882> @ imm = #0x1a
 805ea0e: 4640         	mov	r0, r8
 805ea10: f7ff fb86    	bl	0x805e120 <__sprint_r.part.0> @ imm = #-0x8f4
 805ea14: 2800         	cmp	r0, #0x0
 805ea16: f47f ad97    	bne.w	0x805e548 <_vfiprintf_r+0x3a0> @ imm = #-0x4d2
 805ea1a: 2310         	movs	r3, #0x10
 805ea1c: e9dd 200e    	ldrd	r2, r0, [sp, #56]
 805ea20: f102 0c01    	add.w	r12, r2, #0x1
 805ea24: 3d10         	subs	r5, #0x10
 805ea26: 2d10         	cmp	r5, #0x10
 805ea28: dd18         	ble	0x805ea5c <_vfiprintf_r+0x8b4> @ imm = #0x30
 805ea2a: 1c51         	adds	r1, r2, #0x1
 805ea2c: 3010         	adds	r0, #0x10
 805ea2e: f102 0c02    	add.w	r12, r2, #0x2
 805ea32: 2907         	cmp	r1, #0x7
 805ea34: 460a         	mov	r2, r1
 805ea36: e9c9 6300    	strd	r6, r3, [r9]
 805ea3a: e9cd 100e    	strd	r1, r0, [sp, #56]
 805ea3e: f109 0908    	add.w	r9, r9, #0x8
 805ea42: ddef         	ble	0x805ea24 <_vfiprintf_r+0x87c> @ imm = #-0x22
 805ea44: aa0d         	add	r2, sp, #0x34
 805ea46: 4659         	mov	r1, r11
 805ea48: f10d 0968    	add.w	r9, sp, #0x68
 805ea4c: 2800         	cmp	r0, #0x0
 805ea4e: d1de         	bne	0x805ea0e <_vfiprintf_r+0x866> @ imm = #-0x44
 805ea50: 3d10         	subs	r5, #0x10
 805ea52: 4602         	mov	r2, r0
 805ea54: f04f 0c01    	mov.w	r12, #0x1
 805ea58: 2d10         	cmp	r5, #0x10
 805ea5a: dce6         	bgt	0x805ea2a <_vfiprintf_r+0x882> @ imm = #-0x34
 805ea5c: 4662         	mov	r2, r12
 805ea5e: eb05 0c00    	add.w	r12, r5, r0
 805ea62: 2a07         	cmp	r2, #0x7
 805ea64: f8c9 6000    	str.w	r6, [r9]
 805ea68: f8c9 5004    	str.w	r5, [r9, #0x4]
 805ea6c: e9cd 2c0e    	strd	r2, r12, [sp, #56]
 805ea70: f300 80a2    	bgt.w	0x805ebb8 <_vfiprintf_r+0xa10> @ imm = #0x144
 805ea74: f109 0908    	add.w	r9, r9, #0x8
 805ea78: 1c51         	adds	r1, r2, #0x1
 805ea7a: e4e4         	b	0x805e446 <_vfiprintf_r+0x29e> @ imm = #-0x638
 805ea7c: 9a02         	ldr	r2, [sp, #0x8]
 805ea7e: 930e         	str	r3, [sp, #0x38]
 805ea80: 0751         	lsls	r1, r2, #0x1d
 805ea82: d547         	bpl	0x805eb14 <_vfiprintf_r+0x96c> @ imm = #0x8e
 805ea84: 9a04         	ldr	r2, [sp, #0x10]
 805ea86: 9901         	ldr	r1, [sp, #0x4]
 805ea88: 1a54         	subs	r4, r2, r1
 805ea8a: 2c00         	cmp	r4, #0x0
 805ea8c: dd42         	ble	0x805eb14 <_vfiprintf_r+0x96c> @ imm = #0x84
 805ea8e: f10d 0968    	add.w	r9, sp, #0x68
 805ea92: 2c10         	cmp	r4, #0x10
 805ea94: f340 8147    	ble.w	0x805ed26 <_vfiprintf_r+0xb7e> @ imm = #0x28e
 805ea98: 990e         	ldr	r1, [sp, #0x38]
 805ea9a: 2510         	movs	r5, #0x10
 805ea9c: 4e63         	ldr	r6, [pc, #0x18c]        @ 0x805ec2c <_vfiprintf_r+0xa84>
 805ea9e: 4608         	mov	r0, r1
 805eaa0: e00e         	b	0x805eac0 <_vfiprintf_r+0x918> @ imm = #0x1c
 805eaa2: 4659         	mov	r1, r11
 805eaa4: 4640         	mov	r0, r8
 805eaa6: f7ff fb3b    	bl	0x805e120 <__sprint_r.part.0> @ imm = #-0x98a
 805eaaa: 2800         	cmp	r0, #0x0
 805eaac: f47f ad4c    	bne.w	0x805e548 <_vfiprintf_r+0x3a0> @ imm = #-0x568
 805eab0: f10d 0968    	add.w	r9, sp, #0x68
 805eab4: e9dd 030e    	ldrd	r0, r3, [sp, #56]
 805eab8: 1c41         	adds	r1, r0, #0x1
 805eaba: 3c10         	subs	r4, #0x10
 805eabc: 2c10         	cmp	r4, #0x10
 805eabe: dd15         	ble	0x805eaec <_vfiprintf_r+0x944> @ imm = #0x2a
 805eac0: 1c42         	adds	r2, r0, #0x1
 805eac2: 3310         	adds	r3, #0x10
 805eac4: 1c81         	adds	r1, r0, #0x2
 805eac6: 2a07         	cmp	r2, #0x7
 805eac8: 4610         	mov	r0, r2
 805eaca: e9c9 6500    	strd	r6, r5, [r9]
 805eace: e9cd 230e    	strd	r2, r3, [sp, #56]
 805ead2: f109 0908    	add.w	r9, r9, #0x8
 805ead6: ddf0         	ble	0x805eaba <_vfiprintf_r+0x912> @ imm = #-0x20
 805ead8: aa0d         	add	r2, sp, #0x34
 805eada: 2b00         	cmp	r3, #0x0
 805eadc: d1e1         	bne	0x805eaa2 <_vfiprintf_r+0x8fa> @ imm = #-0x3e
 805eade: 3c10         	subs	r4, #0x10
 805eae0: 2101         	movs	r1, #0x1
 805eae2: 4618         	mov	r0, r3
 805eae4: f10d 0968    	add.w	r9, sp, #0x68
 805eae8: 2c10         	cmp	r4, #0x10
 805eaea: dce9         	bgt	0x805eac0 <_vfiprintf_r+0x918> @ imm = #-0x2e
 805eaec: 4608         	mov	r0, r1
 805eaee: 4423         	add	r3, r4
 805eaf0: 2807         	cmp	r0, #0x7
 805eaf2: e9c9 6400    	strd	r6, r4, [r9]
 805eaf6: e9cd 030e    	strd	r0, r3, [sp, #56]
 805eafa: f77f ad05    	ble.w	0x805e508 <_vfiprintf_r+0x360> @ imm = #-0x5f6
 805eafe: b14b         	cbz	r3, 0x805eb14 <_vfiprintf_r+0x96c> @ imm = #0x12
 805eb00: aa0d         	add	r2, sp, #0x34
 805eb02: 4659         	mov	r1, r11
 805eb04: 4640         	mov	r0, r8
 805eb06: f7ff fb0b    	bl	0x805e120 <__sprint_r.part.0> @ imm = #-0x9ea
 805eb0a: 2800         	cmp	r0, #0x0
 805eb0c: f47f ad1c    	bne.w	0x805e548 <_vfiprintf_r+0x3a0> @ imm = #-0x5c8
 805eb10: 9b0f         	ldr	r3, [sp, #0x3c]
 805eb12: e4f9         	b	0x805e508 <_vfiprintf_r+0x360> @ imm = #-0x60e
 805eb14: e9dd 2304    	ldrd	r2, r3, [sp, #16]
 805eb18: 9901         	ldr	r1, [sp, #0x4]
 805eb1a: 428a         	cmp	r2, r1
 805eb1c: bfac         	ite	ge
 805eb1e: 189b         	addge	r3, r3, r2
 805eb20: 185b         	addlt	r3, r3, r1
 805eb22: 9305         	str	r3, [sp, #0x14]
 805eb24: e4fb         	b	0x805e51e <_vfiprintf_r+0x376> @ imm = #-0x60a
 805eb26: 4692         	mov	r10, r2
 805eb28: ac1a         	add	r4, sp, #0x68
 805eb2a: 9203         	str	r2, [sp, #0xc]
 805eb2c: e46d         	b	0x805e40a <_vfiprintf_r+0x262> @ imm = #-0x726
 805eb2e: f89d 602f    	ldrb.w	r6, [sp, #0x2f]
 805eb32: 280a         	cmp	r0, #0xa
 805eb34: f171 0300    	sbcs	r3, r1, #0x0
 805eb38: f080 808f    	bhs.w	0x805ec5a <_vfiprintf_r+0xab2> @ imm = #0x11e
 805eb3c: 3030         	adds	r0, #0x30
 805eb3e: 2301         	movs	r3, #0x1
 805eb40: f10d 0467    	add.w	r4, sp, #0x67
 805eb44: 9502         	str	r5, [sp, #0x8]
 805eb46: f88d 0067    	strb.w	r0, [sp, #0x67]
 805eb4a: 9303         	str	r3, [sp, #0xc]
 805eb4c: e45d         	b	0x805e40a <_vfiprintf_r+0x262> @ imm = #-0x746
 805eb4e: 9b07         	ldr	r3, [sp, #0x1c]
 805eb50: 2b00         	cmp	r3, #0x0
 805eb52: d155         	bne	0x805ec00 <_vfiprintf_r+0xa58> @ imm = #0xaa
 805eb54: 2101         	movs	r1, #0x1
 805eb56: 4662         	mov	r2, r12
 805eb58: f10d 0968    	add.w	r9, sp, #0x68
 805eb5c: e4a9         	b	0x805e4b2 <_vfiprintf_r+0x30a> @ imm = #-0x6ae
 805eb5e: f1bc 0f00    	cmp.w	r12, #0x0
 805eb62: f43f ae4c    	beq.w	0x805e7fe <_vfiprintf_r+0x656> @ imm = #-0x368
 805eb66: aa0d         	add	r2, sp, #0x34
 805eb68: 4659         	mov	r1, r11
 805eb6a: 4640         	mov	r0, r8
 805eb6c: f7ff fad8    	bl	0x805e120 <__sprint_r.part.0> @ imm = #-0xa50
 805eb70: 2800         	cmp	r0, #0x0
 805eb72: f47f ace9    	bne.w	0x805e548 <_vfiprintf_r+0x3a0> @ imm = #-0x62e
 805eb76: 990e         	ldr	r1, [sp, #0x38]
 805eb78: f10d 0968    	add.w	r9, sp, #0x68
 805eb7c: f8dd c03c    	ldr.w	r12, [sp, #0x3c]
 805eb80: 3101         	adds	r1, #0x1
 805eb82: e4a0         	b	0x805e4c6 <_vfiprintf_r+0x31e> @ imm = #-0x6c0
 805eb84: f10d 0968    	add.w	r9, sp, #0x68
 805eb88: 920e         	str	r2, [sp, #0x38]
 805eb8a: f7ff bb5a    	b.w	0x805e242 <_vfiprintf_r+0x9a> @ imm = #-0x94c
 805eb8e: ac1a         	add	r4, sp, #0x68
 805eb90: e43b         	b	0x805e40a <_vfiprintf_r+0x262> @ imm = #-0x78a
 805eb92: 17c1         	asrs	r1, r0, #0x1f
 805eb94: 460b         	mov	r3, r1
 805eb96: 2b00         	cmp	r3, #0x0
 805eb98: f6bf ad1f    	bge.w	0x805e5da <_vfiprintf_r+0x432> @ imm = #-0x5c2
 805eb9c: 232d         	movs	r3, #0x2d
 805eb9e: 4240         	rsbs	r0, r0, #0
 805eba0: 461e         	mov	r6, r3
 805eba2: f88d 302f    	strb.w	r3, [sp, #0x2f]
 805eba6: eb61 0141    	sbc.w	r1, r1, r1, lsl #1
 805ebaa: 2301         	movs	r3, #0x1
 805ebac: e40c         	b	0x805e3c8 <_vfiprintf_r+0x220> @ imm = #-0x7e8
 805ebae: 9a06         	ldr	r2, [sp, #0x18]
 805ebb0: f852 0b04    	ldr	r0, [r2], #4
 805ebb4: 9206         	str	r2, [sp, #0x18]
 805ebb6: e556         	b	0x805e666 <_vfiprintf_r+0x4be> @ imm = #-0x554
 805ebb8: f1bc 0f00    	cmp.w	r12, #0x0
 805ebbc: d038         	beq	0x805ec30 <_vfiprintf_r+0xa88> @ imm = #0x70
 805ebbe: aa0d         	add	r2, sp, #0x34
 805ebc0: 4659         	mov	r1, r11
 805ebc2: 4640         	mov	r0, r8
 805ebc4: f7ff faac    	bl	0x805e120 <__sprint_r.part.0> @ imm = #-0xaa8
 805ebc8: 2800         	cmp	r0, #0x0
 805ebca: f47f acbd    	bne.w	0x805e548 <_vfiprintf_r+0x3a0> @ imm = #-0x686
 805ebce: f10d 0968    	add.w	r9, sp, #0x68
 805ebd2: e9dd 2c0e    	ldrd	r2, r12, [sp, #56]
 805ebd6: 1c51         	adds	r1, r2, #0x1
 805ebd8: e435         	b	0x805e446 <_vfiprintf_r+0x29e> @ imm = #-0x796
 805ebda: 9306         	str	r3, [sp, #0x18]
 805ebdc: 783b         	ldrb	r3, [r7]
 805ebde: f7ff bb43    	b.w	0x805e268 <_vfiprintf_r+0xc0> @ imm = #-0x97a
 805ebe2: f109 0908    	add.w	r9, r9, #0x8
 805ebe6: 1c41         	adds	r1, r0, #0x1
 805ebe8: 4602         	mov	r2, r0
 805ebea: e466         	b	0x805e4ba <_vfiprintf_r+0x312> @ imm = #-0x734
 805ebec: e9dd 0305    	ldrd	r0, r3, [sp, #20]
 805ebf0: f853 1b04    	ldr	r1, [r3], #4
 805ebf4: 17c2         	asrs	r2, r0, #0x1f
 805ebf6: 9306         	str	r3, [sp, #0x18]
 805ebf8: e9c1 0200    	strd	r0, r2, [r1]
 805ebfc: f7ff bb07    	b.w	0x805e20e <_vfiprintf_r+0x66> @ imm = #-0x9f2
 805ec00: 2302         	movs	r3, #0x2
 805ec02: f10d 0968    	add.w	r9, sp, #0x68
 805ec06: 469c         	mov	r12, r3
 805ec08: 931b         	str	r3, [sp, #0x6c]
 805ec0a: ab0c         	add	r3, sp, #0x30
 805ec0c: 931a         	str	r3, [sp, #0x68]
 805ec0e: e6f1         	b	0x805e9f4 <_vfiprintf_r+0x84c> @ imm = #-0x21e
 805ec10: 4620         	mov	r0, r4
 805ec12: 9606         	str	r6, [sp, #0x18]
 805ec14: 9502         	str	r5, [sp, #0x8]
 805ec16: f04f 0a00    	mov.w	r10, #0x0
 805ec1a: f7ff fffe    	bl	0x805ec1a <_vfiprintf_r+0xa72> @ imm = #-0x4
 805ec1e: f89d 602f    	ldrb.w	r6, [sp, #0x2f]
 805ec22: 9003         	str	r0, [sp, #0xc]
 805ec24: f7ff bbf1    	b.w	0x805e40a <_vfiprintf_r+0x262> @ imm = #-0x81e

0805ec28 <$d>:
 805ec28: 84 48 00 00  	.word	0x00004884
 805ec2c: 74 48 00 00  	.word	0x00004874

0805ec30 <$t>:
 805ec30: f89d 202f    	ldrb.w	r2, [sp, #0x2f]
 805ec34: 2a00         	cmp	r2, #0x0
 805ec36: d144         	bne	0x805ecc2 <_vfiprintf_r+0xb1a> @ imm = #0x88
 805ec38: 9b07         	ldr	r3, [sp, #0x1c]
 805ec3a: 2b00         	cmp	r3, #0x0
 805ec3c: f47f aed1    	bne.w	0x805e9e2 <_vfiprintf_r+0x83a> @ imm = #-0x25e
 805ec40: 4662         	mov	r2, r12
 805ec42: 2101         	movs	r1, #0x1
 805ec44: f10d 0968    	add.w	r9, sp, #0x68
 805ec48: e437         	b	0x805e4ba <_vfiprintf_r+0x312> @ imm = #-0x792
 805ec4a: 9b06         	ldr	r3, [sp, #0x18]
 805ec4c: 9905         	ldr	r1, [sp, #0x14]
 805ec4e: f853 2b04    	ldr	r2, [r3], #4
 805ec52: 6011         	str	r1, [r2]
 805ec54: 9306         	str	r3, [sp, #0x18]
 805ec56: f7ff bada    	b.w	0x805e20e <_vfiprintf_r+0x66> @ imm = #-0xa4c
 805ec5a: ac1a         	add	r4, sp, #0x68
 805ec5c: e9cd 5a01    	strd	r5, r10, [sp, #4]
 805ec60: 220a         	movs	r2, #0xa
 805ec62: 2300         	movs	r3, #0x0
 805ec64: 4682         	mov	r10, r0
 805ec66: 460d         	mov	r5, r1
 805ec68: f7ff fffe    	bl	0x805ec68 <_vfiprintf_r+0xac0> @ imm = #-0x4
 805ec6c: 3230         	adds	r2, #0x30
 805ec6e: 2300         	movs	r3, #0x0
 805ec70: 4650         	mov	r0, r10
 805ec72: f804 2d01    	strb	r2, [r4, #-1]!
 805ec76: 4629         	mov	r1, r5
 805ec78: 220a         	movs	r2, #0xa
 805ec7a: f7ff fffe    	bl	0x805ec7a <_vfiprintf_r+0xad2> @ imm = #-0x4
 805ec7e: f1ba 0f0a    	cmp.w	r10, #0xa
 805ec82: f175 0300    	sbcs	r3, r5, #0x0
 805ec86: d2eb         	bhs	0x805ec60 <_vfiprintf_r+0xab8> @ imm = #-0x2a
 805ec88: ab1a         	add	r3, sp, #0x68
 805ec8a: e9dd 5a01    	ldrd	r5, r10, [sp, #4]
 805ec8e: 1b1b         	subs	r3, r3, r4
 805ec90: 9502         	str	r5, [sp, #0x8]
 805ec92: 9303         	str	r3, [sp, #0xc]
 805ec94: f7ff bbb9    	b.w	0x805e40a <_vfiprintf_r+0x262> @ imm = #-0x88e
 805ec98: 787b         	ldrb	r3, [r7, #0x1]
 805ec9a: f045 0520    	orr	r5, r5, #0x20
 805ec9e: 3701         	adds	r7, #0x1
 805eca0: f7ff bae2    	b.w	0x805e268 <_vfiprintf_r+0xc0> @ imm = #-0xa3c
 805eca4: 4653         	mov	r3, r10
 805eca6: 4c2a         	ldr	r4, [pc, #0xa8]         @ 0x805ed50 <_vfiprintf_r+0xba8>
 805eca8: 9606         	str	r6, [sp, #0x18]
 805ecaa: 2b06         	cmp	r3, #0x6
 805ecac: bf28         	it	hs
 805ecae: 2306         	movhs	r3, #0x6
 805ecb0: 9303         	str	r3, [sp, #0xc]
 805ecb2: 9301         	str	r3, [sp, #0x4]
 805ecb4: e460         	b	0x805e578 <_vfiprintf_r+0x3d0> @ imm = #-0x740
 805ecb6: 2101         	movs	r1, #0x1
 805ecb8: 4662         	mov	r2, r12
 805ecba: f10d 0968    	add.w	r9, sp, #0x68
 805ecbe: f7ff bbfc    	b.w	0x805e4ba <_vfiprintf_r+0x312> @ imm = #-0x808
 805ecc2: 2101         	movs	r1, #0x1
 805ecc4: f10d 022f    	add.w	r2, sp, #0x2f
 805ecc8: f10d 0968    	add.w	r9, sp, #0x68
 805eccc: 468c         	mov	r12, r1
 805ecce: 911b         	str	r1, [sp, #0x6c]
 805ecd0: 921a         	str	r2, [sp, #0x68]
 805ecd2: f7ff bbca    	b.w	0x805e46a <_vfiprintf_r+0x2c2> @ imm = #-0x86c
 805ecd6: f88d 002f    	strb.w	r0, [sp, #0x2f]
 805ecda: e441         	b	0x805e560 <_vfiprintf_r+0x3b8> @ imm = #-0x77e
 805ecdc: aa0d         	add	r2, sp, #0x34
 805ecde: 4659         	mov	r1, r11
 805ece0: 4640         	mov	r0, r8
 805ece2: f7ff fa1d    	bl	0x805e120 <__sprint_r.part.0> @ imm = #-0xbc6
 805ece6: e42f         	b	0x805e548 <_vfiprintf_r+0x3a0> @ imm = #-0x7a2
 805ece8: 9d02         	ldr	r5, [sp, #0x8]
 805ecea: e722         	b	0x805eb32 <_vfiprintf_r+0x98a> @ imm = #-0x1bc
 805ecec: f88d 002f    	strb.w	r0, [sp, #0x2f]
 805ecf0: e570         	b	0x805e7d4 <_vfiprintf_r+0x62c> @ imm = #-0x520
 805ecf2: f88d 002f    	strb.w	r0, [sp, #0x2f]
 805ecf6: e4a8         	b	0x805e64a <_vfiprintf_r+0x4a2> @ imm = #-0x6b0
 805ecf8: f88d 002f    	strb.w	r0, [sp, #0x2f]
 805ecfc: e541         	b	0x805e782 <_vfiprintf_r+0x5da> @ imm = #-0x57e
 805ecfe: f88d 002f    	strb.w	r0, [sp, #0x2f]
 805ed02: e510         	b	0x805e726 <_vfiprintf_r+0x57e> @ imm = #-0x5e0
 805ed04: f88d 002f    	strb.w	r0, [sp, #0x2f]
 805ed08: e457         	b	0x805e5ba <_vfiprintf_r+0x412> @ imm = #-0x752
 805ed0a: f8cd a00c    	str.w	r10, [sp, #0xc]
 805ed0e: 4682         	mov	r10, r0
 805ed10: 9606         	str	r6, [sp, #0x18]
 805ed12: 9502         	str	r5, [sp, #0x8]
 805ed14: f89d 602f    	ldrb.w	r6, [sp, #0x2f]
 805ed18: f7ff bb77    	b.w	0x805e40a <_vfiprintf_r+0x262> @ imm = #-0x912
 805ed1c: 9a0e         	ldr	r2, [sp, #0x38]
 805ed1e: 980f         	ldr	r0, [sp, #0x3c]
 805ed20: 3201         	adds	r2, #0x1
 805ed22: 4e0c         	ldr	r6, [pc, #0x30]         @ 0x805ed54 <_vfiprintf_r+0xbac>
 805ed24: e69b         	b	0x805ea5e <_vfiprintf_r+0x8b6> @ imm = #-0x2ca
 805ed26: 980e         	ldr	r0, [sp, #0x38]
 805ed28: 4e0a         	ldr	r6, [pc, #0x28]         @ 0x805ed54 <_vfiprintf_r+0xbac>
 805ed2a: 3001         	adds	r0, #0x1
 805ed2c: e6df         	b	0x805eaee <_vfiprintf_r+0x946> @ imm = #-0x242
 805ed2e: 4608         	mov	r0, r1
 805ed30: 4d09         	ldr	r5, [pc, #0x24]         @ 0x805ed58 <_vfiprintf_r+0xbb0>
 805ed32: e5de         	b	0x805e8f2 <_vfiprintf_r+0x74a> @ imm = #-0x444
 805ed34: f04f 33ff    	mov.w	r3, #0xffffffff
 805ed38: 9305         	str	r3, [sp, #0x14]
 805ed3a: e40a         	b	0x805e552 <_vfiprintf_r+0x3aa> @ imm = #-0x7ec
 805ed3c: 9a06         	ldr	r2, [sp, #0x18]
 805ed3e: 787b         	ldrb	r3, [r7, #0x1]
 805ed40: 4627         	mov	r7, r4
 805ed42: f852 4b04    	ldr	r4, [r2], #4
 805ed46: ea44 7ae4    	orr.w	r10, r4, r4, asr #31
 805ed4a: 9206         	str	r2, [sp, #0x18]
 805ed4c: f7ff ba8c    	b.w	0x805e268 <_vfiprintf_r+0xc0> @ imm = #-0xae8

0805ed50 <$d>:
 805ed50: 6c 48 00 00  	.word	0x0000486c
 805ed54: 74 48 00 00  	.word	0x00004874
 805ed58: 84 48 00 00  	.word	0x00004884

0805ed5c <vfiprintf>:
 805ed5c: b410         	push	{r4}
 805ed5e: 4c04         	ldr	r4, [pc, #0x10]         @ 0x805ed70 <vfiprintf+0x14>
 805ed60: 4613         	mov	r3, r2
 805ed62: 460a         	mov	r2, r1
 805ed64: 4601         	mov	r1, r0
 805ed66: 6820         	ldr	r0, [r4]
 805ed68: bc10         	pop	{r4}
 805ed6a: f7ff bffe    	b.w	0x805ed6a <vfiprintf+0xe> @ imm = #-0x4
 805ed6e: bf00         	nop

0805ed70 <$d>:
 805ed70: 00 00 00 00  	.word	0x00000000

0805ed74 <__sbprintf>:
 805ed74: b570         	push	{r4, r5, r6, lr}
 805ed76: f5ad 6d8d    	sub.w	sp, sp, #0x468
 805ed7a: 460c         	mov	r4, r1
 805ed7c: 4606         	mov	r6, r0
 805ed7e: a91a         	add	r1, sp, #0x68
 805ed80: 9100         	str	r1, [sp]
 805ed82: 9104         	str	r1, [sp, #0x10]
 805ed84: 89a1         	ldrh	r1, [r4, #0xc]
 805ed86: f021 0102    	bic	r1, r1, #0x2
 805ed8a: f8ad 100c    	strh.w	r1, [sp, #0xc]
 805ed8e: 6e61         	ldr	r1, [r4, #0x64]
 805ed90: 9119         	str	r1, [sp, #0x64]
 805ed92: 89e1         	ldrh	r1, [r4, #0xe]
 805ed94: f8ad 100e    	strh.w	r1, [sp, #0xe]
 805ed98: 69e1         	ldr	r1, [r4, #0x1c]
 805ed9a: 9107         	str	r1, [sp, #0x1c]
 805ed9c: 6a61         	ldr	r1, [r4, #0x24]
 805ed9e: 9109         	str	r1, [sp, #0x24]
 805eda0: f44f 6180    	mov.w	r1, #0x400
 805eda4: 9102         	str	r1, [sp, #0x8]
 805eda6: 9105         	str	r1, [sp, #0x14]
 805eda8: 2100         	movs	r1, #0x0
 805edaa: 9106         	str	r1, [sp, #0x18]
 805edac: 4669         	mov	r1, sp
 805edae: f7ff fffe    	bl	0x805edae <__sbprintf+0x3a> @ imm = #-0x4
 805edb2: 1e05         	subs	r5, r0, #0x0
 805edb4: db07         	blt	0x805edc6 <__sbprintf+0x52> @ imm = #0xe
 805edb6: 4669         	mov	r1, sp
 805edb8: 4630         	mov	r0, r6
 805edba: f7ff fffe    	bl	0x805edba <__sbprintf+0x46> @ imm = #-0x4
 805edbe: 2800         	cmp	r0, #0x0
 805edc0: bf18         	it	ne
 805edc2: f04f 35ff    	movne.w	r5, #0xffffffff
 805edc6: f8bd 300c    	ldrh.w	r3, [sp, #0xc]
 805edca: 065b         	lsls	r3, r3, #0x19
 805edcc: d503         	bpl	0x805edd6 <__sbprintf+0x62> @ imm = #0x6
 805edce: 89a3         	ldrh	r3, [r4, #0xc]
 805edd0: f043 0340    	orr	r3, r3, #0x40
 805edd4: 81a3         	strh	r3, [r4, #0xc]
 805edd6: 4628         	mov	r0, r5
 805edd8: f50d 6d8d    	add.w	sp, sp, #0x468
 805eddc: bd70         	pop	{r4, r5, r6, pc}
 805edde: bf00         	nop

0805ede0 <__swsetup_r>:
 805ede0: b538         	push	{r3, r4, r5, lr}
 805ede2: 4b33         	ldr	r3, [pc, #0xcc]         @ 0x805eeb0 <__swsetup_r+0xd0>
 805ede4: 4605         	mov	r5, r0
 805ede6: 460c         	mov	r4, r1
 805ede8: 681b         	ldr	r3, [r3]
 805edea: b10b         	cbz	r3, 0x805edf0 <__swsetup_r+0x10> @ imm = #0x2
 805edec: 6b9a         	ldr	r2, [r3, #0x38]
 805edee: b1da         	cbz	r2, 0x805ee28 <__swsetup_r+0x48> @ imm = #0x36
 805edf0: f9b4 300c    	ldrsh.w	r3, [r4, #0xc]
 805edf4: 0718         	lsls	r0, r3, #0x1c
 805edf6: b29a         	uxth	r2, r3
 805edf8: d51e         	bpl	0x805ee38 <__swsetup_r+0x58> @ imm = #0x3c
 805edfa: 6921         	ldr	r1, [r4, #0x10]
 805edfc: b339         	cbz	r1, 0x805ee4e <__swsetup_r+0x6e> @ imm = #0x4e
 805edfe: f012 0001    	ands	r0, r2, #0x1
 805ee02: d007         	beq	0x805ee14 <__swsetup_r+0x34> @ imm = #0xe
 805ee04: 2000         	movs	r0, #0x0
 805ee06: 60a0         	str	r0, [r4, #0x8]
 805ee08: 6960         	ldr	r0, [r4, #0x14]
 805ee0a: 4240         	rsbs	r0, r0, #0
 805ee0c: 61a0         	str	r0, [r4, #0x18]
 805ee0e: b139         	cbz	r1, 0x805ee20 <__swsetup_r+0x40> @ imm = #0xe
 805ee10: 2000         	movs	r0, #0x0
 805ee12: bd38         	pop	{r3, r4, r5, pc}
 805ee14: 0795         	lsls	r5, r2, #0x1e
 805ee16: bf58         	it	pl
 805ee18: 6960         	ldrpl	r0, [r4, #0x14]
 805ee1a: 60a0         	str	r0, [r4, #0x8]
 805ee1c: 2900         	cmp	r1, #0x0
 805ee1e: d1f7         	bne	0x805ee10 <__swsetup_r+0x30> @ imm = #-0x12
 805ee20: 0612         	lsls	r2, r2, #0x18
 805ee22: d43e         	bmi	0x805eea2 <__swsetup_r+0xc2> @ imm = #0x7c
 805ee24: 4608         	mov	r0, r1
 805ee26: bd38         	pop	{r3, r4, r5, pc}
 805ee28: 4618         	mov	r0, r3
 805ee2a: f7ff fffe    	bl	0x805ee2a <__swsetup_r+0x4a> @ imm = #-0x4
 805ee2e: f9b4 300c    	ldrsh.w	r3, [r4, #0xc]
 805ee32: 0718         	lsls	r0, r3, #0x1c
 805ee34: b29a         	uxth	r2, r3
 805ee36: d4e0         	bmi	0x805edfa <__swsetup_r+0x1a> @ imm = #-0x40
 805ee38: 06d1         	lsls	r1, r2, #0x1b
 805ee3a: d52a         	bpl	0x805ee92 <__swsetup_r+0xb2> @ imm = #0x54
 805ee3c: 0752         	lsls	r2, r2, #0x1d
 805ee3e: d414         	bmi	0x805ee6a <__swsetup_r+0x8a> @ imm = #0x28
 805ee40: 6921         	ldr	r1, [r4, #0x10]
 805ee42: f043 0308    	orr	r3, r3, #0x8
 805ee46: b29a         	uxth	r2, r3
 805ee48: 81a3         	strh	r3, [r4, #0xc]
 805ee4a: 2900         	cmp	r1, #0x0
 805ee4c: d1d7         	bne	0x805edfe <__swsetup_r+0x1e> @ imm = #-0x52
 805ee4e: f402 7020    	and	r0, r2, #0x280
 805ee52: f5b0 7f00    	cmp.w	r0, #0x200
 805ee56: d0d2         	beq	0x805edfe <__swsetup_r+0x1e> @ imm = #-0x5c
 805ee58: 4621         	mov	r1, r4
 805ee5a: 4628         	mov	r0, r5
 805ee5c: f7ff fffe    	bl	0x805ee5c <__swsetup_r+0x7c> @ imm = #-0x4
 805ee60: f9b4 300c    	ldrsh.w	r3, [r4, #0xc]
 805ee64: 6921         	ldr	r1, [r4, #0x10]
 805ee66: b29a         	uxth	r2, r3
 805ee68: e7c9         	b	0x805edfe <__swsetup_r+0x1e> @ imm = #-0x6e
 805ee6a: 6b21         	ldr	r1, [r4, #0x30]
 805ee6c: b151         	cbz	r1, 0x805ee84 <__swsetup_r+0xa4> @ imm = #0x14
 805ee6e: f104 0240    	add.w	r2, r4, #0x40
 805ee72: 4291         	cmp	r1, r2
 805ee74: d004         	beq	0x805ee80 <__swsetup_r+0xa0> @ imm = #0x8
 805ee76: 4628         	mov	r0, r5
 805ee78: f7ff fffe    	bl	0x805ee78 <__swsetup_r+0x98> @ imm = #-0x4
 805ee7c: f9b4 300c    	ldrsh.w	r3, [r4, #0xc]
 805ee80: 2200         	movs	r2, #0x0
 805ee82: 6322         	str	r2, [r4, #0x30]
 805ee84: 2200         	movs	r2, #0x0
 805ee86: 6921         	ldr	r1, [r4, #0x10]
 805ee88: f023 0324    	bic	r3, r3, #0x24
 805ee8c: e9c4 1200    	strd	r1, r2, [r4]
 805ee90: e7d7         	b	0x805ee42 <__swsetup_r+0x62> @ imm = #-0x52
 805ee92: 2209         	movs	r2, #0x9
 805ee94: f043 0340    	orr	r3, r3, #0x40
 805ee98: f04f 30ff    	mov.w	r0, #0xffffffff
 805ee9c: 602a         	str	r2, [r5]
 805ee9e: 81a3         	strh	r3, [r4, #0xc]
 805eea0: bd38         	pop	{r3, r4, r5, pc}
 805eea2: f043 0340    	orr	r3, r3, #0x40
 805eea6: f04f 30ff    	mov.w	r0, #0xffffffff
 805eeaa: 81a3         	strh	r3, [r4, #0xc]
 805eeac: bd38         	pop	{r3, r4, r5, pc}
 805eeae: bf00         	nop

0805eeb0 <$d>:
 805eeb0: 00 00 00 00  	.word	0x00000000

0805eeb4 <abort>:
 805eeb4: 2006         	movs	r0, #0x6
 805eeb6: b508         	push	{r3, lr}
 805eeb8: f7ff fffe    	bl	0x805eeb8 <abort+0x4>   @ imm = #-0x4
 805eebc: 2001         	movs	r0, #0x1
 805eebe: f7ff fffe    	bl	0x805eebe <abort+0xa>   @ imm = #-0x4
 805eec2: bf00         	nop

0805eec4 <__sflush_r>:
 805eec4: f9b1 200c    	ldrsh.w	r2, [r1, #0xc]
 805eec8: b5f8         	push	{r3, r4, r5, r6, r7, lr}
 805eeca: 460c         	mov	r4, r1
 805eecc: 0711         	lsls	r1, r2, #0x1c
 805eece: 4607         	mov	r7, r0
 805eed0: d42e         	bmi	0x805ef30 <__sflush_r+0x6c> @ imm = #0x5c
 805eed2: 6863         	ldr	r3, [r4, #0x4]
 805eed4: f442 6200    	orr	r2, r2, #0x800
 805eed8: 2b00         	cmp	r3, #0x0
 805eeda: 81a2         	strh	r2, [r4, #0xc]
 805eedc: dd46         	ble	0x805ef6c <__sflush_r+0xa8> @ imm = #0x8c
 805eede: 6aa5         	ldr	r5, [r4, #0x28]
 805eee0: 2d00         	cmp	r5, #0x0
 805eee2: d041         	beq	0x805ef68 <__sflush_r+0xa4> @ imm = #0x82
 805eee4: 2300         	movs	r3, #0x0
 805eee6: 683e         	ldr	r6, [r7]
 805eee8: 603b         	str	r3, [r7]
 805eeea: b293         	uxth	r3, r2
 805eeec: f412 5280    	ands	r2, r2, #0x1000
 805eef0: d140         	bne	0x805ef74 <__sflush_r+0xb0> @ imm = #0x80
 805eef2: 2301         	movs	r3, #0x1
 805eef4: 69e1         	ldr	r1, [r4, #0x1c]
 805eef6: 4638         	mov	r0, r7
 805eef8: 47a8         	blx	r5
 805eefa: 1c42         	adds	r2, r0, #0x1
 805eefc: d071         	beq	0x805efe2 <__sflush_r+0x11e> @ imm = #0xe2
 805eefe: 89a3         	ldrh	r3, [r4, #0xc]
 805ef00: 6aa5         	ldr	r5, [r4, #0x28]
 805ef02: 075b         	lsls	r3, r3, #0x1d
 805ef04: d505         	bpl	0x805ef12 <__sflush_r+0x4e> @ imm = #0xa
 805ef06: 6863         	ldr	r3, [r4, #0x4]
 805ef08: 1ac0         	subs	r0, r0, r3
 805ef0a: 6b23         	ldr	r3, [r4, #0x30]
 805ef0c: b10b         	cbz	r3, 0x805ef12 <__sflush_r+0x4e> @ imm = #0x2
 805ef0e: 6be3         	ldr	r3, [r4, #0x3c]
 805ef10: 1ac0         	subs	r0, r0, r3
 805ef12: 4602         	mov	r2, r0
 805ef14: 2300         	movs	r3, #0x0
 805ef16: 69e1         	ldr	r1, [r4, #0x1c]
 805ef18: 4638         	mov	r0, r7
 805ef1a: 47a8         	blx	r5
 805ef1c: 1c45         	adds	r5, r0, #0x1
 805ef1e: d132         	bne	0x805ef86 <__sflush_r+0xc2> @ imm = #0x64
 805ef20: 683a         	ldr	r2, [r7]
 805ef22: 2a1d         	cmp	r2, #0x1d
 805ef24: d94a         	bls	0x805efbc <__sflush_r+0xf8> @ imm = #0x94
 805ef26: 89a3         	ldrh	r3, [r4, #0xc]
 805ef28: f043 0340    	orr	r3, r3, #0x40
 805ef2c: 81a3         	strh	r3, [r4, #0xc]
 805ef2e: bdf8         	pop	{r3, r4, r5, r6, r7, pc}
 805ef30: 6926         	ldr	r6, [r4, #0x10]
 805ef32: b1ce         	cbz	r6, 0x805ef68 <__sflush_r+0xa4> @ imm = #0x32
 805ef34: b293         	uxth	r3, r2
 805ef36: 6825         	ldr	r5, [r4]
 805ef38: 6026         	str	r6, [r4]
 805ef3a: 0799         	lsls	r1, r3, #0x1e
 805ef3c: eba5 0506    	sub.w	r5, r5, r6
 805ef40: bf0c         	ite	eq
 805ef42: 6963         	ldreq	r3, [r4, #0x14]
 805ef44: 2300         	movne	r3, #0x0
 805ef46: 60a3         	str	r3, [r4, #0x8]
 805ef48: e00c         	b	0x805ef64 <__sflush_r+0xa0> @ imm = #0x18
 805ef4a: 462b         	mov	r3, r5
 805ef4c: 4632         	mov	r2, r6
 805ef4e: f8d4 c024    	ldr.w	r12, [r4, #0x24]
 805ef52: 4638         	mov	r0, r7
 805ef54: 69e1         	ldr	r1, [r4, #0x1c]
 805ef56: 47e0         	blx	r12
 805ef58: f1b0 0c00    	subs.w	r12, r0, #0x0
 805ef5c: eba5 050c    	sub.w	r5, r5, r12
 805ef60: 4466         	add	r6, r12
 805ef62: dd09         	ble	0x805ef78 <__sflush_r+0xb4> @ imm = #0x12
 805ef64: 2d00         	cmp	r5, #0x0
 805ef66: dcf0         	bgt	0x805ef4a <__sflush_r+0x86> @ imm = #-0x20
 805ef68: 2000         	movs	r0, #0x0
 805ef6a: bdf8         	pop	{r3, r4, r5, r6, r7, pc}
 805ef6c: 6be3         	ldr	r3, [r4, #0x3c]
 805ef6e: 2b00         	cmp	r3, #0x0
 805ef70: dcb5         	bgt	0x805eede <__sflush_r+0x1a> @ imm = #-0x96
 805ef72: e7f9         	b	0x805ef68 <__sflush_r+0xa4> @ imm = #-0xe
 805ef74: 6d20         	ldr	r0, [r4, #0x50]
 805ef76: e7c4         	b	0x805ef02 <__sflush_r+0x3e> @ imm = #-0x78
 805ef78: 89a3         	ldrh	r3, [r4, #0xc]
 805ef7a: f04f 30ff    	mov.w	r0, #0xffffffff
 805ef7e: f043 0340    	orr	r3, r3, #0x40
 805ef82: 81a3         	strh	r3, [r4, #0xc]
 805ef84: bdf8         	pop	{r3, r4, r5, r6, r7, pc}
 805ef86: f9b4 300c    	ldrsh.w	r3, [r4, #0xc]
 805ef8a: 2200         	movs	r2, #0x0
 805ef8c: f423 6300    	bic	r3, r3, #0x800
 805ef90: 6062         	str	r2, [r4, #0x4]
 805ef92: 6922         	ldr	r2, [r4, #0x10]
 805ef94: 81a3         	strh	r3, [r4, #0xc]
 805ef96: 6022         	str	r2, [r4]
 805ef98: 04da         	lsls	r2, r3, #0x13
 805ef9a: d500         	bpl	0x805ef9e <__sflush_r+0xda> @ imm = #0x0
 805ef9c: 6520         	str	r0, [r4, #0x50]
 805ef9e: 6b21         	ldr	r1, [r4, #0x30]
 805efa0: 603e         	str	r6, [r7]
 805efa2: 2900         	cmp	r1, #0x0
 805efa4: d0e0         	beq	0x805ef68 <__sflush_r+0xa4> @ imm = #-0x40
 805efa6: f104 0340    	add.w	r3, r4, #0x40
 805efaa: 4299         	cmp	r1, r3
 805efac: d002         	beq	0x805efb4 <__sflush_r+0xf0> @ imm = #0x4
 805efae: 4638         	mov	r0, r7
 805efb0: f7ff fffe    	bl	0x805efb0 <__sflush_r+0xec> @ imm = #-0x4
 805efb4: 2300         	movs	r3, #0x0
 805efb6: 4618         	mov	r0, r3
 805efb8: 6323         	str	r3, [r4, #0x30]
 805efba: bdf8         	pop	{r3, r4, r5, r6, r7, pc}
 805efbc: 4b0e         	ldr	r3, [pc, #0x38]         @ 0x805eff8 <__sflush_r+0x134>
 805efbe: 40d3         	lsrs	r3, r2
 805efc0: 43db         	mvns	r3, r3
 805efc2: f013 0301    	ands	r3, r3, #0x1
 805efc6: d1ae         	bne	0x805ef26 <__sflush_r+0x62> @ imm = #-0xa4
 805efc8: 6063         	str	r3, [r4, #0x4]
 805efca: f9b4 300c    	ldrsh.w	r3, [r4, #0xc]
 805efce: 6921         	ldr	r1, [r4, #0x10]
 805efd0: f423 6300    	bic	r3, r3, #0x800
 805efd4: 6021         	str	r1, [r4]
 805efd6: 81a3         	strh	r3, [r4, #0xc]
 805efd8: 04db         	lsls	r3, r3, #0x13
 805efda: d5e0         	bpl	0x805ef9e <__sflush_r+0xda> @ imm = #-0x40
 805efdc: 2a00         	cmp	r2, #0x0
 805efde: d1de         	bne	0x805ef9e <__sflush_r+0xda> @ imm = #-0x44
 805efe0: e7dc         	b	0x805ef9c <__sflush_r+0xd8> @ imm = #-0x48
 805efe2: 683b         	ldr	r3, [r7]
 805efe4: 2b00         	cmp	r3, #0x0
 805efe6: d08a         	beq	0x805eefe <__sflush_r+0x3a> @ imm = #-0xec
 805efe8: 2b1d         	cmp	r3, #0x1d
 805efea: d001         	beq	0x805eff0 <__sflush_r+0x12c> @ imm = #0x2
 805efec: 2b16         	cmp	r3, #0x16
 805efee: d19a         	bne	0x805ef26 <__sflush_r+0x62> @ imm = #-0xcc
 805eff0: 2000         	movs	r0, #0x0
 805eff2: 603e         	str	r6, [r7]
 805eff4: bdf8         	pop	{r3, r4, r5, r6, r7, pc}
 805eff6: bf00         	nop

0805eff8 <$d>:
 805eff8: 01 00 40 20  	.word	0x20400001

0805effc <_fflush_r>:
 805effc: b538         	push	{r3, r4, r5, lr}
 805effe: 4604         	mov	r4, r0
 805f000: 460d         	mov	r5, r1
 805f002: b108         	cbz	r0, 0x805f008 <_fflush_r+0xc> @ imm = #0x2
 805f004: 6b83         	ldr	r3, [r0, #0x38]
 805f006: b11b         	cbz	r3, 0x805f010 <_fflush_r+0x14> @ imm = #0x6
 805f008: f9b5 000c    	ldrsh.w	r0, [r5, #0xc]
 805f00c: b930         	cbnz	r0, 0x805f01c <_fflush_r+0x20> @ imm = #0xc
 805f00e: bd38         	pop	{r3, r4, r5, pc}
 805f010: f7ff fffe    	bl	0x805f010 <_fflush_r+0x14> @ imm = #-0x4
 805f014: f9b5 000c    	ldrsh.w	r0, [r5, #0xc]
 805f018: 2800         	cmp	r0, #0x0
 805f01a: d0f8         	beq	0x805f00e <_fflush_r+0x12> @ imm = #-0x10
 805f01c: 4629         	mov	r1, r5
 805f01e: 4620         	mov	r0, r4
 805f020: e8bd 4038    	pop.w	{r3, r4, r5, lr}
 805f024: f7ff bffe    	b.w	0x805f024 <_fflush_r+0x28> @ imm = #-0x4

0805f028 <fflush>:
 805f028: b538         	push	{r3, r4, r5, lr}
 805f02a: b1b8         	cbz	r0, 0x805f05c <fflush+0x34> @ imm = #0x2e
 805f02c: 4b0f         	ldr	r3, [pc, #0x3c]         @ 0x805f06c <fflush+0x44>
 805f02e: 4604         	mov	r4, r0
 805f030: 681d         	ldr	r5, [r3]
 805f032: b10d         	cbz	r5, 0x805f038 <fflush+0x10> @ imm = #0x2
 805f034: 6bab         	ldr	r3, [r5, #0x38]
 805f036: b14b         	cbz	r3, 0x805f04c <fflush+0x24> @ imm = #0x12
 805f038: f9b4 000c    	ldrsh.w	r0, [r4, #0xc]
 805f03c: b900         	cbnz	r0, 0x805f040 <fflush+0x18> @ imm = #0x0
 805f03e: bd38         	pop	{r3, r4, r5, pc}
 805f040: 4621         	mov	r1, r4
 805f042: 4628         	mov	r0, r5
 805f044: e8bd 4038    	pop.w	{r3, r4, r5, lr}
 805f048: f7ff bffe    	b.w	0x805f048 <fflush+0x20> @ imm = #-0x4
 805f04c: 4628         	mov	r0, r5
 805f04e: f7ff fffe    	bl	0x805f04e <fflush+0x26> @ imm = #-0x4
 805f052: f9b4 000c    	ldrsh.w	r0, [r4, #0xc]
 805f056: 2800         	cmp	r0, #0x0
 805f058: d0f1         	beq	0x805f03e <fflush+0x16> @ imm = #-0x1e
 805f05a: e7f1         	b	0x805f040 <fflush+0x18> @ imm = #-0x1e
 805f05c: 4b04         	ldr	r3, [pc, #0x10]         @ 0x805f070 <fflush+0x48>
 805f05e: 4905         	ldr	r1, [pc, #0x14]         @ 0x805f074 <fflush+0x4c>
 805f060: 6818         	ldr	r0, [r3]
 805f062: e8bd 4038    	pop.w	{r3, r4, r5, lr}
 805f066: f7ff bffe    	b.w	0x805f066 <fflush+0x3e> @ imm = #-0x4
 805f06a: bf00         	nop

0805f06c <$d>:
 805f06c: 00 00 00 00  	.word	0x00000000
 805f070: 00 00 00 00  	.word	0x00000000
 805f074: 00 00 00 00  	.word	0x00000000

0805f078 <__fp_lock>:
 805f078: 2000         	movs	r0, #0x0
 805f07a: 4770         	bx	lr

0805f07c <_cleanup_r>:
 805f07c: 4901         	ldr	r1, [pc, #0x4]          @ 0x805f084 <_cleanup_r+0x8>
 805f07e: f7ff bffe    	b.w	0x805f07e <_cleanup_r+0x2> @ imm = #-0x4
 805f082: bf00         	nop

0805f084 <$d>:
 805f084: 00 00 00 00  	.word	0x00000000

0805f088 <__fp_unlock>:
 805f088: 2000         	movs	r0, #0x0
 805f08a: 4770         	bx	lr

0805f08c <__sinit.part.0>:
 805f08c: e92d 4ff8    	push.w	{r3, r4, r5, r6, r7, r8, r9, r10, r11, lr}
 805f090: 492d         	ldr	r1, [pc, #0xb4]         @ 0x805f148 <__sinit.part.0+0xbc>
 805f092: 2400         	movs	r4, #0x0
 805f094: 6846         	ldr	r6, [r0, #0x4]
 805f096: 4607         	mov	r7, r0
 805f098: 2304         	movs	r3, #0x4
 805f09a: 2203         	movs	r2, #0x3
 805f09c: f500 703b    	add.w	r0, r0, #0x2ec
 805f0a0: 63f9         	str	r1, [r7, #0x3c]
 805f0a2: 4621         	mov	r1, r4
 805f0a4: f8df b0a4    	ldr.w	r11, [pc, #0xa4]        @ 0x805f14c <__sinit.part.0+0xc0>
 805f0a8: f8c7 02e8    	str.w	r0, [r7, #0x2e8]
 805f0ac: f106 005c    	add.w	r0, r6, #0x5c
 805f0b0: f8df a09c    	ldr.w	r10, [pc, #0x9c]        @ 0x805f150 <__sinit.part.0+0xc4>
 805f0b4: f8df 909c    	ldr.w	r9, [pc, #0x9c]         @ 0x805f154 <__sinit.part.0+0xc8>
 805f0b8: f8df 809c    	ldr.w	r8, [pc, #0x9c]         @ 0x805f158 <__sinit.part.0+0xcc>
 805f0bc: e9c7 42b8    	strd	r4, r2, [r7, #736]
 805f0c0: 2208         	movs	r2, #0x8
 805f0c2: 6674         	str	r4, [r6, #0x64]
 805f0c4: 61b4         	str	r4, [r6, #0x18]
 805f0c6: e9c6 4302    	strd	r4, r3, [r6, #8]
 805f0ca: e9c6 4400    	strd	r4, r4, [r6]
 805f0ce: e9c6 4404    	strd	r4, r4, [r6, #16]
 805f0d2: f7ff fffe    	bl	0x805f0d2 <__sinit.part.0+0x46> @ imm = #-0x4
 805f0d6: 68bd         	ldr	r5, [r7, #0x8]
 805f0d8: 4b20         	ldr	r3, [pc, #0x80]         @ 0x805f15c <__sinit.part.0+0xd0>
 805f0da: 2208         	movs	r2, #0x8
 805f0dc: f8c6 a024    	str.w	r10, [r6, #0x24]
 805f0e0: 4621         	mov	r1, r4
 805f0e2: f8c6 9028    	str.w	r9, [r6, #0x28]
 805f0e6: f105 005c    	add.w	r0, r5, #0x5c
 805f0ea: f8c6 802c    	str.w	r8, [r6, #0x2c]
 805f0ee: e9c6 6b07    	strd	r6, r11, [r6, #28]
 805f0f2: 60eb         	str	r3, [r5, #0xc]
 805f0f4: 666c         	str	r4, [r5, #0x64]
 805f0f6: 60ac         	str	r4, [r5, #0x8]
 805f0f8: 61ac         	str	r4, [r5, #0x18]
 805f0fa: e9c5 4400    	strd	r4, r4, [r5]
 805f0fe: e9c5 4404    	strd	r4, r4, [r5, #16]
 805f102: f7ff fffe    	bl	0x805f102 <__sinit.part.0+0x76> @ imm = #-0x4
 805f106: 4b16         	ldr	r3, [pc, #0x58]         @ 0x805f160 <__sinit.part.0+0xd4>
 805f108: f8c5 802c    	str.w	r8, [r5, #0x2c]
 805f10c: 4621         	mov	r1, r4
 805f10e: 2208         	movs	r2, #0x8
 805f110: e9c5 5b07    	strd	r5, r11, [r5, #28]
 805f114: e9c5 a909    	strd	r10, r9, [r5, #36]
 805f118: 68fd         	ldr	r5, [r7, #0xc]
 805f11a: 60eb         	str	r3, [r5, #0xc]
 805f11c: f105 005c    	add.w	r0, r5, #0x5c
 805f120: 666c         	str	r4, [r5, #0x64]
 805f122: 60ac         	str	r4, [r5, #0x8]
 805f124: 61ac         	str	r4, [r5, #0x18]
 805f126: e9c5 4400    	strd	r4, r4, [r5]
 805f12a: e9c5 4404    	strd	r4, r4, [r5, #16]
 805f12e: f7ff fffe    	bl	0x805f12e <__sinit.part.0+0xa2> @ imm = #-0x4
 805f132: 2301         	movs	r3, #0x1
 805f134: f8c5 a024    	str.w	r10, [r5, #0x24]
 805f138: e9c5 5b07    	strd	r5, r11, [r5, #28]
 805f13c: e9c5 980a    	strd	r9, r8, [r5, #40]
 805f140: 63bb         	str	r3, [r7, #0x38]
 805f142: e8bd 8ff8    	pop.w	{r3, r4, r5, r6, r7, r8, r9, r10, r11, pc}
 805f146: bf00         	nop

0805f148 <$d>:
 805f148: 00 00 00 00  	.word	0x00000000
 805f14c: 00 00 00 00  	.word	0x00000000
 805f150: 00 00 00 00  	.word	0x00000000
 805f154: 00 00 00 00  	.word	0x00000000
 805f158: 00 00 00 00  	.word	0x00000000
 805f15c: 09 00 01 00  	.word	0x00010009
 805f160: 12 00 02 00  	.word	0x00020012

0805f164 <__sfmoreglue>:
 805f164: b570         	push	{r4, r5, r6, lr}
 805f166: 2268         	movs	r2, #0x68
 805f168: 1e4e         	subs	r6, r1, #0x1
 805f16a: 460d         	mov	r5, r1
 805f16c: fb02 f606    	mul	r6, r2, r6
 805f170: f106 0174    	add.w	r1, r6, #0x74
 805f174: f7ff fffe    	bl	0x805f174 <__sfmoreglue+0x10> @ imm = #-0x4
 805f178: 4604         	mov	r4, r0
 805f17a: b140         	cbz	r0, 0x805f18e <__sfmoreglue+0x2a> @ imm = #0x10
 805f17c: 2100         	movs	r1, #0x0
 805f17e: 300c         	adds	r0, #0xc
 805f180: f106 0268    	add.w	r2, r6, #0x68
 805f184: 60a0         	str	r0, [r4, #0x8]
 805f186: e9c4 1500    	strd	r1, r5, [r4]
 805f18a: f7ff fffe    	bl	0x805f18a <__sfmoreglue+0x26> @ imm = #-0x4
 805f18e: 4620         	mov	r0, r4
 805f190: bd70         	pop	{r4, r5, r6, pc}
 805f192: bf00         	nop

0805f194 <__sfp>:
 805f194: 4b27         	ldr	r3, [pc, #0x9c]         @ 0x805f234 <__sfp+0xa0>
 805f196: e92d 41f0    	push.w	{r4, r5, r6, r7, r8, lr}
 805f19a: 681e         	ldr	r6, [r3]
 805f19c: 4607         	mov	r7, r0
 805f19e: 6bb3         	ldr	r3, [r6, #0x38]
 805f1a0: b35b         	cbz	r3, 0x805f1fa <__sfp+0x66> @ imm = #0x56
 805f1a2: f506 7638    	add.w	r6, r6, #0x2e0
 805f1a6: f04f 0804    	mov.w	r8, #0x4
 805f1aa: e9d6 3401    	ldrd	r3, r4, [r6, #4]
 805f1ae: 3b01         	subs	r3, #0x1
 805f1b0: d504         	bpl	0x805f1bc <__sfp+0x28>  @ imm = #0x8
 805f1b2: e01e         	b	0x805f1f2 <__sfp+0x5e>  @ imm = #0x3c
 805f1b4: 1c5a         	adds	r2, r3, #0x1
 805f1b6: f104 0468    	add.w	r4, r4, #0x68
 805f1ba: d01a         	beq	0x805f1f2 <__sfp+0x5e>  @ imm = #0x34
 805f1bc: f9b4 500c    	ldrsh.w	r5, [r4, #0xc]
 805f1c0: 3b01         	subs	r3, #0x1
 805f1c2: 2d00         	cmp	r5, #0x0
 805f1c4: d1f6         	bne	0x805f1b4 <__sfp+0x20>  @ imm = #-0x14
 805f1c6: 4b1c         	ldr	r3, [pc, #0x70]         @ 0x805f238 <__sfp+0xa4>
 805f1c8: 2208         	movs	r2, #0x8
 805f1ca: 4629         	mov	r1, r5
 805f1cc: f104 005c    	add.w	r0, r4, #0x5c
 805f1d0: 6665         	str	r5, [r4, #0x64]
 805f1d2: 61a5         	str	r5, [r4, #0x18]
 805f1d4: e9c4 5500    	strd	r5, r5, [r4]
 805f1d8: e9c4 5302    	strd	r5, r3, [r4, #8]
 805f1dc: e9c4 5504    	strd	r5, r5, [r4, #16]
 805f1e0: f7ff fffe    	bl	0x805f1e0 <__sfp+0x4c>  @ imm = #-0x4
 805f1e4: e9c4 550c    	strd	r5, r5, [r4, #48]
 805f1e8: e9c4 5511    	strd	r5, r5, [r4, #68]
 805f1ec: 4620         	mov	r0, r4
 805f1ee: e8bd 81f0    	pop.w	{r4, r5, r6, r7, r8, pc}
 805f1f2: 6835         	ldr	r5, [r6]
 805f1f4: b12d         	cbz	r5, 0x805f202 <__sfp+0x6e> @ imm = #0xa
 805f1f6: 462e         	mov	r6, r5
 805f1f8: e7d7         	b	0x805f1aa <__sfp+0x16>  @ imm = #-0x52
 805f1fa: 4630         	mov	r0, r6
 805f1fc: f7ff ff46    	bl	0x805f08c <__sinit.part.0> @ imm = #-0x174
 805f200: e7cf         	b	0x805f1a2 <__sfp+0xe>   @ imm = #-0x62
 805f202: f44f 71d6    	mov.w	r1, #0x1ac
 805f206: 4638         	mov	r0, r7
 805f208: f7ff fffe    	bl	0x805f208 <__sfp+0x74>  @ imm = #-0x4
 805f20c: 4604         	mov	r4, r0
 805f20e: b168         	cbz	r0, 0x805f22c <__sfp+0x98> @ imm = #0x1a
 805f210: 6005         	str	r5, [r0]
 805f212: 300c         	adds	r0, #0xc
 805f214: 4629         	mov	r1, r5
 805f216: 4625         	mov	r5, r4
 805f218: f840 8c08    	str	r8, [r0, #-8]
 805f21c: f44f 72d0    	mov.w	r2, #0x1a0
 805f220: 60a0         	str	r0, [r4, #0x8]
 805f222: f7ff fffe    	bl	0x805f222 <__sfp+0x8e>  @ imm = #-0x4
 805f226: 6034         	str	r4, [r6]
 805f228: 462e         	mov	r6, r5
 805f22a: e7be         	b	0x805f1aa <__sfp+0x16>  @ imm = #-0x84
 805f22c: 230c         	movs	r3, #0xc
 805f22e: 6030         	str	r0, [r6]
 805f230: 603b         	str	r3, [r7]
 805f232: e7db         	b	0x805f1ec <__sfp+0x58>  @ imm = #-0x4a

0805f234 <$d>:
 805f234: 00 00 00 00  	.word	0x00000000
 805f238: 01 00 ff ff  	.word	0xffff0001

0805f23c <_cleanup>:
 805f23c: 4b02         	ldr	r3, [pc, #0x8]          @ 0x805f248 <_cleanup+0xc>
 805f23e: 4903         	ldr	r1, [pc, #0xc]          @ 0x805f24c <_cleanup+0x10>
 805f240: 6818         	ldr	r0, [r3]
 805f242: f7ff bffe    	b.w	0x805f242 <_cleanup+0x6> @ imm = #-0x4
 805f246: bf00         	nop

0805f248 <$d>:
 805f248: 00 00 00 00  	.word	0x00000000
 805f24c: 00 00 00 00  	.word	0x00000000

0805f250 <__sinit>:
 805f250: 6b83         	ldr	r3, [r0, #0x38]
 805f252: b103         	cbz	r3, 0x805f256 <__sinit+0x6> @ imm = #0x0
 805f254: 4770         	bx	lr
 805f256: e719         	b	0x805f08c <__sinit.part.0> @ imm = #-0x1ce

0805f258 <__sfp_lock_acquire>:
 805f258: 4770         	bx	lr
 805f25a: bf00         	nop

0805f25c <__sfp_lock_release>:
 805f25c: 4770         	bx	lr
 805f25e: bf00         	nop

0805f260 <__sinit_lock_acquire>:
 805f260: 4770         	bx	lr
 805f262: bf00         	nop

0805f264 <__sinit_lock_release>:
 805f264: 4770         	bx	lr
 805f266: bf00         	nop

0805f268 <__fp_lock_all>:
 805f268: 4b02         	ldr	r3, [pc, #0x8]          @ 0x805f274 <__fp_lock_all+0xc>
 805f26a: 4903         	ldr	r1, [pc, #0xc]          @ 0x805f278 <__fp_lock_all+0x10>
 805f26c: 6818         	ldr	r0, [r3]
 805f26e: f7ff bffe    	b.w	0x805f26e <__fp_lock_all+0x6> @ imm = #-0x4
 805f272: bf00         	nop

0805f274 <$d>:
 805f274: 00 00 00 00  	.word	0x00000000
 805f278: 00 00 00 00  	.word	0x00000000

0805f27c <__fp_unlock_all>:
 805f27c: 4b02         	ldr	r3, [pc, #0x8]          @ 0x805f288 <__fp_unlock_all+0xc>
 805f27e: 4903         	ldr	r1, [pc, #0xc]          @ 0x805f28c <__fp_unlock_all+0x10>
 805f280: 6818         	ldr	r0, [r3]
 805f282: f7ff bffe    	b.w	0x805f282 <__fp_unlock_all+0x6> @ imm = #-0x4
 805f286: bf00         	nop

0805f288 <$d>:
 805f288: 00 00 00 00  	.word	0x00000000
 805f28c: 00 00 00 00  	.word	0x00000000

0805f290 <__fputwc>:
 805f290: e92d 43f0    	push.w	{r4, r5, r6, r7, r8, r9, lr}
 805f294: b083         	sub	sp, #0xc
 805f296: 4607         	mov	r7, r0
 805f298: 4688         	mov	r8, r1
 805f29a: 4614         	mov	r4, r2
 805f29c: f7ff fffe    	bl	0x805f29c <__fputwc+0xc> @ imm = #-0x4
 805f2a0: 2801         	cmp	r0, #0x1
 805f2a2: d103         	bne	0x805f2ac <__fputwc+0x1c> @ imm = #0x6
 805f2a4: f108 33ff    	add.w	r3, r8, #0xffffffff
 805f2a8: 2bfe         	cmp	r3, #0xfe
 805f2aa: d932         	bls	0x805f312 <__fputwc+0x82> @ imm = #0x64
 805f2ac: 4642         	mov	r2, r8
 805f2ae: f104 035c    	add.w	r3, r4, #0x5c
 805f2b2: a901         	add	r1, sp, #0x4
 805f2b4: 4638         	mov	r0, r7
 805f2b6: f7ff fffe    	bl	0x805f2b6 <__fputwc+0x26> @ imm = #-0x4
 805f2ba: 1c42         	adds	r2, r0, #0x1
 805f2bc: 4606         	mov	r6, r0
 805f2be: d033         	beq	0x805f328 <__fputwc+0x98> @ imm = #0x66
 805f2c0: b368         	cbz	r0, 0x805f31e <__fputwc+0x8e> @ imm = #0x5a
 805f2c2: f89d c004    	ldrb.w	r12, [sp, #0x4]
 805f2c6: f10d 0905    	add.w	r9, sp, #0x5
 805f2ca: 2500         	movs	r5, #0x0
 805f2cc: e00c         	b	0x805f2e8 <__fputwc+0x58> @ imm = #0x18
 805f2ce: f1bc 0f0a    	cmp.w	r12, #0xa
 805f2d2: d015         	beq	0x805f300 <__fputwc+0x70> @ imm = #0x2a
 805f2d4: 6823         	ldr	r3, [r4]
 805f2d6: 1c5a         	adds	r2, r3, #0x1
 805f2d8: 6022         	str	r2, [r4]
 805f2da: f883 c000    	strb.w	r12, [r3]
 805f2de: 3501         	adds	r5, #0x1
 805f2e0: 42b5         	cmp	r5, r6
 805f2e2: d21c         	bhs	0x805f31e <__fputwc+0x8e> @ imm = #0x38
 805f2e4: f819 cb01    	ldrb	r12, [r9], #1
 805f2e8: 68a3         	ldr	r3, [r4, #0x8]
 805f2ea: 3b01         	subs	r3, #0x1
 805f2ec: 2b00         	cmp	r3, #0x0
 805f2ee: 60a3         	str	r3, [r4, #0x8]
 805f2f0: daf0         	bge	0x805f2d4 <__fputwc+0x44> @ imm = #-0x20
 805f2f2: f8d4 e018    	ldr.w	lr, [r4, #0x18]
 805f2f6: 4661         	mov	r1, r12
 805f2f8: 4622         	mov	r2, r4
 805f2fa: 4638         	mov	r0, r7
 805f2fc: 4573         	cmp	r3, lr
 805f2fe: dae6         	bge	0x805f2ce <__fputwc+0x3e> @ imm = #-0x34
 805f300: f7ff fffe    	bl	0x805f300 <__fputwc+0x70> @ imm = #-0x4
 805f304: 1c43         	adds	r3, r0, #0x1
 805f306: d1ea         	bne	0x805f2de <__fputwc+0x4e> @ imm = #-0x2c
 805f308: 4606         	mov	r6, r0
 805f30a: 4630         	mov	r0, r6
 805f30c: b003         	add	sp, #0xc
 805f30e: e8bd 83f0    	pop.w	{r4, r5, r6, r7, r8, r9, pc}
 805f312: fa5f fc88    	uxtb.w	r12, r8
 805f316: 4606         	mov	r6, r0
 805f318: f88d c004    	strb.w	r12, [sp, #0x4]
 805f31c: e7d3         	b	0x805f2c6 <__fputwc+0x36> @ imm = #-0x5a
 805f31e: 4646         	mov	r6, r8
 805f320: 4630         	mov	r0, r6
 805f322: b003         	add	sp, #0xc
 805f324: e8bd 83f0    	pop.w	{r4, r5, r6, r7, r8, r9, pc}
 805f328: 89a3         	ldrh	r3, [r4, #0xc]
 805f32a: f043 0340    	orr	r3, r3, #0x40
 805f32e: 81a3         	strh	r3, [r4, #0xc]
 805f330: e7eb         	b	0x805f30a <__fputwc+0x7a> @ imm = #-0x2a
 805f332: bf00         	nop

0805f334 <_fputwc_r>:
 805f334: f9b2 300c    	ldrsh.w	r3, [r2, #0xc]
 805f338: f413 5f00    	tst.w	r3, #0x2000
 805f33c: d10a         	bne	0x805f354 <_fputwc_r+0x20> @ imm = #0x14
 805f33e: f443 5300    	orr	r3, r3, #0x2000
 805f342: b410         	push	{r4}
 805f344: 6e54         	ldr	r4, [r2, #0x64]
 805f346: 8193         	strh	r3, [r2, #0xc]
 805f348: f444 5400    	orr	r4, r4, #0x2000
 805f34c: 6654         	str	r4, [r2, #0x64]
 805f34e: bc10         	pop	{r4}
 805f350: f7ff bffe    	b.w	0x805f350 <_fputwc_r+0x1c> @ imm = #-0x4
 805f354: f7ff bffe    	b.w	0x805f354 <_fputwc_r+0x20> @ imm = #-0x4

0805f358 <fputwc>:
 805f358: 4b0e         	ldr	r3, [pc, #0x38]         @ 0x805f394 <fputwc+0x3c>
 805f35a: b570         	push	{r4, r5, r6, lr}
 805f35c: 681e         	ldr	r6, [r3]
 805f35e: 4605         	mov	r5, r0
 805f360: 460c         	mov	r4, r1
 805f362: b10e         	cbz	r6, 0x805f368 <fputwc+0x10> @ imm = #0x2
 805f364: 6bb3         	ldr	r3, [r6, #0x38]
 805f366: b18b         	cbz	r3, 0x805f38c <fputwc+0x34> @ imm = #0x22
 805f368: f9b4 300c    	ldrsh.w	r3, [r4, #0xc]
 805f36c: 049a         	lsls	r2, r3, #0x12
 805f36e: d406         	bmi	0x805f37e <fputwc+0x26> @ imm = #0xc
 805f370: 6e62         	ldr	r2, [r4, #0x64]
 805f372: f443 5300    	orr	r3, r3, #0x2000
 805f376: f442 5200    	orr	r2, r2, #0x2000
 805f37a: 81a3         	strh	r3, [r4, #0xc]
 805f37c: 6662         	str	r2, [r4, #0x64]
 805f37e: 4622         	mov	r2, r4
 805f380: 4629         	mov	r1, r5
 805f382: 4630         	mov	r0, r6
 805f384: e8bd 4070    	pop.w	{r4, r5, r6, lr}
 805f388: f7ff bffe    	b.w	0x805f388 <fputwc+0x30> @ imm = #-0x4
 805f38c: 4630         	mov	r0, r6
 805f38e: f7ff fffe    	bl	0x805f38e <fputwc+0x36> @ imm = #-0x4
 805f392: e7e9         	b	0x805f368 <fputwc+0x10> @ imm = #-0x2e

0805f394 <$d>:
 805f394: 00 00 00 00  	.word	0x00000000

0805f398 <_malloc_trim_r>:
 805f398: b5f8         	push	{r3, r4, r5, r6, r7, lr}
 805f39a: 4f23         	ldr	r7, [pc, #0x8c]         @ 0x805f428 <_malloc_trim_r+0x90>
 805f39c: 460c         	mov	r4, r1
 805f39e: 4606         	mov	r6, r0
 805f3a0: f7ff fffe    	bl	0x805f3a0 <_malloc_trim_r+0x8> @ imm = #-0x4
 805f3a4: 68ba         	ldr	r2, [r7, #0x8]
 805f3a6: f640 73ef    	movw	r3, #0xfef
 805f3aa: 6855         	ldr	r5, [r2, #0x4]
 805f3ac: 1b1b         	subs	r3, r3, r4
 805f3ae: 4c1f         	ldr	r4, [pc, #0x7c]         @ 0x805f42c <_malloc_trim_r+0x94>
 805f3b0: f025 0503    	bic	r5, r5, #0x3
 805f3b4: 442b         	add	r3, r5
 805f3b6: 401c         	ands	r4, r3
 805f3b8: f5a4 5480    	sub.w	r4, r4, #0x1000
 805f3bc: f5b4 5f80    	cmp.w	r4, #0x1000
 805f3c0: db07         	blt	0x805f3d2 <_malloc_trim_r+0x3a> @ imm = #0xe
 805f3c2: 2100         	movs	r1, #0x0
 805f3c4: 4630         	mov	r0, r6
 805f3c6: f7ff fffe    	bl	0x805f3c6 <_malloc_trim_r+0x2e> @ imm = #-0x4
 805f3ca: 68bb         	ldr	r3, [r7, #0x8]
 805f3cc: 442b         	add	r3, r5
 805f3ce: 4298         	cmp	r0, r3
 805f3d0: d004         	beq	0x805f3dc <_malloc_trim_r+0x44> @ imm = #0x8
 805f3d2: 4630         	mov	r0, r6
 805f3d4: f7ff fffe    	bl	0x805f3d4 <_malloc_trim_r+0x3c> @ imm = #-0x4
 805f3d8: 2000         	movs	r0, #0x0
 805f3da: bdf8         	pop	{r3, r4, r5, r6, r7, pc}
 805f3dc: 4261         	rsbs	r1, r4, #0
 805f3de: 4630         	mov	r0, r6
 805f3e0: f7ff fffe    	bl	0x805f3e0 <_malloc_trim_r+0x48> @ imm = #-0x4
 805f3e4: 3001         	adds	r0, #0x1
 805f3e6: d00d         	beq	0x805f404 <_malloc_trim_r+0x6c> @ imm = #0x1a
 805f3e8: 1b2d         	subs	r5, r5, r4
 805f3ea: 4b11         	ldr	r3, [pc, #0x44]         @ 0x805f430 <_malloc_trim_r+0x98>
 805f3ec: 68ba         	ldr	r2, [r7, #0x8]
 805f3ee: 4630         	mov	r0, r6
 805f3f0: f045 0501    	orr	r5, r5, #0x1
 805f3f4: 6055         	str	r5, [r2, #0x4]
 805f3f6: 681a         	ldr	r2, [r3]
 805f3f8: 1b12         	subs	r2, r2, r4
 805f3fa: 601a         	str	r2, [r3]
 805f3fc: f7ff fffe    	bl	0x805f3fc <_malloc_trim_r+0x64> @ imm = #-0x4
 805f400: 2001         	movs	r0, #0x1
 805f402: bdf8         	pop	{r3, r4, r5, r6, r7, pc}
 805f404: 2100         	movs	r1, #0x0
 805f406: 4630         	mov	r0, r6
 805f408: f7ff fffe    	bl	0x805f408 <_malloc_trim_r+0x70> @ imm = #-0x4
 805f40c: 68ba         	ldr	r2, [r7, #0x8]
 805f40e: 1a83         	subs	r3, r0, r2
 805f410: 2b0f         	cmp	r3, #0xf
 805f412: ddde         	ble	0x805f3d2 <_malloc_trim_r+0x3a> @ imm = #-0x44
 805f414: f043 0301    	orr	r3, r3, #0x1
 805f418: 4905         	ldr	r1, [pc, #0x14]         @ 0x805f430 <_malloc_trim_r+0x98>
 805f41a: 6053         	str	r3, [r2, #0x4]
 805f41c: 4b05         	ldr	r3, [pc, #0x14]         @ 0x805f434 <_malloc_trim_r+0x9c>
 805f41e: 681b         	ldr	r3, [r3]
 805f420: 1ac0         	subs	r0, r0, r3
 805f422: 6008         	str	r0, [r1]
 805f424: e7d5         	b	0x805f3d2 <_malloc_trim_r+0x3a> @ imm = #-0x56
 805f426: bf00         	nop

0805f428 <$d>:
 805f428: 00 00 00 00  	.word	0x00000000
 805f42c: 00 f0 ff ff  	.word	0xfffff000
 805f430: 00 00 00 00  	.word	0x00000000
 805f434: 00 00 00 00  	.word	0x00000000

0805f438 <_free_r>:
 805f438: 2900         	cmp	r1, #0x0
 805f43a: d061         	beq	0x805f500 <_free_r+0xc8> @ imm = #0xc2
 805f43c: b5f8         	push	{r3, r4, r5, r6, r7, lr}
 805f43e: 460c         	mov	r4, r1
 805f440: 4606         	mov	r6, r0
 805f442: f7ff fffe    	bl	0x805f442 <_free_r+0xa> @ imm = #-0x4
 805f446: 4f7c         	ldr	r7, [pc, #0x1f0]        @ 0x805f638 <_free_r+0x200>
 805f448: f854 2c04    	ldr	r2, [r4, #-4]
 805f44c: f1a4 0508    	sub.w	r5, r4, #0x8
 805f450: 68b8         	ldr	r0, [r7, #0x8]
 805f452: f022 0101    	bic	r1, r2, #0x1
 805f456: eb05 0c01    	add.w	r12, r5, r1
 805f45a: f8dc 3004    	ldr.w	r3, [r12, #0x4]
 805f45e: 4560         	cmp	r0, r12
 805f460: f023 0303    	bic	r3, r3, #0x3
 805f464: f000 808b    	beq.w	0x805f57e <_free_r+0x146> @ imm = #0x116
 805f468: 07d2         	lsls	r2, r2, #0x1f
 805f46a: f8cc 3004    	str.w	r3, [r12, #0x4]
 805f46e: d432         	bmi	0x805f4d6 <_free_r+0x9e> @ imm = #0x64
 805f470: f854 2c08    	ldr	r2, [r4, #-8]
 805f474: f107 0008    	add.w	r0, r7, #0x8
 805f478: 1aad         	subs	r5, r5, r2
 805f47a: 4411         	add	r1, r2
 805f47c: 68aa         	ldr	r2, [r5, #0x8]
 805f47e: 4282         	cmp	r2, r0
 805f480: d06a         	beq	0x805f558 <_free_r+0x120> @ imm = #0xd4
 805f482: eb0c 0403    	add.w	r4, r12, r3
 805f486: f8d4 e004    	ldr.w	lr, [r4, #0x4]
 805f48a: 68ec         	ldr	r4, [r5, #0xc]
 805f48c: f01e 0f01    	tst.w	lr, #0x1
 805f490: 60d4         	str	r4, [r2, #0xc]
 805f492: 60a2         	str	r2, [r4, #0x8]
 805f494: f000 8097    	beq.w	0x805f5c6 <_free_r+0x18e> @ imm = #0x12e
 805f498: f041 0301    	orr	r3, r1, #0x1
 805f49c: 606b         	str	r3, [r5, #0x4]
 805f49e: f8cc 1000    	str.w	r1, [r12]
 805f4a2: f5b1 7f00    	cmp.w	r1, #0x200
 805f4a6: d235         	bhs	0x805f514 <_free_r+0xdc> @ imm = #0x6a
 805f4a8: 094a         	lsrs	r2, r1, #0x5
 805f4aa: 08cb         	lsrs	r3, r1, #0x3
 805f4ac: 2101         	movs	r1, #0x1
 805f4ae: 3301         	adds	r3, #0x1
 805f4b0: 4091         	lsls	r1, r2
 805f4b2: 687a         	ldr	r2, [r7, #0x4]
 805f4b4: 4311         	orrs	r1, r2
 805f4b6: eb07 02c3    	add.w	r2, r7, r3, lsl #3
 805f4ba: 6079         	str	r1, [r7, #0x4]
 805f4bc: 3a08         	subs	r2, #0x8
 805f4be: f857 1033    	ldr.w	r1, [r7, r3, lsl #3]
 805f4c2: e9c5 1202    	strd	r1, r2, [r5, #8]
 805f4c6: f847 5033    	str.w	r5, [r7, r3, lsl #3]
 805f4ca: 60cd         	str	r5, [r1, #0xc]
 805f4cc: 4630         	mov	r0, r6
 805f4ce: e8bd 40f8    	pop.w	{r3, r4, r5, r6, r7, lr}
 805f4d2: f7ff bffe    	b.w	0x805f4d2 <_free_r+0x9a> @ imm = #-0x4
 805f4d6: eb0c 0203    	add.w	r2, r12, r3
 805f4da: 6852         	ldr	r2, [r2, #0x4]
 805f4dc: 07d0         	lsls	r0, r2, #0x1f
 805f4de: d410         	bmi	0x805f502 <_free_r+0xca> @ imm = #0x20
 805f4e0: 4419         	add	r1, r3
 805f4e2: f107 0008    	add.w	r0, r7, #0x8
 805f4e6: f8dc 3008    	ldr.w	r3, [r12, #0x8]
 805f4ea: 4283         	cmp	r3, r0
 805f4ec: d073         	beq	0x805f5d6 <_free_r+0x19e> @ imm = #0xe6
 805f4ee: f8dc 200c    	ldr.w	r2, [r12, #0xc]
 805f4f2: 60da         	str	r2, [r3, #0xc]
 805f4f4: 6093         	str	r3, [r2, #0x8]
 805f4f6: f041 0301    	orr	r3, r1, #0x1
 805f4fa: 606b         	str	r3, [r5, #0x4]
 805f4fc: 5069         	str	r1, [r5, r1]
 805f4fe: e7d0         	b	0x805f4a2 <_free_r+0x6a> @ imm = #-0x60
 805f500: 4770         	bx	lr
 805f502: f041 0301    	orr	r3, r1, #0x1
 805f506: f5b1 7f00    	cmp.w	r1, #0x200
 805f50a: f844 3c04    	str	r3, [r4, #-4]
 805f50e: f8cc 1000    	str.w	r1, [r12]
 805f512: d3c9         	blo	0x805f4a8 <_free_r+0x70> @ imm = #-0x6e
 805f514: f5b1 6f20    	cmp.w	r1, #0xa00
 805f518: ea4f 2351    	lsr.w	r3, r1, #0x9
 805f51c: d248         	bhs	0x805f5b0 <_free_r+0x178> @ imm = #0x90
 805f51e: 098b         	lsrs	r3, r1, #0x6
 805f520: f103 0039    	add.w	r0, r3, #0x39
 805f524: f103 0238    	add.w	r2, r3, #0x38
 805f528: 00c3         	lsls	r3, r0, #0x3
 805f52a: 18f8         	adds	r0, r7, r3
 805f52c: 58fb         	ldr	r3, [r7, r3]
 805f52e: 3808         	subs	r0, #0x8
 805f530: 4298         	cmp	r0, r3
 805f532: d059         	beq	0x805f5e8 <_free_r+0x1b0> @ imm = #0xb2
 805f534: 685a         	ldr	r2, [r3, #0x4]
 805f536: f022 0203    	bic	r2, r2, #0x3
 805f53a: 428a         	cmp	r2, r1
 805f53c: d902         	bls	0x805f544 <_free_r+0x10c> @ imm = #0x4
 805f53e: 689b         	ldr	r3, [r3, #0x8]
 805f540: 4298         	cmp	r0, r3
 805f542: d1f7         	bne	0x805f534 <_free_r+0xfc> @ imm = #-0x12
 805f544: 68d8         	ldr	r0, [r3, #0xc]
 805f546: e9c5 3002    	strd	r3, r0, [r5, #8]
 805f54a: 6085         	str	r5, [r0, #0x8]
 805f54c: 4630         	mov	r0, r6
 805f54e: 60dd         	str	r5, [r3, #0xc]
 805f550: e8bd 40f8    	pop.w	{r3, r4, r5, r6, r7, lr}
 805f554: f7ff bffe    	b.w	0x805f554 <_free_r+0x11c> @ imm = #-0x4
 805f558: eb0c 0203    	add.w	r2, r12, r3
 805f55c: 6852         	ldr	r2, [r2, #0x4]
 805f55e: 07d2         	lsls	r2, r2, #0x1f
 805f560: d463         	bmi	0x805f62a <_free_r+0x1f2> @ imm = #0xc6
 805f562: 440b         	add	r3, r1
 805f564: 4630         	mov	r0, r6
 805f566: e9dc 1202    	ldrd	r1, r2, [r12, #8]
 805f56a: 60ca         	str	r2, [r1, #0xc]
 805f56c: 6091         	str	r1, [r2, #0x8]
 805f56e: f043 0201    	orr	r2, r3, #0x1
 805f572: 606a         	str	r2, [r5, #0x4]
 805f574: 50eb         	str	r3, [r5, r3]
 805f576: e8bd 40f8    	pop.w	{r3, r4, r5, r6, r7, lr}
 805f57a: f7ff bffe    	b.w	0x805f57a <_free_r+0x142> @ imm = #-0x4
 805f57e: 440b         	add	r3, r1
 805f580: 07d1         	lsls	r1, r2, #0x1f
 805f582: d407         	bmi	0x805f594 <_free_r+0x15c> @ imm = #0xe
 805f584: f854 2c08    	ldr	r2, [r4, #-8]
 805f588: 1aad         	subs	r5, r5, r2
 805f58a: 4413         	add	r3, r2
 805f58c: e9d5 1202    	ldrd	r1, r2, [r5, #8]
 805f590: 60ca         	str	r2, [r1, #0xc]
 805f592: 6091         	str	r1, [r2, #0x8]
 805f594: f043 0201    	orr	r2, r3, #0x1
 805f598: 606a         	str	r2, [r5, #0x4]
 805f59a: 4a28         	ldr	r2, [pc, #0xa0]         @ 0x805f63c <_free_r+0x204>
 805f59c: 60bd         	str	r5, [r7, #0x8]
 805f59e: 6812         	ldr	r2, [r2]
 805f5a0: 429a         	cmp	r2, r3
 805f5a2: d893         	bhi	0x805f4cc <_free_r+0x94> @ imm = #-0xda
 805f5a4: 4b26         	ldr	r3, [pc, #0x98]         @ 0x805f640 <_free_r+0x208>
 805f5a6: 4630         	mov	r0, r6
 805f5a8: 6819         	ldr	r1, [r3]
 805f5aa: f7ff fffe    	bl	0x805f5aa <_free_r+0x172> @ imm = #-0x4
 805f5ae: e78d         	b	0x805f4cc <_free_r+0x94> @ imm = #-0xe6
 805f5b0: 2b14         	cmp	r3, #0x14
 805f5b2: d90a         	bls	0x805f5ca <_free_r+0x192> @ imm = #0x14
 805f5b4: 2b54         	cmp	r3, #0x54
 805f5b6: d81f         	bhi	0x805f5f8 <_free_r+0x1c0> @ imm = #0x3e
 805f5b8: 0b0b         	lsrs	r3, r1, #0xc
 805f5ba: f103 006f    	add.w	r0, r3, #0x6f
 805f5be: f103 026e    	add.w	r2, r3, #0x6e
 805f5c2: 00c3         	lsls	r3, r0, #0x3
 805f5c4: e7b1         	b	0x805f52a <_free_r+0xf2> @ imm = #-0x9e
 805f5c6: 4419         	add	r1, r3
 805f5c8: e78d         	b	0x805f4e6 <_free_r+0xae> @ imm = #-0xe6
 805f5ca: f103 005c    	add.w	r0, r3, #0x5c
 805f5ce: f103 025b    	add.w	r2, r3, #0x5b
 805f5d2: 00c3         	lsls	r3, r0, #0x3
 805f5d4: e7a9         	b	0x805f52a <_free_r+0xf2> @ imm = #-0xae
 805f5d6: f041 0301    	orr	r3, r1, #0x1
 805f5da: e9c7 5504    	strd	r5, r5, [r7, #16]
 805f5de: e9c5 0002    	strd	r0, r0, [r5, #8]
 805f5e2: 606b         	str	r3, [r5, #0x4]
 805f5e4: 5069         	str	r1, [r5, r1]
 805f5e6: e771         	b	0x805f4cc <_free_r+0x94> @ imm = #-0x11e
 805f5e8: 2101         	movs	r1, #0x1
 805f5ea: 1092         	asrs	r2, r2, #0x2
 805f5ec: fa01 f202    	lsl.w	r2, r1, r2
 805f5f0: 6879         	ldr	r1, [r7, #0x4]
 805f5f2: 430a         	orrs	r2, r1
 805f5f4: 607a         	str	r2, [r7, #0x4]
 805f5f6: e7a6         	b	0x805f546 <_free_r+0x10e> @ imm = #-0xb4
 805f5f8: f5b3 7faa    	cmp.w	r3, #0x154
 805f5fc: d806         	bhi	0x805f60c <_free_r+0x1d4> @ imm = #0xc
 805f5fe: 0bcb         	lsrs	r3, r1, #0xf
 805f600: f103 0078    	add.w	r0, r3, #0x78
 805f604: f103 0277    	add.w	r2, r3, #0x77
 805f608: 00c3         	lsls	r3, r0, #0x3
 805f60a: e78e         	b	0x805f52a <_free_r+0xf2> @ imm = #-0xe4
 805f60c: f240 5254    	movw	r2, #0x554
 805f610: 4293         	cmp	r3, r2
 805f612: d806         	bhi	0x805f622 <_free_r+0x1ea> @ imm = #0xc
 805f614: 0c8b         	lsrs	r3, r1, #0x12
 805f616: f103 007d    	add.w	r0, r3, #0x7d
 805f61a: f103 027c    	add.w	r2, r3, #0x7c
 805f61e: 00c3         	lsls	r3, r0, #0x3
 805f620: e783         	b	0x805f52a <_free_r+0xf2> @ imm = #-0xfa
 805f622: f44f 737e    	mov.w	r3, #0x3f8
 805f626: 227e         	movs	r2, #0x7e
 805f628: e77f         	b	0x805f52a <_free_r+0xf2> @ imm = #-0x102
 805f62a: f041 0301    	orr	r3, r1, #0x1
 805f62e: 606b         	str	r3, [r5, #0x4]
 805f630: f8cc 1000    	str.w	r1, [r12]
 805f634: e74a         	b	0x805f4cc <_free_r+0x94> @ imm = #-0x16c
 805f636: bf00         	nop

0805f638 <$d>:
 805f638: 00 00 00 00  	.word	0x00000000
 805f63c: 00 00 00 00  	.word	0x00000000
 805f640: 00 00 00 00  	.word	0x00000000

0805f644 <__sfvwrite_r>:
 805f644: 6893         	ldr	r3, [r2, #0x8]
 805f646: 2b00         	cmp	r3, #0x0
 805f648: f000 8081    	beq.w	0x805f74e <__sfvwrite_r+0x10a> @ imm = #0x102
 805f64c: f9b1 300c    	ldrsh.w	r3, [r1, #0xc]
 805f650: e92d 4ff0    	push.w	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 805f654: 460c         	mov	r4, r1
 805f656: 0719         	lsls	r1, r3, #0x1c
 805f658: 4680         	mov	r8, r0
 805f65a: b083         	sub	sp, #0xc
 805f65c: 4617         	mov	r7, r2
 805f65e: b298         	uxth	r0, r3
 805f660: d523         	bpl	0x805f6aa <__sfvwrite_r+0x66> @ imm = #0x46
 805f662: 6923         	ldr	r3, [r4, #0x10]
 805f664: b30b         	cbz	r3, 0x805f6aa <__sfvwrite_r+0x66> @ imm = #0x42
 805f666: f010 0302    	ands	r3, r0, #0x2
 805f66a: 683d         	ldr	r5, [r7]
 805f66c: d02b         	beq	0x805f6c6 <__sfvwrite_r+0x82> @ imm = #0x56
 805f66e: f04f 0a00    	mov.w	r10, #0x0
 805f672: f8df b2b8    	ldr.w	r11, [pc, #0x2b8]       @ 0x805f92c <__sfvwrite_r+0x2e8>
 805f676: 4656         	mov	r6, r10
 805f678: 455e         	cmp	r6, r11
 805f67a: 4633         	mov	r3, r6
 805f67c: 4652         	mov	r2, r10
 805f67e: 4640         	mov	r0, r8
 805f680: bf28         	it	hs
 805f682: 465b         	movhs	r3, r11
 805f684: 2e00         	cmp	r6, #0x0
 805f686: d04f         	beq	0x805f728 <__sfvwrite_r+0xe4> @ imm = #0x9e
 805f688: 69e1         	ldr	r1, [r4, #0x1c]
 805f68a: f8d4 c024    	ldr.w	r12, [r4, #0x24]
 805f68e: 47e0         	blx	r12
 805f690: 2800         	cmp	r0, #0x0
 805f692: dd52         	ble	0x805f73a <__sfvwrite_r+0xf6> @ imm = #0xa4
 805f694: 68bb         	ldr	r3, [r7, #0x8]
 805f696: 4482         	add	r10, r0
 805f698: 1a36         	subs	r6, r6, r0
 805f69a: 1a18         	subs	r0, r3, r0
 805f69c: 60b8         	str	r0, [r7, #0x8]
 805f69e: 2800         	cmp	r0, #0x0
 805f6a0: d1ea         	bne	0x805f678 <__sfvwrite_r+0x34> @ imm = #-0x2c
 805f6a2: 2000         	movs	r0, #0x0
 805f6a4: b003         	add	sp, #0xc
 805f6a6: e8bd 8ff0    	pop.w	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
 805f6aa: 4621         	mov	r1, r4
 805f6ac: 4640         	mov	r0, r8
 805f6ae: f7ff fffe    	bl	0x805f6ae <__sfvwrite_r+0x6a> @ imm = #-0x4
 805f6b2: 2800         	cmp	r0, #0x0
 805f6b4: f040 8137    	bne.w	0x805f926 <__sfvwrite_r+0x2e2> @ imm = #0x26e
 805f6b8: f9b4 300c    	ldrsh.w	r3, [r4, #0xc]
 805f6bc: 683d         	ldr	r5, [r7]
 805f6be: b298         	uxth	r0, r3
 805f6c0: f010 0302    	ands	r3, r0, #0x2
 805f6c4: d1d3         	bne	0x805f66e <__sfvwrite_r+0x2a> @ imm = #-0x5a
 805f6c6: f010 0901    	ands	r9, r0, #0x1
 805f6ca: d142         	bne	0x805f752 <__sfvwrite_r+0x10e> @ imm = #0x84
 805f6cc: 464e         	mov	r6, r9
 805f6ce: b33e         	cbz	r6, 0x805f720 <__sfvwrite_r+0xdc> @ imm = #0x4e
 805f6d0: 0582         	lsls	r2, r0, #0x16
 805f6d2: f8d4 b008    	ldr.w	r11, [r4, #0x8]
 805f6d6: f140 8084    	bpl.w	0x805f7e2 <__sfvwrite_r+0x19e> @ imm = #0x108
 805f6da: 45b3         	cmp	r11, r6
 805f6dc: 465a         	mov	r2, r11
 805f6de: f200 80b4    	bhi.w	0x805f84a <__sfvwrite_r+0x206> @ imm = #0x168
 805f6e2: f410 6f90    	tst.w	r0, #0x480
 805f6e6: f040 80c1    	bne.w	0x805f86c <__sfvwrite_r+0x228> @ imm = #0x182
 805f6ea: 6820         	ldr	r0, [r4]
 805f6ec: 4649         	mov	r1, r9
 805f6ee: 9201         	str	r2, [sp, #0x4]
 805f6f0: f7ff fffe    	bl	0x805f6f0 <__sfvwrite_r+0xac> @ imm = #-0x4
 805f6f4: 68a3         	ldr	r3, [r4, #0x8]
 805f6f6: 6821         	ldr	r1, [r4]
 805f6f8: 46b2         	mov	r10, r6
 805f6fa: 9a01         	ldr	r2, [sp, #0x4]
 805f6fc: eba3 030b    	sub.w	r3, r3, r11
 805f700: 2600         	movs	r6, #0x0
 805f702: 440a         	add	r2, r1
 805f704: 60a3         	str	r3, [r4, #0x8]
 805f706: 6022         	str	r2, [r4]
 805f708: 68b8         	ldr	r0, [r7, #0x8]
 805f70a: 44d1         	add	r9, r10
 805f70c: eba0 000a    	sub.w	r0, r0, r10
 805f710: 60b8         	str	r0, [r7, #0x8]
 805f712: 2800         	cmp	r0, #0x0
 805f714: d0c5         	beq	0x805f6a2 <__sfvwrite_r+0x5e> @ imm = #-0x76
 805f716: f9b4 000c    	ldrsh.w	r0, [r4, #0xc]
 805f71a: b280         	uxth	r0, r0
 805f71c: 2e00         	cmp	r6, #0x0
 805f71e: d1d7         	bne	0x805f6d0 <__sfvwrite_r+0x8c> @ imm = #-0x52
 805f720: e9d5 9600    	ldrd	r9, r6, [r5]
 805f724: 3508         	adds	r5, #0x8
 805f726: e7d2         	b	0x805f6ce <__sfvwrite_r+0x8a> @ imm = #-0x5c
 805f728: e9d5 a600    	ldrd	r10, r6, [r5]
 805f72c: 3508         	adds	r5, #0x8
 805f72e: e7a3         	b	0x805f678 <__sfvwrite_r+0x34> @ imm = #-0xba
 805f730: 4621         	mov	r1, r4
 805f732: 4640         	mov	r0, r8
 805f734: f7ff fffe    	bl	0x805f734 <__sfvwrite_r+0xf0> @ imm = #-0x4
 805f738: b388         	cbz	r0, 0x805f79e <__sfvwrite_r+0x15a> @ imm = #0x62
 805f73a: f9b4 300c    	ldrsh.w	r3, [r4, #0xc]
 805f73e: f043 0340    	orr	r3, r3, #0x40
 805f742: f04f 30ff    	mov.w	r0, #0xffffffff
 805f746: 81a3         	strh	r3, [r4, #0xc]
 805f748: b003         	add	sp, #0xc
 805f74a: e8bd 8ff0    	pop.w	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
 805f74e: 2000         	movs	r0, #0x0
 805f750: 4770         	bx	lr
 805f752: 461e         	mov	r6, r3
 805f754: 46aa         	mov	r10, r5
 805f756: 4699         	mov	r9, r3
 805f758: 4618         	mov	r0, r3
 805f75a: 461d         	mov	r5, r3
 805f75c: b35e         	cbz	r6, 0x805f7b6 <__sfvwrite_r+0x172> @ imm = #0x56
 805f75e: 2800         	cmp	r0, #0x0
 805f760: d033         	beq	0x805f7ca <__sfvwrite_r+0x186> @ imm = #0x66
 805f762: 464a         	mov	r2, r9
 805f764: 68a1         	ldr	r1, [r4, #0x8]
 805f766: 42b2         	cmp	r2, r6
 805f768: 6963         	ldr	r3, [r4, #0x14]
 805f76a: 6820         	ldr	r0, [r4]
 805f76c: bf28         	it	hs
 805f76e: 4632         	movhs	r2, r6
 805f770: eb03 0b01    	add.w	r11, r3, r1
 805f774: 6921         	ldr	r1, [r4, #0x10]
 805f776: 4288         	cmp	r0, r1
 805f778: d902         	bls	0x805f780 <__sfvwrite_r+0x13c> @ imm = #0x4
 805f77a: 455a         	cmp	r2, r11
 805f77c: f300 80a9    	bgt.w	0x805f8d2 <__sfvwrite_r+0x28e> @ imm = #0x152
 805f780: 4293         	cmp	r3, r2
 805f782: dc66         	bgt	0x805f852 <__sfvwrite_r+0x20e> @ imm = #0xcc
 805f784: 462a         	mov	r2, r5
 805f786: 69e1         	ldr	r1, [r4, #0x1c]
 805f788: 4640         	mov	r0, r8
 805f78a: f8d4 c024    	ldr.w	r12, [r4, #0x24]
 805f78e: 47e0         	blx	r12
 805f790: f1b0 0b00    	subs.w	r11, r0, #0x0
 805f794: ddd1         	ble	0x805f73a <__sfvwrite_r+0xf6> @ imm = #-0x5e
 805f796: ebb9 090b    	subs.w	r9, r9, r11
 805f79a: d0c9         	beq	0x805f730 <__sfvwrite_r+0xec> @ imm = #-0x6e
 805f79c: 2001         	movs	r0, #0x1
 805f79e: 68ba         	ldr	r2, [r7, #0x8]
 805f7a0: 445d         	add	r5, r11
 805f7a2: eba6 060b    	sub.w	r6, r6, r11
 805f7a6: eba2 020b    	sub.w	r2, r2, r11
 805f7aa: 60ba         	str	r2, [r7, #0x8]
 805f7ac: 2a00         	cmp	r2, #0x0
 805f7ae: f43f af78    	beq.w	0x805f6a2 <__sfvwrite_r+0x5e> @ imm = #-0x110
 805f7b2: 2e00         	cmp	r6, #0x0
 805f7b4: d1d3         	bne	0x805f75e <__sfvwrite_r+0x11a> @ imm = #-0x5a
 805f7b6: f10a 0308    	add.w	r3, r10, #0x8
 805f7ba: f853 6c04    	ldr	r6, [r3, #-4]
 805f7be: 469a         	mov	r10, r3
 805f7c0: f853 5c08    	ldr	r5, [r3, #-8]
 805f7c4: 3308         	adds	r3, #0x8
 805f7c6: 2e00         	cmp	r6, #0x0
 805f7c8: d0f7         	beq	0x805f7ba <__sfvwrite_r+0x176> @ imm = #-0x12
 805f7ca: 4632         	mov	r2, r6
 805f7cc: 210a         	movs	r1, #0xa
 805f7ce: 4628         	mov	r0, r5
 805f7d0: f7ff fffe    	bl	0x805f7d0 <__sfvwrite_r+0x18c> @ imm = #-0x4
 805f7d4: 2800         	cmp	r0, #0x0
 805f7d6: f000 809d    	beq.w	0x805f914 <__sfvwrite_r+0x2d0> @ imm = #0x13a
 805f7da: 3001         	adds	r0, #0x1
 805f7dc: eba0 0905    	sub.w	r9, r0, r5
 805f7e0: e7bf         	b	0x805f762 <__sfvwrite_r+0x11e> @ imm = #-0x82
 805f7e2: 6820         	ldr	r0, [r4]
 805f7e4: 6923         	ldr	r3, [r4, #0x10]
 805f7e6: 4298         	cmp	r0, r3
 805f7e8: d817         	bhi	0x805f81a <__sfvwrite_r+0x1d6> @ imm = #0x2e
 805f7ea: 6963         	ldr	r3, [r4, #0x14]
 805f7ec: 42b3         	cmp	r3, r6
 805f7ee: d814         	bhi	0x805f81a <__sfvwrite_r+0x1d6> @ imm = #0x28
 805f7f0: f06f 4200    	mvn	r2, #0x80000000
 805f7f4: 69e1         	ldr	r1, [r4, #0x1c]
 805f7f6: 4640         	mov	r0, r8
 805f7f8: f8d4 c024    	ldr.w	r12, [r4, #0x24]
 805f7fc: 42b2         	cmp	r2, r6
 805f7fe: bf28         	it	hs
 805f800: 4632         	movhs	r2, r6
 805f802: fb92 f2f3    	sdiv	r2, r2, r3
 805f806: fb02 f303    	mul	r3, r2, r3
 805f80a: 464a         	mov	r2, r9
 805f80c: 47e0         	blx	r12
 805f80e: f1b0 0a00    	subs.w	r10, r0, #0x0
 805f812: dd92         	ble	0x805f73a <__sfvwrite_r+0xf6> @ imm = #-0xdc
 805f814: eba6 060a    	sub.w	r6, r6, r10
 805f818: e776         	b	0x805f708 <__sfvwrite_r+0xc4> @ imm = #-0x114
 805f81a: 45b3         	cmp	r11, r6
 805f81c: 46da         	mov	r10, r11
 805f81e: 4649         	mov	r1, r9
 805f820: bf28         	it	hs
 805f822: 46b2         	movhs	r10, r6
 805f824: 4652         	mov	r2, r10
 805f826: f7ff fffe    	bl	0x805f826 <__sfvwrite_r+0x1e2> @ imm = #-0x4
 805f82a: 68a3         	ldr	r3, [r4, #0x8]
 805f82c: 6822         	ldr	r2, [r4]
 805f82e: eba3 030a    	sub.w	r3, r3, r10
 805f832: 4452         	add	r2, r10
 805f834: 60a3         	str	r3, [r4, #0x8]
 805f836: 6022         	str	r2, [r4]
 805f838: 2b00         	cmp	r3, #0x0
 805f83a: d1eb         	bne	0x805f814 <__sfvwrite_r+0x1d0> @ imm = #-0x2a
 805f83c: 4621         	mov	r1, r4
 805f83e: 4640         	mov	r0, r8
 805f840: f7ff fffe    	bl	0x805f840 <__sfvwrite_r+0x1fc> @ imm = #-0x4
 805f844: 2800         	cmp	r0, #0x0
 805f846: d0e5         	beq	0x805f814 <__sfvwrite_r+0x1d0> @ imm = #-0x36
 805f848: e777         	b	0x805f73a <__sfvwrite_r+0xf6> @ imm = #-0x112
 805f84a: 46b3         	mov	r11, r6
 805f84c: 6820         	ldr	r0, [r4]
 805f84e: 4632         	mov	r2, r6
 805f850: e74c         	b	0x805f6ec <__sfvwrite_r+0xa8> @ imm = #-0x168
 805f852: 4629         	mov	r1, r5
 805f854: 9201         	str	r2, [sp, #0x4]
 805f856: f7ff fffe    	bl	0x805f856 <__sfvwrite_r+0x212> @ imm = #-0x4
 805f85a: 9a01         	ldr	r2, [sp, #0x4]
 805f85c: 68a3         	ldr	r3, [r4, #0x8]
 805f85e: 4693         	mov	r11, r2
 805f860: 1a9b         	subs	r3, r3, r2
 805f862: 60a3         	str	r3, [r4, #0x8]
 805f864: 6823         	ldr	r3, [r4]
 805f866: 4413         	add	r3, r2
 805f868: 6023         	str	r3, [r4]
 805f86a: e794         	b	0x805f796 <__sfvwrite_r+0x152> @ imm = #-0xd8
 805f86c: 6823         	ldr	r3, [r4]
 805f86e: 6921         	ldr	r1, [r4, #0x10]
 805f870: eba3 0b01    	sub.w	r11, r3, r1
 805f874: 6963         	ldr	r3, [r4, #0x14]
 805f876: eb13 0343    	adds.w	r3, r3, r3, lsl #1
 805f87a: bf48         	it	mi
 805f87c: 3301         	addmi	r3, #0x1
 805f87e: ea4f 0a63    	asr.w	r10, r3, #0x1
 805f882: f10b 0301    	add.w	r3, r11, #0x1
 805f886: 4433         	add	r3, r6
 805f888: 4652         	mov	r2, r10
 805f88a: 4553         	cmp	r3, r10
 805f88c: d901         	bls	0x805f892 <__sfvwrite_r+0x24e> @ imm = #0x2
 805f88e: 469a         	mov	r10, r3
 805f890: 461a         	mov	r2, r3
 805f892: 0543         	lsls	r3, r0, #0x15
 805f894: d52c         	bpl	0x805f8f0 <__sfvwrite_r+0x2ac> @ imm = #0x58
 805f896: 4611         	mov	r1, r2
 805f898: 4640         	mov	r0, r8
 805f89a: f7ff fffe    	bl	0x805f89a <__sfvwrite_r+0x256> @ imm = #-0x4
 805f89e: 2800         	cmp	r0, #0x0
 805f8a0: d03b         	beq	0x805f91a <__sfvwrite_r+0x2d6> @ imm = #0x76
 805f8a2: 465a         	mov	r2, r11
 805f8a4: 6921         	ldr	r1, [r4, #0x10]
 805f8a6: 9001         	str	r0, [sp, #0x4]
 805f8a8: f7ff fffe    	bl	0x805f8a8 <__sfvwrite_r+0x264> @ imm = #-0x4
 805f8ac: 89a2         	ldrh	r2, [r4, #0xc]
 805f8ae: 9b01         	ldr	r3, [sp, #0x4]
 805f8b0: f422 6290    	bic	r2, r2, #0x480
 805f8b4: f042 0280    	orr	r2, r2, #0x80
 805f8b8: 81a2         	strh	r2, [r4, #0xc]
 805f8ba: eb03 000b    	add.w	r0, r3, r11
 805f8be: 6123         	str	r3, [r4, #0x10]
 805f8c0: ebaa 030b    	sub.w	r3, r10, r11
 805f8c4: 4632         	mov	r2, r6
 805f8c6: 46b3         	mov	r11, r6
 805f8c8: f8c4 a014    	str.w	r10, [r4, #0x14]
 805f8cc: 60a3         	str	r3, [r4, #0x8]
 805f8ce: 6020         	str	r0, [r4]
 805f8d0: e70c         	b	0x805f6ec <__sfvwrite_r+0xa8> @ imm = #-0x1e8
 805f8d2: 4629         	mov	r1, r5
 805f8d4: 465a         	mov	r2, r11
 805f8d6: f7ff fffe    	bl	0x805f8d6 <__sfvwrite_r+0x292> @ imm = #-0x4
 805f8da: 6823         	ldr	r3, [r4]
 805f8dc: 4621         	mov	r1, r4
 805f8de: 4640         	mov	r0, r8
 805f8e0: 445b         	add	r3, r11
 805f8e2: 6023         	str	r3, [r4]
 805f8e4: f7ff fffe    	bl	0x805f8e4 <__sfvwrite_r+0x2a0> @ imm = #-0x4
 805f8e8: 2800         	cmp	r0, #0x0
 805f8ea: f43f af54    	beq.w	0x805f796 <__sfvwrite_r+0x152> @ imm = #-0x158
 805f8ee: e724         	b	0x805f73a <__sfvwrite_r+0xf6> @ imm = #-0x1b8
 805f8f0: 4640         	mov	r0, r8
 805f8f2: f7ff fffe    	bl	0x805f8f2 <__sfvwrite_r+0x2ae> @ imm = #-0x4
 805f8f6: 4603         	mov	r3, r0
 805f8f8: 2800         	cmp	r0, #0x0
 805f8fa: d1de         	bne	0x805f8ba <__sfvwrite_r+0x276> @ imm = #-0x44
 805f8fc: 6921         	ldr	r1, [r4, #0x10]
 805f8fe: 4640         	mov	r0, r8
 805f900: f7ff fffe    	bl	0x805f900 <__sfvwrite_r+0x2bc> @ imm = #-0x4
 805f904: f9b4 300c    	ldrsh.w	r3, [r4, #0xc]
 805f908: 220c         	movs	r2, #0xc
 805f90a: f023 0380    	bic	r3, r3, #0x80
 805f90e: f8c8 2000    	str.w	r2, [r8]
 805f912: e714         	b	0x805f73e <__sfvwrite_r+0xfa> @ imm = #-0x1d8
 805f914: 1c72         	adds	r2, r6, #0x1
 805f916: 4691         	mov	r9, r2
 805f918: e724         	b	0x805f764 <__sfvwrite_r+0x120> @ imm = #-0x1b8
 805f91a: 220c         	movs	r2, #0xc
 805f91c: f9b4 300c    	ldrsh.w	r3, [r4, #0xc]
 805f920: f8c8 2000    	str.w	r2, [r8]
 805f924: e70b         	b	0x805f73e <__sfvwrite_r+0xfa> @ imm = #-0x1ea
 805f926: f04f 30ff    	mov.w	r0, #0xffffffff
 805f92a: e6bb         	b	0x805f6a4 <__sfvwrite_r+0x60> @ imm = #-0x28a

0805f92c <$d>:
 805f92c: 00 fc ff 7f  	.word	0x7ffffc00

0805f930 <_fwalk>:
 805f930: e92d 41f0    	push.w	{r4, r5, r6, r7, r8, lr}
 805f934: 2600         	movs	r6, #0x0
 805f936: 4688         	mov	r8, r1
 805f938: f500 7738    	add.w	r7, r0, #0x2e0
 805f93c: e9d7 5401    	ldrd	r5, r4, [r7, #4]
 805f940: 3d01         	subs	r5, #0x1
 805f942: d40e         	bmi	0x805f962 <_fwalk+0x32> @ imm = #0x1c
 805f944: 89a3         	ldrh	r3, [r4, #0xc]
 805f946: 3d01         	subs	r5, #0x1
 805f948: 2b01         	cmp	r3, #0x1
 805f94a: d906         	bls	0x805f95a <_fwalk+0x2a> @ imm = #0xc
 805f94c: f9b4 300e    	ldrsh.w	r3, [r4, #0xe]
 805f950: 4620         	mov	r0, r4
 805f952: 3301         	adds	r3, #0x1
 805f954: d001         	beq	0x805f95a <_fwalk+0x2a> @ imm = #0x2
 805f956: 47c0         	blx	r8
 805f958: 4306         	orrs	r6, r0
 805f95a: 1c6b         	adds	r3, r5, #0x1
 805f95c: f104 0468    	add.w	r4, r4, #0x68
 805f960: d1f0         	bne	0x805f944 <_fwalk+0x14> @ imm = #-0x20
 805f962: 683f         	ldr	r7, [r7]
 805f964: 2f00         	cmp	r7, #0x0
 805f966: d1e9         	bne	0x805f93c <_fwalk+0xc>  @ imm = #-0x2e
 805f968: 4630         	mov	r0, r6
 805f96a: e8bd 81f0    	pop.w	{r4, r5, r6, r7, r8, pc}
 805f96e: bf00         	nop

0805f970 <_fwalk_reent>:
 805f970: e92d 43f8    	push.w	{r3, r4, r5, r6, r7, r8, r9, lr}
 805f974: 2600         	movs	r6, #0x0
 805f976: 4681         	mov	r9, r0
 805f978: 4688         	mov	r8, r1
 805f97a: f500 7738    	add.w	r7, r0, #0x2e0
 805f97e: e9d7 5401    	ldrd	r5, r4, [r7, #4]
 805f982: 3d01         	subs	r5, #0x1
 805f984: d40f         	bmi	0x805f9a6 <_fwalk_reent+0x36> @ imm = #0x1e
 805f986: 89a3         	ldrh	r3, [r4, #0xc]
 805f988: 3d01         	subs	r5, #0x1
 805f98a: 2b01         	cmp	r3, #0x1
 805f98c: d907         	bls	0x805f99e <_fwalk_reent+0x2e> @ imm = #0xe
 805f98e: f9b4 300e    	ldrsh.w	r3, [r4, #0xe]
 805f992: 4621         	mov	r1, r4
 805f994: 4648         	mov	r0, r9
 805f996: 3301         	adds	r3, #0x1
 805f998: d001         	beq	0x805f99e <_fwalk_reent+0x2e> @ imm = #0x2
 805f99a: 47c0         	blx	r8
 805f99c: 4306         	orrs	r6, r0
 805f99e: 1c6b         	adds	r3, r5, #0x1
 805f9a0: f104 0468    	add.w	r4, r4, #0x68
 805f9a4: d1ef         	bne	0x805f986 <_fwalk_reent+0x16> @ imm = #-0x22
 805f9a6: 683f         	ldr	r7, [r7]
 805f9a8: 2f00         	cmp	r7, #0x0
 805f9aa: d1e8         	bne	0x805f97e <_fwalk_reent+0xe> @ imm = #-0x30
 805f9ac: 4630         	mov	r0, r6
 805f9ae: e8bd 83f8    	pop.w	{r3, r4, r5, r6, r7, r8, r9, pc}
 805f9b2: bf00         	nop

0805f9b4 <_setlocale_r>:
 805f9b4: b142         	cbz	r2, 0x805f9c8 <_setlocale_r+0x14> @ imm = #0x10
 805f9b6: 490c         	ldr	r1, [pc, #0x30]         @ 0x805f9e8 <_setlocale_r+0x34>
 805f9b8: 4610         	mov	r0, r2
 805f9ba: b510         	push	{r4, lr}
 805f9bc: 4614         	mov	r4, r2
 805f9be: f7ff fffe    	bl	0x805f9be <_setlocale_r+0xa> @ imm = #-0x4
 805f9c2: b918         	cbnz	r0, 0x805f9cc <_setlocale_r+0x18> @ imm = #0x6
 805f9c4: 4809         	ldr	r0, [pc, #0x24]         @ 0x805f9ec <_setlocale_r+0x38>
 805f9c6: bd10         	pop	{r4, pc}
 805f9c8: 4808         	ldr	r0, [pc, #0x20]         @ 0x805f9ec <_setlocale_r+0x38>
 805f9ca: 4770         	bx	lr
 805f9cc: 4907         	ldr	r1, [pc, #0x1c]         @ 0x805f9ec <_setlocale_r+0x38>
 805f9ce: 4620         	mov	r0, r4
 805f9d0: f7ff fffe    	bl	0x805f9d0 <_setlocale_r+0x1c> @ imm = #-0x4
 805f9d4: 2800         	cmp	r0, #0x0
 805f9d6: d0f5         	beq	0x805f9c4 <_setlocale_r+0x10> @ imm = #-0x16
 805f9d8: 4905         	ldr	r1, [pc, #0x14]         @ 0x805f9f0 <_setlocale_r+0x3c>
 805f9da: 4620         	mov	r0, r4
 805f9dc: f7ff fffe    	bl	0x805f9dc <_setlocale_r+0x28> @ imm = #-0x4
 805f9e0: 2800         	cmp	r0, #0x0
 805f9e2: d0ef         	beq	0x805f9c4 <_setlocale_r+0x10> @ imm = #-0x22
 805f9e4: 2000         	movs	r0, #0x0
 805f9e6: bd10         	pop	{r4, pc}

0805f9e8 <$d>:
 805f9e8: 98 48 00 00  	.word	0x00004898
 805f9ec: 94 48 00 00  	.word	0x00004894
 805f9f0: a0 48 00 00  	.word	0x000048a0

0805f9f4 <__locale_mb_cur_max>:
 805f9f4: 4b01         	ldr	r3, [pc, #0x4]          @ 0x805f9fc <__locale_mb_cur_max+0x8>
 805f9f6: f893 0128    	ldrb.w	r0, [r3, #0x128]
 805f9fa: 4770         	bx	lr

0805f9fc <$d>:
 805f9fc: 88 28 00 00  	.word	0x00002888

0805fa00 <setlocale>:
 805fa00: b141         	cbz	r1, 0x805fa14 <setlocale+0x14> @ imm = #0x10
 805fa02: b510         	push	{r4, lr}
 805fa04: 460c         	mov	r4, r1
 805fa06: 490b         	ldr	r1, [pc, #0x2c]         @ 0x805fa34 <setlocale+0x34>
 805fa08: 4620         	mov	r0, r4
 805fa0a: f7ff fffe    	bl	0x805fa0a <setlocale+0xa> @ imm = #-0x4
 805fa0e: b918         	cbnz	r0, 0x805fa18 <setlocale+0x18> @ imm = #0x6
 805fa10: 4809         	ldr	r0, [pc, #0x24]         @ 0x805fa38 <setlocale+0x38>
 805fa12: bd10         	pop	{r4, pc}
 805fa14: 4808         	ldr	r0, [pc, #0x20]         @ 0x805fa38 <setlocale+0x38>
 805fa16: 4770         	bx	lr
 805fa18: 4907         	ldr	r1, [pc, #0x1c]         @ 0x805fa38 <setlocale+0x38>
 805fa1a: 4620         	mov	r0, r4
 805fa1c: f7ff fffe    	bl	0x805fa1c <setlocale+0x1c> @ imm = #-0x4
 805fa20: 2800         	cmp	r0, #0x0
 805fa22: d0f5         	beq	0x805fa10 <setlocale+0x10> @ imm = #-0x16
 805fa24: 4905         	ldr	r1, [pc, #0x14]         @ 0x805fa3c <setlocale+0x3c>
 805fa26: 4620         	mov	r0, r4
 805fa28: f7ff fffe    	bl	0x805fa28 <setlocale+0x28> @ imm = #-0x4
 805fa2c: 2800         	cmp	r0, #0x0
 805fa2e: d0ef         	beq	0x805fa10 <setlocale+0x10> @ imm = #-0x22
 805fa30: 2000         	movs	r0, #0x0
 805fa32: bd10         	pop	{r4, pc}

0805fa34 <$d>:
 805fa34: 98 48 00 00  	.word	0x00004898
 805fa38: 94 48 00 00  	.word	0x00004894
 805fa3c: a0 48 00 00  	.word	0x000048a0

0805fa40 <__smakebuf_r>:
 805fa40: 898b         	ldrh	r3, [r1, #0xc]
 805fa42: e92d 41f0    	push.w	{r4, r5, r6, r7, r8, lr}
 805fa46: 460c         	mov	r4, r1
 805fa48: 0799         	lsls	r1, r3, #0x1e
 805fa4a: b096         	sub	sp, #0x58
 805fa4c: d508         	bpl	0x805fa60 <__smakebuf_r+0x20> @ imm = #0x10
 805fa4e: f104 0343    	add.w	r3, r4, #0x43
 805fa52: 2201         	movs	r2, #0x1
 805fa54: 6023         	str	r3, [r4]
 805fa56: e9c4 3204    	strd	r3, r2, [r4, #16]
 805fa5a: b016         	add	sp, #0x58
 805fa5c: e8bd 81f0    	pop.w	{r4, r5, r6, r7, r8, pc}
 805fa60: f9b4 100e    	ldrsh.w	r1, [r4, #0xe]
 805fa64: 4606         	mov	r6, r0
 805fa66: 2900         	cmp	r1, #0x0
 805fa68: db27         	blt	0x805faba <__smakebuf_r+0x7a> @ imm = #0x4e
 805fa6a: 466a         	mov	r2, sp
 805fa6c: f7ff fffe    	bl	0x805fa6c <__smakebuf_r+0x2c> @ imm = #-0x4
 805fa70: 2800         	cmp	r0, #0x0
 805fa72: db21         	blt	0x805fab8 <__smakebuf_r+0x78> @ imm = #0x42
 805fa74: 9d01         	ldr	r5, [sp, #0x4]
 805fa76: f44f 6880    	mov.w	r8, #0x400
 805fa7a: f44f 6700    	mov.w	r7, #0x800
 805fa7e: f405 4570    	and	r5, r5, #0xf000
 805fa82: f5a5 5500    	sub.w	r5, r5, #0x2000
 805fa86: fab5 f585    	clz	r5, r5
 805fa8a: 096d         	lsrs	r5, r5, #0x5
 805fa8c: 4641         	mov	r1, r8
 805fa8e: 4630         	mov	r0, r6
 805fa90: f7ff fffe    	bl	0x805fa90 <__smakebuf_r+0x50> @ imm = #-0x4
 805fa94: f9b4 300c    	ldrsh.w	r3, [r4, #0xc]
 805fa98: b1f0         	cbz	r0, 0x805fad8 <__smakebuf_r+0x98> @ imm = #0x3c
 805fa9a: f043 0380    	orr	r3, r3, #0x80
 805fa9e: 4a1f         	ldr	r2, [pc, #0x7c]         @ 0x805fb1c <__smakebuf_r+0xdc>
 805faa0: 63f2         	str	r2, [r6, #0x3c]
 805faa2: f8c4 8014    	str.w	r8, [r4, #0x14]
 805faa6: 81a3         	strh	r3, [r4, #0xc]
 805faa8: 6020         	str	r0, [r4]
 805faaa: 6120         	str	r0, [r4, #0x10]
 805faac: bb35         	cbnz	r5, 0x805fafc <__smakebuf_r+0xbc> @ imm = #0x4c
 805faae: 433b         	orrs	r3, r7
 805fab0: 81a3         	strh	r3, [r4, #0xc]
 805fab2: b016         	add	sp, #0x58
 805fab4: e8bd 81f0    	pop.w	{r4, r5, r6, r7, r8, pc}
 805fab8: 89a3         	ldrh	r3, [r4, #0xc]
 805faba: f013 0580    	ands	r5, r3, #0x80
 805fabe: d019         	beq	0x805faf4 <__smakebuf_r+0xb4> @ imm = #0x32
 805fac0: f04f 0840    	mov.w	r8, #0x40
 805fac4: 2500         	movs	r5, #0x0
 805fac6: 4630         	mov	r0, r6
 805fac8: 4641         	mov	r1, r8
 805faca: 462f         	mov	r7, r5
 805facc: f7ff fffe    	bl	0x805facc <__smakebuf_r+0x8c> @ imm = #-0x4
 805fad0: f9b4 300c    	ldrsh.w	r3, [r4, #0xc]
 805fad4: 2800         	cmp	r0, #0x0
 805fad6: d1e0         	bne	0x805fa9a <__smakebuf_r+0x5a> @ imm = #-0x40
 805fad8: 059a         	lsls	r2, r3, #0x16
 805fada: d4be         	bmi	0x805fa5a <__smakebuf_r+0x1a> @ imm = #-0x84
 805fadc: f023 0303    	bic	r3, r3, #0x3
 805fae0: f104 0243    	add.w	r2, r4, #0x43
 805fae4: 2101         	movs	r1, #0x1
 805fae6: f043 0302    	orr	r3, r3, #0x2
 805faea: 6022         	str	r2, [r4]
 805faec: e9c4 2104    	strd	r2, r1, [r4, #16]
 805faf0: 81a3         	strh	r3, [r4, #0xc]
 805faf2: e7b2         	b	0x805fa5a <__smakebuf_r+0x1a> @ imm = #-0x9c
 805faf4: f44f 6880    	mov.w	r8, #0x400
 805faf8: 462f         	mov	r7, r5
 805fafa: e7c7         	b	0x805fa8c <__smakebuf_r+0x4c> @ imm = #-0x72
 805fafc: f9b4 100e    	ldrsh.w	r1, [r4, #0xe]
 805fb00: 4630         	mov	r0, r6
 805fb02: f7ff fffe    	bl	0x805fb02 <__smakebuf_r+0xc2> @ imm = #-0x4
 805fb06: b910         	cbnz	r0, 0x805fb0e <__smakebuf_r+0xce> @ imm = #0x4
 805fb08: f9b4 300c    	ldrsh.w	r3, [r4, #0xc]
 805fb0c: e7cf         	b	0x805faae <__smakebuf_r+0x6e> @ imm = #-0x62
 805fb0e: 89a3         	ldrh	r3, [r4, #0xc]
 805fb10: f023 0303    	bic	r3, r3, #0x3
 805fb14: f043 0301    	orr	r3, r3, #0x1
 805fb18: b21b         	sxth	r3, r3
 805fb1a: e7c8         	b	0x805faae <__smakebuf_r+0x6e> @ imm = #-0x70

0805fb1c <$d>:
 805fb1c: 00 00 00 00  	.word	0x00000000

0805fb20 <__swhatbuf_r>:
 805fb20: b570         	push	{r4, r5, r6, lr}
 805fb22: 460c         	mov	r4, r1
 805fb24: f9b1 100e    	ldrsh.w	r1, [r1, #0xe]
 805fb28: b096         	sub	sp, #0x58
 805fb2a: 4615         	mov	r5, r2
 805fb2c: 2900         	cmp	r1, #0x0
 805fb2e: 461e         	mov	r6, r3
 805fb30: db14         	blt	0x805fb5c <__swhatbuf_r+0x3c> @ imm = #0x28
 805fb32: 466a         	mov	r2, sp
 805fb34: f7ff fffe    	bl	0x805fb34 <__swhatbuf_r+0x14> @ imm = #-0x4
 805fb38: 2800         	cmp	r0, #0x0
 805fb3a: db0f         	blt	0x805fb5c <__swhatbuf_r+0x3c> @ imm = #0x1e
 805fb3c: 9a01         	ldr	r2, [sp, #0x4]
 805fb3e: f44f 6380    	mov.w	r3, #0x400
 805fb42: f44f 6000    	mov.w	r0, #0x800
 805fb46: f402 4270    	and	r2, r2, #0xf000
 805fb4a: f5a2 5200    	sub.w	r2, r2, #0x2000
 805fb4e: fab2 f282    	clz	r2, r2
 805fb52: 0952         	lsrs	r2, r2, #0x5
 805fb54: 6032         	str	r2, [r6]
 805fb56: 602b         	str	r3, [r5]
 805fb58: b016         	add	sp, #0x58
 805fb5a: bd70         	pop	{r4, r5, r6, pc}
 805fb5c: f9b4 100c    	ldrsh.w	r1, [r4, #0xc]
 805fb60: 2300         	movs	r3, #0x0
 805fb62: f011 0080    	ands	r0, r1, #0x80
 805fb66: 6033         	str	r3, [r6]
 805fb68: d004         	beq	0x805fb74 <__swhatbuf_r+0x54> @ imm = #0x8
 805fb6a: 2240         	movs	r2, #0x40
 805fb6c: 4618         	mov	r0, r3
 805fb6e: 602a         	str	r2, [r5]
 805fb70: b016         	add	sp, #0x58
 805fb72: bd70         	pop	{r4, r5, r6, pc}
 805fb74: f44f 6380    	mov.w	r3, #0x400
 805fb78: 602b         	str	r3, [r5]
 805fb7a: b016         	add	sp, #0x58
 805fb7c: bd70         	pop	{r4, r5, r6, pc}
 805fb7e: bf00         	nop

0805fb80 <_malloc_r>:
 805fb80: f101 030b    	add.w	r3, r1, #0xb
 805fb84: 2b16         	cmp	r3, #0x16
 805fb86: e92d 4ff0    	push.w	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 805fb8a: 4605         	mov	r5, r0
 805fb8c: b083         	sub	sp, #0xc
 805fb8e: d824         	bhi	0x805fbda <_malloc_r+0x5a> @ imm = #0x48
 805fb90: 2910         	cmp	r1, #0x10
 805fb92: f200 80fc    	bhi.w	0x805fd8e <_malloc_r+0x20e> @ imm = #0x1f8
 805fb96: f7ff fffe    	bl	0x805fb96 <_malloc_r+0x16> @ imm = #-0x4
 805fb9a: 2410         	movs	r4, #0x10
 805fb9c: 2218         	movs	r2, #0x18
 805fb9e: 2002         	movs	r0, #0x2
 805fba0: 4ec4         	ldr	r6, [pc, #0x310]        @ 0x805feb4 <_malloc_r+0x334>
 805fba2: 4432         	add	r2, r6
 805fba4: 6853         	ldr	r3, [r2, #0x4]
 805fba6: f1a2 0108    	sub.w	r1, r2, #0x8
 805fbaa: 428b         	cmp	r3, r1
 805fbac: f000 80f6    	beq.w	0x805fd9c <_malloc_r+0x21c> @ imm = #0x1ec
 805fbb0: 685a         	ldr	r2, [r3, #0x4]
 805fbb2: 4628         	mov	r0, r5
 805fbb4: f022 0203    	bic	r2, r2, #0x3
 805fbb8: e9d3 4102    	ldrd	r4, r1, [r3, #8]
 805fbbc: 441a         	add	r2, r3
 805fbbe: 60e1         	str	r1, [r4, #0xc]
 805fbc0: 608c         	str	r4, [r1, #0x8]
 805fbc2: f103 0408    	add.w	r4, r3, #0x8
 805fbc6: 6853         	ldr	r3, [r2, #0x4]
 805fbc8: f043 0301    	orr	r3, r3, #0x1
 805fbcc: 6053         	str	r3, [r2, #0x4]
 805fbce: f7ff fffe    	bl	0x805fbce <_malloc_r+0x4e> @ imm = #-0x4
 805fbd2: 4620         	mov	r0, r4
 805fbd4: b003         	add	sp, #0xc
 805fbd6: e8bd 8ff0    	pop.w	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
 805fbda: 2b00         	cmp	r3, #0x0
 805fbdc: f023 0407    	bic	r4, r3, #0x7
 805fbe0: f2c0 80d5    	blt.w	0x805fd8e <_malloc_r+0x20e> @ imm = #0x1aa
 805fbe4: 42a1         	cmp	r1, r4
 805fbe6: f200 80d2    	bhi.w	0x805fd8e <_malloc_r+0x20e> @ imm = #0x1a4
 805fbea: f7ff fffe    	bl	0x805fbea <_malloc_r+0x6a> @ imm = #-0x4
 805fbee: f5b4 7ffc    	cmp.w	r4, #0x1f8
 805fbf2: f0c0 81c2    	blo.w	0x805ff7a <_malloc_r+0x3fa> @ imm = #0x384
 805fbf6: 0a63         	lsrs	r3, r4, #0x9
 805fbf8: f000 813a    	beq.w	0x805fe70 <_malloc_r+0x2f0> @ imm = #0x274
 805fbfc: 2b04         	cmp	r3, #0x4
 805fbfe: f200 8198    	bhi.w	0x805ff32 <_malloc_r+0x3b2> @ imm = #0x330
 805fc02: 09a3         	lsrs	r3, r4, #0x6
 805fc04: f103 0039    	add.w	r0, r3, #0x39
 805fc08: f103 0738    	add.w	r7, r3, #0x38
 805fc0c: 00c3         	lsls	r3, r0, #0x3
 805fc0e: 4ea9         	ldr	r6, [pc, #0x2a4]        @ 0x805feb4 <_malloc_r+0x334>
 805fc10: 4433         	add	r3, r6
 805fc12: f1a3 0c08    	sub.w	r12, r3, #0x8
 805fc16: 685b         	ldr	r3, [r3, #0x4]
 805fc18: 459c         	cmp	r12, r3
 805fc1a: d107         	bne	0x805fc2c <_malloc_r+0xac> @ imm = #0xe
 805fc1c: e0c3         	b	0x805fda6 <_malloc_r+0x226> @ imm = #0x186
 805fc1e: 2900         	cmp	r1, #0x0
 805fc20: f280 8150    	bge.w	0x805fec4 <_malloc_r+0x344> @ imm = #0x2a0
 805fc24: 68db         	ldr	r3, [r3, #0xc]
 805fc26: 459c         	cmp	r12, r3
 805fc28: f000 80bd    	beq.w	0x805fda6 <_malloc_r+0x226> @ imm = #0x17a
 805fc2c: 685a         	ldr	r2, [r3, #0x4]
 805fc2e: f022 0203    	bic	r2, r2, #0x3
 805fc32: 1b11         	subs	r1, r2, r4
 805fc34: 290f         	cmp	r1, #0xf
 805fc36: ddf2         	ble	0x805fc1e <_malloc_r+0x9e> @ imm = #-0x1c
 805fc38: 6933         	ldr	r3, [r6, #0x10]
 805fc3a: 4638         	mov	r0, r7
 805fc3c: f8df e278    	ldr.w	lr, [pc, #0x278]        @ 0x805feb8 <_malloc_r+0x338>
 805fc40: 4573         	cmp	r3, lr
 805fc42: f040 80b6    	bne.w	0x805fdb2 <_malloc_r+0x232> @ imm = #0x16c
 805fc46: 1083         	asrs	r3, r0, #0x2
 805fc48: 2101         	movs	r1, #0x1
 805fc4a: 6872         	ldr	r2, [r6, #0x4]
 805fc4c: 4099         	lsls	r1, r3
 805fc4e: 4291         	cmp	r1, r2
 805fc50: f240 80d8    	bls.w	0x805fe04 <_malloc_r+0x284> @ imm = #0x1b0
 805fc54: 68b7         	ldr	r7, [r6, #0x8]
 805fc56: 687b         	ldr	r3, [r7, #0x4]
 805fc58: f023 0903    	bic	r9, r3, #0x3
 805fc5c: eba9 0304    	sub.w	r3, r9, r4
 805fc60: 2b0f         	cmp	r3, #0xf
 805fc62: dd02         	ble	0x805fc6a <_malloc_r+0xea> @ imm = #0x4
 805fc64: 454c         	cmp	r4, r9
 805fc66: f240 8113    	bls.w	0x805fe90 <_malloc_r+0x310> @ imm = #0x226
 805fc6a: f8df a250    	ldr.w	r10, [pc, #0x250]       @ 0x805febc <_malloc_r+0x33c>
 805fc6e: eb07 0309    	add.w	r3, r7, r9
 805fc72: f8d6 1408    	ldr.w	r1, [r6, #0x408]
 805fc76: f8da 2000    	ldr.w	r2, [r10]
 805fc7a: 3101         	adds	r1, #0x1
 805fc7c: 4422         	add	r2, r4
 805fc7e: f000 81ca    	beq.w	0x8060016 <_malloc_r+0x496> @ imm = #0x394
 805fc82: f241 010f    	movw	r1, #0x100f
 805fc86: f8df 8238    	ldr.w	r8, [pc, #0x238]        @ 0x805fec0 <_malloc_r+0x340>
 805fc8a: 4411         	add	r1, r2
 805fc8c: ea01 0808    	and.w	r8, r1, r8
 805fc90: 4641         	mov	r1, r8
 805fc92: 4628         	mov	r0, r5
 805fc94: 9300         	str	r3, [sp]
 805fc96: f7ff fffe    	bl	0x805fc96 <_malloc_r+0x116> @ imm = #-0x4
 805fc9a: f1b0 3fff    	cmp.w	r0, #0xffffffff
 805fc9e: 4683         	mov	r11, r0
 805fca0: 9b00         	ldr	r3, [sp]
 805fca2: f000 81a7    	beq.w	0x805fff4 <_malloc_r+0x474> @ imm = #0x34e
 805fca6: 42b7         	cmp	r7, r6
 805fca8: d002         	beq	0x805fcb0 <_malloc_r+0x130> @ imm = #0x4
 805fcaa: 4283         	cmp	r3, r0
 805fcac: f200 81a2    	bhi.w	0x805fff4 <_malloc_r+0x474> @ imm = #0x344
 805fcb0: f8da 1004    	ldr.w	r1, [r10, #0x4]
 805fcb4: 455b         	cmp	r3, r11
 805fcb6: 4441         	add	r1, r8
 805fcb8: f8ca 1004    	str.w	r1, [r10, #0x4]
 805fcbc: f000 819d    	beq.w	0x805fffa <_malloc_r+0x47a> @ imm = #0x33a
 805fcc0: f8d6 2408    	ldr.w	r2, [r6, #0x408]
 805fcc4: 3201         	adds	r2, #0x1
 805fcc6: f000 81a3    	beq.w	0x8060010 <_malloc_r+0x490> @ imm = #0x346
 805fcca: ebab 0303    	sub.w	r3, r11, r3
 805fcce: 4419         	add	r1, r3
 805fcd0: f8ca 1004    	str.w	r1, [r10, #0x4]
 805fcd4: f01b 0307    	ands	r3, r11, #0x7
 805fcd8: f000 81a7    	beq.w	0x806002a <_malloc_r+0x4aa> @ imm = #0x34e
 805fcdc: f1c3 0208    	rsb.w	r2, r3, #0x8
 805fce0: 4628         	mov	r0, r5
 805fce2: 9300         	str	r3, [sp]
 805fce4: 4493         	add	r11, r2
 805fce6: f241 0208    	movw	r2, #0x1008
 805fcea: 44d8         	add	r8, r11
 805fcec: 1ad2         	subs	r2, r2, r3
 805fcee: eba2 0108    	sub.w	r1, r2, r8
 805fcf2: f3c1 010b    	ubfx	r1, r1, #0x0, #0xc
 805fcf6: 9101         	str	r1, [sp, #0x4]
 805fcf8: f7ff fffe    	bl	0x805fcf8 <_malloc_r+0x178> @ imm = #-0x4
 805fcfc: 1c42         	adds	r2, r0, #0x1
 805fcfe: 9b00         	ldr	r3, [sp]
 805fd00: f000 81d9    	beq.w	0x80600b6 <_malloc_r+0x536> @ imm = #0x3b2
 805fd04: eba0 000b    	sub.w	r0, r0, r11
 805fd08: 9901         	ldr	r1, [sp, #0x4]
 805fd0a: eb00 0801    	add.w	r8, r0, r1
 805fd0e: f8da 2004    	ldr.w	r2, [r10, #0x4]
 805fd12: f048 0301    	orr	r3, r8, #0x1
 805fd16: 42b7         	cmp	r7, r6
 805fd18: f8c6 b008    	str.w	r11, [r6, #0x8]
 805fd1c: 4411         	add	r1, r2
 805fd1e: f8cb 3004    	str.w	r3, [r11, #0x4]
 805fd22: f8ca 1004    	str.w	r1, [r10, #0x4]
 805fd26: f000 81a2    	beq.w	0x806006e <_malloc_r+0x4ee> @ imm = #0x344
 805fd2a: f1b9 0f0f    	cmp.w	r9, #0xf
 805fd2e: f240 81a0    	bls.w	0x8060072 <_malloc_r+0x4f2> @ imm = #0x340
 805fd32: 687b         	ldr	r3, [r7, #0x4]
 805fd34: f1a9 020c    	sub.w	r2, r9, #0xc
 805fd38: 2005         	movs	r0, #0x5
 805fd3a: f022 0207    	bic	r2, r2, #0x7
 805fd3e: f003 0301    	and	r3, r3, #0x1
 805fd42: 4313         	orrs	r3, r2
 805fd44: 2a0f         	cmp	r2, #0xf
 805fd46: 607b         	str	r3, [r7, #0x4]
 805fd48: eb07 0302    	add.w	r3, r7, r2
 805fd4c: e9c3 0001    	strd	r0, r0, [r3, #4]
 805fd50: f200 81a7    	bhi.w	0x80600a2 <_malloc_r+0x522> @ imm = #0x34e
 805fd54: f8db 3004    	ldr.w	r3, [r11, #0x4]
 805fd58: 465f         	mov	r7, r11
 805fd5a: f8da 202c    	ldr.w	r2, [r10, #0x2c]
 805fd5e: 428a         	cmp	r2, r1
 805fd60: f8da 2030    	ldr.w	r2, [r10, #0x30]
 805fd64: bf38         	it	lo
 805fd66: f8ca 102c    	strlo.w	r1, [r10, #0x2c]
 805fd6a: 428a         	cmp	r2, r1
 805fd6c: bf38         	it	lo
 805fd6e: f8ca 1030    	strlo.w	r1, [r10, #0x30]
 805fd72: f023 0803    	bic	r8, r3, #0x3
 805fd76: 4544         	cmp	r4, r8
 805fd78: eba8 0304    	sub.w	r3, r8, r4
 805fd7c: d802         	bhi	0x805fd84 <_malloc_r+0x204> @ imm = #0x4
 805fd7e: 2b0f         	cmp	r3, #0xf
 805fd80: f300 8086    	bgt.w	0x805fe90 <_malloc_r+0x310> @ imm = #0x10c
 805fd84: 4628         	mov	r0, r5
 805fd86: 2400         	movs	r4, #0x0
 805fd88: f7ff fffe    	bl	0x805fd88 <_malloc_r+0x208> @ imm = #-0x4
 805fd8c: e721         	b	0x805fbd2 <_malloc_r+0x52> @ imm = #-0x1be
 805fd8e: 2400         	movs	r4, #0x0
 805fd90: 230c         	movs	r3, #0xc
 805fd92: 4620         	mov	r0, r4
 805fd94: 602b         	str	r3, [r5]
 805fd96: b003         	add	sp, #0xc
 805fd98: e8bd 8ff0    	pop.w	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
 805fd9c: 68d3         	ldr	r3, [r2, #0xc]
 805fd9e: 429a         	cmp	r2, r3
 805fda0: f47f af06    	bne.w	0x805fbb0 <_malloc_r+0x30> @ imm = #-0x1f4
 805fda4: 3002         	adds	r0, #0x2
 805fda6: 6933         	ldr	r3, [r6, #0x10]
 805fda8: f8df e10c    	ldr.w	lr, [pc, #0x10c]        @ 0x805feb8 <_malloc_r+0x338>
 805fdac: 4573         	cmp	r3, lr
 805fdae: f43f af4a    	beq.w	0x805fc46 <_malloc_r+0xc6> @ imm = #-0x16c
 805fdb2: 6859         	ldr	r1, [r3, #0x4]
 805fdb4: f021 0103    	bic	r1, r1, #0x3
 805fdb8: 1b0a         	subs	r2, r1, r4
 805fdba: 2a0f         	cmp	r2, #0xf
 805fdbc: f300 80e1    	bgt.w	0x805ff82 <_malloc_r+0x402> @ imm = #0x1c2
 805fdc0: 2a00         	cmp	r2, #0x0
 805fdc2: e9c6 ee04    	strd	lr, lr, [r6, #16]
 805fdc6: da58         	bge	0x805fe7a <_malloc_r+0x2fa> @ imm = #0xb0
 805fdc8: f5b1 7f00    	cmp.w	r1, #0x200
 805fdcc: f080 808c    	bhs.w	0x805fee8 <_malloc_r+0x368> @ imm = #0x118
 805fdd0: ea4f 0cd1    	lsr.w	r12, r1, #0x3
 805fdd4: 2201         	movs	r2, #0x1
 805fdd6: 0949         	lsrs	r1, r1, #0x5
 805fdd8: f10c 0c01    	add.w	r12, r12, #0x1
 805fddc: 408a         	lsls	r2, r1
 805fdde: 6871         	ldr	r1, [r6, #0x4]
 805fde0: f856 703c    	ldr.w	r7, [r6, r12, lsl #3]
 805fde4: 430a         	orrs	r2, r1
 805fde6: eb06 01cc    	add.w	r1, r6, r12, lsl #3
 805fdea: 3908         	subs	r1, #0x8
 805fdec: 6072         	str	r2, [r6, #0x4]
 805fdee: e9c3 7102    	strd	r7, r1, [r3, #8]
 805fdf2: f846 303c    	str.w	r3, [r6, r12, lsl #3]
 805fdf6: 60fb         	str	r3, [r7, #0xc]
 805fdf8: 1083         	asrs	r3, r0, #0x2
 805fdfa: 2101         	movs	r1, #0x1
 805fdfc: 4099         	lsls	r1, r3
 805fdfe: 4291         	cmp	r1, r2
 805fe00: f63f af28    	bhi.w	0x805fc54 <_malloc_r+0xd4> @ imm = #-0x1b0
 805fe04: 4211         	tst	r1, r2
 805fe06: d105         	bne	0x805fe14 <_malloc_r+0x294> @ imm = #0xa
 805fe08: f020 0003    	bic	r0, r0, #0x3
 805fe0c: 0049         	lsls	r1, r1, #0x1
 805fe0e: 3004         	adds	r0, #0x4
 805fe10: 4211         	tst	r1, r2
 805fe12: d0fb         	beq	0x805fe0c <_malloc_r+0x28c> @ imm = #-0xa
 805fe14: eb06 09c0    	add.w	r9, r6, r0, lsl #3
 805fe18: 4680         	mov	r8, r0
 805fe1a: 46cc         	mov	r12, r9
 805fe1c: f8dc 700c    	ldr.w	r7, [r12, #0xc]
 805fe20: 45bc         	cmp	r12, r7
 805fe22: d107         	bne	0x805fe34 <_malloc_r+0x2b4> @ imm = #0xe
 805fe24: e091         	b	0x805ff4a <_malloc_r+0x3ca> @ imm = #0x122
 805fe26: 2b00         	cmp	r3, #0x0
 805fe28: f280 8098    	bge.w	0x805ff5c <_malloc_r+0x3dc> @ imm = #0x130
 805fe2c: 68ff         	ldr	r7, [r7, #0xc]
 805fe2e: 45bc         	cmp	r12, r7
 805fe30: f000 808b    	beq.w	0x805ff4a <_malloc_r+0x3ca> @ imm = #0x116
 805fe34: 687a         	ldr	r2, [r7, #0x4]
 805fe36: f022 0203    	bic	r2, r2, #0x3
 805fe3a: 1b13         	subs	r3, r2, r4
 805fe3c: 2b0f         	cmp	r3, #0xf
 805fe3e: ddf2         	ble	0x805fe26 <_malloc_r+0x2a6> @ imm = #-0x1c
 805fe40: 1939         	adds	r1, r7, r4
 805fe42: f044 0401    	orr	r4, r4, #0x1
 805fe46: 4628         	mov	r0, r5
 805fe48: 607c         	str	r4, [r7, #0x4]
 805fe4a: f043 0401    	orr	r4, r3, #0x1
 805fe4e: e9d7 c502    	ldrd	r12, r5, [r7, #8]
 805fe52: f8cc 500c    	str.w	r5, [r12, #0xc]
 805fe56: f8c5 c008    	str.w	r12, [r5, #0x8]
 805fe5a: e9c6 1104    	strd	r1, r1, [r6, #16]
 805fe5e: 604c         	str	r4, [r1, #0x4]
 805fe60: f107 0408    	add.w	r4, r7, #0x8
 805fe64: e9c1 ee02    	strd	lr, lr, [r1, #8]
 805fe68: 50bb         	str	r3, [r7, r2]
 805fe6a: f7ff fffe    	bl	0x805fe6a <_malloc_r+0x2ea> @ imm = #-0x4
 805fe6e: e6b0         	b	0x805fbd2 <_malloc_r+0x52> @ imm = #-0x2a0
 805fe70: f44f 7300    	mov.w	r3, #0x200
 805fe74: 2040         	movs	r0, #0x40
 805fe76: 273f         	movs	r7, #0x3f
 805fe78: e6c9         	b	0x805fc0e <_malloc_r+0x8e> @ imm = #-0x26e
 805fe7a: 4419         	add	r1, r3
 805fe7c: f103 0408    	add.w	r4, r3, #0x8
 805fe80: 4628         	mov	r0, r5
 805fe82: 684b         	ldr	r3, [r1, #0x4]
 805fe84: f043 0301    	orr	r3, r3, #0x1
 805fe88: 604b         	str	r3, [r1, #0x4]
 805fe8a: f7ff fffe    	bl	0x805fe8a <_malloc_r+0x30a> @ imm = #-0x4
 805fe8e: e6a0         	b	0x805fbd2 <_malloc_r+0x52> @ imm = #-0x2c0
 805fe90: 193a         	adds	r2, r7, r4
 805fe92: f044 0401    	orr	r4, r4, #0x1
 805fe96: f043 0301    	orr	r3, r3, #0x1
 805fe9a: 4628         	mov	r0, r5
 805fe9c: 607c         	str	r4, [r7, #0x4]
 805fe9e: f107 0408    	add.w	r4, r7, #0x8
 805fea2: 60b2         	str	r2, [r6, #0x8]
 805fea4: 6053         	str	r3, [r2, #0x4]
 805fea6: f7ff fffe    	bl	0x805fea6 <_malloc_r+0x326> @ imm = #-0x4
 805feaa: 4620         	mov	r0, r4
 805feac: b003         	add	sp, #0xc
 805feae: e8bd 8ff0    	pop.w	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
 805feb2: bf00         	nop

0805feb4 <$d>:
 805feb4: f4 29 00 00  	.word	0x000029f4
 805feb8: fc 29 00 00  	.word	0x000029fc
 805febc: 10 32 00 00  	.word	0x00003210
 805fec0: 00 f0 ff ff  	.word	0xfffff000

0805fec4 <$t>:
 805fec4: 441a         	add	r2, r3
 805fec6: f103 0408    	add.w	r4, r3, #0x8
 805feca: 4628         	mov	r0, r5
 805fecc: e9d3 6102    	ldrd	r6, r1, [r3, #8]
 805fed0: 6853         	ldr	r3, [r2, #0x4]
 805fed2: 60f1         	str	r1, [r6, #0xc]
 805fed4: f043 0301    	orr	r3, r3, #0x1
 805fed8: 608e         	str	r6, [r1, #0x8]
 805feda: 6053         	str	r3, [r2, #0x4]
 805fedc: f7ff fffe    	bl	0x805fedc <_malloc_r+0x35c> @ imm = #-0x4
 805fee0: 4620         	mov	r0, r4
 805fee2: b003         	add	sp, #0xc
 805fee4: e8bd 8ff0    	pop.w	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
 805fee8: f5b1 6f20    	cmp.w	r1, #0xa00
 805feec: ea4f 2251    	lsr.w	r2, r1, #0x9
 805fef0: d359         	blo	0x805ffa6 <_malloc_r+0x426> @ imm = #0xb2
 805fef2: 2a14         	cmp	r2, #0x14
 805fef4: f200 80a9    	bhi.w	0x806004a <_malloc_r+0x4ca> @ imm = #0x152
 805fef8: f102 075c    	add.w	r7, r2, #0x5c
 805fefc: 325b         	adds	r2, #0x5b
 805fefe: 00ff         	lsls	r7, r7, #0x3
 805ff00: eb06 0c07    	add.w	r12, r6, r7
 805ff04: 59f7         	ldr	r7, [r6, r7]
 805ff06: f1ac 0c08    	sub.w	r12, r12, #0x8
 805ff0a: 45bc         	cmp	r12, r7
 805ff0c: f000 8086    	beq.w	0x806001c <_malloc_r+0x49c> @ imm = #0x10c
 805ff10: 687a         	ldr	r2, [r7, #0x4]
 805ff12: f022 0203    	bic	r2, r2, #0x3
 805ff16: 428a         	cmp	r2, r1
 805ff18: d902         	bls	0x805ff20 <_malloc_r+0x3a0> @ imm = #0x4
 805ff1a: 68bf         	ldr	r7, [r7, #0x8]
 805ff1c: 45bc         	cmp	r12, r7
 805ff1e: d1f7         	bne	0x805ff10 <_malloc_r+0x390> @ imm = #-0x12
 805ff20: f8d7 c00c    	ldr.w	r12, [r7, #0xc]
 805ff24: 6872         	ldr	r2, [r6, #0x4]
 805ff26: e9c3 7c02    	strd	r7, r12, [r3, #8]
 805ff2a: f8cc 3008    	str.w	r3, [r12, #0x8]
 805ff2e: 60fb         	str	r3, [r7, #0xc]
 805ff30: e762         	b	0x805fdf8 <_malloc_r+0x278> @ imm = #-0x13c
 805ff32: 2b14         	cmp	r3, #0x14
 805ff34: d93d         	bls	0x805ffb2 <_malloc_r+0x432> @ imm = #0x7a
 805ff36: 2b54         	cmp	r3, #0x54
 805ff38: f200 808f    	bhi.w	0x806005a <_malloc_r+0x4da> @ imm = #0x11e
 805ff3c: 0b23         	lsrs	r3, r4, #0xc
 805ff3e: f103 006f    	add.w	r0, r3, #0x6f
 805ff42: f103 076e    	add.w	r7, r3, #0x6e
 805ff46: 00c3         	lsls	r3, r0, #0x3
 805ff48: e661         	b	0x805fc0e <_malloc_r+0x8e> @ imm = #-0x33e
 805ff4a: f108 0801    	add.w	r8, r8, #0x1
 805ff4e: f10c 0c08    	add.w	r12, r12, #0x8
 805ff52: f018 0f03    	tst.w	r8, #0x3
 805ff56: f47f af61    	bne.w	0x805fe1c <_malloc_r+0x29c> @ imm = #-0x13e
 805ff5a: e035         	b	0x805ffc8 <_malloc_r+0x448> @ imm = #0x6a
 805ff5c: 443a         	add	r2, r7
 805ff5e: 463c         	mov	r4, r7
 805ff60: 68f9         	ldr	r1, [r7, #0xc]
 805ff62: 4628         	mov	r0, r5
 805ff64: 6853         	ldr	r3, [r2, #0x4]
 805ff66: f043 0301    	orr	r3, r3, #0x1
 805ff6a: 6053         	str	r3, [r2, #0x4]
 805ff6c: f854 3f08    	ldr	r3, [r4, #8]!
 805ff70: 60d9         	str	r1, [r3, #0xc]
 805ff72: 608b         	str	r3, [r1, #0x8]
 805ff74: f7ff fffe    	bl	0x805ff74 <_malloc_r+0x3f4> @ imm = #-0x4
 805ff78: e62b         	b	0x805fbd2 <_malloc_r+0x52> @ imm = #-0x3aa
 805ff7a: 08e0         	lsrs	r0, r4, #0x3
 805ff7c: f104 0208    	add.w	r2, r4, #0x8
 805ff80: e60e         	b	0x805fba0 <_malloc_r+0x20> @ imm = #-0x3e4
 805ff82: 4628         	mov	r0, r5
 805ff84: 191d         	adds	r5, r3, r4
 805ff86: f044 0401    	orr	r4, r4, #0x1
 805ff8a: 605c         	str	r4, [r3, #0x4]
 805ff8c: f042 0401    	orr	r4, r2, #0x1
 805ff90: e9c6 5504    	strd	r5, r5, [r6, #16]
 805ff94: 606c         	str	r4, [r5, #0x4]
 805ff96: f103 0408    	add.w	r4, r3, #0x8
 805ff9a: e9c5 ee02    	strd	lr, lr, [r5, #8]
 805ff9e: 505a         	str	r2, [r3, r1]
 805ffa0: f7ff fffe    	bl	0x805ffa0 <_malloc_r+0x420> @ imm = #-0x4
 805ffa4: e615         	b	0x805fbd2 <_malloc_r+0x52> @ imm = #-0x3d6
 805ffa6: 098a         	lsrs	r2, r1, #0x6
 805ffa8: f102 0739    	add.w	r7, r2, #0x39
 805ffac: 3238         	adds	r2, #0x38
 805ffae: 00ff         	lsls	r7, r7, #0x3
 805ffb0: e7a6         	b	0x805ff00 <_malloc_r+0x380> @ imm = #-0xb4
 805ffb2: f103 005c    	add.w	r0, r3, #0x5c
 805ffb6: f103 075b    	add.w	r7, r3, #0x5b
 805ffba: 00c3         	lsls	r3, r0, #0x3
 805ffbc: e627         	b	0x805fc0e <_malloc_r+0x8e> @ imm = #-0x3b2
 805ffbe: f859 3908    	ldr	r3, [r9], #-8
 805ffc2: 454b         	cmp	r3, r9
 805ffc4: f040 8090    	bne.w	0x80600e8 <_malloc_r+0x568> @ imm = #0x120
 805ffc8: f010 0f03    	tst.w	r0, #0x3
 805ffcc: f100 30ff    	add.w	r0, r0, #0xffffffff
 805ffd0: d1f5         	bne	0x805ffbe <_malloc_r+0x43e> @ imm = #-0x16
 805ffd2: 6873         	ldr	r3, [r6, #0x4]
 805ffd4: ea23 0301    	bic.w	r3, r3, r1
 805ffd8: 6073         	str	r3, [r6, #0x4]
 805ffda: 0049         	lsls	r1, r1, #0x1
 805ffdc: f43f ae3a    	beq.w	0x805fc54 <_malloc_r+0xd4> @ imm = #-0x38c
 805ffe0: 4299         	cmp	r1, r3
 805ffe2: d903         	bls	0x805ffec <_malloc_r+0x46c> @ imm = #0x6
 805ffe4: e636         	b	0x805fc54 <_malloc_r+0xd4> @ imm = #-0x394
 805ffe6: 0049         	lsls	r1, r1, #0x1
 805ffe8: f108 0804    	add.w	r8, r8, #0x4
 805ffec: 4219         	tst	r1, r3
 805ffee: d0fa         	beq	0x805ffe6 <_malloc_r+0x466> @ imm = #-0xc
 805fff0: 4640         	mov	r0, r8
 805fff2: e70f         	b	0x805fe14 <_malloc_r+0x294> @ imm = #-0x1e2
 805fff4: 68b7         	ldr	r7, [r6, #0x8]
 805fff6: 687b         	ldr	r3, [r7, #0x4]
 805fff8: e6bb         	b	0x805fd72 <_malloc_r+0x1f2> @ imm = #-0x28a
 805fffa: f3c3 020b    	ubfx	r2, r3, #0x0, #0xc
 805fffe: 2a00         	cmp	r2, #0x0
 8060000: f47f ae5e    	bne.w	0x805fcc0 <_malloc_r+0x140> @ imm = #-0x344
 8060004: 44c8         	add	r8, r9
 8060006: 68b7         	ldr	r7, [r6, #0x8]
 8060008: f048 0301    	orr	r3, r8, #0x1
 806000c: 607b         	str	r3, [r7, #0x4]
 806000e: e6a4         	b	0x805fd5a <_malloc_r+0x1da> @ imm = #-0x2b8
 8060010: f8c6 b408    	str.w	r11, [r6, #0x408]
 8060014: e65e         	b	0x805fcd4 <_malloc_r+0x154> @ imm = #-0x344
 8060016: f102 0810    	add.w	r8, r2, #0x10
 806001a: e639         	b	0x805fc90 <_malloc_r+0x110> @ imm = #-0x38e
 806001c: 1092         	asrs	r2, r2, #0x2
 806001e: 2101         	movs	r1, #0x1
 8060020: 4091         	lsls	r1, r2
 8060022: 6872         	ldr	r2, [r6, #0x4]
 8060024: 430a         	orrs	r2, r1
 8060026: 6072         	str	r2, [r6, #0x4]
 8060028: e77d         	b	0x805ff26 <_malloc_r+0x3a6> @ imm = #-0x106
 806002a: eb0b 0108    	add.w	r1, r11, r8
 806002e: 4628         	mov	r0, r5
 8060030: 9300         	str	r3, [sp]
 8060032: 4249         	rsbs	r1, r1, #0
 8060034: f3c1 010b    	ubfx	r1, r1, #0x0, #0xc
 8060038: 9101         	str	r1, [sp, #0x4]
 806003a: f7ff fffe    	bl	0x806003a <_malloc_r+0x4ba> @ imm = #-0x4
 806003e: 1c43         	adds	r3, r0, #0x1
 8060040: 9b00         	ldr	r3, [sp]
 8060042: f47f ae5f    	bne.w	0x805fd04 <_malloc_r+0x184> @ imm = #-0x342
 8060046: 4619         	mov	r1, r3
 8060048: e661         	b	0x805fd0e <_malloc_r+0x18e> @ imm = #-0x33e
 806004a: 2a54         	cmp	r2, #0x54
 806004c: d815         	bhi	0x806007a <_malloc_r+0x4fa> @ imm = #0x2a
 806004e: 0b0a         	lsrs	r2, r1, #0xc
 8060050: f102 076f    	add.w	r7, r2, #0x6f
 8060054: 326e         	adds	r2, #0x6e
 8060056: 00ff         	lsls	r7, r7, #0x3
 8060058: e752         	b	0x805ff00 <_malloc_r+0x380> @ imm = #-0x15c
 806005a: f5b3 7faa    	cmp.w	r3, #0x154
 806005e: d815         	bhi	0x806008c <_malloc_r+0x50c> @ imm = #0x2a
 8060060: 0be3         	lsrs	r3, r4, #0xf
 8060062: f103 0078    	add.w	r0, r3, #0x78
 8060066: f103 0777    	add.w	r7, r3, #0x77
 806006a: 00c3         	lsls	r3, r0, #0x3
 806006c: e5cf         	b	0x805fc0e <_malloc_r+0x8e> @ imm = #-0x462
 806006e: 465f         	mov	r7, r11
 8060070: e673         	b	0x805fd5a <_malloc_r+0x1da> @ imm = #-0x31a
 8060072: 2301         	movs	r3, #0x1
 8060074: f8cb 3004    	str.w	r3, [r11, #0x4]
 8060078: e684         	b	0x805fd84 <_malloc_r+0x204> @ imm = #-0x2f8
 806007a: f5b2 7faa    	cmp.w	r2, #0x154
 806007e: d820         	bhi	0x80600c2 <_malloc_r+0x542> @ imm = #0x40
 8060080: 0bca         	lsrs	r2, r1, #0xf
 8060082: f102 0778    	add.w	r7, r2, #0x78
 8060086: 3277         	adds	r2, #0x77
 8060088: 00ff         	lsls	r7, r7, #0x3
 806008a: e739         	b	0x805ff00 <_malloc_r+0x380> @ imm = #-0x18e
 806008c: f240 5254    	movw	r2, #0x554
 8060090: 4293         	cmp	r3, r2
 8060092: d820         	bhi	0x80600d6 <_malloc_r+0x556> @ imm = #0x40
 8060094: 0ca3         	lsrs	r3, r4, #0x12
 8060096: f103 007d    	add.w	r0, r3, #0x7d
 806009a: f103 077c    	add.w	r7, r3, #0x7c
 806009e: 00c3         	lsls	r3, r0, #0x3
 80600a0: e5b5         	b	0x805fc0e <_malloc_r+0x8e> @ imm = #-0x496
 80600a2: f107 0108    	add.w	r1, r7, #0x8
 80600a6: 4628         	mov	r0, r5
 80600a8: f7ff fffe    	bl	0x80600a8 <_malloc_r+0x528> @ imm = #-0x4
 80600ac: 68b7         	ldr	r7, [r6, #0x8]
 80600ae: f8da 1004    	ldr.w	r1, [r10, #0x4]
 80600b2: 687b         	ldr	r3, [r7, #0x4]
 80600b4: e651         	b	0x805fd5a <_malloc_r+0x1da> @ imm = #-0x35e
 80600b6: 3b08         	subs	r3, #0x8
 80600b8: 2100         	movs	r1, #0x0
 80600ba: 4498         	add	r8, r3
 80600bc: eba8 080b    	sub.w	r8, r8, r11
 80600c0: e625         	b	0x805fd0e <_malloc_r+0x18e> @ imm = #-0x3b6
 80600c2: f240 5754    	movw	r7, #0x554
 80600c6: 42ba         	cmp	r2, r7
 80600c8: d80a         	bhi	0x80600e0 <_malloc_r+0x560> @ imm = #0x14
 80600ca: 0c8a         	lsrs	r2, r1, #0x12
 80600cc: f102 077d    	add.w	r7, r2, #0x7d
 80600d0: 327c         	adds	r2, #0x7c
 80600d2: 00ff         	lsls	r7, r7, #0x3
 80600d4: e714         	b	0x805ff00 <_malloc_r+0x380> @ imm = #-0x1d8
 80600d6: f44f 737e    	mov.w	r3, #0x3f8
 80600da: 207f         	movs	r0, #0x7f
 80600dc: 277e         	movs	r7, #0x7e
 80600de: e596         	b	0x805fc0e <_malloc_r+0x8e> @ imm = #-0x4d4
 80600e0: f44f 777e    	mov.w	r7, #0x3f8
 80600e4: 227e         	movs	r2, #0x7e
 80600e6: e70b         	b	0x805ff00 <_malloc_r+0x380> @ imm = #-0x1ea
 80600e8: 6873         	ldr	r3, [r6, #0x4]
 80600ea: e776         	b	0x805ffda <_malloc_r+0x45a> @ imm = #-0x114

080600ec <_mbtowc_r>:
 80600ec: b410         	push	{r4}
 80600ee: 4c03         	ldr	r4, [pc, #0xc]          @ 0x80600fc <_mbtowc_r+0x10>
 80600f0: f8d4 40e4    	ldr.w	r4, [r4, #0xe4]
 80600f4: 46a4         	mov	r12, r4
 80600f6: bc10         	pop	{r4}
 80600f8: 4760         	bx	r12
 80600fa: bf00         	nop

080600fc <$d>:
 80600fc: 00 00 00 00  	.word	0x00000000

08060100 <__ascii_mbtowc>:
 8060100: b082         	sub	sp, #0x8
 8060102: b149         	cbz	r1, 0x8060118 <__ascii_mbtowc+0x18> @ imm = #0x12
 8060104: b15a         	cbz	r2, 0x806011e <__ascii_mbtowc+0x1e> @ imm = #0x16
 8060106: b16b         	cbz	r3, 0x8060124 <__ascii_mbtowc+0x24> @ imm = #0x1a
 8060108: 7813         	ldrb	r3, [r2]
 806010a: 600b         	str	r3, [r1]
 806010c: 7812         	ldrb	r2, [r2]
 806010e: 1e10         	subs	r0, r2, #0x0
 8060110: bf18         	it	ne
 8060112: 2001         	movne	r0, #0x1
 8060114: b002         	add	sp, #0x8
 8060116: 4770         	bx	lr
 8060118: a901         	add	r1, sp, #0x4
 806011a: 2a00         	cmp	r2, #0x0
 806011c: d1f3         	bne	0x8060106 <__ascii_mbtowc+0x6> @ imm = #-0x1a
 806011e: 4610         	mov	r0, r2
 8060120: b002         	add	sp, #0x8
 8060122: 4770         	bx	lr
 8060124: f06f 0001    	mvn	r0, #0x1
 8060128: e7f4         	b	0x8060114 <__ascii_mbtowc+0x14> @ imm = #-0x18
 806012a: bf00         	nop

0806012c <memchr>:
 806012c: b510         	push	{r4, lr}
 806012e: fa5f fe81    	uxtb.w	lr, r1
 8060132: 0781         	lsls	r1, r0, #0x1e
 8060134: d010         	beq	0x8060158 <memchr+0x2c> @ imm = #0x20
 8060136: 4603         	mov	r3, r0
 8060138: 1e51         	subs	r1, r2, #0x1
 806013a: b922         	cbnz	r2, 0x8060146 <memchr+0x1a> @ imm = #0x8
 806013c: e00a         	b	0x8060154 <memchr+0x28> @ imm = #0x14
 806013e: 079a         	lsls	r2, r3, #0x1e
 8060140: d00c         	beq	0x806015c <memchr+0x30> @ imm = #0x18
 8060142: 3901         	subs	r1, #0x1
 8060144: d306         	blo	0x8060154 <memchr+0x28> @ imm = #0xc
 8060146: 4618         	mov	r0, r3
 8060148: f813 2b01    	ldrb	r2, [r3], #1
 806014c: 4572         	cmp	r2, lr
 806014e: 469c         	mov	r12, r3
 8060150: d1f5         	bne	0x806013e <memchr+0x12> @ imm = #-0x16
 8060152: bd10         	pop	{r4, pc}
 8060154: 2000         	movs	r0, #0x0
 8060156: bd10         	pop	{r4, pc}
 8060158: 4684         	mov	r12, r0
 806015a: 4611         	mov	r1, r2
 806015c: 2903         	cmp	r1, #0x3
 806015e: d80c         	bhi	0x806017a <memchr+0x4e> @ imm = #0x18
 8060160: 2900         	cmp	r1, #0x0
 8060162: d0f7         	beq	0x8060154 <memchr+0x28> @ imm = #-0x12
 8060164: eb0c 0301    	add.w	r3, r12, r1
 8060168: e001         	b	0x806016e <memchr+0x42> @ imm = #0x2
 806016a: 459c         	cmp	r12, r3
 806016c: d0f2         	beq	0x8060154 <memchr+0x28> @ imm = #-0x1c
 806016e: 4660         	mov	r0, r12
 8060170: f81c 2b01    	ldrb	r2, [r12], #1
 8060174: 4572         	cmp	r2, lr
 8060176: d1f8         	bne	0x806016a <memchr+0x3e> @ imm = #-0x10
 8060178: bd10         	pop	{r4, pc}
 806017a: ea4e 240e    	orr.w	r4, lr, lr, lsl #8
 806017e: 4662         	mov	r2, r12
 8060180: ea44 4404    	orr.w	r4, r4, r4, lsl #16
 8060184: 4694         	mov	r12, r2
 8060186: 3204         	adds	r2, #0x4
 8060188: f8dc 3000    	ldr.w	r3, [r12]
 806018c: 4063         	eors	r3, r4
 806018e: f1a3 3001    	sub.w	r0, r3, #0x1010101
 8060192: ea20 0303    	bic.w	r3, r0, r3
 8060196: f013 3f80    	tst.w	r3, #0x80808080
 806019a: d1e3         	bne	0x8060164 <memchr+0x38> @ imm = #-0x3a
 806019c: 3904         	subs	r1, #0x4
 806019e: 4694         	mov	r12, r2
 80601a0: 2903         	cmp	r1, #0x3
 80601a2: d8ef         	bhi	0x8060184 <memchr+0x58> @ imm = #-0x22
 80601a4: e7dc         	b	0x8060160 <memchr+0x34> @ imm = #-0x48
 80601a6: bf00         	nop

080601a8 <memmove>:
 80601a8: 4288         	cmp	r0, r1
 80601aa: d90d         	bls	0x80601c8 <memmove+0x20> @ imm = #0x1a
 80601ac: 188b         	adds	r3, r1, r2
 80601ae: 4283         	cmp	r3, r0
 80601b0: d90a         	bls	0x80601c8 <memmove+0x20> @ imm = #0x14
 80601b2: eb00 0c02    	add.w	r12, r0, r2
 80601b6: b1ba         	cbz	r2, 0x80601e8 <memmove+0x40> @ imm = #0x2e
 80601b8: 4662         	mov	r2, r12
 80601ba: f813 cd01    	ldrb	r12, [r3, #-1]!
 80601be: 4299         	cmp	r1, r3
 80601c0: f802 cd01    	strb	r12, [r2, #-1]!
 80601c4: d1f9         	bne	0x80601ba <memmove+0x12> @ imm = #-0xe
 80601c6: 4770         	bx	lr
 80601c8: 2a0f         	cmp	r2, #0xf
 80601ca: d80e         	bhi	0x80601ea <memmove+0x42> @ imm = #0x1c
 80601cc: 4603         	mov	r3, r0
 80601ce: f102 3cff    	add.w	r12, r2, #0xffffffff
 80601d2: b14a         	cbz	r2, 0x80601e8 <memmove+0x40> @ imm = #0x12
 80601d4: f10c 0c01    	add.w	r12, r12, #0x1
 80601d8: 3b01         	subs	r3, #0x1
 80601da: 448c         	add	r12, r1
 80601dc: f811 2b01    	ldrb	r2, [r1], #1
 80601e0: 4561         	cmp	r1, r12
 80601e2: f803 2f01    	strb	r2, [r3, #1]!
 80601e6: d1f9         	bne	0x80601dc <memmove+0x34> @ imm = #-0xe
 80601e8: 4770         	bx	lr
 80601ea: ea40 0301    	orr.w	r3, r0, r1
 80601ee: 079b         	lsls	r3, r3, #0x1e
 80601f0: d150         	bne	0x8060294 <memmove+0xec> @ imm = #0xa0
 80601f2: f1a2 0310    	sub.w	r3, r2, #0x10
 80601f6: f101 0c20    	add.w	r12, r1, #0x20
 80601fa: b570         	push	{r4, r5, r6, lr}
 80601fc: f023 050f    	bic	r5, r3, #0xf
 8060200: f101 0e10    	add.w	lr, r1, #0x10
 8060204: f100 0410    	add.w	r4, r0, #0x10
 8060208: 091b         	lsrs	r3, r3, #0x4
 806020a: 44ac         	add	r12, r5
 806020c: f85e 5c10    	ldr	r5, [lr, #-16]
 8060210: f10e 0e10    	add.w	lr, lr, #0x10
 8060214: 3410         	adds	r4, #0x10
 8060216: f844 5c20    	str	r5, [r4, #-32]
 806021a: f85e 5c1c    	ldr	r5, [lr, #-28]
 806021e: f844 5c1c    	str	r5, [r4, #-28]
 8060222: f85e 5c18    	ldr	r5, [lr, #-24]
 8060226: f844 5c18    	str	r5, [r4, #-24]
 806022a: f85e 5c14    	ldr	r5, [lr, #-20]
 806022e: 45e6         	cmp	lr, r12
 8060230: f844 5c14    	str	r5, [r4, #-20]
 8060234: d1ea         	bne	0x806020c <memmove+0x64> @ imm = #-0x2c
 8060236: 3301         	adds	r3, #0x1
 8060238: f012 0f0c    	tst.w	r2, #0xc
 806023c: f002 0c0f    	and	r12, r2, #0xf
 8060240: eb01 1103    	add.w	r1, r1, r3, lsl #4
 8060244: eb00 1303    	add.w	r3, r0, r3, lsl #4
 8060248: d028         	beq	0x806029c <memmove+0xf4> @ imm = #0x50
 806024a: f1ac 0c04    	sub.w	r12, r12, #0x4
 806024e: 1f1c         	subs	r4, r3, #0x4
 8060250: 468e         	mov	lr, r1
 8060252: f02c 0603    	bic	r6, r12, #0x3
 8060256: ea4f 0c9c    	lsr.w	r12, r12, #0x2
 806025a: 441e         	add	r6, r3
 806025c: f85e 5b04    	ldr	r5, [lr], #4
 8060260: f844 5f04    	str	r5, [r4, #4]!
 8060264: 42b4         	cmp	r4, r6
 8060266: d1f9         	bne	0x806025c <memmove+0xb4> @ imm = #-0xe
 8060268: f10c 0c01    	add.w	r12, r12, #0x1
 806026c: f002 0203    	and	r2, r2, #0x3
 8060270: eb03 038c    	add.w	r3, r3, r12, lsl #2
 8060274: eb01 018c    	add.w	r1, r1, r12, lsl #2
 8060278: f102 3cff    	add.w	r12, r2, #0xffffffff
 806027c: b14a         	cbz	r2, 0x8060292 <memmove+0xea> @ imm = #0x12
 806027e: f10c 0c01    	add.w	r12, r12, #0x1
 8060282: 3b01         	subs	r3, #0x1
 8060284: 448c         	add	r12, r1
 8060286: f811 2b01    	ldrb	r2, [r1], #1
 806028a: 4561         	cmp	r1, r12
 806028c: f803 2f01    	strb	r2, [r3, #1]!
 8060290: d1f9         	bne	0x8060286 <memmove+0xde> @ imm = #-0xe
 8060292: bd70         	pop	{r4, r5, r6, pc}
 8060294: f102 3cff    	add.w	r12, r2, #0xffffffff
 8060298: 4603         	mov	r3, r0
 806029a: e79b         	b	0x80601d4 <memmove+0x2c> @ imm = #-0xca
 806029c: 4662         	mov	r2, r12
 806029e: e7eb         	b	0x8060278 <memmove+0xd0> @ imm = #-0x2a

080602a0 <__malloc_lock>:
 80602a0: 4770         	bx	lr
 80602a2: bf00         	nop

080602a4 <__malloc_unlock>:
 80602a4: 4770         	bx	lr
 80602a6: bf00         	nop

080602a8 <_realloc_r>:
 80602a8: e92d 4ff8    	push.w	{r3, r4, r5, r6, r7, r8, r9, r10, r11, lr}
 80602ac: 4617         	mov	r7, r2
 80602ae: 2900         	cmp	r1, #0x0
 80602b0: f000 8096    	beq.w	0x80603e0 <_realloc_r+0x138> @ imm = #0x12c
 80602b4: 460c         	mov	r4, r1
 80602b6: f107 060b    	add.w	r6, r7, #0xb
 80602ba: 4680         	mov	r8, r0
 80602bc: f7ff fffe    	bl	0x80602bc <_realloc_r+0x14> @ imm = #-0x4
 80602c0: f854 1c04    	ldr	r1, [r4, #-4]
 80602c4: 2e16         	cmp	r6, #0x16
 80602c6: f1a4 0908    	sub.w	r9, r4, #0x8
 80602ca: f021 0503    	bic	r5, r1, #0x3
 80602ce: d85c         	bhi	0x806038a <_realloc_r+0xe2> @ imm = #0xb8
 80602d0: 2210         	movs	r2, #0x10
 80602d2: 2300         	movs	r3, #0x0
 80602d4: 4616         	mov	r6, r2
 80602d6: 42be         	cmp	r6, r7
 80602d8: f0c0 809d    	blo.w	0x8060416 <_realloc_r+0x16e> @ imm = #0x13a
 80602dc: 2b00         	cmp	r3, #0x0
 80602de: f040 809a    	bne.w	0x8060416 <_realloc_r+0x16e> @ imm = #0x134
 80602e2: 4295         	cmp	r5, r2
 80602e4: da5b         	bge	0x806039e <_realloc_r+0xf6> @ imm = #0xb6
 80602e6: 4bbd         	ldr	r3, [pc, #0x2f4]        @ 0x80605dc <_realloc_r+0x334>
 80602e8: eb09 0005    	add.w	r0, r9, r5
 80602ec: f8d3 c008    	ldr.w	r12, [r3, #0x8]
 80602f0: 4584         	cmp	r12, r0
 80602f2: f000 8097    	beq.w	0x8060424 <_realloc_r+0x17c> @ imm = #0x12e
 80602f6: f8d0 c004    	ldr.w	r12, [r0, #0x4]
 80602fa: f02c 0301    	bic	r3, r12, #0x1
 80602fe: 4403         	add	r3, r0
 8060300: 685b         	ldr	r3, [r3, #0x4]
 8060302: 07db         	lsls	r3, r3, #0x1f
 8060304: d461         	bmi	0x80603ca <_realloc_r+0x122> @ imm = #0xc2
 8060306: f02c 0c03    	bic	r12, r12, #0x3
 806030a: eb05 030c    	add.w	r3, r5, r12
 806030e: 4293         	cmp	r3, r2
 8060310: da40         	bge	0x8060394 <_realloc_r+0xec> @ imm = #0x80
 8060312: 07cb         	lsls	r3, r1, #0x1f
 8060314: d410         	bmi	0x8060338 <_realloc_r+0x90> @ imm = #0x20
 8060316: f854 3c08    	ldr	r3, [r4, #-8]
 806031a: eba9 0a03    	sub.w	r10, r9, r3
 806031e: f8da 3004    	ldr.w	r3, [r10, #0x4]
 8060322: f023 0103    	bic	r1, r3, #0x3
 8060326: 448c         	add	r12, r1
 8060328: 44ac         	add	r12, r5
 806032a: 4594         	cmp	r12, r2
 806032c: f280 80fe    	bge.w	0x806052c <_realloc_r+0x284> @ imm = #0x1fc
 8060330: 186b         	adds	r3, r5, r1
 8060332: 4293         	cmp	r3, r2
 8060334: f280 80d5    	bge.w	0x80604e2 <_realloc_r+0x23a> @ imm = #0x1aa
 8060338: 4639         	mov	r1, r7
 806033a: 4640         	mov	r0, r8
 806033c: f7ff fffe    	bl	0x806033c <_realloc_r+0x94> @ imm = #-0x4
 8060340: 4607         	mov	r7, r0
 8060342: b1e0         	cbz	r0, 0x806037e <_realloc_r+0xd6> @ imm = #0x38
 8060344: f854 3c04    	ldr	r3, [r4, #-4]
 8060348: f1a0 0208    	sub.w	r2, r0, #0x8
 806034c: f023 0301    	bic	r3, r3, #0x1
 8060350: 444b         	add	r3, r9
 8060352: 4293         	cmp	r3, r2
 8060354: f000 80b4    	beq.w	0x80604c0 <_realloc_r+0x218> @ imm = #0x168
 8060358: 1f2a         	subs	r2, r5, #0x4
 806035a: 2a24         	cmp	r2, #0x24
 806035c: f200 80e2    	bhi.w	0x8060524 <_realloc_r+0x27c> @ imm = #0x1c4
 8060360: 2a13         	cmp	r2, #0x13
 8060362: f200 80b3    	bhi.w	0x80604cc <_realloc_r+0x224> @ imm = #0x166
 8060366: 4603         	mov	r3, r0
 8060368: 4622         	mov	r2, r4
 806036a: 6811         	ldr	r1, [r2]
 806036c: 6019         	str	r1, [r3]
 806036e: 6851         	ldr	r1, [r2, #0x4]
 8060370: 6059         	str	r1, [r3, #0x4]
 8060372: 6892         	ldr	r2, [r2, #0x8]
 8060374: 609a         	str	r2, [r3, #0x8]
 8060376: 4621         	mov	r1, r4
 8060378: 4640         	mov	r0, r8
 806037a: f7ff fffe    	bl	0x806037a <_realloc_r+0xd2> @ imm = #-0x4
 806037e: 4640         	mov	r0, r8
 8060380: f7ff fffe    	bl	0x8060380 <_realloc_r+0xd8> @ imm = #-0x4
 8060384: 4638         	mov	r0, r7
 8060386: e8bd 8ff8    	pop.w	{r3, r4, r5, r6, r7, r8, r9, r10, r11, pc}
 806038a: f026 0607    	bic	r6, r6, #0x7
 806038e: 4632         	mov	r2, r6
 8060390: 0ff3         	lsrs	r3, r6, #0x1f
 8060392: e7a0         	b	0x80602d6 <_realloc_r+0x2e> @ imm = #-0xc0
 8060394: 461d         	mov	r5, r3
 8060396: e9d0 2302    	ldrd	r2, r3, [r0, #8]
 806039a: 60d3         	str	r3, [r2, #0xc]
 806039c: 609a         	str	r2, [r3, #0x8]
 806039e: 1bab         	subs	r3, r5, r6
 80603a0: 2b0f         	cmp	r3, #0xf
 80603a2: d822         	bhi	0x80603ea <_realloc_r+0x142> @ imm = #0x44
 80603a4: f8d9 3004    	ldr.w	r3, [r9, #0x4]
 80603a8: f003 0301    	and	r3, r3, #0x1
 80603ac: 432b         	orrs	r3, r5
 80603ae: 444d         	add	r5, r9
 80603b0: f8c9 3004    	str.w	r3, [r9, #0x4]
 80603b4: 686b         	ldr	r3, [r5, #0x4]
 80603b6: f043 0301    	orr	r3, r3, #0x1
 80603ba: 606b         	str	r3, [r5, #0x4]
 80603bc: 4640         	mov	r0, r8
 80603be: 4627         	mov	r7, r4
 80603c0: f7ff fffe    	bl	0x80603c0 <_realloc_r+0x118> @ imm = #-0x4
 80603c4: 4638         	mov	r0, r7
 80603c6: e8bd 8ff8    	pop.w	{r3, r4, r5, r6, r7, r8, r9, r10, r11, pc}
 80603ca: 07c9         	lsls	r1, r1, #0x1f
 80603cc: d4b4         	bmi	0x8060338 <_realloc_r+0x90> @ imm = #-0x98
 80603ce: f854 3c08    	ldr	r3, [r4, #-8]
 80603d2: eba9 0a03    	sub.w	r10, r9, r3
 80603d6: f8da 1004    	ldr.w	r1, [r10, #0x4]
 80603da: f021 0103    	bic	r1, r1, #0x3
 80603de: e7a7         	b	0x8060330 <_realloc_r+0x88> @ imm = #-0xb2
 80603e0: 4611         	mov	r1, r2
 80603e2: e8bd 4ff8    	pop.w	{r3, r4, r5, r6, r7, r8, r9, r10, r11, lr}
 80603e6: f7ff bffe    	b.w	0x80603e6 <_realloc_r+0x13e> @ imm = #-0x4
 80603ea: f8d9 1004    	ldr.w	r1, [r9, #0x4]
 80603ee: 444d         	add	r5, r9
 80603f0: f043 0301    	orr	r3, r3, #0x1
 80603f4: 4640         	mov	r0, r8
 80603f6: f001 0101    	and	r1, r1, #0x1
 80603fa: 4331         	orrs	r1, r6
 80603fc: f8c9 1004    	str.w	r1, [r9, #0x4]
 8060400: eb09 0106    	add.w	r1, r9, r6
 8060404: 604b         	str	r3, [r1, #0x4]
 8060406: 3108         	adds	r1, #0x8
 8060408: 686b         	ldr	r3, [r5, #0x4]
 806040a: f043 0301    	orr	r3, r3, #0x1
 806040e: 606b         	str	r3, [r5, #0x4]
 8060410: f7ff fffe    	bl	0x8060410 <_realloc_r+0x168> @ imm = #-0x4
 8060414: e7d2         	b	0x80603bc <_realloc_r+0x114> @ imm = #-0x5c
 8060416: 230c         	movs	r3, #0xc
 8060418: 2700         	movs	r7, #0x0
 806041a: f8c8 3000    	str.w	r3, [r8]
 806041e: 4638         	mov	r0, r7
 8060420: e8bd 8ff8    	pop.w	{r3, r4, r5, r6, r7, r8, r9, r10, r11, pc}
 8060424: f8dc 0004    	ldr.w	r0, [r12, #0x4]
 8060428: f020 0b03    	bic	r11, r0, #0x3
 806042c: f106 0010    	add.w	r0, r6, #0x10
 8060430: eb05 0c0b    	add.w	r12, r5, r11
 8060434: 4584         	cmp	r12, r0
 8060436: f280 80b3    	bge.w	0x80605a0 <_realloc_r+0x2f8> @ imm = #0x166
 806043a: 07c9         	lsls	r1, r1, #0x1f
 806043c: f53f af7c    	bmi.w	0x8060338 <_realloc_r+0x90> @ imm = #-0x108
 8060440: f854 1c08    	ldr	r1, [r4, #-8]
 8060444: eba9 0a01    	sub.w	r10, r9, r1
 8060448: f8da 1004    	ldr.w	r1, [r10, #0x4]
 806044c: f021 0103    	bic	r1, r1, #0x3
 8060450: 448b         	add	r11, r1
 8060452: 44ab         	add	r11, r5
 8060454: 4558         	cmp	r0, r11
 8060456: f73f af6b    	bgt.w	0x8060330 <_realloc_r+0x88> @ imm = #-0x12a
 806045a: 1f2a         	subs	r2, r5, #0x4
 806045c: 4657         	mov	r7, r10
 806045e: f8da 100c    	ldr.w	r1, [r10, #0xc]
 8060462: f857 0f08    	ldr	r0, [r7, #8]!
 8060466: 2a24         	cmp	r2, #0x24
 8060468: 60c1         	str	r1, [r0, #0xc]
 806046a: 6088         	str	r0, [r1, #0x8]
 806046c: f200 80db    	bhi.w	0x8060626 <_realloc_r+0x37e> @ imm = #0x1b6
 8060470: 2a13         	cmp	r2, #0x13
 8060472: f240 80d6    	bls.w	0x8060622 <_realloc_r+0x37a> @ imm = #0x1ac
 8060476: 6821         	ldr	r1, [r4]
 8060478: 2a1b         	cmp	r2, #0x1b
 806047a: f8ca 1008    	str.w	r1, [r10, #0x8]
 806047e: 6861         	ldr	r1, [r4, #0x4]
 8060480: f8ca 100c    	str.w	r1, [r10, #0xc]
 8060484: f200 80e0    	bhi.w	0x8060648 <_realloc_r+0x3a0> @ imm = #0x1c0
 8060488: 3408         	adds	r4, #0x8
 806048a: f10a 0210    	add.w	r2, r10, #0x10
 806048e: 6821         	ldr	r1, [r4]
 8060490: 6011         	str	r1, [r2]
 8060492: 6861         	ldr	r1, [r4, #0x4]
 8060494: 6051         	str	r1, [r2, #0x4]
 8060496: 68a1         	ldr	r1, [r4, #0x8]
 8060498: 6091         	str	r1, [r2, #0x8]
 806049a: ebab 0206    	sub.w	r2, r11, r6
 806049e: eb0a 0106    	add.w	r1, r10, r6
 80604a2: 4640         	mov	r0, r8
 80604a4: f042 0201    	orr	r2, r2, #0x1
 80604a8: 6099         	str	r1, [r3, #0x8]
 80604aa: 604a         	str	r2, [r1, #0x4]
 80604ac: f8da 3004    	ldr.w	r3, [r10, #0x4]
 80604b0: f003 0301    	and	r3, r3, #0x1
 80604b4: 431e         	orrs	r6, r3
 80604b6: f8ca 6004    	str.w	r6, [r10, #0x4]
 80604ba: f7ff fffe    	bl	0x80604ba <_realloc_r+0x212> @ imm = #-0x4
 80604be: e781         	b	0x80603c4 <_realloc_r+0x11c> @ imm = #-0xfe
 80604c0: f850 3c04    	ldr	r3, [r0, #-4]
 80604c4: f023 0303    	bic	r3, r3, #0x3
 80604c8: 441d         	add	r5, r3
 80604ca: e768         	b	0x806039e <_realloc_r+0xf6> @ imm = #-0x130
 80604cc: 6823         	ldr	r3, [r4]
 80604ce: 2a1b         	cmp	r2, #0x1b
 80604d0: 6003         	str	r3, [r0]
 80604d2: 6863         	ldr	r3, [r4, #0x4]
 80604d4: 6043         	str	r3, [r0, #0x4]
 80604d6: d84e         	bhi	0x8060576 <_realloc_r+0x2ce> @ imm = #0x9c
 80604d8: f104 0208    	add.w	r2, r4, #0x8
 80604dc: f100 0308    	add.w	r3, r0, #0x8
 80604e0: e743         	b	0x806036a <_realloc_r+0xc2> @ imm = #-0x17a
 80604e2: 1f2a         	subs	r2, r5, #0x4
 80604e4: 4657         	mov	r7, r10
 80604e6: f8da 100c    	ldr.w	r1, [r10, #0xc]
 80604ea: f857 0f08    	ldr	r0, [r7, #8]!
 80604ee: 2a24         	cmp	r2, #0x24
 80604f0: 60c1         	str	r1, [r0, #0xc]
 80604f2: 6088         	str	r0, [r1, #0x8]
 80604f4: d84c         	bhi	0x8060590 <_realloc_r+0x2e8> @ imm = #0x98
 80604f6: 2a13         	cmp	r2, #0x13
 80604f8: d948         	bls	0x806058c <_realloc_r+0x2e4> @ imm = #0x90
 80604fa: 6821         	ldr	r1, [r4]
 80604fc: 2a1b         	cmp	r2, #0x1b
 80604fe: f8ca 1008    	str.w	r1, [r10, #0x8]
 8060502: 6861         	ldr	r1, [r4, #0x4]
 8060504: f8ca 100c    	str.w	r1, [r10, #0xc]
 8060508: d86a         	bhi	0x80605e0 <_realloc_r+0x338> @ imm = #0xd4
 806050a: 3408         	adds	r4, #0x8
 806050c: f10a 0210    	add.w	r2, r10, #0x10
 8060510: 461d         	mov	r5, r3
 8060512: 6823         	ldr	r3, [r4]
 8060514: 46d1         	mov	r9, r10
 8060516: 6013         	str	r3, [r2]
 8060518: 6863         	ldr	r3, [r4, #0x4]
 806051a: 6053         	str	r3, [r2, #0x4]
 806051c: 68a3         	ldr	r3, [r4, #0x8]
 806051e: 463c         	mov	r4, r7
 8060520: 6093         	str	r3, [r2, #0x8]
 8060522: e73c         	b	0x806039e <_realloc_r+0xf6> @ imm = #-0x188
 8060524: 4621         	mov	r1, r4
 8060526: f7ff fffe    	bl	0x8060526 <_realloc_r+0x27e> @ imm = #-0x4
 806052a: e724         	b	0x8060376 <_realloc_r+0xce> @ imm = #-0x1b8
 806052c: e9d0 1302    	ldrd	r1, r3, [r0, #8]
 8060530: 1f2a         	subs	r2, r5, #0x4
 8060532: 4657         	mov	r7, r10
 8060534: 60cb         	str	r3, [r1, #0xc]
 8060536: 6099         	str	r1, [r3, #0x8]
 8060538: 2a24         	cmp	r2, #0x24
 806053a: f8da 300c    	ldr.w	r3, [r10, #0xc]
 806053e: f857 1f08    	ldr	r1, [r7, #8]!
 8060542: 60cb         	str	r3, [r1, #0xc]
 8060544: 6099         	str	r1, [r3, #0x8]
 8060546: d841         	bhi	0x80605cc <_realloc_r+0x324> @ imm = #0x82
 8060548: 2a13         	cmp	r2, #0x13
 806054a: d93d         	bls	0x80605c8 <_realloc_r+0x320> @ imm = #0x7a
 806054c: 6823         	ldr	r3, [r4]
 806054e: 2a1b         	cmp	r2, #0x1b
 8060550: f8ca 3008    	str.w	r3, [r10, #0x8]
 8060554: 6863         	ldr	r3, [r4, #0x4]
 8060556: f8ca 300c    	str.w	r3, [r10, #0xc]
 806055a: d856         	bhi	0x806060a <_realloc_r+0x362> @ imm = #0xac
 806055c: 3408         	adds	r4, #0x8
 806055e: f10a 0310    	add.w	r3, r10, #0x10
 8060562: 6822         	ldr	r2, [r4]
 8060564: 4665         	mov	r5, r12
 8060566: 46d1         	mov	r9, r10
 8060568: 601a         	str	r2, [r3]
 806056a: 6862         	ldr	r2, [r4, #0x4]
 806056c: 605a         	str	r2, [r3, #0x4]
 806056e: 68a2         	ldr	r2, [r4, #0x8]
 8060570: 463c         	mov	r4, r7
 8060572: 609a         	str	r2, [r3, #0x8]
 8060574: e713         	b	0x806039e <_realloc_r+0xf6> @ imm = #-0x1da
 8060576: 68a3         	ldr	r3, [r4, #0x8]
 8060578: 2a24         	cmp	r2, #0x24
 806057a: 6083         	str	r3, [r0, #0x8]
 806057c: 68e3         	ldr	r3, [r4, #0xc]
 806057e: 60c3         	str	r3, [r0, #0xc]
 8060580: d03a         	beq	0x80605f8 <_realloc_r+0x350> @ imm = #0x74
 8060582: f104 0210    	add.w	r2, r4, #0x10
 8060586: f100 0310    	add.w	r3, r0, #0x10
 806058a: e6ee         	b	0x806036a <_realloc_r+0xc2> @ imm = #-0x224
 806058c: 463a         	mov	r2, r7
 806058e: e7bf         	b	0x8060510 <_realloc_r+0x268> @ imm = #-0x82
 8060590: 4621         	mov	r1, r4
 8060592: 4638         	mov	r0, r7
 8060594: 461d         	mov	r5, r3
 8060596: 46d1         	mov	r9, r10
 8060598: 463c         	mov	r4, r7
 806059a: f7ff fffe    	bl	0x806059a <_realloc_r+0x2f2> @ imm = #-0x4
 806059e: e6fe         	b	0x806039e <_realloc_r+0xf6> @ imm = #-0x204
 80605a0: eb09 0206    	add.w	r2, r9, r6
 80605a4: ebac 0c06    	sub.w	r12, r12, r6
 80605a8: 4640         	mov	r0, r8
 80605aa: 4627         	mov	r7, r4
 80605ac: 609a         	str	r2, [r3, #0x8]
 80605ae: f04c 0301    	orr	r3, r12, #0x1
 80605b2: 6053         	str	r3, [r2, #0x4]
 80605b4: f854 3c04    	ldr	r3, [r4, #-4]
 80605b8: f003 0301    	and	r3, r3, #0x1
 80605bc: 431e         	orrs	r6, r3
 80605be: f844 6c04    	str	r6, [r4, #-4]
 80605c2: f7ff fffe    	bl	0x80605c2 <_realloc_r+0x31a> @ imm = #-0x4
 80605c6: e6fd         	b	0x80603c4 <_realloc_r+0x11c> @ imm = #-0x206
 80605c8: 463b         	mov	r3, r7
 80605ca: e7ca         	b	0x8060562 <_realloc_r+0x2ba> @ imm = #-0x6c
 80605cc: 4621         	mov	r1, r4
 80605ce: 4638         	mov	r0, r7
 80605d0: 4665         	mov	r5, r12
 80605d2: 46d1         	mov	r9, r10
 80605d4: 463c         	mov	r4, r7
 80605d6: f7ff fffe    	bl	0x80605d6 <_realloc_r+0x32e> @ imm = #-0x4
 80605da: e6e0         	b	0x806039e <_realloc_r+0xf6> @ imm = #-0x240

080605dc <$d>:
 80605dc: 00 00 00 00  	.word	0x00000000

080605e0 <$t>:
 80605e0: 68a1         	ldr	r1, [r4, #0x8]
 80605e2: 2a24         	cmp	r2, #0x24
 80605e4: f8ca 1010    	str.w	r1, [r10, #0x10]
 80605e8: 68e1         	ldr	r1, [r4, #0xc]
 80605ea: f8ca 1014    	str.w	r1, [r10, #0x14]
 80605ee: d020         	beq	0x8060632 <_realloc_r+0x38a> @ imm = #0x40
 80605f0: 3410         	adds	r4, #0x10
 80605f2: f10a 0218    	add.w	r2, r10, #0x18
 80605f6: e78b         	b	0x8060510 <_realloc_r+0x268> @ imm = #-0xea
 80605f8: 6923         	ldr	r3, [r4, #0x10]
 80605fa: f104 0218    	add.w	r2, r4, #0x18
 80605fe: 6103         	str	r3, [r0, #0x10]
 8060600: 6963         	ldr	r3, [r4, #0x14]
 8060602: 6143         	str	r3, [r0, #0x14]
 8060604: f100 0318    	add.w	r3, r0, #0x18
 8060608: e6af         	b	0x806036a <_realloc_r+0xc2> @ imm = #-0x2a2
 806060a: 68a3         	ldr	r3, [r4, #0x8]
 806060c: 2a24         	cmp	r2, #0x24
 806060e: f8ca 3010    	str.w	r3, [r10, #0x10]
 8060612: 68e3         	ldr	r3, [r4, #0xc]
 8060614: f8ca 3014    	str.w	r3, [r10, #0x14]
 8060618: d022         	beq	0x8060660 <_realloc_r+0x3b8> @ imm = #0x44
 806061a: 3410         	adds	r4, #0x10
 806061c: f10a 0318    	add.w	r3, r10, #0x18
 8060620: e79f         	b	0x8060562 <_realloc_r+0x2ba> @ imm = #-0xc2
 8060622: 463a         	mov	r2, r7
 8060624: e733         	b	0x806048e <_realloc_r+0x1e6> @ imm = #-0x19a
 8060626: 4621         	mov	r1, r4
 8060628: 4638         	mov	r0, r7
 806062a: f7ff fffe    	bl	0x806062a <_realloc_r+0x382> @ imm = #-0x4
 806062e: 4b17         	ldr	r3, [pc, #0x5c]         @ 0x806068c <_realloc_r+0x3e4>
 8060630: e733         	b	0x806049a <_realloc_r+0x1f2> @ imm = #-0x19a
 8060632: 6922         	ldr	r2, [r4, #0x10]
 8060634: 3418         	adds	r4, #0x18
 8060636: f8ca 2018    	str.w	r2, [r10, #0x18]
 806063a: f854 2c04    	ldr	r2, [r4, #-4]
 806063e: f8ca 201c    	str.w	r2, [r10, #0x1c]
 8060642: f10a 0220    	add.w	r2, r10, #0x20
 8060646: e763         	b	0x8060510 <_realloc_r+0x268> @ imm = #-0x13a
 8060648: 68a1         	ldr	r1, [r4, #0x8]
 806064a: 2a24         	cmp	r2, #0x24
 806064c: f8ca 1010    	str.w	r1, [r10, #0x10]
 8060650: 68e1         	ldr	r1, [r4, #0xc]
 8060652: f8ca 1014    	str.w	r1, [r10, #0x14]
 8060656: d00e         	beq	0x8060676 <_realloc_r+0x3ce> @ imm = #0x1c
 8060658: 3410         	adds	r4, #0x10
 806065a: f10a 0218    	add.w	r2, r10, #0x18
 806065e: e716         	b	0x806048e <_realloc_r+0x1e6> @ imm = #-0x1d4
 8060660: 6923         	ldr	r3, [r4, #0x10]
 8060662: 3418         	adds	r4, #0x18
 8060664: f8ca 3018    	str.w	r3, [r10, #0x18]
 8060668: f854 3c04    	ldr	r3, [r4, #-4]
 806066c: f8ca 301c    	str.w	r3, [r10, #0x1c]
 8060670: f10a 0320    	add.w	r3, r10, #0x20
 8060674: e775         	b	0x8060562 <_realloc_r+0x2ba> @ imm = #-0x116
 8060676: 6922         	ldr	r2, [r4, #0x10]
 8060678: 3418         	adds	r4, #0x18
 806067a: f8ca 2018    	str.w	r2, [r10, #0x18]
 806067e: f854 2c04    	ldr	r2, [r4, #-4]
 8060682: f8ca 201c    	str.w	r2, [r10, #0x1c]
 8060686: f10a 0220    	add.w	r2, r10, #0x20
 806068a: e700         	b	0x806048e <_realloc_r+0x1e6> @ imm = #-0x200

0806068c <$d>:
 806068c: 00 00 00 00  	.word	0x00000000

08060690 <_sbrk_r>:
 8060690: b538         	push	{r3, r4, r5, lr}
 8060692: 2200         	movs	r2, #0x0
 8060694: 4d06         	ldr	r5, [pc, #0x18]         @ 0x80606b0 <_sbrk_r+0x20>
 8060696: 4604         	mov	r4, r0
 8060698: 4608         	mov	r0, r1
 806069a: 602a         	str	r2, [r5]
 806069c: f7ff fffe    	bl	0x806069c <_sbrk_r+0xc> @ imm = #-0x4
 80606a0: 1c43         	adds	r3, r0, #0x1
 80606a2: d000         	beq	0x80606a6 <_sbrk_r+0x16> @ imm = #0x0
 80606a4: bd38         	pop	{r3, r4, r5, pc}
 80606a6: 682b         	ldr	r3, [r5]
 80606a8: 2b00         	cmp	r3, #0x0
 80606aa: d0fb         	beq	0x80606a4 <_sbrk_r+0x14> @ imm = #-0xa
 80606ac: 6023         	str	r3, [r4]
 80606ae: bd38         	pop	{r3, r4, r5, pc}

080606b0 <$d>:
 80606b0: 00 00 00 00  	.word	0x00000000

080606b4 <_init_signal_r>:
 80606b4: b538         	push	{r3, r4, r5, lr}
 80606b6: f8d0 42dc    	ldr.w	r4, [r0, #0x2dc]
 80606ba: b10c         	cbz	r4, 0x80606c0 <_init_signal_r+0xc> @ imm = #0x2
 80606bc: 2000         	movs	r0, #0x0
 80606be: bd38         	pop	{r3, r4, r5, pc}
 80606c0: 4605         	mov	r5, r0
 80606c2: 2180         	movs	r1, #0x80
 80606c4: f7ff fffe    	bl	0x80606c4 <_init_signal_r+0x10> @ imm = #-0x4
 80606c8: 4602         	mov	r2, r0
 80606ca: f8c5 02dc    	str.w	r0, [r5, #0x2dc]
 80606ce: b130         	cbz	r0, 0x80606de <_init_signal_r+0x2a> @ imm = #0xc
 80606d0: 1f03         	subs	r3, r0, #0x4
 80606d2: 327c         	adds	r2, #0x7c
 80606d4: f843 4f04    	str	r4, [r3, #4]!
 80606d8: 4293         	cmp	r3, r2
 80606da: d1fb         	bne	0x80606d4 <_init_signal_r+0x20> @ imm = #-0xa
 80606dc: e7ee         	b	0x80606bc <_init_signal_r+0x8> @ imm = #-0x24
 80606de: f04f 30ff    	mov.w	r0, #0xffffffff
 80606e2: bd38         	pop	{r3, r4, r5, pc}

080606e4 <_signal_r>:
 80606e4: 291f         	cmp	r1, #0x1f
 80606e6: b5f8         	push	{r3, r4, r5, r6, r7, lr}
 80606e8: 4605         	mov	r5, r0
 80606ea: d809         	bhi	0x8060700 <_signal_r+0x1c> @ imm = #0x12
 80606ec: f8d0 62dc    	ldr.w	r6, [r0, #0x2dc]
 80606f0: 460c         	mov	r4, r1
 80606f2: 4617         	mov	r7, r2
 80606f4: b14e         	cbz	r6, 0x806070a <_signal_r+0x26> @ imm = #0x12
 80606f6: f856 0024    	ldr.w	r0, [r6, r4, lsl #2]
 80606fa: f846 7024    	str.w	r7, [r6, r4, lsl #2]
 80606fe: bdf8         	pop	{r3, r4, r5, r6, r7, pc}
 8060700: 2316         	movs	r3, #0x16
 8060702: f04f 30ff    	mov.w	r0, #0xffffffff
 8060706: 602b         	str	r3, [r5]
 8060708: bdf8         	pop	{r3, r4, r5, r6, r7, pc}
 806070a: 2180         	movs	r1, #0x80
 806070c: f7ff fffe    	bl	0x806070c <_signal_r+0x28> @ imm = #-0x4
 8060710: 4606         	mov	r6, r0
 8060712: f8c5 02dc    	str.w	r0, [r5, #0x2dc]
 8060716: b140         	cbz	r0, 0x806072a <_signal_r+0x46> @ imm = #0x10
 8060718: 1f03         	subs	r3, r0, #0x4
 806071a: f100 057c    	add.w	r5, r0, #0x7c
 806071e: 2100         	movs	r1, #0x0
 8060720: f843 1f04    	str	r1, [r3, #4]!
 8060724: 429d         	cmp	r5, r3
 8060726: d1fb         	bne	0x8060720 <_signal_r+0x3c> @ imm = #-0xa
 8060728: e7e5         	b	0x80606f6 <_signal_r+0x12> @ imm = #-0x36
 806072a: f04f 30ff    	mov.w	r0, #0xffffffff
 806072e: bdf8         	pop	{r3, r4, r5, r6, r7, pc}

08060730 <_raise_r>:
 8060730: 291f         	cmp	r1, #0x1f
 8060732: b538         	push	{r3, r4, r5, lr}
 8060734: 4605         	mov	r5, r0
 8060736: d821         	bhi	0x806077c <_raise_r+0x4c> @ imm = #0x42
 8060738: f8d0 22dc    	ldr.w	r2, [r0, #0x2dc]
 806073c: 460c         	mov	r4, r1
 806073e: b16a         	cbz	r2, 0x806075c <_raise_r+0x2c> @ imm = #0x1a
 8060740: f852 3021    	ldr.w	r3, [r2, r1, lsl #2]
 8060744: b153         	cbz	r3, 0x806075c <_raise_r+0x2c> @ imm = #0x14
 8060746: 2b01         	cmp	r3, #0x1
 8060748: d016         	beq	0x8060778 <_raise_r+0x48> @ imm = #0x2c
 806074a: 1c59         	adds	r1, r3, #0x1
 806074c: d010         	beq	0x8060770 <_raise_r+0x40> @ imm = #0x20
 806074e: 2500         	movs	r5, #0x0
 8060750: 4620         	mov	r0, r4
 8060752: f842 5024    	str.w	r5, [r2, r4, lsl #2]
 8060756: 4798         	blx	r3
 8060758: 4628         	mov	r0, r5
 806075a: bd38         	pop	{r3, r4, r5, pc}
 806075c: 4628         	mov	r0, r5
 806075e: f7ff fffe    	bl	0x806075e <_raise_r+0x2e> @ imm = #-0x4
 8060762: 4622         	mov	r2, r4
 8060764: 4601         	mov	r1, r0
 8060766: 4628         	mov	r0, r5
 8060768: e8bd 4038    	pop.w	{r3, r4, r5, lr}
 806076c: f7ff bffe    	b.w	0x806076c <_raise_r+0x3c> @ imm = #-0x4
 8060770: 2316         	movs	r3, #0x16
 8060772: 2001         	movs	r0, #0x1
 8060774: 602b         	str	r3, [r5]
 8060776: bd38         	pop	{r3, r4, r5, pc}
 8060778: 2000         	movs	r0, #0x0
 806077a: bd38         	pop	{r3, r4, r5, pc}
 806077c: 2316         	movs	r3, #0x16
 806077e: f04f 30ff    	mov.w	r0, #0xffffffff
 8060782: 602b         	str	r3, [r5]
 8060784: bd38         	pop	{r3, r4, r5, pc}
 8060786: bf00         	nop

08060788 <__sigtramp_r>:
 8060788: 291f         	cmp	r1, #0x1f
 806078a: d82c         	bhi	0x80607e6 <__sigtramp_r+0x5e> @ imm = #0x58
 806078c: f8d0 22dc    	ldr.w	r2, [r0, #0x2dc]
 8060790: b538         	push	{r3, r4, r5, lr}
 8060792: 460c         	mov	r4, r1
 8060794: 4605         	mov	r5, r0
 8060796: b182         	cbz	r2, 0x80607ba <__sigtramp_r+0x32> @ imm = #0x20
 8060798: f852 3024    	ldr.w	r3, [r2, r4, lsl #2]
 806079c: eb02 0284    	add.w	r2, r2, r4, lsl #2
 80607a0: b14b         	cbz	r3, 0x80607b6 <__sigtramp_r+0x2e> @ imm = #0x12
 80607a2: 1c59         	adds	r1, r3, #0x1
 80607a4: d01a         	beq	0x80607dc <__sigtramp_r+0x54> @ imm = #0x34
 80607a6: 2b01         	cmp	r3, #0x1
 80607a8: d016         	beq	0x80607d8 <__sigtramp_r+0x50> @ imm = #0x2c
 80607aa: 2500         	movs	r5, #0x0
 80607ac: 4620         	mov	r0, r4
 80607ae: 6015         	str	r5, [r2]
 80607b0: 4798         	blx	r3
 80607b2: 4628         	mov	r0, r5
 80607b4: bd38         	pop	{r3, r4, r5, pc}
 80607b6: 2001         	movs	r0, #0x1
 80607b8: bd38         	pop	{r3, r4, r5, pc}
 80607ba: 2180         	movs	r1, #0x80
 80607bc: f7ff fffe    	bl	0x80607bc <__sigtramp_r+0x34> @ imm = #-0x4
 80607c0: 4602         	mov	r2, r0
 80607c2: f8c5 02dc    	str.w	r0, [r5, #0x2dc]
 80607c6: b158         	cbz	r0, 0x80607e0 <__sigtramp_r+0x58> @ imm = #0x16
 80607c8: 1f03         	subs	r3, r0, #0x4
 80607ca: 2100         	movs	r1, #0x0
 80607cc: 307c         	adds	r0, #0x7c
 80607ce: f843 1f04    	str	r1, [r3, #4]!
 80607d2: 4298         	cmp	r0, r3
 80607d4: d1fb         	bne	0x80607ce <__sigtramp_r+0x46> @ imm = #-0xa
 80607d6: e7df         	b	0x8060798 <__sigtramp_r+0x10> @ imm = #-0x42
 80607d8: 2003         	movs	r0, #0x3
 80607da: bd38         	pop	{r3, r4, r5, pc}
 80607dc: 2002         	movs	r0, #0x2
 80607de: bd38         	pop	{r3, r4, r5, pc}
 80607e0: f04f 30ff    	mov.w	r0, #0xffffffff
 80607e4: bd38         	pop	{r3, r4, r5, pc}
 80607e6: f04f 30ff    	mov.w	r0, #0xffffffff
 80607ea: 4770         	bx	lr

080607ec <raise>:
 80607ec: b538         	push	{r3, r4, r5, lr}
 80607ee: 281f         	cmp	r0, #0x1f
 80607f0: 4b14         	ldr	r3, [pc, #0x50]         @ 0x8060844 <raise+0x58>
 80607f2: 681d         	ldr	r5, [r3]
 80607f4: d820         	bhi	0x8060838 <raise+0x4c>  @ imm = #0x40
 80607f6: f8d5 22dc    	ldr.w	r2, [r5, #0x2dc]
 80607fa: 4604         	mov	r4, r0
 80607fc: b162         	cbz	r2, 0x8060818 <raise+0x2c> @ imm = #0x18
 80607fe: f852 3020    	ldr.w	r3, [r2, r0, lsl #2]
 8060802: b14b         	cbz	r3, 0x8060818 <raise+0x2c> @ imm = #0x12
 8060804: 2b01         	cmp	r3, #0x1
 8060806: d015         	beq	0x8060834 <raise+0x48>  @ imm = #0x2a
 8060808: 1c59         	adds	r1, r3, #0x1
 806080a: d00f         	beq	0x806082c <raise+0x40>  @ imm = #0x1e
 806080c: 2500         	movs	r5, #0x0
 806080e: f842 5020    	str.w	r5, [r2, r0, lsl #2]
 8060812: 4798         	blx	r3
 8060814: 4628         	mov	r0, r5
 8060816: bd38         	pop	{r3, r4, r5, pc}
 8060818: 4628         	mov	r0, r5
 806081a: f7ff fffe    	bl	0x806081a <raise+0x2e>  @ imm = #-0x4
 806081e: 4622         	mov	r2, r4
 8060820: 4601         	mov	r1, r0
 8060822: 4628         	mov	r0, r5
 8060824: e8bd 4038    	pop.w	{r3, r4, r5, lr}
 8060828: f7ff bffe    	b.w	0x8060828 <raise+0x3c>  @ imm = #-0x4
 806082c: 2316         	movs	r3, #0x16
 806082e: 2001         	movs	r0, #0x1
 8060830: 602b         	str	r3, [r5]
 8060832: bd38         	pop	{r3, r4, r5, pc}
 8060834: 2000         	movs	r0, #0x0
 8060836: bd38         	pop	{r3, r4, r5, pc}
 8060838: 2316         	movs	r3, #0x16
 806083a: f04f 30ff    	mov.w	r0, #0xffffffff
 806083e: 602b         	str	r3, [r5]
 8060840: bd38         	pop	{r3, r4, r5, pc}
 8060842: bf00         	nop

08060844 <$d>:
 8060844: 00 00 00 00  	.word	0x00000000

08060848 <signal>:
 8060848: 4b13         	ldr	r3, [pc, #0x4c]         @ 0x8060898 <signal+0x50>
 806084a: 281f         	cmp	r0, #0x1f
 806084c: b570         	push	{r4, r5, r6, lr}
 806084e: 681e         	ldr	r6, [r3]
 8060850: d809         	bhi	0x8060866 <signal+0x1e> @ imm = #0x12
 8060852: 460d         	mov	r5, r1
 8060854: f8d6 12dc    	ldr.w	r1, [r6, #0x2dc]
 8060858: 4604         	mov	r4, r0
 806085a: b149         	cbz	r1, 0x8060870 <signal+0x28> @ imm = #0x12
 806085c: f851 0024    	ldr.w	r0, [r1, r4, lsl #2]
 8060860: f841 5024    	str.w	r5, [r1, r4, lsl #2]
 8060864: bd70         	pop	{r4, r5, r6, pc}
 8060866: 2316         	movs	r3, #0x16
 8060868: f04f 30ff    	mov.w	r0, #0xffffffff
 806086c: 6033         	str	r3, [r6]
 806086e: bd70         	pop	{r4, r5, r6, pc}
 8060870: 2180         	movs	r1, #0x80
 8060872: 4630         	mov	r0, r6
 8060874: f7ff fffe    	bl	0x8060874 <signal+0x2c> @ imm = #-0x4
 8060878: 4601         	mov	r1, r0
 806087a: f8c6 02dc    	str.w	r0, [r6, #0x2dc]
 806087e: b140         	cbz	r0, 0x8060892 <signal+0x4a> @ imm = #0x10
 8060880: 1f03         	subs	r3, r0, #0x4
 8060882: f100 0c7c    	add.w	r12, r0, #0x7c
 8060886: 2200         	movs	r2, #0x0
 8060888: f843 2f04    	str	r2, [r3, #4]!
 806088c: 4563         	cmp	r3, r12
 806088e: d1fb         	bne	0x8060888 <signal+0x40> @ imm = #-0xa
 8060890: e7e4         	b	0x806085c <signal+0x14> @ imm = #-0x38
 8060892: f04f 30ff    	mov.w	r0, #0xffffffff
 8060896: bd70         	pop	{r4, r5, r6, pc}

08060898 <$d>:
 8060898: 00 00 00 00  	.word	0x00000000

0806089c <_init_signal>:
 806089c: b538         	push	{r3, r4, r5, lr}
 806089e: 4b0c         	ldr	r3, [pc, #0x30]         @ 0x80608d0 <_init_signal+0x34>
 80608a0: 681d         	ldr	r5, [r3]
 80608a2: f8d5 42dc    	ldr.w	r4, [r5, #0x2dc]
 80608a6: b10c         	cbz	r4, 0x80608ac <_init_signal+0x10> @ imm = #0x2
 80608a8: 2000         	movs	r0, #0x0
 80608aa: bd38         	pop	{r3, r4, r5, pc}
 80608ac: 2180         	movs	r1, #0x80
 80608ae: 4628         	mov	r0, r5
 80608b0: f7ff fffe    	bl	0x80608b0 <_init_signal+0x14> @ imm = #-0x4
 80608b4: f8c5 02dc    	str.w	r0, [r5, #0x2dc]
 80608b8: b138         	cbz	r0, 0x80608ca <_init_signal+0x2e> @ imm = #0xe
 80608ba: 1f03         	subs	r3, r0, #0x4
 80608bc: f100 027c    	add.w	r2, r0, #0x7c
 80608c0: f843 4f04    	str	r4, [r3, #4]!
 80608c4: 4293         	cmp	r3, r2
 80608c6: d1fb         	bne	0x80608c0 <_init_signal+0x24> @ imm = #-0xa
 80608c8: e7ee         	b	0x80608a8 <_init_signal+0xc> @ imm = #-0x24
 80608ca: f04f 30ff    	mov.w	r0, #0xffffffff
 80608ce: bd38         	pop	{r3, r4, r5, pc}

080608d0 <$d>:
 80608d0: 00 00 00 00  	.word	0x00000000

080608d4 <__sigtramp>:
 80608d4: b538         	push	{r3, r4, r5, lr}
 80608d6: 281f         	cmp	r0, #0x1f
 80608d8: 4b17         	ldr	r3, [pc, #0x5c]         @ 0x8060938 <__sigtramp+0x64>
 80608da: 681d         	ldr	r5, [r3]
 80608dc: d828         	bhi	0x8060930 <__sigtramp+0x5c> @ imm = #0x50
 80608de: f8d5 22dc    	ldr.w	r2, [r5, #0x2dc]
 80608e2: 4604         	mov	r4, r0
 80608e4: b182         	cbz	r2, 0x8060908 <__sigtramp+0x34> @ imm = #0x20
 80608e6: f852 3024    	ldr.w	r3, [r2, r4, lsl #2]
 80608ea: eb02 0284    	add.w	r2, r2, r4, lsl #2
 80608ee: b14b         	cbz	r3, 0x8060904 <__sigtramp+0x30> @ imm = #0x12
 80608f0: 1c59         	adds	r1, r3, #0x1
 80608f2: d01b         	beq	0x806092c <__sigtramp+0x58> @ imm = #0x36
 80608f4: 2b01         	cmp	r3, #0x1
 80608f6: d017         	beq	0x8060928 <__sigtramp+0x54> @ imm = #0x2e
 80608f8: 2500         	movs	r5, #0x0
 80608fa: 4620         	mov	r0, r4
 80608fc: 6015         	str	r5, [r2]
 80608fe: 4798         	blx	r3
 8060900: 4628         	mov	r0, r5
 8060902: bd38         	pop	{r3, r4, r5, pc}
 8060904: 2001         	movs	r0, #0x1
 8060906: bd38         	pop	{r3, r4, r5, pc}
 8060908: 2180         	movs	r1, #0x80
 806090a: 4628         	mov	r0, r5
 806090c: f7ff fffe    	bl	0x806090c <__sigtramp+0x38> @ imm = #-0x4
 8060910: 4602         	mov	r2, r0
 8060912: f8c5 02dc    	str.w	r0, [r5, #0x2dc]
 8060916: b158         	cbz	r0, 0x8060930 <__sigtramp+0x5c> @ imm = #0x16
 8060918: 1f03         	subs	r3, r0, #0x4
 806091a: 2100         	movs	r1, #0x0
 806091c: 307c         	adds	r0, #0x7c
 806091e: f843 1f04    	str	r1, [r3, #4]!
 8060922: 4283         	cmp	r3, r0
 8060924: d1fb         	bne	0x806091e <__sigtramp+0x4a> @ imm = #-0xa
 8060926: e7de         	b	0x80608e6 <__sigtramp+0x12> @ imm = #-0x44
 8060928: 2003         	movs	r0, #0x3
 806092a: bd38         	pop	{r3, r4, r5, pc}
 806092c: 2002         	movs	r0, #0x2
 806092e: bd38         	pop	{r3, r4, r5, pc}
 8060930: f04f 30ff    	mov.w	r0, #0xffffffff
 8060934: bd38         	pop	{r3, r4, r5, pc}
 8060936: bf00         	nop

08060938 <$d>:
 8060938: 00 00 00 00  	.word	0x00000000

0806093c <_kill_r>:
 806093c: b570         	push	{r4, r5, r6, lr}
 806093e: 460c         	mov	r4, r1
 8060940: 4603         	mov	r3, r0
 8060942: 4d08         	ldr	r5, [pc, #0x20]         @ 0x8060964 <_kill_r+0x28>
 8060944: 2600         	movs	r6, #0x0
 8060946: 4620         	mov	r0, r4
 8060948: 4611         	mov	r1, r2
 806094a: 461c         	mov	r4, r3
 806094c: 602e         	str	r6, [r5]
 806094e: f7ff fffe    	bl	0x806094e <_kill_r+0x12> @ imm = #-0x4
 8060952: 1c43         	adds	r3, r0, #0x1
 8060954: d000         	beq	0x8060958 <_kill_r+0x1c> @ imm = #0x0
 8060956: bd70         	pop	{r4, r5, r6, pc}
 8060958: 682b         	ldr	r3, [r5]
 806095a: 2b00         	cmp	r3, #0x0
 806095c: d0fb         	beq	0x8060956 <_kill_r+0x1a> @ imm = #-0xa
 806095e: 6023         	str	r3, [r4]
 8060960: bd70         	pop	{r4, r5, r6, pc}
 8060962: bf00         	nop

08060964 <$d>:
 8060964: 00 00 00 00  	.word	0x00000000

08060968 <_getpid_r>:
 8060968: f7ff bffe    	b.w	0x8060968 <_getpid_r>   @ imm = #-0x4

0806096c <__sread>:
 806096c: b510         	push	{r4, lr}
 806096e: 460c         	mov	r4, r1
 8060970: f9b1 100e    	ldrsh.w	r1, [r1, #0xe]
 8060974: f7ff fffe    	bl	0x8060974 <__sread+0x8> @ imm = #-0x4
 8060978: 2800         	cmp	r0, #0x0
 806097a: db03         	blt	0x8060984 <__sread+0x18> @ imm = #0x6
 806097c: 6d23         	ldr	r3, [r4, #0x50]
 806097e: 4403         	add	r3, r0
 8060980: 6523         	str	r3, [r4, #0x50]
 8060982: bd10         	pop	{r4, pc}
 8060984: 89a3         	ldrh	r3, [r4, #0xc]
 8060986: f423 5380    	bic	r3, r3, #0x1000
 806098a: 81a3         	strh	r3, [r4, #0xc]
 806098c: bd10         	pop	{r4, pc}
 806098e: bf00         	nop

08060990 <__seofread>:
 8060990: 2000         	movs	r0, #0x0
 8060992: 4770         	bx	lr

08060994 <__swrite>:
 8060994: e92d 41f0    	push.w	{r4, r5, r6, r7, r8, lr}
 8060998: 460c         	mov	r4, r1
 806099a: f9b1 100c    	ldrsh.w	r1, [r1, #0xc]
 806099e: 461f         	mov	r7, r3
 80609a0: 4605         	mov	r5, r0
 80609a2: 05cb         	lsls	r3, r1, #0x17
 80609a4: 4616         	mov	r6, r2
 80609a6: d40b         	bmi	0x80609c0 <__swrite+0x2c> @ imm = #0x16
 80609a8: f421 5180    	bic	r1, r1, #0x1000
 80609ac: 463b         	mov	r3, r7
 80609ae: 4632         	mov	r2, r6
 80609b0: 4628         	mov	r0, r5
 80609b2: 81a1         	strh	r1, [r4, #0xc]
 80609b4: f9b4 100e    	ldrsh.w	r1, [r4, #0xe]
 80609b8: e8bd 41f0    	pop.w	{r4, r5, r6, r7, r8, lr}
 80609bc: f7ff bffe    	b.w	0x80609bc <__swrite+0x28> @ imm = #-0x4
 80609c0: f9b4 100e    	ldrsh.w	r1, [r4, #0xe]
 80609c4: 2302         	movs	r3, #0x2
 80609c6: 2200         	movs	r2, #0x0
 80609c8: f7ff fffe    	bl	0x80609c8 <__swrite+0x34> @ imm = #-0x4
 80609cc: f9b4 100c    	ldrsh.w	r1, [r4, #0xc]
 80609d0: e7ea         	b	0x80609a8 <__swrite+0x14> @ imm = #-0x2c
 80609d2: bf00         	nop

080609d4 <__sseek>:
 80609d4: b510         	push	{r4, lr}
 80609d6: 460c         	mov	r4, r1
 80609d8: f9b1 100e    	ldrsh.w	r1, [r1, #0xe]
 80609dc: f7ff fffe    	bl	0x80609dc <__sseek+0x8> @ imm = #-0x4
 80609e0: 1c42         	adds	r2, r0, #0x1
 80609e2: 89a3         	ldrh	r3, [r4, #0xc]
 80609e4: d004         	beq	0x80609f0 <__sseek+0x1c> @ imm = #0x8
 80609e6: f443 5380    	orr	r3, r3, #0x1000
 80609ea: 6520         	str	r0, [r4, #0x50]
 80609ec: 81a3         	strh	r3, [r4, #0xc]
 80609ee: bd10         	pop	{r4, pc}
 80609f0: f423 5380    	bic	r3, r3, #0x1000
 80609f4: 81a3         	strh	r3, [r4, #0xc]
 80609f6: bd10         	pop	{r4, pc}

080609f8 <__sclose>:
 80609f8: f9b1 100e    	ldrsh.w	r1, [r1, #0xe]
 80609fc: f7ff bffe    	b.w	0x80609fc <__sclose+0x4> @ imm = #-0x4

08060a00 <strcmp>:
 8060a00: ea80 0c01    	eor.w	r12, r0, r1
 8060a04: f01c 0f03    	tst.w	r12, #0x3
 8060a08: d137         	bne	0x8060a7a <strcmp+0x7a> @ imm = #0x6e
 8060a0a: f010 0c03    	ands	r12, r0, #0x3
 8060a0e: f020 0003    	bic	r0, r0, #0x3
 8060a12: f021 0103    	bic	r1, r1, #0x3
 8060a16: f850 2b04    	ldr	r2, [r0], #4
 8060a1a: bf08         	it	eq
 8060a1c: f851 3b04    	ldreq	r3, [r1], #4
 8060a20: d00e         	beq	0x8060a40 <strcmp+0x40> @ imm = #0x1c
 8060a22: f08c 0c03    	eor	r12, r12, #0x3
 8060a26: f06f 437f    	mvn	r3, #0xff000000
 8060a2a: ea4f 0ccc    	lsl.w	r12, r12, #0x3
 8060a2e: fa23 fc0c    	lsr.w	r12, r3, r12
 8060a32: f851 3b04    	ldr	r3, [r1], #4
 8060a36: ea42 020c    	orr.w	r2, r2, r12
 8060a3a: ea43 030c    	orr.w	r3, r3, r12
 8060a3e: bf00         	nop
 8060a40: f1a2 3c01    	sub.w	r12, r2, #0x1010101
 8060a44: 429a         	cmp	r2, r3
 8060a46: bf01         	itttt	eq
 8060a48: ea2c 0c02    	biceq.w	r12, r12, r2
 8060a4c: f01c 3f80    	tsteq.w	r12, #0x80808080
 8060a50: f850 2b04    	ldreq	r2, [r0], #4
 8060a54: f851 3b04    	ldreq	r3, [r1], #4
 8060a58: d0f2         	beq	0x8060a40 <strcmp+0x40> @ imm = #-0x1c
 8060a5a: ea4f 6002    	lsl.w	r0, r2, #0x18
 8060a5e: ea4f 2212    	lsr.w	r2, r2, #0x8
 8060a62: 2801         	cmp	r0, #0x1
 8060a64: bf28         	it	hs
 8060a66: ebb0 6f03    	cmphs.w	r0, r3, lsl #24
 8060a6a: bf08         	it	eq
 8060a6c: 0a1b         	lsreq	r3, r3, #0x8
 8060a6e: d0f4         	beq	0x8060a5a <strcmp+0x5a> @ imm = #-0x18
 8060a70: f003 03ff    	and	r3, r3, #0xff
 8060a74: 0e00         	lsrs	r0, r0, #0x18
 8060a76: 1ac0         	subs	r0, r0, r3
 8060a78: 4770         	bx	lr
 8060a7a: f010 0f03    	tst.w	r0, #0x3
 8060a7e: d00a         	beq	0x8060a96 <strcmp+0x96> @ imm = #0x14
 8060a80: f810 2b01    	ldrb	r2, [r0], #1
 8060a84: f811 3b01    	ldrb	r3, [r1], #1
 8060a88: 2a01         	cmp	r2, #0x1
 8060a8a: bf28         	it	hs
 8060a8c: 429a         	cmphs	r2, r3
 8060a8e: d0f4         	beq	0x8060a7a <strcmp+0x7a> @ imm = #-0x18
 8060a90: eba2 0003    	sub.w	r0, r2, r3
 8060a94: 4770         	bx	lr
 8060a96: f84d 5d04    	str	r5, [sp, #-4]!
 8060a9a: f850 2b04    	ldr	r2, [r0], #4
 8060a9e: f001 0503    	and	r5, r1, #0x3
 8060aa2: f021 0103    	bic	r1, r1, #0x3
 8060aa6: f851 3b04    	ldr	r3, [r1], #4
 8060aaa: 2d02         	cmp	r5, #0x2
 8060aac: d026         	beq	0x8060afc <strcmp+0xfc> @ imm = #0x4c
 8060aae: d84d         	bhi	0x8060b4c <strcmp+0x14c> @ imm = #0x9a
 8060ab0: f022 457f    	bic	r5, r2, #0xff000000
 8060ab4: ebb5 2f13    	cmp.w	r5, r3, lsr #8
 8060ab8: f1a2 3c01    	sub.w	r12, r2, #0x1010101
 8060abc: ea2c 0c02    	bic.w	r12, r12, r2
 8060ac0: d10d         	bne	0x8060ade <strcmp+0xde> @ imm = #0x1a
 8060ac2: f01c 3c80    	ands	r12, r12, #0x80808080
 8060ac6: bf08         	it	eq
 8060ac8: f851 3b04    	ldreq	r3, [r1], #4
 8060acc: d10a         	bne	0x8060ae4 <strcmp+0xe4> @ imm = #0x14
 8060ace: ea85 0502    	eor.w	r5, r5, r2
 8060ad2: ebb5 6f03    	cmp.w	r5, r3, lsl #24
 8060ad6: d10c         	bne	0x8060af2 <strcmp+0xf2> @ imm = #0x18
 8060ad8: f850 2b04    	ldr	r2, [r0], #4
 8060adc: e7e8         	b	0x8060ab0 <strcmp+0xb0> @ imm = #-0x30
 8060ade: ea4f 2313    	lsr.w	r3, r3, #0x8
 8060ae2: e05b         	b	0x8060b9c <strcmp+0x19c> @ imm = #0xb6
 8060ae4: f03c 4c7f    	bics	r12, r12, #0xff000000
 8060ae8: d154         	bne	0x8060b94 <strcmp+0x194> @ imm = #0xa8
 8060aea: 780b         	ldrb	r3, [r1]
 8060aec: ea4f 6512    	lsr.w	r5, r2, #0x18
 8060af0: e054         	b	0x8060b9c <strcmp+0x19c> @ imm = #0xa8
 8060af2: ea4f 6512    	lsr.w	r5, r2, #0x18
 8060af6: f003 03ff    	and	r3, r3, #0xff
 8060afa: e04f         	b	0x8060b9c <strcmp+0x19c> @ imm = #0x9e
 8060afc: ea4f 4502    	lsl.w	r5, r2, #0x10
 8060b00: f1a2 3c01    	sub.w	r12, r2, #0x1010101
 8060b04: ea4f 4515    	lsr.w	r5, r5, #0x10
 8060b08: ea2c 0c02    	bic.w	r12, r12, r2
 8060b0c: ebb5 4f13    	cmp.w	r5, r3, lsr #16
 8060b10: d118         	bne	0x8060b44 <strcmp+0x144> @ imm = #0x30
 8060b12: f01c 3c80    	ands	r12, r12, #0x80808080
 8060b16: bf08         	it	eq
 8060b18: f851 3b04    	ldreq	r3, [r1], #4
 8060b1c: d107         	bne	0x8060b2e <strcmp+0x12e> @ imm = #0xe
 8060b1e: ea85 0502    	eor.w	r5, r5, r2
 8060b22: ebb5 4f03    	cmp.w	r5, r3, lsl #16
 8060b26: d109         	bne	0x8060b3c <strcmp+0x13c> @ imm = #0x12
 8060b28: f850 2b04    	ldr	r2, [r0], #4
 8060b2c: e7e6         	b	0x8060afc <strcmp+0xfc> @ imm = #-0x34
 8060b2e: ea5f 4c0c    	lsls.w	r12, r12, #0x10
 8060b32: d12f         	bne	0x8060b94 <strcmp+0x194> @ imm = #0x5e
 8060b34: 880b         	ldrh	r3, [r1]
 8060b36: ea4f 4512    	lsr.w	r5, r2, #0x10
 8060b3a: e02f         	b	0x8060b9c <strcmp+0x19c> @ imm = #0x5e
 8060b3c: ea4f 4303    	lsl.w	r3, r3, #0x10
 8060b40: ea4f 4512    	lsr.w	r5, r2, #0x10
 8060b44: ea4f 4313    	lsr.w	r3, r3, #0x10
 8060b48: e028         	b	0x8060b9c <strcmp+0x19c> @ imm = #0x50
 8060b4a: bf00         	nop
 8060b4c: f002 05ff    	and	r5, r2, #0xff
 8060b50: ebb5 6f13    	cmp.w	r5, r3, lsr #24
 8060b54: f1a2 3c01    	sub.w	r12, r2, #0x1010101
 8060b58: ea2c 0c02    	bic.w	r12, r12, r2
 8060b5c: d10d         	bne	0x8060b7a <strcmp+0x17a> @ imm = #0x1a
 8060b5e: f01c 3c80    	ands	r12, r12, #0x80808080
 8060b62: bf08         	it	eq
 8060b64: f851 3b04    	ldreq	r3, [r1], #4
 8060b68: d10a         	bne	0x8060b80 <strcmp+0x180> @ imm = #0x14
 8060b6a: ea85 0502    	eor.w	r5, r5, r2
 8060b6e: ebb5 2f03    	cmp.w	r5, r3, lsl #8
 8060b72: d10a         	bne	0x8060b8a <strcmp+0x18a> @ imm = #0x14
 8060b74: f850 2b04    	ldr	r2, [r0], #4
 8060b78: e7e8         	b	0x8060b4c <strcmp+0x14c> @ imm = #-0x30
 8060b7a: ea4f 6313    	lsr.w	r3, r3, #0x18
 8060b7e: e00d         	b	0x8060b9c <strcmp+0x19c> @ imm = #0x1a
 8060b80: f012 0fff    	tst.w	r2, #0xff
 8060b84: d006         	beq	0x8060b94 <strcmp+0x194> @ imm = #0xc
 8060b86: f851 3b04    	ldr	r3, [r1], #4
 8060b8a: ea4f 2512    	lsr.w	r5, r2, #0x8
 8060b8e: f023 437f    	bic	r3, r3, #0xff000000
 8060b92: e003         	b	0x8060b9c <strcmp+0x19c> @ imm = #0x6
 8060b94: f04f 0000    	mov.w	r0, #0x0
 8060b98: bc20         	pop	{r5}
 8060b9a: 4770         	bx	lr
 8060b9c: f005 02ff    	and	r2, r5, #0xff
 8060ba0: f003 00ff    	and	r0, r3, #0xff
 8060ba4: 2801         	cmp	r0, #0x1
 8060ba6: bf28         	it	hs
 8060ba8: 4290         	cmphs	r0, r2
 8060baa: bf04         	itt	eq
 8060bac: 0a2d         	lsreq	r5, r5, #0x8
 8060bae: 0a1b         	lsreq	r3, r3, #0x8
 8060bb0: d0f4         	beq	0x8060b9c <strcmp+0x19c> @ imm = #-0x18
 8060bb2: eba2 0000    	sub.w	r0, r2, r0
 8060bb6: bc20         	pop	{r5}
 8060bb8: 4770         	bx	lr
 8060bba: bf00         	nop

08060bbc <strlen>:
 8060bbc: f020 0103    	bic	r1, r0, #0x3
 8060bc0: f010 0003    	ands	r0, r0, #0x3
 8060bc4: f1c0 0000    	rsb.w	r0, r0, #0x0
 8060bc8: f851 3b04    	ldr	r3, [r1], #4
 8060bcc: f100 0c04    	add.w	r12, r0, #0x4
 8060bd0: ea4f 0ccc    	lsl.w	r12, r12, #0x3
 8060bd4: f06f 0200    	mvn	r2, #0x0
 8060bd8: bf1c         	itt	ne
 8060bda: fa22 f20c    	lsrne.w	r2, r2, r12
 8060bde: 4313         	orrne	r3, r2
 8060be0: f04f 0c01    	mov.w	r12, #0x1
 8060be4: ea4c 2c0c    	orr.w	r12, r12, r12, lsl #8
 8060be8: ea4c 4c0c    	orr.w	r12, r12, r12, lsl #16
 8060bec: eba3 020c    	sub.w	r2, r3, r12
 8060bf0: ea22 0203    	bic.w	r2, r2, r3
 8060bf4: ea12 12cc    	ands.w	r2, r2, r12, lsl #7
 8060bf8: bf04         	itt	eq
 8060bfa: f851 3b04    	ldreq	r3, [r1], #4
 8060bfe: 3004         	addeq	r0, #0x4
 8060c00: d0f4         	beq	0x8060bec <strlen+0x30> @ imm = #-0x18
 8060c02: f1c2 0100    	rsb.w	r1, r2, #0x0
 8060c06: ea02 0201    	and.w	r2, r2, r1
 8060c0a: fab2 f282    	clz	r2, r2
 8060c0e: f1c2 021f    	rsb.w	r2, r2, #0x1f
 8060c12: eb00 00d2    	add.w	r0, r0, r2, lsr #3
 8060c16: 4770         	bx	lr

08060c18 <__swbuf_r>:
 8060c18: b5f8         	push	{r3, r4, r5, r6, r7, lr}
 8060c1a: 460d         	mov	r5, r1
 8060c1c: 4606         	mov	r6, r0
 8060c1e: 4614         	mov	r4, r2
 8060c20: b110         	cbz	r0, 0x8060c28 <__swbuf_r+0x10> @ imm = #0x4
 8060c22: 6b83         	ldr	r3, [r0, #0x38]
 8060c24: 2b00         	cmp	r3, #0x0
 8060c26: d043         	beq	0x8060cb0 <__swbuf_r+0x98> @ imm = #0x86
 8060c28: f9b4 200c    	ldrsh.w	r2, [r4, #0xc]
 8060c2c: 69a3         	ldr	r3, [r4, #0x18]
 8060c2e: 0717         	lsls	r7, r2, #0x1c
 8060c30: b290         	uxth	r0, r2
 8060c32: 60a3         	str	r3, [r4, #0x8]
 8060c34: d51b         	bpl	0x8060c6e <__swbuf_r+0x56> @ imm = #0x36
 8060c36: 6923         	ldr	r3, [r4, #0x10]
 8060c38: b1cb         	cbz	r3, 0x8060c6e <__swbuf_r+0x56> @ imm = #0x32
 8060c3a: b2ed         	uxtb	r5, r5
 8060c3c: 0481         	lsls	r1, r0, #0x12
 8060c3e: 462f         	mov	r7, r5
 8060c40: d522         	bpl	0x8060c88 <__swbuf_r+0x70> @ imm = #0x44
 8060c42: 6822         	ldr	r2, [r4]
 8060c44: 6961         	ldr	r1, [r4, #0x14]
 8060c46: 1ad3         	subs	r3, r2, r3
 8060c48: 4299         	cmp	r1, r3
 8060c4a: dd29         	ble	0x8060ca0 <__swbuf_r+0x88> @ imm = #0x52
 8060c4c: 3301         	adds	r3, #0x1
 8060c4e: 68a1         	ldr	r1, [r4, #0x8]
 8060c50: 3901         	subs	r1, #0x1
 8060c52: 60a1         	str	r1, [r4, #0x8]
 8060c54: 1c51         	adds	r1, r2, #0x1
 8060c56: 6021         	str	r1, [r4]
 8060c58: 7015         	strb	r5, [r2]
 8060c5a: 6962         	ldr	r2, [r4, #0x14]
 8060c5c: 429a         	cmp	r2, r3
 8060c5e: d02a         	beq	0x8060cb6 <__swbuf_r+0x9e> @ imm = #0x54
 8060c60: 2d0a         	cmp	r5, #0xa
 8060c62: d102         	bne	0x8060c6a <__swbuf_r+0x52> @ imm = #0x4
 8060c64: 89a3         	ldrh	r3, [r4, #0xc]
 8060c66: 07db         	lsls	r3, r3, #0x1f
 8060c68: d425         	bmi	0x8060cb6 <__swbuf_r+0x9e> @ imm = #0x4a
 8060c6a: 4638         	mov	r0, r7
 8060c6c: bdf8         	pop	{r3, r4, r5, r6, r7, pc}
 8060c6e: 4621         	mov	r1, r4
 8060c70: 4630         	mov	r0, r6
 8060c72: f7ff fffe    	bl	0x8060c72 <__swbuf_r+0x5a> @ imm = #-0x4
 8060c76: bb20         	cbnz	r0, 0x8060cc2 <__swbuf_r+0xaa> @ imm = #0x48
 8060c78: f9b4 200c    	ldrsh.w	r2, [r4, #0xc]
 8060c7c: b2ed         	uxtb	r5, r5
 8060c7e: 6923         	ldr	r3, [r4, #0x10]
 8060c80: b290         	uxth	r0, r2
 8060c82: 462f         	mov	r7, r5
 8060c84: 0481         	lsls	r1, r0, #0x12
 8060c86: d4dc         	bmi	0x8060c42 <__swbuf_r+0x2a> @ imm = #-0x48
 8060c88: f442 5200    	orr	r2, r2, #0x2000
 8060c8c: 6961         	ldr	r1, [r4, #0x14]
 8060c8e: 81a2         	strh	r2, [r4, #0xc]
 8060c90: 6e62         	ldr	r2, [r4, #0x64]
 8060c92: f422 5200    	bic	r2, r2, #0x2000
 8060c96: 6662         	str	r2, [r4, #0x64]
 8060c98: 6822         	ldr	r2, [r4]
 8060c9a: 1ad3         	subs	r3, r2, r3
 8060c9c: 4299         	cmp	r1, r3
 8060c9e: dcd5         	bgt	0x8060c4c <__swbuf_r+0x34> @ imm = #-0x56
 8060ca0: 4621         	mov	r1, r4
 8060ca2: 4630         	mov	r0, r6
 8060ca4: f7ff fffe    	bl	0x8060ca4 <__swbuf_r+0x8c> @ imm = #-0x4
 8060ca8: b958         	cbnz	r0, 0x8060cc2 <__swbuf_r+0xaa> @ imm = #0x16
 8060caa: 6822         	ldr	r2, [r4]
 8060cac: 2301         	movs	r3, #0x1
 8060cae: e7ce         	b	0x8060c4e <__swbuf_r+0x36> @ imm = #-0x64
 8060cb0: f7ff fffe    	bl	0x8060cb0 <__swbuf_r+0x98> @ imm = #-0x4
 8060cb4: e7b8         	b	0x8060c28 <__swbuf_r+0x10> @ imm = #-0x90
 8060cb6: 4621         	mov	r1, r4
 8060cb8: 4630         	mov	r0, r6
 8060cba: f7ff fffe    	bl	0x8060cba <__swbuf_r+0xa2> @ imm = #-0x4
 8060cbe: 2800         	cmp	r0, #0x0
 8060cc0: d0d3         	beq	0x8060c6a <__swbuf_r+0x52> @ imm = #-0x5a
 8060cc2: f04f 37ff    	mov.w	r7, #0xffffffff
 8060cc6: e7d0         	b	0x8060c6a <__swbuf_r+0x52> @ imm = #-0x60

08060cc8 <__swbuf>:
 8060cc8: 4b02         	ldr	r3, [pc, #0x8]          @ 0x8060cd4 <__swbuf+0xc>
 8060cca: 460a         	mov	r2, r1
 8060ccc: 4601         	mov	r1, r0
 8060cce: 6818         	ldr	r0, [r3]
 8060cd0: f7ff bffe    	b.w	0x8060cd0 <__swbuf+0x8> @ imm = #-0x4

08060cd4 <$d>:
 8060cd4: 00 00 00 00  	.word	0x00000000

08060cd8 <_wcrtomb_r>:
 8060cd8: b570         	push	{r4, r5, r6, lr}
 8060cda: 4605         	mov	r5, r0
 8060cdc: b084         	sub	sp, #0x10
 8060cde: 461c         	mov	r4, r3
 8060ce0: b139         	cbz	r1, 0x8060cf2 <_wcrtomb_r+0x1a> @ imm = #0xe
 8060ce2: 4e0b         	ldr	r6, [pc, #0x2c]         @ 0x8060d10 <_wcrtomb_r+0x38>
 8060ce4: f8d6 60e0    	ldr.w	r6, [r6, #0xe0]
 8060ce8: 47b0         	blx	r6
 8060cea: 1c43         	adds	r3, r0, #0x1
 8060cec: d009         	beq	0x8060d02 <_wcrtomb_r+0x2a> @ imm = #0x12
 8060cee: b004         	add	sp, #0x10
 8060cf0: bd70         	pop	{r4, r5, r6, pc}
 8060cf2: 460a         	mov	r2, r1
 8060cf4: 4906         	ldr	r1, [pc, #0x18]         @ 0x8060d10 <_wcrtomb_r+0x38>
 8060cf6: f8d1 60e0    	ldr.w	r6, [r1, #0xe0]
 8060cfa: a901         	add	r1, sp, #0x4
 8060cfc: 47b0         	blx	r6
 8060cfe: 1c43         	adds	r3, r0, #0x1
 8060d00: d1f5         	bne	0x8060cee <_wcrtomb_r+0x16> @ imm = #-0x16
 8060d02: 2200         	movs	r2, #0x0
 8060d04: 238a         	movs	r3, #0x8a
 8060d06: 6022         	str	r2, [r4]
 8060d08: 602b         	str	r3, [r5]
 8060d0a: b004         	add	sp, #0x10
 8060d0c: bd70         	pop	{r4, r5, r6, pc}
 8060d0e: bf00         	nop

08060d10 <$d>:
 8060d10: 00 00 00 00  	.word	0x00000000

08060d14 <wcrtomb>:
 8060d14: b570         	push	{r4, r5, r6, lr}
 8060d16: 4d11         	ldr	r5, [pc, #0x44]         @ 0x8060d5c <wcrtomb+0x48>
 8060d18: 460b         	mov	r3, r1
 8060d1a: b084         	sub	sp, #0x10
 8060d1c: 4601         	mov	r1, r0
 8060d1e: 4614         	mov	r4, r2
 8060d20: 682d         	ldr	r5, [r5]
 8060d22: b150         	cbz	r0, 0x8060d3a <wcrtomb+0x26> @ imm = #0x14
 8060d24: 480e         	ldr	r0, [pc, #0x38]         @ 0x8060d60 <wcrtomb+0x4c>
 8060d26: 461a         	mov	r2, r3
 8060d28: 4623         	mov	r3, r4
 8060d2a: f8d0 60e0    	ldr.w	r6, [r0, #0xe0]
 8060d2e: 4628         	mov	r0, r5
 8060d30: 47b0         	blx	r6
 8060d32: 1c43         	adds	r3, r0, #0x1
 8060d34: d00b         	beq	0x8060d4e <wcrtomb+0x3a> @ imm = #0x16
 8060d36: b004         	add	sp, #0x10
 8060d38: bd70         	pop	{r4, r5, r6, pc}
 8060d3a: 4809         	ldr	r0, [pc, #0x24]         @ 0x8060d60 <wcrtomb+0x4c>
 8060d3c: 4613         	mov	r3, r2
 8060d3e: 460a         	mov	r2, r1
 8060d40: a901         	add	r1, sp, #0x4
 8060d42: f8d0 60e0    	ldr.w	r6, [r0, #0xe0]
 8060d46: 4628         	mov	r0, r5
 8060d48: 47b0         	blx	r6
 8060d4a: 1c43         	adds	r3, r0, #0x1
 8060d4c: d1f3         	bne	0x8060d36 <wcrtomb+0x22> @ imm = #-0x1a
 8060d4e: 2200         	movs	r2, #0x0
 8060d50: 238a         	movs	r3, #0x8a
 8060d52: 6022         	str	r2, [r4]
 8060d54: 602b         	str	r3, [r5]
 8060d56: b004         	add	sp, #0x10
 8060d58: bd70         	pop	{r4, r5, r6, pc}
 8060d5a: bf00         	nop

08060d5c <$d>:
 8060d5c: 00 00 00 00  	.word	0x00000000
 8060d60: 00 00 00 00  	.word	0x00000000

08060d64 <_wctomb_r>:
 8060d64: b410         	push	{r4}
 8060d66: 4c03         	ldr	r4, [pc, #0xc]          @ 0x8060d74 <_wctomb_r+0x10>
 8060d68: f8d4 40e0    	ldr.w	r4, [r4, #0xe0]
 8060d6c: 46a4         	mov	r12, r4
 8060d6e: bc10         	pop	{r4}
 8060d70: 4760         	bx	r12
 8060d72: bf00         	nop

08060d74 <$d>:
 8060d74: 00 00 00 00  	.word	0x00000000

08060d78 <__ascii_wctomb>:
 8060d78: 4603         	mov	r3, r0
 8060d7a: b149         	cbz	r1, 0x8060d90 <__ascii_wctomb+0x18> @ imm = #0x12
 8060d7c: 2aff         	cmp	r2, #0xff
 8060d7e: d802         	bhi	0x8060d86 <__ascii_wctomb+0xe> @ imm = #0x4
 8060d80: 2001         	movs	r0, #0x1
 8060d82: 700a         	strb	r2, [r1]
 8060d84: 4770         	bx	lr
 8060d86: 228a         	movs	r2, #0x8a
 8060d88: f04f 30ff    	mov.w	r0, #0xffffffff
 8060d8c: 601a         	str	r2, [r3]
 8060d8e: 4770         	bx	lr
 8060d90: 4608         	mov	r0, r1
 8060d92: 4770         	bx	lr

08060d94 <_write_r>:
 8060d94: b538         	push	{r3, r4, r5, lr}
 8060d96: 460c         	mov	r4, r1
 8060d98: 4684         	mov	r12, r0
 8060d9a: 4611         	mov	r1, r2
 8060d9c: 4d07         	ldr	r5, [pc, #0x1c]         @ 0x8060dbc <_write_r+0x28>
 8060d9e: 461a         	mov	r2, r3
 8060da0: 2300         	movs	r3, #0x0
 8060da2: 4620         	mov	r0, r4
 8060da4: 4664         	mov	r4, r12
 8060da6: 602b         	str	r3, [r5]
 8060da8: f7ff fffe    	bl	0x8060da8 <_write_r+0x14> @ imm = #-0x4
 8060dac: 1c43         	adds	r3, r0, #0x1
 8060dae: d000         	beq	0x8060db2 <_write_r+0x1e> @ imm = #0x0
 8060db0: bd38         	pop	{r3, r4, r5, pc}
 8060db2: 682b         	ldr	r3, [r5]
 8060db4: 2b00         	cmp	r3, #0x0
 8060db6: d0fb         	beq	0x8060db0 <_write_r+0x1c> @ imm = #-0xa
 8060db8: 6023         	str	r3, [r4]
 8060dba: bd38         	pop	{r3, r4, r5, pc}

08060dbc <$d>:
 8060dbc: 00 00 00 00  	.word	0x00000000

08060dc0 <_close_r>:
 8060dc0: b538         	push	{r3, r4, r5, lr}
 8060dc2: 2200         	movs	r2, #0x0
 8060dc4: 4d06         	ldr	r5, [pc, #0x18]         @ 0x8060de0 <_close_r+0x20>
 8060dc6: 4604         	mov	r4, r0
 8060dc8: 4608         	mov	r0, r1
 8060dca: 602a         	str	r2, [r5]
 8060dcc: f7ff fffe    	bl	0x8060dcc <_close_r+0xc> @ imm = #-0x4
 8060dd0: 1c43         	adds	r3, r0, #0x1
 8060dd2: d000         	beq	0x8060dd6 <_close_r+0x16> @ imm = #0x0
 8060dd4: bd38         	pop	{r3, r4, r5, pc}
 8060dd6: 682b         	ldr	r3, [r5]
 8060dd8: 2b00         	cmp	r3, #0x0
 8060dda: d0fb         	beq	0x8060dd4 <_close_r+0x14> @ imm = #-0xa
 8060ddc: 6023         	str	r3, [r4]
 8060dde: bd38         	pop	{r3, r4, r5, pc}

08060de0 <$d>:
 8060de0: 00 00 00 00  	.word	0x00000000

08060de4 <_fclose_r.part.0>:
 8060de4: b570         	push	{r4, r5, r6, lr}
 8060de6: 460c         	mov	r4, r1
 8060de8: 4606         	mov	r6, r0
 8060dea: f7ff fffe    	bl	0x8060dea <_fclose_r.part.0+0x6> @ imm = #-0x4
 8060dee: 4605         	mov	r5, r0
 8060df0: 6ae3         	ldr	r3, [r4, #0x2c]
 8060df2: b133         	cbz	r3, 0x8060e02 <_fclose_r.part.0+0x1e> @ imm = #0xc
 8060df4: 69e1         	ldr	r1, [r4, #0x1c]
 8060df6: 4630         	mov	r0, r6
 8060df8: 4798         	blx	r3
 8060dfa: 2800         	cmp	r0, #0x0
 8060dfc: bfb8         	it	lt
 8060dfe: f04f 35ff    	movlt.w	r5, #0xffffffff
 8060e02: 89a3         	ldrh	r3, [r4, #0xc]
 8060e04: 061b         	lsls	r3, r3, #0x18
 8060e06: d419         	bmi	0x8060e3c <_fclose_r.part.0+0x58> @ imm = #0x32
 8060e08: 6b21         	ldr	r1, [r4, #0x30]
 8060e0a: b141         	cbz	r1, 0x8060e1e <_fclose_r.part.0+0x3a> @ imm = #0x10
 8060e0c: f104 0340    	add.w	r3, r4, #0x40
 8060e10: 4299         	cmp	r1, r3
 8060e12: d002         	beq	0x8060e1a <_fclose_r.part.0+0x36> @ imm = #0x4
 8060e14: 4630         	mov	r0, r6
 8060e16: f7ff fffe    	bl	0x8060e16 <_fclose_r.part.0+0x32> @ imm = #-0x4
 8060e1a: 2300         	movs	r3, #0x0
 8060e1c: 6323         	str	r3, [r4, #0x30]
 8060e1e: 6c61         	ldr	r1, [r4, #0x44]
 8060e20: b121         	cbz	r1, 0x8060e2c <_fclose_r.part.0+0x48> @ imm = #0x8
 8060e22: 4630         	mov	r0, r6
 8060e24: f7ff fffe    	bl	0x8060e24 <_fclose_r.part.0+0x40> @ imm = #-0x4
 8060e28: 2300         	movs	r3, #0x0
 8060e2a: 6463         	str	r3, [r4, #0x44]
 8060e2c: f7ff fffe    	bl	0x8060e2c <_fclose_r.part.0+0x48> @ imm = #-0x4
 8060e30: 2300         	movs	r3, #0x0
 8060e32: 81a3         	strh	r3, [r4, #0xc]
 8060e34: f7ff fffe    	bl	0x8060e34 <_fclose_r.part.0+0x50> @ imm = #-0x4
 8060e38: 4628         	mov	r0, r5
 8060e3a: bd70         	pop	{r4, r5, r6, pc}
 8060e3c: 6921         	ldr	r1, [r4, #0x10]
 8060e3e: 4630         	mov	r0, r6
 8060e40: f7ff fffe    	bl	0x8060e40 <_fclose_r.part.0+0x5c> @ imm = #-0x4
 8060e44: e7e0         	b	0x8060e08 <_fclose_r.part.0+0x24> @ imm = #-0x40
 8060e46: bf00         	nop

08060e48 <_fclose_r>:
 8060e48: b1b1         	cbz	r1, 0x8060e78 <_fclose_r+0x30> @ imm = #0x2c
 8060e4a: b538         	push	{r3, r4, r5, lr}
 8060e4c: 4605         	mov	r5, r0
 8060e4e: 460c         	mov	r4, r1
 8060e50: b108         	cbz	r0, 0x8060e56 <_fclose_r+0xe> @ imm = #0x2
 8060e52: 6b83         	ldr	r3, [r0, #0x38]
 8060e54: b14b         	cbz	r3, 0x8060e6a <_fclose_r+0x22> @ imm = #0x12
 8060e56: f9b4 300c    	ldrsh.w	r3, [r4, #0xc]
 8060e5a: b90b         	cbnz	r3, 0x8060e60 <_fclose_r+0x18> @ imm = #0x2
 8060e5c: 2000         	movs	r0, #0x0
 8060e5e: bd38         	pop	{r3, r4, r5, pc}
 8060e60: 4621         	mov	r1, r4
 8060e62: 4628         	mov	r0, r5
 8060e64: e8bd 4038    	pop.w	{r3, r4, r5, lr}
 8060e68: e7bc         	b	0x8060de4 <_fclose_r.part.0> @ imm = #-0x88
 8060e6a: f7ff fffe    	bl	0x8060e6a <_fclose_r+0x22> @ imm = #-0x4
 8060e6e: f9b4 300c    	ldrsh.w	r3, [r4, #0xc]
 8060e72: 2b00         	cmp	r3, #0x0
 8060e74: d0f2         	beq	0x8060e5c <_fclose_r+0x14> @ imm = #-0x1c
 8060e76: e7f3         	b	0x8060e60 <_fclose_r+0x18> @ imm = #-0x1a
 8060e78: 2000         	movs	r0, #0x0
 8060e7a: 4770         	bx	lr

08060e7c <fclose>:
 8060e7c: b1c0         	cbz	r0, 0x8060eb0 <fclose+0x34> @ imm = #0x30
 8060e7e: b538         	push	{r3, r4, r5, lr}
 8060e80: 4b0c         	ldr	r3, [pc, #0x30]         @ 0x8060eb4 <fclose+0x38>
 8060e82: 4604         	mov	r4, r0
 8060e84: 681d         	ldr	r5, [r3]
 8060e86: b10d         	cbz	r5, 0x8060e8c <fclose+0x10> @ imm = #0x2
 8060e88: 6bab         	ldr	r3, [r5, #0x38]
 8060e8a: b14b         	cbz	r3, 0x8060ea0 <fclose+0x24> @ imm = #0x12
 8060e8c: f9b4 300c    	ldrsh.w	r3, [r4, #0xc]
 8060e90: b90b         	cbnz	r3, 0x8060e96 <fclose+0x1a> @ imm = #0x2
 8060e92: 2000         	movs	r0, #0x0
 8060e94: bd38         	pop	{r3, r4, r5, pc}
 8060e96: 4621         	mov	r1, r4
 8060e98: 4628         	mov	r0, r5
 8060e9a: e8bd 4038    	pop.w	{r3, r4, r5, lr}
 8060e9e: e7a1         	b	0x8060de4 <_fclose_r.part.0> @ imm = #-0xbe
 8060ea0: 4628         	mov	r0, r5
 8060ea2: f7ff fffe    	bl	0x8060ea2 <fclose+0x26> @ imm = #-0x4
 8060ea6: f9b4 300c    	ldrsh.w	r3, [r4, #0xc]
 8060eaa: 2b00         	cmp	r3, #0x0
 8060eac: d0f1         	beq	0x8060e92 <fclose+0x16> @ imm = #-0x1e
 8060eae: e7f2         	b	0x8060e96 <fclose+0x1a> @ imm = #-0x1c
 8060eb0: 2000         	movs	r0, #0x0
 8060eb2: 4770         	bx	lr

08060eb4 <$d>:
 8060eb4: 00 00 00 00  	.word	0x00000000

08060eb8 <_fstat_r>:
 8060eb8: b570         	push	{r4, r5, r6, lr}
 8060eba: 460c         	mov	r4, r1
 8060ebc: 4603         	mov	r3, r0
 8060ebe: 4d08         	ldr	r5, [pc, #0x20]         @ 0x8060ee0 <_fstat_r+0x28>
 8060ec0: 2600         	movs	r6, #0x0
 8060ec2: 4620         	mov	r0, r4
 8060ec4: 4611         	mov	r1, r2
 8060ec6: 461c         	mov	r4, r3
 8060ec8: 602e         	str	r6, [r5]
 8060eca: f7ff fffe    	bl	0x8060eca <_fstat_r+0x12> @ imm = #-0x4
 8060ece: 1c43         	adds	r3, r0, #0x1
 8060ed0: d000         	beq	0x8060ed4 <_fstat_r+0x1c> @ imm = #0x0
 8060ed2: bd70         	pop	{r4, r5, r6, pc}
 8060ed4: 682b         	ldr	r3, [r5]
 8060ed6: 2b00         	cmp	r3, #0x0
 8060ed8: d0fb         	beq	0x8060ed2 <_fstat_r+0x1a> @ imm = #-0xa
 8060eda: 6023         	str	r3, [r4]
 8060edc: bd70         	pop	{r4, r5, r6, pc}
 8060ede: bf00         	nop

08060ee0 <$d>:
 8060ee0: 00 00 00 00  	.word	0x00000000

08060ee4 <_isatty_r>:
 8060ee4: b538         	push	{r3, r4, r5, lr}
 8060ee6: 2200         	movs	r2, #0x0
 8060ee8: 4d06         	ldr	r5, [pc, #0x18]         @ 0x8060f04 <_isatty_r+0x20>
 8060eea: 4604         	mov	r4, r0
 8060eec: 4608         	mov	r0, r1
 8060eee: 602a         	str	r2, [r5]
 8060ef0: f7ff fffe    	bl	0x8060ef0 <_isatty_r+0xc> @ imm = #-0x4
 8060ef4: 1c43         	adds	r3, r0, #0x1
 8060ef6: d000         	beq	0x8060efa <_isatty_r+0x16> @ imm = #0x0
 8060ef8: bd38         	pop	{r3, r4, r5, pc}
 8060efa: 682b         	ldr	r3, [r5]
 8060efc: 2b00         	cmp	r3, #0x0
 8060efe: d0fb         	beq	0x8060ef8 <_isatty_r+0x14> @ imm = #-0xa
 8060f00: 6023         	str	r3, [r4]
 8060f02: bd38         	pop	{r3, r4, r5, pc}

08060f04 <$d>:
 8060f04: 00 00 00 00  	.word	0x00000000

08060f08 <_lseek_r>:
 8060f08: b538         	push	{r3, r4, r5, lr}
 8060f0a: 460c         	mov	r4, r1
 8060f0c: 4684         	mov	r12, r0
 8060f0e: 4611         	mov	r1, r2
 8060f10: 4d07         	ldr	r5, [pc, #0x1c]         @ 0x8060f30 <_lseek_r+0x28>
 8060f12: 461a         	mov	r2, r3
 8060f14: 2300         	movs	r3, #0x0
 8060f16: 4620         	mov	r0, r4
 8060f18: 4664         	mov	r4, r12
 8060f1a: 602b         	str	r3, [r5]
 8060f1c: f7ff fffe    	bl	0x8060f1c <_lseek_r+0x14> @ imm = #-0x4
 8060f20: 1c43         	adds	r3, r0, #0x1
 8060f22: d000         	beq	0x8060f26 <_lseek_r+0x1e> @ imm = #0x0
 8060f24: bd38         	pop	{r3, r4, r5, pc}
 8060f26: 682b         	ldr	r3, [r5]
 8060f28: 2b00         	cmp	r3, #0x0
 8060f2a: d0fb         	beq	0x8060f24 <_lseek_r+0x1c> @ imm = #-0xa
 8060f2c: 6023         	str	r3, [r4]
 8060f2e: bd38         	pop	{r3, r4, r5, pc}

08060f30 <$d>:
 8060f30: 00 00 00 00  	.word	0x00000000

08060f34 <_read_r>:
 8060f34: b538         	push	{r3, r4, r5, lr}
 8060f36: 460c         	mov	r4, r1
 8060f38: 4684         	mov	r12, r0
 8060f3a: 4611         	mov	r1, r2
 8060f3c: 4d07         	ldr	r5, [pc, #0x1c]         @ 0x8060f5c <_read_r+0x28>
 8060f3e: 461a         	mov	r2, r3
 8060f40: 2300         	movs	r3, #0x0
 8060f42: 4620         	mov	r0, r4
 8060f44: 4664         	mov	r4, r12
 8060f46: 602b         	str	r3, [r5]
 8060f48: f7ff fffe    	bl	0x8060f48 <_read_r+0x14> @ imm = #-0x4
 8060f4c: 1c43         	adds	r3, r0, #0x1
 8060f4e: d000         	beq	0x8060f52 <_read_r+0x1e> @ imm = #0x0
 8060f50: bd38         	pop	{r3, r4, r5, pc}
 8060f52: 682b         	ldr	r3, [r5]
 8060f54: 2b00         	cmp	r3, #0x0
 8060f56: d0fb         	beq	0x8060f50 <_read_r+0x1c> @ imm = #-0xa
 8060f58: 6023         	str	r3, [r4]
 8060f5a: bd38         	pop	{r3, r4, r5, pc}

08060f5c <$d>:
 8060f5c: 00 00 00 00  	.word	0x00000000

08060f60 <_close>:
 8060f60: 4b02         	ldr	r3, [pc, #0x8]          @ 0x8060f6c <_close+0xc>
 8060f62: 2258         	movs	r2, #0x58
 8060f64: f04f 30ff    	mov.w	r0, #0xffffffff
 8060f68: 601a         	str	r2, [r3]
 8060f6a: 4770         	bx	lr

08060f6c <$d>:
 8060f6c: 00 00 00 00  	.word	0x00000000

08060f70 <_fstat>:
 8060f70: 4b02         	ldr	r3, [pc, #0x8]          @ 0x8060f7c <_fstat+0xc>
 8060f72: 2258         	movs	r2, #0x58
 8060f74: f04f 30ff    	mov.w	r0, #0xffffffff
 8060f78: 601a         	str	r2, [r3]
 8060f7a: 4770         	bx	lr

08060f7c <$d>:
 8060f7c: 00 00 00 00  	.word	0x00000000

08060f80 <_getpid>:
 8060f80: 4b02         	ldr	r3, [pc, #0x8]          @ 0x8060f8c <_getpid+0xc>
 8060f82: 2258         	movs	r2, #0x58
 8060f84: f04f 30ff    	mov.w	r0, #0xffffffff
 8060f88: 601a         	str	r2, [r3]
 8060f8a: 4770         	bx	lr

08060f8c <$d>:
 8060f8c: 00 00 00 00  	.word	0x00000000

08060f90 <_isatty>:
 8060f90: 4b02         	ldr	r3, [pc, #0x8]          @ 0x8060f9c <_isatty+0xc>
 8060f92: 2258         	movs	r2, #0x58
 8060f94: 2000         	movs	r0, #0x0
 8060f96: 601a         	str	r2, [r3]
 8060f98: 4770         	bx	lr
 8060f9a: bf00         	nop

08060f9c <$d>:
 8060f9c: 00 00 00 00  	.word	0x00000000

08060fa0 <_kill>:
 8060fa0: 4b02         	ldr	r3, [pc, #0x8]          @ 0x8060fac <_kill+0xc>
 8060fa2: 2258         	movs	r2, #0x58
 8060fa4: f04f 30ff    	mov.w	r0, #0xffffffff
 8060fa8: 601a         	str	r2, [r3]
 8060faa: 4770         	bx	lr

08060fac <$d>:
 8060fac: 00 00 00 00  	.word	0x00000000

08060fb0 <_lseek>:
 8060fb0: 4b02         	ldr	r3, [pc, #0x8]          @ 0x8060fbc <_lseek+0xc>
 8060fb2: 2258         	movs	r2, #0x58
 8060fb4: f04f 30ff    	mov.w	r0, #0xffffffff
 8060fb8: 601a         	str	r2, [r3]
 8060fba: 4770         	bx	lr

08060fbc <$d>:
 8060fbc: 00 00 00 00  	.word	0x00000000

08060fc0 <_read>:
 8060fc0: 4b02         	ldr	r3, [pc, #0x8]          @ 0x8060fcc <_read+0xc>
 8060fc2: 2258         	movs	r2, #0x58
 8060fc4: f04f 30ff    	mov.w	r0, #0xffffffff
 8060fc8: 601a         	str	r2, [r3]
 8060fca: 4770         	bx	lr

08060fcc <$d>:
 8060fcc: 00 00 00 00  	.word	0x00000000

08060fd0 <_sbrk>:
 8060fd0: 4a05         	ldr	r2, [pc, #0x14]         @ 0x8060fe8 <_sbrk+0x18>
 8060fd2: 4603         	mov	r3, r0
 8060fd4: 6810         	ldr	r0, [r2]
 8060fd6: b110         	cbz	r0, 0x8060fde <_sbrk+0xe> @ imm = #0x4
 8060fd8: 4403         	add	r3, r0
 8060fda: 6013         	str	r3, [r2]
 8060fdc: 4770         	bx	lr
 8060fde: 4803         	ldr	r0, [pc, #0xc]          @ 0x8060fec <_sbrk+0x1c>
 8060fe0: 4403         	add	r3, r0
 8060fe2: 6013         	str	r3, [r2]
 8060fe4: 4770         	bx	lr
 8060fe6: bf00         	nop

08060fe8 <$d>:
 8060fe8: 48 32 00 00  	.word	0x00003248
 8060fec: 00 00 00 00  	.word	0x00000000

08060ff0 <_write>:
 8060ff0: 4b02         	ldr	r3, [pc, #0x8]          @ 0x8060ffc <_write+0xc>
 8060ff2: 2258         	movs	r2, #0x58
 8060ff4: f04f 30ff    	mov.w	r0, #0xffffffff
 8060ff8: 601a         	str	r2, [r3]
 8060ffa: 4770         	bx	lr

08060ffc <$d>:
 8060ffc: 00 00 00 00  	.word	0x00000000

08061000 <_exit>:
 8061000: e7fe         	b	0x8061000 <_exit>       @ imm = #-0x4
 8061002: bf00         	nop

08061004 <__aeabi_uldivmod>:
 8061004: b953         	cbnz	r3, 0x806101c <__aeabi_uldivmod+0x18> @ imm = #0x14
 8061006: b94a         	cbnz	r2, 0x806101c <__aeabi_uldivmod+0x18> @ imm = #0x12
 8061008: 2900         	cmp	r1, #0x0
 806100a: bf08         	it	eq
 806100c: 2800         	cmpeq	r0, #0x0
 806100e: bf1c         	itt	ne
 8061010: f04f 31ff    	movne.w	r1, #0xffffffff
 8061014: f04f 30ff    	movne.w	r0, #0xffffffff
 8061018: f7ff bffe    	b.w	0x8061018 <__aeabi_uldivmod+0x14> @ imm = #-0x4
 806101c: f1ad 0c08    	sub.w	r12, sp, #0x8
 8061020: e96d ce04    	strd	r12, lr, [sp, #-16]!
 8061024: f7ff fffe    	bl	0x8061024 <__aeabi_uldivmod+0x20> @ imm = #-0x4
 8061028: f8dd e004    	ldr.w	lr, [sp, #0x4]
 806102c: e9dd 2302    	ldrd	r2, r3, [sp, #8]
 8061030: b004         	add	sp, #0x10
 8061032: 4770         	bx	lr

08061034 <__udivmoddi4>:
 8061034: e92d 4ff0    	push.w	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 8061038: 9e09         	ldr	r6, [sp, #0x24]
 806103a: 460d         	mov	r5, r1
 806103c: 4604         	mov	r4, r0
 806103e: 460f         	mov	r7, r1
 8061040: 2b00         	cmp	r3, #0x0
 8061042: d147         	bne	0x80610d4 <__udivmoddi4+0xa0> @ imm = #0x8e
 8061044: 428a         	cmp	r2, r1
 8061046: 4694         	mov	r12, r2
 8061048: d95f         	bls	0x806110a <__udivmoddi4+0xd6> @ imm = #0xbe
 806104a: fab2 f382    	clz	r3, r2
 806104e: b143         	cbz	r3, 0x8061062 <__udivmoddi4+0x2e> @ imm = #0x10
 8061050: f1c3 0120    	rsb.w	r1, r3, #0x20
 8061054: 409f         	lsls	r7, r3
 8061056: fa02 fc03    	lsl.w	r12, r2, r3
 806105a: 409c         	lsls	r4, r3
 806105c: fa20 f101    	lsr.w	r1, r0, r1
 8061060: 430f         	orrs	r7, r1
 8061062: ea4f 451c    	lsr.w	r5, r12, #0x10
 8061066: fa1f fe8c    	uxth.w	lr, r12
 806106a: 0c22         	lsrs	r2, r4, #0x10
 806106c: fbb7 f1f5    	udiv	r1, r7, r5
 8061070: fb05 7711    	mls	r7, r5, r1, r7
 8061074: fb01 f00e    	mul	r0, r1, lr
 8061078: ea42 4207    	orr.w	r2, r2, r7, lsl #16
 806107c: 4290         	cmp	r0, r2
 806107e: d908         	bls	0x8061092 <__udivmoddi4+0x5e> @ imm = #0x10
 8061080: eb1c 0202    	adds.w	r2, r12, r2
 8061084: f101 37ff    	add.w	r7, r1, #0xffffffff
 8061088: d202         	bhs	0x8061090 <__udivmoddi4+0x5c> @ imm = #0x4
 806108a: 4290         	cmp	r0, r2
 806108c: f200 8134    	bhi.w	0x80612f8 <__udivmoddi4+0x2c4> @ imm = #0x268
 8061090: 4639         	mov	r1, r7
 8061092: 1a12         	subs	r2, r2, r0
 8061094: b2a4         	uxth	r4, r4
 8061096: fbb2 f0f5    	udiv	r0, r2, r5
 806109a: fb05 2210    	mls	r2, r5, r0, r2
 806109e: fb00 fe0e    	mul	lr, r0, lr
 80610a2: ea44 4402    	orr.w	r4, r4, r2, lsl #16
 80610a6: 45a6         	cmp	lr, r4
 80610a8: d908         	bls	0x80610bc <__udivmoddi4+0x88> @ imm = #0x10
 80610aa: eb1c 0404    	adds.w	r4, r12, r4
 80610ae: f100 32ff    	add.w	r2, r0, #0xffffffff
 80610b2: d202         	bhs	0x80610ba <__udivmoddi4+0x86> @ imm = #0x4
 80610b4: 45a6         	cmp	lr, r4
 80610b6: f200 8119    	bhi.w	0x80612ec <__udivmoddi4+0x2b8> @ imm = #0x232
 80610ba: 4610         	mov	r0, r2
 80610bc: ea40 4001    	orr.w	r0, r0, r1, lsl #16
 80610c0: eba4 040e    	sub.w	r4, r4, lr
 80610c4: 2100         	movs	r1, #0x0
 80610c6: b11e         	cbz	r6, 0x80610d0 <__udivmoddi4+0x9c> @ imm = #0x6
 80610c8: 40dc         	lsrs	r4, r3
 80610ca: 2300         	movs	r3, #0x0
 80610cc: e9c6 4300    	strd	r4, r3, [r6]
 80610d0: e8bd 8ff0    	pop.w	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
 80610d4: 428b         	cmp	r3, r1
 80610d6: d908         	bls	0x80610ea <__udivmoddi4+0xb6> @ imm = #0x10
 80610d8: 2e00         	cmp	r6, #0x0
 80610da: f000 80fb    	beq.w	0x80612d4 <__udivmoddi4+0x2a0> @ imm = #0x1f6
 80610de: 2100         	movs	r1, #0x0
 80610e0: e9c6 0500    	strd	r0, r5, [r6]
 80610e4: 4608         	mov	r0, r1
 80610e6: e8bd 8ff0    	pop.w	{r4, r5, r6, r7, r8, r9, r10, r11, pc}
 80610ea: fab3 f183    	clz	r1, r3
 80610ee: 2900         	cmp	r1, #0x0
 80610f0: d14b         	bne	0x806118a <__udivmoddi4+0x156> @ imm = #0x96
 80610f2: 42ab         	cmp	r3, r5
 80610f4: f0c0 80f1    	blo.w	0x80612da <__udivmoddi4+0x2a6> @ imm = #0x1e2
 80610f8: 4282         	cmp	r2, r0
 80610fa: f240 80ee    	bls.w	0x80612da <__udivmoddi4+0x2a6> @ imm = #0x1dc
 80610fe: 4608         	mov	r0, r1
 8061100: 2e00         	cmp	r6, #0x0
 8061102: d0e5         	beq	0x80610d0 <__udivmoddi4+0x9c> @ imm = #-0x36
 8061104: e9c6 4700    	strd	r4, r7, [r6]
 8061108: e7e2         	b	0x80610d0 <__udivmoddi4+0x9c> @ imm = #-0x3c
 806110a: b902         	cbnz	r2, 0x806110e <__udivmoddi4+0xda> @ imm = #0x0
 806110c: deff         	udf	#0xff
 806110e: fab2 f382    	clz	r3, r2
 8061112: 2b00         	cmp	r3, #0x0
 8061114: f040 809d    	bne.w	0x8061252 <__udivmoddi4+0x21e> @ imm = #0x13a
 8061118: 1a8d         	subs	r5, r1, r2
 806111a: ea4f 4e12    	lsr.w	lr, r2, #0x10
 806111e: b297         	uxth	r7, r2
 8061120: 2101         	movs	r1, #0x1
 8061122: fbb5 f2fe    	udiv	r2, r5, lr
 8061126: fb0e 5012    	mls	r0, lr, r2, r5
 806112a: 0c25         	lsrs	r5, r4, #0x10
 806112c: ea45 4500    	orr.w	r5, r5, r0, lsl #16
 8061130: fb07 f002    	mul	r0, r7, r2
 8061134: 42a8         	cmp	r0, r5
 8061136: d90f         	bls	0x8061158 <__udivmoddi4+0x124> @ imm = #0x1e
 8061138: eb1c 0505    	adds.w	r5, r12, r5
 806113c: f102 38ff    	add.w	r8, r2, #0xffffffff
 8061140: bf2c         	ite	hs
 8061142: f04f 0901    	movhs.w	r9, #0x1
 8061146: f04f 0900    	movlo.w	r9, #0x0
 806114a: 42a8         	cmp	r0, r5
 806114c: d903         	bls	0x8061156 <__udivmoddi4+0x122> @ imm = #0x6
 806114e: f1b9 0f00    	cmp.w	r9, #0x0
 8061152: f000 80ce    	beq.w	0x80612f2 <__udivmoddi4+0x2be> @ imm = #0x19c
 8061156: 4642         	mov	r2, r8
 8061158: 1a2d         	subs	r5, r5, r0
 806115a: b2a4         	uxth	r4, r4
 806115c: fbb5 f0fe    	udiv	r0, r5, lr
 8061160: fb0e 5510    	mls	r5, lr, r0, r5
 8061164: fb00 f707    	mul	r7, r0, r7
 8061168: ea44 4405    	orr.w	r4, r4, r5, lsl #16
 806116c: 42a7         	cmp	r7, r4
 806116e: d908         	bls	0x8061182 <__udivmoddi4+0x14e> @ imm = #0x10
 8061170: eb1c 0404    	adds.w	r4, r12, r4
 8061174: f100 35ff    	add.w	r5, r0, #0xffffffff
 8061178: d202         	bhs	0x8061180 <__udivmoddi4+0x14c> @ imm = #0x4
 806117a: 42a7         	cmp	r7, r4
 806117c: f200 80b3    	bhi.w	0x80612e6 <__udivmoddi4+0x2b2> @ imm = #0x166
 8061180: 4628         	mov	r0, r5
 8061182: 1be4         	subs	r4, r4, r7
 8061184: ea40 4002    	orr.w	r0, r0, r2, lsl #16
 8061188: e79d         	b	0x80610c6 <__udivmoddi4+0x92> @ imm = #-0xc6
 806118a: f1c1 0720    	rsb.w	r7, r1, #0x20
 806118e: 408b         	lsls	r3, r1
 8061190: fa05 f401    	lsl.w	r4, r5, r1
 8061194: fa22 fc07    	lsr.w	r12, r2, r7
 8061198: 40fd         	lsrs	r5, r7
 806119a: 408a         	lsls	r2, r1
 806119c: ea4c 0c03    	orr.w	r12, r12, r3
 80611a0: fa20 f307    	lsr.w	r3, r0, r7
 80611a4: ea4f 491c    	lsr.w	r9, r12, #0x10
 80611a8: 431c         	orrs	r4, r3
 80611aa: fa1f fe8c    	uxth.w	lr, r12
 80611ae: fa00 f301    	lsl.w	r3, r0, r1
 80611b2: 0c20         	lsrs	r0, r4, #0x10
 80611b4: fbb5 f8f9    	udiv	r8, r5, r9
 80611b8: fb09 5518    	mls	r5, r9, r8, r5
 80611bc: ea40 4505    	orr.w	r5, r0, r5, lsl #16
 80611c0: fb08 f00e    	mul	r0, r8, lr
 80611c4: 42a8         	cmp	r0, r5
 80611c6: d90f         	bls	0x80611e8 <__udivmoddi4+0x1b4> @ imm = #0x1e
 80611c8: eb1c 0505    	adds.w	r5, r12, r5
 80611cc: f108 3aff    	add.w	r10, r8, #0xffffffff
 80611d0: bf2c         	ite	hs
 80611d2: f04f 0b01    	movhs.w	r11, #0x1
 80611d6: f04f 0b00    	movlo.w	r11, #0x0
 80611da: 42a8         	cmp	r0, r5
 80611dc: d903         	bls	0x80611e6 <__udivmoddi4+0x1b2> @ imm = #0x6
 80611de: f1bb 0f00    	cmp.w	r11, #0x0
 80611e2: f000 808c    	beq.w	0x80612fe <__udivmoddi4+0x2ca> @ imm = #0x118
 80611e6: 46d0         	mov	r8, r10
 80611e8: 1a2d         	subs	r5, r5, r0
 80611ea: b2a4         	uxth	r4, r4
 80611ec: fbb5 f0f9    	udiv	r0, r5, r9
 80611f0: fb09 5510    	mls	r5, r9, r0, r5
 80611f4: fb00 fe0e    	mul	lr, r0, lr
 80611f8: ea44 4505    	orr.w	r5, r4, r5, lsl #16
 80611fc: 45ae         	cmp	lr, r5
 80611fe: d907         	bls	0x8061210 <__udivmoddi4+0x1dc> @ imm = #0xe
 8061200: eb1c 0505    	adds.w	r5, r12, r5
 8061204: f100 34ff    	add.w	r4, r0, #0xffffffff
 8061208: d201         	bhs	0x806120e <__udivmoddi4+0x1da> @ imm = #0x2
 806120a: 45ae         	cmp	lr, r5
 806120c: d87e         	bhi	0x806130c <__udivmoddi4+0x2d8> @ imm = #0xfc
 806120e: 4620         	mov	r0, r4
 8061210: ea40 4008    	orr.w	r0, r0, r8, lsl #16
 8061214: eba5 050e    	sub.w	r5, r5, lr
 8061218: fba0 9802    	umull	r9, r8, r0, r2
 806121c: 4545         	cmp	r5, r8
 806121e: 464c         	mov	r4, r9
 8061220: 46c6         	mov	lr, r8
 8061222: d302         	blo	0x806122a <__udivmoddi4+0x1f6> @ imm = #0x4
 8061224: d106         	bne	0x8061234 <__udivmoddi4+0x200> @ imm = #0xc
 8061226: 454b         	cmp	r3, r9
 8061228: d204         	bhs	0x8061234 <__udivmoddi4+0x200> @ imm = #0x8
 806122a: 3801         	subs	r0, #0x1
 806122c: ebb9 0402    	subs.w	r4, r9, r2
 8061230: eb68 0e0c    	sbc.w	lr, r8, r12
 8061234: 2e00         	cmp	r6, #0x0
 8061236: d06f         	beq	0x8061318 <__udivmoddi4+0x2e4> @ imm = #0xde
 8061238: 1b1a         	subs	r2, r3, r4
 806123a: eb65 050e    	sbc.w	r5, r5, lr
 806123e: fa22 f301    	lsr.w	r3, r2, r1
 8061242: fa05 f707    	lsl.w	r7, r5, r7
 8061246: 40cd         	lsrs	r5, r1
 8061248: 2100         	movs	r1, #0x0
 806124a: 431f         	orrs	r7, r3
 806124c: e9c6 7500    	strd	r7, r5, [r6]
 8061250: e73e         	b	0x80610d0 <__udivmoddi4+0x9c> @ imm = #-0x184
 8061252: fa02 fc03    	lsl.w	r12, r2, r3
 8061256: f1c3 0020    	rsb.w	r0, r3, #0x20
 806125a: fa01 f203    	lsl.w	r2, r1, r3
 806125e: ea4f 4e1c    	lsr.w	lr, r12, #0x10
 8061262: 40c1         	lsrs	r1, r0
 8061264: fa24 f500    	lsr.w	r5, r4, r0
 8061268: fa1f f78c    	uxth.w	r7, r12
 806126c: 409c         	lsls	r4, r3
 806126e: 4315         	orrs	r5, r2
 8061270: fbb1 f0fe    	udiv	r0, r1, lr
 8061274: 0c2a         	lsrs	r2, r5, #0x10
 8061276: fb0e 1110    	mls	r1, lr, r0, r1
 806127a: ea42 4201    	orr.w	r2, r2, r1, lsl #16
 806127e: fb00 f107    	mul	r1, r0, r7
 8061282: 4291         	cmp	r1, r2
 8061284: d90e         	bls	0x80612a4 <__udivmoddi4+0x270> @ imm = #0x1c
 8061286: eb1c 0202    	adds.w	r2, r12, r2
 806128a: f100 38ff    	add.w	r8, r0, #0xffffffff
 806128e: bf2c         	ite	hs
 8061290: f04f 0901    	movhs.w	r9, #0x1
 8061294: f04f 0900    	movlo.w	r9, #0x0
 8061298: 4291         	cmp	r1, r2
 806129a: d902         	bls	0x80612a2 <__udivmoddi4+0x26e> @ imm = #0x4
 806129c: f1b9 0f00    	cmp.w	r9, #0x0
 80612a0: d031         	beq	0x8061306 <__udivmoddi4+0x2d2> @ imm = #0x62
 80612a2: 4640         	mov	r0, r8
 80612a4: 1a52         	subs	r2, r2, r1
 80612a6: b2ad         	uxth	r5, r5
 80612a8: fbb2 f1fe    	udiv	r1, r2, lr
 80612ac: fb0e 2211    	mls	r2, lr, r1, r2
 80612b0: ea45 4502    	orr.w	r5, r5, r2, lsl #16
 80612b4: fb01 f207    	mul	r2, r1, r7
 80612b8: 42aa         	cmp	r2, r5
 80612ba: d907         	bls	0x80612cc <__udivmoddi4+0x298> @ imm = #0xe
 80612bc: eb1c 0505    	adds.w	r5, r12, r5
 80612c0: f101 38ff    	add.w	r8, r1, #0xffffffff
 80612c4: d201         	bhs	0x80612ca <__udivmoddi4+0x296> @ imm = #0x2
 80612c6: 42aa         	cmp	r2, r5
 80612c8: d823         	bhi	0x8061312 <__udivmoddi4+0x2de> @ imm = #0x46
 80612ca: 4641         	mov	r1, r8
 80612cc: 1aad         	subs	r5, r5, r2
 80612ce: ea41 4100    	orr.w	r1, r1, r0, lsl #16
 80612d2: e726         	b	0x8061122 <__udivmoddi4+0xee> @ imm = #-0x1b4
 80612d4: 4631         	mov	r1, r6
 80612d6: 4630         	mov	r0, r6
 80612d8: e6fa         	b	0x80610d0 <__udivmoddi4+0x9c> @ imm = #-0x20c
 80612da: 1a84         	subs	r4, r0, r2
 80612dc: eb65 0303    	sbc.w	r3, r5, r3
 80612e0: 2001         	movs	r0, #0x1
 80612e2: 461f         	mov	r7, r3
 80612e4: e70c         	b	0x8061100 <__udivmoddi4+0xcc> @ imm = #-0x1e8
 80612e6: 4464         	add	r4, r12
 80612e8: 3802         	subs	r0, #0x2
 80612ea: e74a         	b	0x8061182 <__udivmoddi4+0x14e> @ imm = #-0x16c
 80612ec: 4464         	add	r4, r12
 80612ee: 3802         	subs	r0, #0x2
 80612f0: e6e4         	b	0x80610bc <__udivmoddi4+0x88> @ imm = #-0x238
 80612f2: 3a02         	subs	r2, #0x2
 80612f4: 4465         	add	r5, r12
 80612f6: e72f         	b	0x8061158 <__udivmoddi4+0x124> @ imm = #-0x1a2
 80612f8: 3902         	subs	r1, #0x2
 80612fa: 4462         	add	r2, r12
 80612fc: e6c9         	b	0x8061092 <__udivmoddi4+0x5e> @ imm = #-0x26e
 80612fe: f1a8 0802    	sub.w	r8, r8, #0x2
 8061302: 4465         	add	r5, r12
 8061304: e770         	b	0x80611e8 <__udivmoddi4+0x1b4> @ imm = #-0x120
 8061306: 3802         	subs	r0, #0x2
 8061308: 4462         	add	r2, r12
 806130a: e7cb         	b	0x80612a4 <__udivmoddi4+0x270> @ imm = #-0x6a
 806130c: 3802         	subs	r0, #0x2
 806130e: 4465         	add	r5, r12
 8061310: e77e         	b	0x8061210 <__udivmoddi4+0x1dc> @ imm = #-0x104
 8061312: 3902         	subs	r1, #0x2
 8061314: 4465         	add	r5, r12
 8061316: e7d9         	b	0x80612cc <__udivmoddi4+0x298> @ imm = #-0x4e
 8061318: 4631         	mov	r1, r6
 806131a: e6d9         	b	0x80610d0 <__udivmoddi4+0x9c> @ imm = #-0x24e

0806131c <__aeabi_ldiv0>:
 806131c: 4770         	bx	lr
 806131e: bf00         	nop

08061320 <AHBPrescTable>:
 8061320: 00 00 00 00 00 00 00 00         ........
 8061328: 01 02 03 04 06 07 08 09         ........

08061330 <MSIRangeTable>:
 8061330: a0 86 01 00 40 0d 03 00         ....@...
 8061338: 80 1a 06 00 00 35 0c 00         .....5..
 8061340: 40 42 0f 00 80 84 1e 00         @B......
 8061348: 00 09 3d 00 00 12 7a 00         ..=...z.
 8061350: 00 24 f4 00 00 36 6e 01         .$...6n.
 8061358: 00 48 e8 01 00 6c dc 02         .H...l..
 8061360: 00 00 00 00 00 00 00 00         ........
 8061368: 00 00 00 00 00 00 00 00         ........

08061370 <.L.str>:
 8061370: 54 46 4d 5f 54 45 53 54         TFM_TEST
 8061378: 5f 52 45 50 4f 5f 50 41         _REPO_PA
 8061380: 54 48 2f 68 6f 6d 65 2f         TH/home/
 8061388: 7a 79 73 2f 72 65 70 6f         zys/repo
 8061390: 2f 65 6d 62 65 64 64 65         /embedde
 8061398: 64 2f 62 65 65 62 73 5f         d/beebs_
 80613a0: 32 2f 70 6c 61 74 66 6f         2/platfo
 80613a8: 72 6d 2f 65 78 74 2f 74         rm/ext/t
 80613b0: 61 72 67 65 74 2f 73 74         arget/st
 80613b8: 6d 2f 61 73 6c 72 5f 66         m/aslr_f
 80613c0: 72 65 65 72 74 6f 73 5f         reertos_
 80613c8: 6e 73 61 70 70 2f 6e 73         nsapp/ns
 80613d0: 61 70 70 2f 73 72 63 2f         app/src/
 80613d8: 6d 61 69 6e 5f 6e 73 2e         main_ns.
 80613e0: 63 00                           c.

080613e2 <.L__func__.testThread2>:
 80613e2: 74 65 73 74 54 68 72 65         testThre
 80613ea: 61 64 32 00                     ad2.

080613ee <.L.str.1>:
 80613ee: 76 65 72 69 66 79 5f 62         verify_b
 80613f6: 65 6e 63 68 6d 61 72 6b         enchmark
 80613fe: 28 72 65 73 75 6c 74 29         (result)
 8061406: 00 74 65 73 74 54 68 72         .testThr
 806140e: 65 61 64 00 00 00               ead...

08061414 <.L__const.verify_benchmark.expected>:
 8061414: 00 00 00 00 07 00 00 00         ........
 806141c: 26 00 00 00 17 00 00 00         &.......
 8061424: 0e 00 00 00 24 00 00 00         ....$...
 806142c: 03 00 00 00 1d 00 00 00         ........
 8061434: 07 00 00 00 0e 00 00 00         ........
 806143c: 1c 00 00 00 00 00 00 00         ........
 8061444: 1f 00 00 00 10 00 00 00         ........
 806144c: 07 00 00 00 22 00 00 00         ...."...
 8061454: 1f 00 00 00 1c 00 00 00         ........
 806145c: 01 00 00 00 27 00 00 00         ....'...
 8061464: 27 00 00 00 19 00 00 00         '.......
 806146c: 00 00 00 00 20 00 00 00         .... ...
 8061474: 0e 00 00 00 03 00 00 00         ........
 806147c: 20 00 00 00 09 00 00 00          .......
 8061484: 1a 00 00 00 2b 00 00 00         ....+...
 806148c: 0c 00 00 00 0e 00 00 00         ........
 8061494: 28 00 00 00 00 00 00 00         (.......
 806149c: 15 00 00 00 2b 00 00 00         ....+...
 80614a4: 0f 00 00 00 0c 00 00 00         ........
 80614ac: 0f 00 00 00 1a 00 00 00         ........
 80614b4: 28 00 00 00 24 00 00 00         (...$...
 80614bc: 30 00 00 00 1c 00 00 00         0.......
 80614c4: 00 00 00 00 1b 00 00 00         ........
 80614cc: 2b 00 00 00 21 00 00 00         +...!...
 80614d4: 0c 00 00 00 27 00 00 00         ....'...
 80614dc: 24 00 00 00 16 00 00 00         $.......
 80614e4: 15 00 00 00 1d 00 00 00         ........
 80614ec: 1d 00 00 00 00 00 00 00         ........
 80614f4: 1d 00 00 00 06 00 00 00         ........
 80614fc: 17 00 00 00 28 00 00 00         ....(...
 8061504: 08 00 00 00 04 00 00 00         ........
 806150c: 23 00 00 00 14 00 00 00         #.......
 8061514: 0b 00 00 00 21 00 00 00         ....!...
 806151c: 00 00 00 00 1a 00 00 00         ........
 8061524: 05 00 00 00 0b 00 00 00         ........
 806152c: 1e 00 00 00 10 00 00 00         ........
 8061534: 2f 00 00 00 20 00 00 00         /... ...
 806153c: 17 00 00 00 23 00 00 00         ....#...
 8061544: 17 00 00 00 00 00 00 00         ........
 806154c: 11 00 00 00 22 00 00 00         ...."...
 8061554: 1c 00 00 00 18 00 00 00         ........
 806155c: 37 00 00 00 10 00 00 00         7.......
 8061564: 08 00 00 00 23 00 00 00         ....#...
 806156c: 1f 00 00 00 1c 00 00 00         ........
 8061574: 00 00 00 00 26 00 00 00         ....&...
 806157c: 17 00 00 00 13 00 00 00         ........
 8061584: 29 00 00 00 10 00 00 00         ).......
 806158c: 08 00 00 00 23 00 00 00         ....#...
 8061594: 0f 00 00 00 1c 00 00 00         ........
 806159c: 00 00 00 00 00 00 00 00         ........

080615a4 <uxTopUsedPriority>:
 80615a4: 0f 00 00 00                     ....

080615a8 <.L.str>:
 80615a8: 49 44 4c 45 00                  IDLE.

080615ad <.L.str>:
 80615ad: 54 6d 72 20 53 76 63 00         Tmr Svc.

080615b5 <.L.str.1>:
 80615b5: 54 6d 72 51 00 00 00            TmrQ...

080615bc <$d>:
 80615bc: 00 00 00 00  	.word	0x00000000
 80615c0: 2c 20 66 75  	.word	0x7566202c
 80615c4: 6e 63 74 69  	.word	0x6974636e
 80615c8: 6f 6e 3a 20  	.word	0x203a6e6f
 80615cc: 00 00 00 00  	.word	0x00000000
 80615d0: 61 73 73 65  	.word	0x65737361
 80615d4: 72 74 69 6f  	.word	0x6f697472
 80615d8: 6e 20 22 25  	.word	0x2522206e
 80615dc: 73 22 20 66  	.word	0x66202273
 80615e0: 61 69 6c 65  	.word	0x656c6961
 80615e4: 64 3a 20 66  	.word	0x66203a64
 80615e8: 69 6c 65 20  	.word	0x20656c69
 80615ec: 22 25 73 22  	.word	0x22732522
 80615f0: 2c 20 6c 69  	.word	0x696c202c
 80615f4: 6e 65 20 25  	.word	0x2520656e
 80615f8: 64 25 73 25  	.word	0x25732564
 80615fc: 73 0a 00 00  	.word	0x00000a73

08061600 <$d>:
 8061600: 60 24 00 00  	.word	0x00002460

08061604 <$d>:
 8061604: 30 31 32 33  	.word	0x33323130
 8061608: 34 35 36 37  	.word	0x37363534
 806160c: 38 39 41 42  	.word	0x42413938
 8061610: 43 44 45 46  	.word	0x46454443
 8061614: 00 00 00 00  	.word	0x00000000
 8061618: 30 31 32 33  	.word	0x33323130
 806161c: 34 35 36 37  	.word	0x37363534
 8061620: 38 39 61 62  	.word	0x62613938
 8061624: 63 64 65 66  	.word	0x66656463
 8061628: 00 00 00 00  	.word	0x00000000
 806162c: 28 6e 75 6c  	.word	0x6c756e28
 8061630: 6c 29 00 00  	.word	0x0000296c

08061634 <$d>:
 8061634: 20 20 20 20  	.word	0x20202020
 8061638: 20 20 20 20  	.word	0x20202020
 806163c: 20 20 20 20  	.word	0x20202020
 8061640: 20 20 20 20  	.word	0x20202020

08061644 <zeroes.0>:
 8061644: 30 30 30 30 30 30 30 30         00000000
 806164c: 30 30 30 30 30 30 30 30         00000000

08061654 <$d>:
 8061654: 43 00 00 00  	.word	0x00000043
 8061658: 50 4f 53 49  	.word	0x49534f50
 806165c: 58 00 00 00  	.word	0x00000058
 8061660: 00 00 00 00  	.word	0x00000000
 8061664: 2e 00 00 00  	.word	0x0000002e

08061668 <$d>:
 8061668: 00 20 20 20  	.word	0x20202000
 806166c: 20 20 20 20  	.word	0x20202020
 8061670: 20 20 28 28  	.word	0x28282020
 8061674: 28 28 28 20  	.word	0x20282828
 8061678: 20 20 20 20  	.word	0x20202020
 806167c: 20 20 20 20  	.word	0x20202020
 8061680: 20 20 20 20  	.word	0x20202020
 8061684: 20 20 20 20  	.word	0x20202020
 8061688: 20 88 10 10  	.word	0x10108820
 806168c: 10 10 10 10  	.word	0x10101010
 8061690: 10 10 10 10  	.word	0x10101010
 8061694: 10 10 10 10  	.word	0x10101010
 8061698: 10 04 04 04  	.word	0x04040410
 806169c: 04 04 04 04  	.word	0x04040404
 80616a0: 04 04 04 10  	.word	0x10040404
 80616a4: 10 10 10 10  	.word	0x10101010
 80616a8: 10 10 41 41  	.word	0x41411010
 80616ac: 41 41 41 41  	.word	0x41414141
 80616b0: 01 01 01 01  	.word	0x01010101
 80616b4: 01 01 01 01  	.word	0x01010101
 80616b8: 01 01 01 01  	.word	0x01010101
 80616bc: 01 01 01 01  	.word	0x01010101
 80616c0: 01 01 01 01  	.word	0x01010101
 80616c4: 10 10 10 10  	.word	0x10101010
 80616c8: 10 10 42 42  	.word	0x42421010
 80616cc: 42 42 42 42  	.word	0x42424242
 80616d0: 02 02 02 02  	.word	0x02020202
 80616d4: 02 02 02 02  	.word	0x02020202
 80616d8: 02 02 02 02  	.word	0x02020202
 80616dc: 02 02 02 02  	.word	0x02020202
 80616e0: 02 02 02 02  	.word	0x02020202
 80616e4: 10 10 10 10  	.word	0x10101010
 80616e8: 20 00 00 00  	.word	0x00000020
 80616ec: 00 00 00 00  	.word	0x00000000
 80616f0: 00 00 00 00  	.word	0x00000000
 80616f4: 00 00 00 00  	.word	0x00000000
 80616f8: 00 00 00 00  	.word	0x00000000
 80616fc: 00 00 00 00  	.word	0x00000000
 8061700: 00 00 00 00  	.word	0x00000000
 8061704: 00 00 00 00  	.word	0x00000000
 8061708: 00 00 00 00  	.word	0x00000000
 806170c: 00 00 00 00  	.word	0x00000000
 8061710: 00 00 00 00  	.word	0x00000000
 8061714: 00 00 00 00  	.word	0x00000000
 8061718: 00 00 00 00  	.word	0x00000000
 806171c: 00 00 00 00  	.word	0x00000000
 8061720: 00 00 00 00  	.word	0x00000000
 8061724: 00 00 00 00  	.word	0x00000000
 8061728: 00 00 00 00  	.word	0x00000000
 806172c: 00 00 00 00  	.word	0x00000000
 8061730: 00 00 00 00  	.word	0x00000000
 8061734: 00 00 00 00  	.word	0x00000000
 8061738: 00 00 00 00  	.word	0x00000000
 806173c: 00 00 00 00  	.word	0x00000000
 8061740: 00 00 00 00  	.word	0x00000000
 8061744: 00 00 00 00  	.word	0x00000000
 8061748: 00 00 00 00  	.word	0x00000000
 806174c: 00 00 00 00  	.word	0x00000000
 8061750: 00 00 00 00  	.word	0x00000000
 8061754: 00 00 00 00  	.word	0x00000000
 8061758: 00 00 00 00  	.word	0x00000000
 806175c: 00 00 00 00  	.word	0x00000000
 8061760: 00 00 00 00  	.word	0x00000000
 8061764: 00 00 00 00  	.word	0x00000000
 8061768: 00 00 00 00  	.word	0x00000000
 806176c: 00 00 00 00  	.word	0x00000000
 8061770: 00 00 00 00  	.word	0x00000000
 8061774: 00 00 00 00  	.word	0x00000000
 8061778: 00 00 00 00  	.word	0x00000000
 806177c: 00 00        	.short	0x0000
 806177e: 00           	.byte	0x00

0806177f <__unprivileged_flash_end__>:
 806177f: 00           	.byte	0x00
